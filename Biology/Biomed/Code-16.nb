(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    581096,      11455]
NotebookOptionsPosition[    568236,      11281]
NotebookOutlinePosition[    568655,      11298]
CellTagsIndexPosition[    568612,      11295]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Utility", "Section",
 CellChangeTimes->{{3.945269141310281*^9, 
  3.945269143024324*^9}},ExpressionUUID->"d4dfd321-d1da-46f2-945d-\
01c197224088"],

Cell[BoxData[
 RowBox[{
  RowBox[{"colorrules", " ", "=", "  ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0", "\[Rule]", 
      TemplateBox[<|"color" -> GrayLevel[1]|>,
       "GrayLevelColorSwatchTemplate"]}], ",", 
     RowBox[{"1", "\[Rule]", 
      TemplateBox[<|"color" -> Hue[0.06, 1, 1]|>,
       "HueColorSwatchTemplate"]}], ",", 
     RowBox[{"2", "\[Rule]", 
      TemplateBox[<|"color" -> Hue[0.73, 1, 1]|>,
       "HueColorSwatchTemplate"]}], ",", 
     RowBox[{"3", "\[Rule]", 
      TemplateBox[<|"color" -> Hue[0.14, 0.81, 0.99]|>,
       "HueColorSwatchTemplate"]}], ",", 
     RowBox[{"4", "->", 
      TemplateBox[<|"color" -> RGBColor[0, 0.56, 0]|>,
       "RGBColorSwatchTemplate"]}], ",", 
     RowBox[{"5", "->", 
      TemplateBox[<|"color" -> RGBColor[0, 0.56, 1]|>,
       "RGBColorSwatchTemplate"]}]}], "}"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.945383690085331*^9, 3.945383708057497*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"1c5640c8-bf97-408b-93c0-7bdc8d41518e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getca", "[", 
   RowBox[{"ru_", ",", " ", 
    RowBox[{"steps_", ":", "200"}], ",", " ", 
    RowBox[{"width_", ":", "All"}], ",", " ", 
    RowBox[{"init_", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", " ", "0"}], "}"}]}]}], "]"}], ":=", " ", 
  
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"ru", ",", " ", "init", ",", " ", 
    RowBox[{"{", 
     RowBox[{"steps", ",", " ", "width"}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9438057708089046`*^9, 3.9438058553028383`*^9}, {
  3.943805908764364*^9, 3.943805909425609*^9}, {3.943811606071961*^9, 
  3.94381164307044*^9}, {3.94443216895649*^9, 3.944432169162304*^9}, {
  3.945269152995685*^9, 3.945269158924448*^9}, {3.945269677382701*^9, 
  3.945269722891138*^9}, {3.945270171684901*^9, 3.945270173269108*^9}, {
  3.945270644654645*^9, 3.94527064593688*^9}, {3.945299575005775*^9, 
  3.945299576746839*^9}, {3.945464325870778*^9, 3.94546432662716*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"66586bd6-1558-4922-8781-dbbf32d27029"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getca", "[", 
   RowBox[{"ru_", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"steps_", ":", "200"}], ",", " ", 
      RowBox[{"width_", ":", "All"}]}], "}"}], ",", " ", 
    RowBox[{"init_", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", " ", "0"}], "}"}]}]}], "]"}], ":=", " ", 
  
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"ru", ",", " ", "init", ",", " ", 
    RowBox[{"{", 
     RowBox[{"steps", ",", " ", "width"}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945647264805366*^9, 3.9456473230092*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"f2ed4b2f-28b1-4d2d-ad0d-5329f8a7f701"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TestLifetime", "[", 
   RowBox[{"rule_", ",", " ", 
    RowBox[{"steps_Integer", ":", "200"}], ",", " ", 
    RowBox[{"init_List", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", " ", "0"}], "}"}]}]}], "]"}], ":=", 
  RowBox[{"With", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"array", "=", 
      RowBox[{"getca", "[", 
       RowBox[{"rule", ",", " ", "steps", ",", " ", "All", ",", " ", "init"}],
        "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", "==", "0"}], ",", 
        RowBox[{"-", "Infinity"}], ",", 
        RowBox[{"steps", "-", "#", "+", "1"}]}], "]"}], "&"}], "[", 
     "\[IndentingNewLine]", 
     RowBox[{"LengthWhile", "[", 
      RowBox[{
       RowBox[{"Reverse", "[", "array", "]"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"Total", "[", "#", "]"}], "==", "0"}], "&"}]}], "]"}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.9452694920503683`*^9, 3.945269492465472*^9}, {
   3.945269541492546*^9, 3.945269612518456*^9}, 3.94526965986334*^9, {
   3.945269780474712*^9, 3.945269829949349*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"bb525146-aa8f-419c-b339-76ae1d0a2ebf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TestCALifeTime", "[", 
   RowBox[{"{", 
    RowBox[{"ca_List", ",", " ", "perturbation_Association"}], "}"}], "]"}], ":=",
   " ", 
  RowBox[{"TestCALifeTime", "[", "ca", "]"}]}]], "Code",
 CellChangeTimes->{{3.943106462055011*^9, 3.943106524282854*^9}, {
   3.943106554858834*^9, 3.943106617417737*^9}, {3.943457965776842*^9, 
   3.943457976864903*^9}, {3.943458102665765*^9, 3.943458104020798*^9}, {
   3.94449110560067*^9, 3.944491144856763*^9}, {3.945289812844039*^9, 
   3.9452898494002037`*^9}, {3.945294974293565*^9, 3.945294974670261*^9}, {
   3.945295083814666*^9, 3.9452950870331173`*^9}, 3.9454643533939047`*^9, {
   3.946494603618849*^9, 3.946494605201844*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"7824730d-64c5-443c-ad56-0f01495e77b5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TestCALifeTime", "[", "ca_List", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"#", "==", "0"}], ",", 
      RowBox[{"-", "Infinity"}], ",", 
      RowBox[{
       RowBox[{"Length", "[", "ca", "]"}], "-", "#"}]}], "]"}], "&"}], "[", 
   RowBox[{"LengthWhile", "[", 
    RowBox[{
     RowBox[{"Reverse", "[", "ca", "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Total", "[", "#", "]"}], "==", "0"}], "&"}]}], "]"}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.943106462055011*^9, 3.943106524282854*^9}, {
  3.943106554858834*^9, 3.943106617417737*^9}, {3.943457965776842*^9, 
  3.943457976864903*^9}, {3.943458102665765*^9, 3.943458104020798*^9}, {
  3.94449110560067*^9, 3.944491144856763*^9}, {3.945289812844039*^9, 
  3.945289814678841*^9}, {3.94552603587239*^9, 3.945526036468112*^9}, {
  3.945544826684551*^9, 3.945544827400023*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"efc2a93a-0cc6-424f-badf-dd4c458a951e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allperts", "[", 
   RowBox[{"ru_", ",", " ", "init_", ",", " ", "txspec_", ",", " ", 
    RowBox[{"pertspec_", ":", 
     RowBox[{"<|", "|>"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ca", " ", "=", " ", 
       RowBox[{"PerturbedCellularAutomaton", "[", 
        RowBox[{
        "ru", ",", " ", "init", ",", " ", "txspec", ",", " ", "pertspec"}], 
        "]"}]}], ",", "vals"}], "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "j"}], "}"}], ",", " ", 
         RowBox[{
          RowBox[{"vals", " ", "=", " ", 
           RowBox[{"Delete", "[", 
            RowBox[{
             RowBox[{"Range", "[", 
              RowBox[{"0", ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"interpretrule", "[", "ru", "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], " ", "-", " ", "1"}]}], 
              "]"}], ",", " ", 
             RowBox[{
              RowBox[{"ca", "[", 
               RowBox[{"[", 
                RowBox[{"i", ",", " ", "j"}], "]"}], "]"}], " ", "+", " ", 
              "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"<|", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"i", " ", "-", " ", "1"}], ",", " ", "j"}], "}"}], "->",
               "#"}], "|>"}], "&"}], "/@", " ", "vals"}]}]}], "]"}], "@@@", 
       " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"bodyidxs", "[", "ca", "]"}], ",", " ", "1"}], "]"}]}], ",", 
      " ", "1"}], "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945700321129901*^9, 3.9457004217284307`*^9}, {
  3.945700466326242*^9, 3.945700661374217*^9}, {3.945700776319529*^9, 
  3.945700818563569*^9}, {3.945700882391898*^9, 3.945700988042378*^9}, {
  3.946391998319795*^9, 3.9463921082887783`*^9}, {3.946400607856407*^9, 
  3.946400614138886*^9}, {3.946568477136295*^9, 3.946568488206184*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"7d0fbefc-1a71-4802-a737-9e7311b37685"],

Cell[BoxData[
 RowBox[{
  RowBox[{"allperts", "[", 
   RowBox[{"ca_", ",", " ", 
    RowBox[{"k_", ":", "4"}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "j"}], "}"}], ",", " ", "\[IndentingNewLine]", 
       
       RowBox[{
        RowBox[{
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"i", " ", "-", " ", "1"}], ",", " ", "j"}], "}"}], "->", 
           "#"}], "|>"}], "&"}], "/@", " ", 
        RowBox[{"Delete", "[", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{"0", ",", " ", 
            RowBox[{"k", " ", "-", " ", "1"}]}], "]"}], ",", " ", 
          RowBox[{
           RowBox[{"ca", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", " ", "j"}], "]"}], "]"}], " ", "+", " ", 
           "1"}]}], "]"}]}]}], "]"}], "\n", "@@@", " ", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"bodyidxs", "[", "ca", "]"}], ",", " ", "1"}], "]"}]}], ",", 
    " ", "1"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945700321129901*^9, 3.9457004217284307`*^9}, {
  3.945700466326242*^9, 3.945700661374217*^9}, {3.945700776319529*^9, 
  3.945700818563569*^9}, {3.945700882391898*^9, 3.945700988042378*^9}, {
  3.945742702509109*^9, 3.945742781167693*^9}, {3.945742834603734*^9, 
  3.945742883711704*^9}, {3.94640059853621*^9, 3.946400598922114*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"9985e728-9e9f-4f3a-aaa3-0a9164867c31"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bodyidxs", "[", "ca_List", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ranges", " ", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{"nonzeroRange", "/@", " ", "ca"}], ",", " ", 
         RowBox[{"{", "}"}]}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "#"}], "}"}], "&"}], "/@", " ", 
        RowBox[{"Range", "@@", 
         RowBox[{"ranges", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}]}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", 
         RowBox[{"Length", "[", "ranges", "]"}]}], "}"}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}], 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJzsvQeUFVXW9/2u7/vWO44zI6kBZ9RRmpxT55wz3U3OOUjOGURUBBVEEZEo
OStIDpJzziDRnMYZR52Z55k8s7/zP1W77qm6dW/fbpqmleNaP0+sk27d2//a
7DqnSo8hLfr8P//n//yfEQ+J/7XoPiZx+PDu41qWFYnWg0f0e3pw716Zg0f2
frr38Ige/6/IfELUvSr4/xB/4gl6ffY8+v0P/6AtO/ZRfEIitWrTnt55bwfd
+ez3dPvTbygiMoqSklNpyYp1NOO1N6lmrVqE63bvP0bffP936tCpi0znt2gl
64yf+Bw9/vjjNGf+YvryD/9D7219n+LiE6hFyza09t2t9MHtz+nrb/+XPvvd
n+hzwRe//zN9/s2faejw0fK6V159Q1y7hGLj4iksPII+/fo7uvXJ7yg5JY0i
I6Np3qKlYhyzqUbNmtR/wGBR/oNo6wd5LZjx+hx6462FMl69Rg3q3vNpWr76
HTG+1jLv1sdfi/7+RJ98+R316duf+g0YRJ989T0dOXmR4uPjqVPnrrR4+Roa
M/4Zio6OpiUibvTxJ5ozbxElJCbSp6L+9vcPUUxMDG3duZ86delKKSmp1LNX
H9q8fY9sG9cgzMrKpk5ijXbtOUy79x6hVq3bUF5+viz75CvU+172b8R/oI+/
/KO8ZsCgobIO5vZ0vwE0aPAwOd7U1DSZ3rb7AH0m6mMsaAPju3rzMznmNe9s
km2hbMz4iXJer73xFr0pxh8XF0f9Bw726n/CxMmUm5cv28F1J85elXW79ehF
S1esleuEtg8cPiXLcY2zf7T3sWj32OlLss+Jk56ng8fO0voNW+W6jZvwrCzH
+mOOI0ePt81/9NgJck13irWS7Znzn/DMc3JsWBue15Ubn8g+XpkxS7aB6xYt
WSnb5/VHPVwv1/WLP8p6KF+x5l05l3mLltHhE+dp9pwFMr32nc1Wv2hv/tvL
rOuRj3uieYuWXvPH2CZMes6aP+4HfF5q/6vWbpRtXv/wC+v+c/v80UdGRqZt
/kdOXpDXvjz9dVkHY8Z458xdJPvOy29OL7z4svy+8vwxhoHiHlLnv3r9Jnkd
vk+oM2LUWNnuK6/Okt9XfCZpaemyrto/z5/Xf8nytbKdF6dNl9+VNm3bys8C
vxnO9V+x+l3Zx8lzV6315/mPN+85df7Xbn0m77vp4neAP4e3l660+j9+5opy
X64T9+VAWefAkdOyjY++ML4/HcV3bve+o5LWbdpSs9w8r/7R3p1Pf097D52g
nJxm1Ofp/tb9P3zkGNnP3AVL6C2xNvh+d+7SzfpeY/4LFq+w3f9jxWeX37yF
LL/54VfycwTz315O016ZKdvDdTv2HJJ18NuCsU+Z+oq5ju3kOn74+R+81v/c
5VvyWnwXC/r+FXT/+7v/eP7+Pn/dv+5f96/7/7H3b1xnlHMb0KJoFyH6QF3O
R/uIf2aO5wvUlWXQsX8Rfx+6C73ZR+ppAC09eOhIqZO/+f5vQpdtllr54rUP
Zfnvvvub/Bti6OmjMg093aBBQ/G3/HcyDQYOGS5++2PpK6GnvxLauUWrtjRw
8HDZp6GfPWPEmG5/8o2hwecttuYFzdCzd186df4ard+4XZYfPXXJnNMP8m8U
8i4LXYW/oYiPnTDZ+ns3SIwBevrjL76V67LnwHFZZ7/Qg/hcsL7QePh7ifag
/ZKTU+jGh1/K+lh36AVod0NfCF3bdwD17T9QjhFaDH8L8Tdy8NARQq/OpZat
Wsu8XUI3G/fJd+Jv9Un5d5BBfYxBfp7WvfCDmMO3Mj1u4rOy3vHTl2W/aAN6
AO3ib/yr4nkB/aDO3oPHZTuYP+aEZxXUM/T093T9zpcyvXjZauN+Fe2vXv+e
vPby9U9s/UPrsmbF/Cc9N4XS0zMMjWSOI1dokrHjJxn3pXl/qv0b96Wx/tCi
6Af9I8zNy6Ortz417/k/0phxE+VaQO+g/xNCb+HzQN2VazbI9ed+x0981tRd
35n9fE+jxoyXWgUaEv3jureXrrL65/Xn754n/p2c00Chd3l8YMiwEcZ9IThz
6aYse3fTDqNP8/N/9fXZcszO+UOr4XPj+eOZ57kp02z9v3/gmPE8InSfXGMf
nz90t9TKQsN99Pm3dOOjr6hr955yjKPHTZDXbtmxR9bB/GeK+2G8ec/gOYvn
jzFMfmGqbf7vi+8A6uH+u3bbePaCVuT+8Z3D/X3q/Ae29ef58/qfvvAB7cNz
lTl//BZYz1rK+rO2HTZitG39ef78nKTO3/pcxW/Cx+bnulD85nD/k557wfrc
jT6+letv3JfG+u85eMK67/g7inV39v/m3IXW59+2XQe6+fFX1v2/T3xvT56/
as0f32+0g/Kz5v2xccsu2/0/8/U3pR5G3tp3t8g6R09dsNb/9dlzZd7WXftl
ndNinQ8cPWPNf89B/nxOeq3/yNHj5LyhtQP5/vm7//3dfzx/f5+/7l/3r/vX
/f+U+5eY7bAG5zalBmetjf7MdqCLYZNmPd2ydTuhK0ZJLQ1d/MLU6dI+jfjX
f/yr1Mbnr9627NOGnu5Mnbv2EGWGdoZNGvY/1Lnz2TfSBg09PWjICKmfpYb+
vaHrMQbMH7ZeaF3YnlD+sWk7Mur8IHTtDGrSpIn8WyLnLa47ffGGvAb2b6QR
X7B4pVxnXDte/K3OyMqR1xgayai/S+g3rAlsfvjbdfDYOblu7Tt0lDZh9IfP
x+jHWCtOxyckiL/Bi2R/CxYvl9ePHfeMpR1ufPiV1KDQZljvQ8fOyjqwa63f
uE1qWfzdxt/lUxeuyTblPWPeE7Af42879KTa/3NTXqIlK9Za87/18e/k31bY
F3k9cP2VG58a9mnRD/qHDRtp9Al7KebXqUsXmbd5+/u2/scLPW3Y8Iz5JyUl
y7EMNK8DuC4zM0v2N/XlGfL5A/U4xPMO2ntb6Hdci7XZsGUnLVqyStZp0bKV
0EG/l+t/TWh/aCm0yTq634DB8rptuw7Y5g+9iLHx/KFBUP+d97Zb82fdxZ//
1JdflWPi8YGjpy7Ke2vo8JGy/sxZb9EmsQ4zZr4h03imQJ+wfct1XPee7fN/
/sWXZXv8HTPsod/KeYybOMl6TkMatkqU8f23Zede2eZJ8Xz4wa3PbWsHoCOh
n9Ef9CfqQpsZzyL5ct2nvvSqbHOv0IsjRo2ha6Idnv+Ct437EVoP/cFmPWbs
BKt/1MFcUeeU0MPbzXvj+JlL1v2H/vnz37BppzW25GRjHRctXWn1997WXfKZ
C/cV+pJ21/cPWuuP+2/xsjVmH1ese5TXDX2OM+857h/Pnvj88V3hz9/4XJdb
a6nel3xvIo31Qb+HjhvfuS5duwtNu5lWrdtofedgI1f7P3flFu3YfVD+Gx2u
z87OsT5v2PDxnRs7YZK8L/l5GOPAuiO+WrStfv9emPqKXC/1/lPX/+Ax477F
99KY87dSk/M64nPGXDAm9f4/efaqvE5df/X+86ztH23rr95/buvv/P1RP3+3
3z/191f3r/vX/ev+H5T+0Yas/yVr++8tfS3t3V8Zejoru5lpe/6rZZ+GTkbe
zDfmSv8Ow179d5kHHYrrdu07IrUz7NOwcX9p2qKhh1e/s1lqV+hL2J9btGoj
/u4NI8Nu/4P5b62G9sd8N23fS4899pjUGpgTrxv7nDz7/FQKDQuXc8e/z374
2R/o9IXr8pp1G7bKuojDdo6/gygfM34SpWdmyzbAcfE3CXXwb61o8815b1Ns
bKzUph+KPmHzHTx0uNUnxoBQtifKDx8/Z9n20D50YlRUlPy3b/TP1wwdPopy
muXKdmAzgwZHG9zujTtfyn7x7/Ooz+2vEtoN7U2fOdu1f3lfKPMfMXqc7Adx
7v/y9Y9lG9AQ6A/2VaShz2CrxDpOFsDfA/Y6tX/oPx432oIWwLW45rkXponr
p9HAQUOkjQ19bt62R9pGYbeDHnlNaNNLH3wo20M78E3BWHn9twuNgPY2ievQ
Psrwb+IbxBhff3OubG/n3sOyzumL123zl7pLtMnz796zt1zX18RYZs2ZT2+8
tUBe16//IFq6cr0c3xZxT2FMGB98XcCFK7fpohgj6s5+a6Ft/i9Nf03mX7/z
hewX7b/62pu29YfmwfMj2of9VN47Ig5NCD8Nbg924m7de9rmP3/RMtk+rvtA
9IHxYC1nzpojQ9gzuS7awL+nYF3xbIp1wr23fPV66/NX+8fnzzZ1fPbIw/rL
MXzmGcO8hUvlGG5+/LXQcTtNrXtZzg/tcT3M/5h4NsLzBo/vdbGO+8U9g/5f
mj5TttOuXXua+OzzNGrseJneLp6D+PuHPuA7wt8pbvfOZ3+wPn98rjnNmln9
8+f6+pvz6A3xuSLkz3X56nfl56/el88+96K8LwcMHCI/Z6z/GPEMZ33nzPW/
rnzn1P7Vz3/Ljr2yXawLyjt27iKv6dWnr7j/p8r7D+vF648+Zojvqvr9GzR4
KLXv2Enm4XsGHxF1/fF8Lb8D4rnGWEfjnsOzPPyFYINGeuvOfbb7f8iw4da/
Ffn6/Pk3g9ef66r9O9dfnb/z8y/o90f3r/vX/ev+H5T+0Qd0q+xPpGXbgo9M
GzrqQz+3a9/J5u/RT/xtgnaGpt6594jUzvC7hH0awCZkt093oSZNmkqtzPZp
2IabNg2R/h1IN2/Zhnr3HSA1NMYH/xHY0fDvysdOX5ZtPfroozRd6BfYEA+f
uCBtOOMmTJZ/W2bOmivLt+zcL/9NGsyas8DI27GPDhw9K+PTXnmNDh0/L9Ow
KcUnJEm/aKQ3bNkt60BvId2pczdqI/QA7NO4pr+Yd0JCovT3PSTyEELPwL8C
dZ6f+gqFhoaa9c/Jfps2bSr+rr8odMYZWR/jyszKprbtO8o6vXr3o5iYWNmf
bPf4OXk92oE/CvpFGmMKCQmhIeJZBnPn/vHsAlssbF5Tpk2X7aANkNe8hfQR
RZz7h58JxgSthnzYedEu/Mk9/Z+VOhv/Xs/98/yTxd9/7r/30/0pTfwNPyjH
blyH9Qc8BllX6R/zR1uxsYZ/K8p4/Veu3SjHBj8GpLGe0BPcP9qC/2pYWJht
/gfNzzJJrAHPv03b9kJ3RJtEUWRklGwb17Zu2862Ttw/z58/N/Stzh/6DPm4
F9F/dk6u/Cx5/sgPj4iQY3HOH2PrO2CQNX/45eAzxr+7cP/NW7QS65sir/GM
77xt/odFCD8i+JXjc+f5w+cIY8P3ENe9+NIMqdV4Tlj/xeK5DnXWbtgi28e/
XWA98B3m+beQY0iV6R1ibKj/8quzrP63ivtl3MTJUluq68+fP487Pj6BOnft
bs0fvldoC/Zo/v5Ne3mmzNuwZZdt/dX59x8wRN7b3D++j+pnijjawFq2amN8
rr3xDoHQ6er6bxafKcD69+rTT+jeGNvnj+cA/s7hGvht4/NV13+7uR7wx9+y
07hHMAee/4hR42Qet4tnRtwfvP7w5+H744DymW0Tz5E8f/w+IQ/P/bguIcFY
R57/wqWrZPnbS1db679u4zZjLK/MtN3X/r5//u7/gu4/5++P2+ev+9f96/51
/z+l/lEPZQiRRjm0KOs91m4YE4N/j0doXG/YmaGn2f48csx4atiwkfxbCzsy
9PHT/QbKerl5LYQ2jJPvFhr26aOyvH3HzjL9dL9B0m+R/ZonPTfV8O0W7Qwd
MYbq1q1HCxevFGt1mi5cukp79+2jzz//gr7/4Qf6+9//LvnrX/9K//jHP+hv
f/ubTCNEGnGEHFfLEf7zn/+04m5pvlbNY9Q83b/uX/ev+9f96/51/7p/3b/u
vzD9w5bTvmMX+sZ8jxAaHP7S0MfwZUQ+/DXwPuCEZ56nN+YspJPnrslyvNsE
vQz7dI9efaWu5j02YKMxfE0M+zh8Mjp36UKnTp2S/f7P//yPHDv43//9X5lG
qNFoNBqNRqPR/JjgPTvY34P9PPAOIcJLH3wk//0XNneu98acBVJP450c+H9A
R+NdQ/h2XP/wS6mfef8R+JTAz/nchStSO0NL3+85azQajUaj0Wg0xQU0Mr9n
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
n1tWZjI1y0mV8VHD+tPzk8dR505tpJ673/fUTwno6OjocIqLi6LmeemUkhwr
8/n7gniqyENZXFy0rItrAmm7JDQm62inbZr3zGP7NJ+PCD0N3w8+bxxaGsB3
ms8bx/7TpdHfA/e+GwlR4dS0aVOfhEdFUXsf1xY3eXnNKT65M725/xx9fOEd
eqFFLLVvlnhXbeY3b0Uxsd1ow3Xck0dpQfto6pAdXyLz0Wg0Gk2Wl5Z2aup7
1W9x6+mijAE+3KdP7Peae1FBWz26dSq2NYIma9q0EYU0beha3v/pbtSlU2vK
z00XWi6DJj8zmp6ZMEqmi++zEs8dOeKZKzaawkOF7ogUf6ebZ3rVa9lcaMqM
TIqJDDM0SkiouH+iqX1+akDldvIoISbKpndCwsMpMT6a2uWlWPVSMvNEWQi1
yox1aSOHEpKTRXk4dWqWfFdr0K5NHu3c9g4d3LedYsU6DBnUT+bz54744IF9
Zdmh/dtpx9Z35DWBtF0SGlO1UbOmdp6RyHtPs6aGlnbulwd/D+jp0rz/dEtx
b7oxbHsB399dQykjOora+bi+OMlo1pxi8l6g42bfu4YnU4u0qLtqMy+vpZee
bp8Ve8/notFoNJpMiouNcNXSqqZGnXvRt1MPf3jzkheF0dNFGcPp4/tpxIiB
0vc4Pc0/CQnRfsvRxqjhA+nUsb3Fsj4t8jMoLiaStm1eR1veWyvTyMczTnpa
vIyPHz2UJj87RuiyZrK8Z7f29NzksdStS9tiGkO20LBJlNx+OL2x6j06eeEC
3d4/mVrEQAdnKPWEtk1vRrn9XqT1+47Rh7h/rh+hvUvHUcfEGGqfm+a3vIPQ
yJ5+cykhLoMGrz9huxdvnd1FmxdMoG6pou+cBErOyKW4PqtFWydoea94ap0R
o7Qh9H9iKrV8ebe4dic9lx1FHZslFnkdOnVoIbT0NjkO3GsIkc9j4ziXoS6u
CaTte60vnb4eiKtnubCWVv2n2d8D/tP8TiK0NOzTOM+lNNun8T1wY8iW8371
9J2tgygzOpISExMpIjREPsOFhoVTprjfWptt5OflUnxCLEWEhVrPeWHhEdQ2
F8+bUUp+iHjujKCUpHiKiuDnxzBKToyi1nni2Vd8r+KTs6nThOk075VB1DYp
ilrlZYvf2igKV9oOFc+QGckxVv/N87JE/3EUFtLU6idKjLlVVjzl5rWgaIee
bpcZ43M9NBqNRlN8vDX7lQJtrqiDuk7fhrvt26mHkZeeKv7+RIZaLF08L2A9
XZQxYH6dO7amCWOH03PPjpVMmjiKnhFwWjJ5HK1ctpDGK/WcoA20hTbr1q0l
n0PuZn1iYsJp9YpFig3U0NjPTx5PXbu0p1z4ebTKoedF30MG9RF/69OlXXry
pDE0bEhf6XtwN/03z8ukhPg0ajV5HV25upfenTWehvXuSO1bZlK77ETKbZZP
MWEhQt9HiX7zKTaxO604eZC2vDGWhvXtTcOmLKZzYtxXlnaltNhIivFTnoF/
BzHH2zy/GcVHp9PY3WLeB1+kvp3aU+euPWiw0B5bzoq8s/Oot3xvNpWyntlu
rM/hqdQqWuiH/FTZRnYzoS1Sh9CWD7B2h2hOm2hqmxVb5LXIF88DifExdPu6
oclOHttn3T8A8VPH98k46iQJzYVrAmn7XutL1rzqu4jq+YiqHzU0Nft68LmI
7DvN/tPQ1NDT+/fvL5V6Oj8vw5W4qAhTg8ZQ73cuyM/qw409KZb9PSLFPSru
u15TF9PBC8Zz0c2TG2jR6BaUES++y81yKC6pFY2cvZz2Hj9hPBMKrh94jTol
5dNzyzbS0TOnzfyLdHnvYpo5ZSZtPHTSuE+u7KGNr3SlLPF9yctt7qV9o+Jb
0fMrNtHxs2foI36GPLWZlk5oRdmJov/cLIpLyKAeszfR2UsXzXvvNJ3a+gaN
bhFPLTJSvdpsI/S0r/XQaDQaTfEBP9CI8CYSp47mfNRBXWf53fbt1MPIG9C/
F82eNd3i6MHdrrZrNz1dlDFgHt26tqfJQpMys157iV6fOZVGjRxCEyeMlHnP
PTtO1oWmHjtmmK2+CtpCvRtXz9ALkycUejzw7eDnlddnvmRb7+bNM2WdE0f3
0tWLJ6lZs3ShadNoqNDOzwoNDdtVntDTMv3MaFGWflefT3JGHsV3mkWnL66l
8TkRpi0unLJSo6lZTj7FpfWlNWcv0tmFXSg7PpKaZQtNHW34ZGSkJVNcRDz1
fUfozxPTqFWM0NzZzfyWtxX6E/3m5Sl6ems/So6IpKz0JIpPiKfo9q/TeaFV
tvSLo+joOGoz+zB9fG0/XRa64t2BSdQ8LVq0kUWxccnUYfYh+vjyXrp2+yyt
6x5DrTLuTluMHztMfg7HDr1PaakJtu8E4vg3iuOHd8v02NHDAm63JPQ07znN
ITQ04k7fadin+axxfh+R30nEXnnQ1GyfPnz4cKnU0/gO+EZo0qgkm55Ojo6g
5s0yKSYulbq+dcD8TM/TlXNnzPgZ2jA0hXKS4yjK0qvgHN1A/NCzlJug5N88
R7ectu8bHD9L7w4Qz6IpCUpbhvYNU9u+eZau3+RrTtCy7nHUStzbcbEp1OXt
o/ThB6fo8tkTnn5OzqC2MZEU6dTT6TEFrIdGo9FoihunXi5seWFx6mHkTX/p
ea/8KxdO0JBBvYV+zKDoqDDq3q0D7d29yfX6osy5W5d2NHnSWIuxY4bS3Dmv
0dFDu+i1mdNo1IjB0ieZ57121RJDUyvXMGhL7vfQOp8unz9e6PG89+4qn/9O
0Dw/Q9YZPrSfTKM/pDt3ai3jnTq0kunevTrLdOtWuUX+bHJzsykuJp1GbLlI
H1/cRUdOn6YPb52ji3sW0QudkignNZ5iU/vRuguX6fwi2NwihSZJk/reuD5P
6OUMmvj+Zbr93kDKiImgVrnpBZYbZTkUp+jplKhIys/JoMTkDIpsMZVOibnv
HJxIkRFx1H3VWfpo1xgaNPcwfXT4RWoZHUW5OXnSNr3tg7P03ugBtPLSRdo1
NInyUqKKtBb8fLP1vXVy3QcOEPdiTprtO4E43gsdJMqQ3vLeGuu6gtq/1/oS
/h6qjkYe26RV2zSH/D4in+fC9mk+HxF75WGPD/h7lMbzEXPFZ+ObTIqNdOjp
qAjKzMyn6IzRtFd+njtpWotICmkaRlljNhr25r1jKDsywqFXI6lpSAhFREc7
tHEkhSb1oXeuGvfGnpEpFBqWThN2mfbsFZ0pJdrZlqqnzbbDs2jSbuOaq0s6
Uqr4jjTLzhHjDxftRVFCajplt51ojfm57EgKd7TZWmhw/+uh0Wg0muLGqd8K
W15YnHoYeTNefoEunD0iuXjuiMy/cOaILBs+ZADNmT1D2h+7dW4ryi54XV+U
OXcVbT37zBgbI4YPlBr6g0un6Pjh9+m1V6fZ5s6a2nkd2kJ5VkZSkdaI/W/d
gC8H6rRobuwrMX/uLJlu3SJX9t1N+oCkWfNp2zqvyJ9NVrbQFzHdaP21y3Rp
1bM0uFsbat22B01edYQ+vvEujc+IoubpGRQV2lTo7gjKz061rm2WLTRLTDzl
TVhH129so6ktoqhNemzg5TnZFMt6evsgShM6JjoumXI6DqI3dp6jj29uoonZ
Ii8ymYZsu0x33u1BCRmjaPf1E7SyV4K4Np5aTt9HH52cQW3iW9Ksk5fo2JQc
ykqIoLxi+F7k5WZYZWGhjSWczm/m/e84BbVfEvZpVVeznubzx9mPmvfKg68H
62mEsE/zWS6A7dOl9X3EZuJe9E0GxTj0dJK4v5JSmlFsz+VedmWLs29Qx9hI
inDq1dQoysjK9bI1R4Zn0KS9xrWHJ2dRVGQstXnjkNHWlqcpOdLblhzmSMeI
+9hzTR9KEeOMjcmm/rM30mWvMe6jGc2jvNrA+Pyvh0aj0WiKG+ffkMKWFxan
nkZeYnwUhcj9LBpJv1zW0yhbvOhNmV40f7ZMnzm+3+v6osy5SydvPQ1GjxxM
g/r3oTMnD7r+jV27ajGNc2hqtIUy7MNXlDXyp6fzmqXJOlmZSfTRrUuyf6Rb
5mfJvnt26yDTHdu3kun2bZsX+bNJz4CNdxjtE/3uGBBPyfERlJKSThFJ/WnL
zct0YEI6ZSeGU67XtZkUE5NA+eNX0ZWbB2hJvxTKtNUrqDyVcrKzKDbK1NPO
fzc/vopm9EqhnMRIoYvEvPfBdteBYiPiqMfi43Rn12jKTupJay6eo52j0ygi
ModePHSJzr/ZitLiwimvGL4X6alJPutmpCcV+ntyr/UlnwnOtmR1/2ne24Nt
03xGIr+TyPZp2KYB/Kf5PJfS+j5iTlaKH9LFc5hTT4dTQnIOxfRaRXfkZ3aA
1s5+hWa95uH1F3pTq6RoLw3cKjWSMjLzvPIjItOs+/fIc1mizxhqOcPcRwj/
5hIRHoCeTrBdkySuSey3gm4iLZ5DF00eRiPGvUqHbvnS01FyfP7XQ6PRaDTF
jVMHFLa8sDj1NPJgF163Zolk4zsrLT2NMtbTG9Ytk+kDe7Z5XV+UOXfp2IYm
Cf3pxrixw2hAv1509JDhFwsdO2b0ENq4foV872zNysU0ftwIqz7aQr3kpHi6
eO5okdbEl57G+4eyXrbhZ7Bw3iyZbt0yR/YNuzTSeCcS6Tatcov82aRl5FJU
0iDaddvUzgmhQsc3o+jodrTo3GU681pzSo8Lo1zlmuxMvA+VTPkT1tIHN/fR
IqGVU5U6BZVb7WQJzc16ev/z1LtDW2rXOo+yk4XmCAun7JRI0Va20BstaObx
y3RuditKjomkqLzn6OjNI/TO4l1059xc6h4XQdFmOx8s70QpMd59BUJoSEPJ
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
utc8ZIQVbQRZfVd0JcgeF/MIklSwhRUfUss8dYw5GvEKJkFW6KlbUQnd2yoZ
Sso+zTZqPieR/T1YV7OWZr9pdc886Gn4fvD7iOw/XRr9PRo89NADTWaTSKr9
SCWq/StQ0Sc1fxk4NXzgKQuS1DRDi1850go1xRhqiTF6cKadZRUdddS0v2v9
UdFGTeaXZprX4FeO0IVajvVCXdd1U/K5PZ/1fmWvb8t3uaZ6AOBaW54zHSDV
/KSruZSr+UUjKCCq+sBfWcFUtBHsiDtR86u4lPvLq1IEniqwTpBX/eKnkhdP
SirK0J5XjPxCCQW/NXnyF955v3XkOctKmid8UvlHxeMO3PIC59FC8xh4WFz7
8KMKlUXeoxaPK/HC8mvR1qM/r1TMVPRZVjlAClPXdxuVffOwN5V/zlRSQrd2
HnWEznxnnoOHXfICoCTs0+w3zT4evLcHQrZNqzZq1tTs6wH/adbTsE/D3wPn
uZRGf48mD/38gSY/JIYal/uNQVkPjcrYaeiggcWvJQ1BWU+8gRNRVr+MAzOv
gSO/noKajzYaiLGhn4Yy9KaBj/yG1rVGHW7LE/7GUe7k175R5uics9c6+FgX
1/VxwVlPrlNZ+5rZUMrq+4gHcq0zXdeknjMs6ymTPOKJ1ynjHrfyHnGvV6w8
4p1XWwkDpZYSOpH5j7iXWfmPBEZNH+mapZgatvhvRPgbGarY837tVV7dJV7d
xq/NvF878j3l7vmBUc0RcjxQqioYeY8p5Y951QmMx1zSd0dwQDzuShV//EoJ
7xFPmajxQHnSLf+XBk86Qo4HwhO/fExo9t+IZ4TfyDAwfm2ED//YeYyeMHn8
F3YeE/N7TIZOMP/HTdRrHnfBLd+Z5+tad0pCT7N9WvXPYPs0Qmhotk+r/tNs
n4aehpZmPY398kqr/3Tozx9+oGkXnkAxQU9StCCqvAjLGyGDdKQgovxvXQkH
FQw4beWbhJV/wptyT4gyD0irhJqEOUKj7SctIkyccWe5kf9bW364S11nnoff
+qecA7c8N7A+5UzMeHg5Jc+BWp/joeU8oUV5TzysvL0sTLku1FHmdn1BhDhC
jjtp6og3LfuEa76tTiFp4gdf5Y0d8YApW7j6jRxY+WV901AJGwZYxxcNTNR0
fSVfjat59ZWy+gHxpMlvfYTOuK86gaT9l9VzUN9H3I26PvLqOsrUdB0zXkeh
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
2ffc8/S+0NY7R4+R/W0eNFiOAWPBmDA2jBFjxZgx9tVCU2MumFOiY66gV1Q6
ZT5ak7IEGYJM6GqhqdNNbc2kCS3NpLhiaOxkJbS0rmnvTnIiyzx60tUGXtGu
o6VurOTJM/ozxpDsGBOXJbuWuVHNR76zjvP5wUOy1/wCwKyXeBegDYQJIkyo
aJBYyZ628it654F4BWfaF3FMJe88Ne2MxypwfTXui9gSIsaFWEfcrV60ia+4
kyiFaEdYIEG+iSwApxb2Ve7RztUVnGnvsnAJ62cj7cl3J0wJvXUzx2soeTVs
uto9v4YSutWvYQtDlbqhCmEucWcIQhyEKqGHmiLPINQkxA9NCyhX6zW16tcS
erlwNFHCuyUQPd3EJc66NyCdXd43DSW1TdS4nUY+8r2v926vvgjrlqthATt1
3bJGyHEjXd0K6yjlrE3r2MocutlW35NnIfVzjQJwqVPWnq5ja5PrGNoYdl7Y
imuLsI5KWRWshYGqh+sK/SopZ4T1OK1SzoB1L9dloJXrSr1cR1xvUNdBHVu6
rr28nImaNsOSsk/z3h6I85mIrKf5LBd+HxG2aj5rHLZp3uOD956GffrQoUO2
82FKC059CZst/CBWt21HS3NyaFluLq1oLvR0a6Gn27WndR070/qu3eidHj1p
Q+8+tKlff9o8cBBtHTqMto8YKbXu7vET6P1nJtFeoX/3vziVDr70Mh2e8Sod
fe11OgaNDE391lyhnecJbT3fCMFbHi19bNZsOvr6LKHDX5N6GtdCT+8WWn0H
9PTQ4bLfDX2elmPBmDA2jBFjxZgxdswBc8GcElz0dG9TT2dIakg9repoiaKl
Uyuxnbq6l6a04hWdGtquk33hr9zNVs0kuejgJBf9m+SIJxbSPu2vfqKKom9d
8VHGGlZNO/WwUzMnqPVM4isFpoWt+hWNa+KUUCXeFlb11rmVTNzyfehiN50c
aD2fBNk1ekH62NLIQe5l0RW9dbITZ5lTGwdCpBJCy1rxit5xNc1EKGGE0o4v
7RyuEOEIw33UK2nc7dFuGtueF65o71AlDHXYs+22andbdqC2abdrfNuwPTbm
EJd4iCPfSRMT93K7pm7ij7uyQfu2NRedgq9319W1PZTnsJYRVzC0cy1b2NBR
7qadG3hRSwKfjzrl7DZlwy5dzY9N2ldZNStkzezPnu3Mc7dZ+9bUlh+GapO2
bM81Fc3vsDmXYWpJ6jCWfjZ1NWNqa+jjeqZmrueiqbnM0tGsr231vDV0PYe+
rleurns95JdTykVYr4T0NPt5qH4f7EOt2qX5zHH4fMA+zTZqoJ43zu8jltbz
XJy2aWhO+Bqvb9+elmRmCT3ajJbnN6eVLVvT6jZtaW2HjjYb9cY+fWlT/wG0
ZRA09VDaMXIU7Rw7lnZPnEh7Jj1L+55/gQ6wpp4+Q9qppa6eNUvan6UdevZs
Mz7b0M5CR6POEfiHzJgh7dtHha4G0Oo7Ro6krUOGyn43Cj3NtmmMDWPEWDFm
jB1zwFxiTD3ttFHDPs1aWvp7sO+HpaftOjqtksfvw2anrajaXH1rY9X2bGnl
Su6+CN6+z96+0AmKH7W37deel+go97LxOvLdbcb+9b7bHAp6HihufK+XPZ3g
CJ0+GgX5bDh9NZy+HE6fDjf/Dvaz8OWjAX8M13wHvvJ9+XIU5NMR7cc/w8oP
ugv/DRciTZxpNd+Zx0QwQS7lQfa4L18ONz8O1T8jcI3t9PvwpZEN/JWp2lgl
LMjuvxEW5ObTUd3LhyNE8e/wp329qVHI+up1dvzpZ1/1/dHEh4525gWks/1q
7sLboAuvjwvn51Eg5d1p4Ig3UPL8pS0tXdZbS/vy91B1bh0f/hkGarq6LY99
rNV8zkPo5RPi1x9EwWnztnyd2T7tsVXbNLZTVzt8NLxs0FLb1jZ1raOsTC2P
ni7n0NeqznZoZKet2qOv61o26HpeurquJxT17rW+5L2n2d+D30VEnH09AL+L
qO4/zXt7sK8Ha2rsPw37dGn0n/by9RDg/b117drT4rQMWpKVTcty82hFfgta
1aqNtPWu6diR1gv9+m73HkJT95KadrPQtluHDKHtI0bQzlGjafe48fS+0NR7
4fcBTT3lRTo47SU69MordPiV6XRkxqtCL78qNPJMQyu/Zujlo0JDyzKhow8L
HX1Y1D/08svyWtRHeofoYwt8Pfr2lf2v79JVjgljwxgxVowZY8ccMBfMKd5F
T/eU9mm7lmZfj7TKbnZpz3uLNn+GSna97Mtvw06wjfiKnvcM+Z2+hIrqe4ve
7+hZ7zXKulUVzetu/3WmC0chdG2QjzxfmOVSswZ5w/XinXWgTX3kxTniTuJd
8mLVsKIRWlR0hEpdYPNFduYHuWhjRxkT7ZZXwZ4fXQSiCsBZJ5BrbFQwgX6t
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
3nua/T2gp+HvAT1dmvef9qWn17RsRXOjo2lBbDzNT0yiRanptCQzk5blNKMV
+fm0SmjUte3aS9v0nkmTpI4++dZbdGLWG3R81iyZPvXWXGmfPrtokbRHn1+2
jC5Krb1aaOu1UltfffdduvbeJrq1c6fQ17vo3JIldEBoamhnidDP0NB7Jwmw
Z8jEZ2jPxInSfr177Dha2749rcS+fvCXzsyit9PSaFFyCs1PSJRjxxwwF196
ukeUoqdVLW3G/Wtp+5mKHr3qOE/Rx1mK6vmJsc5z/1y0c5QjHuXIs84DNPNj
fOjbGOs8xad8a/e7OCsx2kGMMrcYl3m6nXfoehZiICjXOM9JVM9FdC1zwe3s
RD4/0Xleotv5iJFmvYgg+xmKkUq5er4i6jnPL3Q7UzHcJfRFQeV3c6ZiUXGe
nVjQ2YrWGYvljXMUnectqmUeVB38lNCH9rRa3pTT5aso9Yxrmprl9lCJl+ew
ilLmJNgsDxYa1AzNtIcqSp7n2ibyGuM6e7yKS9w/jZnyRmjLU8tMmpTnPFNT
l/fQSMGZduK/vFqx0tDEmeeWbugjr3BUt2igpBu4Us1Hvkk5JRTUt8JqMl4w
NST1RJz1sG+q+4h7gH+Hx4bsj+AA8zzY9XCwSzrYPGclWDmHJdh2Dotx/mKw
EvcOa7rh1NmP+PYZ4XNdGOjs2qquLuPQ1OoeemUVO7Wyvwc0sqF963r0r9NW
Xc5dV7tp6npWW3VlG1Jbl1V0tdVmXYv6JeDv4fT1QFw9y4W1tOo/zf4e8J/m
dxKhpWGfxv4eP0b79OoWLWlOeATNj4mjhUKbLkpOFVo1nZZmZUvturZNW9ox
fDgdfvkVOjRtmvTDgG8G/DWOTJ9Ox2bOlLr65Jtz6NTceXQG+00vXCh09RI6
J3T1+eUrDLu10NaX160zfEGEtr6xbRvd2L6djs54Vepmiwke3h8/XoK+4e+x
Ent5wMcjNY0WCu2/ID5RjnteVLScA+biT09nOOzSHOK8Fs+7h8ZZiXyWiKqj
+Vxyp3aWeraC5+xxf1rZqZk9mu5Jd4KeFPrLCJ15KkZfHttttCNU840xuNhs
vfCvaV3P/i5k2p+WjfRRr7jxdRZ4IGeK+9O+BdXns7/96ddwRz1furU4tG9R
dXGoo46zvtt546GOuK96TU3s6SpeGrmpo6ypqT2Rp4ZNbGVqaJ4zbmnWpxT9
6pZ2UN5PmUnjAsp9XVM0WDcb6UYVjHPEjXiwkTbx5HnT2CWvIeNy9risU95T
Dh3dUMGZLhqF08ENTNzy3eoVB/WLiu388+om1RyhLzzldW34Ov/cKK8jdXSw
O2X8UcWK1/RLFUco9K+kikmwjZqWdnanuk1be/DW4E4drtb1obdt+tq0X9t8
rj17afvU1IoftF1T17Fpa9962mHTdmDYqeuZKNraihuh6ld9r/Ula171XUT1
fETVjxqamn09sE+e6jvN/tPQ1NDT+/fv/1Hp6VX5+TS7SVOaFxlNC0y/j0VC
r8IGvK5jJ6lnoXN3YS+PMWOlzoUNGboafs/QukdnzJB7dhyHzVrar+fSyfnz
6dTCRXR68WI6vWQJnVm6jM6uWEHnV62mi2vX0iWhrS+vX083d+yg0/PmG/uE
mMAevRt78Y0xgC8I9s5bntOMFmdk0MKkJJoXE0tzo2NobkQUzQkNl3PAXPza
pytX97JNSy1dmW3Tql06mBKDVL+OKtKfI87yYzZtzkEe3WzZbCuwfdTQv9Eu
Opl1sJUuL0KTSIUIsyxC8ls7FTzxSBGPMnW1b837pF8brTc+NL6i75263hp7
Bfs8nHWiynvmH1HeN5FKubomVp0KnnS4CMPLexPhI18lzESNu+Fat4JL3Qo+
8l0IVeC0eq2aH1rO+5rCEuLALc8fTU3UuC9gS/bKL1fwdU6aAHndUyZPSv3b
xGr/KRtNLIx6jc10Y5FGvHG5J628JlaZUm7F1bRBI3FtIytt6NRGarmkiixT
yz2hkyoKT/mIC8pVcdQtGg0dcTfcy4J91m9gEewJywXLsGH5YDPfD+U89a24
Qn1JVRG3U1/BLa9wVLsn1LNp5KLjWxcXTB0f1C5b1dS5AfCIOzVc0kWhuhI6
MXQ0p4MVPOX+9LdTg9d06GubznaxZ3vOWeT9rT1auq6JU1PXs2lqVU/XEfep
w6/askvXtmlo9Rq73la0tKqjLez6uiT0NO85zSE0NOJO32nYp2GXZuDrwe8k
Yq88aGq2Tx8+fPhHpadXCI06q0FDeivCsFEviI+nxamp9E6XrrR9+AjaMnAg
bRkwgLYNHkI7hg2nXaPH0B6hsfc+8wztn/wcHXj+BWm3xj4d2JPjqNDTZ5av
oBu736cvLl2iP376Gf1JPIOA78RafX3tGt06cIAubdhAF1avpgsrV9EH722S
du3do6HZx4hwjOxHMsrIO/jii9Je/nZyCi1ISKB5UVH0ZmgYvdk0lN5o1FjO
AXPxradTPeeJW1STGHtLK/veVa5K2Y3DqGVGKrVrlUPt2+ZqNBqNRqN5wGjb
qhnlZqRRbINwql2uhrRbe85bZE3t8fdQfT2cOtmVsgou9minndpu5y5IV5ec
v4eqo5HHNmnVNs0hv4/I57mwfVo9HxF7fMDfo7Sfj6jq6eVZ2TSzdh2aExZu
2KiFVsW7fxv79JHvIGKfvPd696Yt/frT1kGDaMfQYbRrxEh6f+xYoasnSF9n
7Dt9Yv4C+mDnTqmZ//WPf1BB//1TrP+3Yt2ubt1GZ5YtoyvvbqATs9+knTh7
ceQo2ccu7McnGSnt4dD4C+OFlo6OoTlCSxs6uhG9Xq++nAPm4k9Ps206zdTS
ll26knkOuCDl8RrUMiuFOrbLo66dW1KPbq0ErTUajUaj0TxwtKKunVpIbZ2b
kUoNKtWy9gCppb6X6NTUDh2txhuU9dioPZpa1dze+tuppz3puqItp7auR6pP
SEnYp1VdzXqazx9nP2reKw++HqynEcI+zWe5ALZP/9jeR1yWkUkzqtegN0NC
aV5UjHznD+/+rUKIvfI6dqR3u3ajjdgr7+m+tHXAANpu2qrho3H8zTl0ZfMW
+vr6dfrPv/9N//3PfwrU0up/uOara9fozMqVdGn9ejowZYpsGz7bFuhL6Ped
o0fTgphYeis8Qvp3vF6/Ab1Wuy69WqOmnAPmUpB9OtVFS7OexvmFLTJTqXPH
5lJLd2qfL75DIE+j0Wg0Gs0DRz517NCcunVpRR2kpk6Rdmr1jBi7pjbs1W6a
ur6ifxuY2reB9a5ibctG7U1tLx3NNBCa2d6et836XutLPhOcbcnq/tO8twfb
pvmMRH4nke3TsE0D+E/zeS4/tvcRl6Zn0MtPPiX19BIRl3vRZWbSchFib7rV
rdvQ+vYd6J3OXWhjjx60qU8f2ty3H+15ZhKdX7WKzq9/R/pyFEZHfyfWcu3b
b9O7ixfTn8SzCq79s3hOOb16tWxz+4iRtH3IUGkL3z50qGCY0NTD5HuQ8+Hn
0TSEZgkt/Wqt2jSjWg16JbiqnAPm4ktPdxd62qalK1ezbNLGmYfBlNU4lPAM
2rljC2rXJlej0Wg0Go1G0qVTS2rbuhnF1A+162lTU9d18/0oQFM3sPlq1LFp
6gau2trejsdGXc+h0T1hSWhM1tTs7wGgofm8ceRDS7vtl8fvJGJ/D/h9qOcj
/pj09JLkFJr62OPy/b63k1Npflw8LUpKpsVp6XLPPOypsbqVYate37ETbeja
VdqQz61YQSeXL6f/EXq4sP9N6NePmtevTy3r1acpAwbQv//1L5n/v6KtM2vX
0uHXXqMtAwfRtkGDaZvQ1dtwdozQ1TjvBeOa1bARvVa7Dk2vXkPo6Co07fEn
5BwwF3/2afaXlnbpyh4tzeca5qclUcf2efL7otFoNBqNRsO0a50rNUJ2SrK1
Bwj8PqSett5RrGHapw0bdf0ANHVDkwbW/neqfbkgTc02arZT23V1gxLU0047
terrwXt7wDYNPa3ap9nfA1oaoeo/zW2WJnzq6ZQUmlKpMr0VGSXf7TP2zouR
e2i8nZJKSzOzaGVuLq1q3oLWtG4jzxI/s2QJHZ47l74Xa+DrP9icP/noI9q9
dSstmTOHls2bRwd376a/iPXsERFBfYUeBv0SEujP4vmF//tBPKucXrOGNg8e
QlsHDjQYZGhr7DMCPxT4S8+oVl3apKc9/luaUvlROQfMxb992nz30EVLY++O
lnkZ1K5tLrVplaPRaDQajUZjo0PbPGohtIJx5mJVu43aYadWNXV9H+8lNnDY
qhuY7xQaPtaqpnbX1g0UO7ZXOyXo7wF4Tw/oaNil1fMReR9q1d+Dz0dU30eE
jZrPG8d+efdbOxdGTy9NTZNaFPtjvNGwEb3RuIl8N3FuVLR89w/7acCPYnl2
ttxr4/SChbTv1Vfpw9OnXX084A/9j7//nd6ePZtSatWm1CefpJynnqJsQYbQ
vyvFtWtffJHGCC09smYtWvH8C/IaVYd/eukSvf/iVNrUfwBtFmwZMFDaq3eK
/uHL/aq47pUqwfTSE7+laY89YelpzMWXnu4m9LTcX7qy4S+d6NDSUk83z6TW
LXME2QXSStRNT0uk+Lgoio4Ko6jIMBkmiHRGeoJoKyugdkpzWxqNRqPRaDzA
Tg2tYOyv5zlv0VtT13LV1KoGbuDi+2FRtp6lqX1hXOvR1g1d69UrMfs0QvbP
4PPG1f3yELKe5r092OdDPW+c9TT2y/sx7e+xNC1datHX6tSlWfUbyj0z4J+M
d/6wJ918+IEkJtH6jh3p9MKFdOCVV+jI4sX073/+09sm/d//0pvTp9Ozw4bR
h9evU9sqVain0Lz9hY7uJ0C8d40adGj1arp1/ITguGs70NcnRZ13+/WnTQJo
avke5NBhtFmkXxVtTP//2Tvr+Ciu7v///fuWIgm1py3QFggQl3WJbDbuIUgh
aHAJ7sFdEtwJ7looFJfgxaFAgbZUqD4tdZfP7547c3dnN7IbCIH02fD6sLuz
M3funblz5z1nzz3n1dcwuU5dTGY8PeGF/0g8zdpSKk/rrA5+HpEKljbzuNL1
kJEWh6YZCS6VEG+BUa/BuOw0HMnrio+m9cNXswbwV/o8NjsVJvZ9QnyUW2UZ
2Lpt27yOkXlDkT99MubMns5f6XPb7JZ8X5Vdlkce/ZuUkZ6CmFgLoiJNaJns
6f8eeeTRgykrM4GzghTTur7M1Eq/j4ZyDnKljbpspnbw+XBgalllMLWSrZXb
BypUGSztzL2CpZW2aeJp4e8hbNTKnC7Cf1rEzKtq/h4UE4NYlOLNzfQL4L7J
c4SNWqvDIoMRhRYLz4F4ZNJk7J04CR9fvVrMNk0MvHj6dGhq1kT0c8/jIjsO
O9k22ydMwMU33sCF7duxffx4DNMb0J59392nEdo1aIjV+fkO9mnx9/mdO9jU
Oxfbunbj8a/J54N4enffflI8j9fqY0q9VzDl5bqY+J8XeRvKiu/RlvG0xWn+
YTgTsbTIzZ2eGsufO8tSjDUcmRYzrozugh+n9cAPEzvhh/Ed7WKfafll9n1m
tBmxtH4ZZVmjozB+3CjMLJiKaVMnYMrkcTbRZ1o+ftxItl5kpZVV0UpJTYdZ
p0KoSoMWSZGPbBt3lZaWgMQkK5qlxlTaMfhfPSblqfOjqkN6WjIssZlokzsE
k/MnYGimCc0r+PhVpjLSEmE2GRAaGgqTWY9mT0CdbOcwNQUR4SZowkJ5/dQa
HVqmxSPcbIRGrUZajOGx19Ejjx5WxAqO+WHqc55uLNupfWuIeB8l+H2UyNRO
DOzlxNc1HddxbbP2g9Kn+lHzpYiTJ7ha+HkIvw9ho6ZYeWIuosiP6DwfUcT3
uMMY8NChQ1WKp1cnJnEWJR+KmU38uN/HHLJRh6mwQLZR7+zeHScZGx+cMBH7
CmbiN1ae89/FU6cQ5e2N9OrV0dTLG28sXFiiP8jP7JhuYlzd/pln0axGDVi9
a+NcUVGx9f5gx3Dn+AnYyv2npXmJlF/mrYEDkd+oMWYwFiefjyl16mHSiy/x
NlBbyrJPK1k6QsHSPNfhM/WQlhLL7lXxpSohNgpZFhM+HZeD70Zn47u8lqWL
fU/rZUaZkBBnKbEs4lqJe8di4oRRpYq+p/WiLZGPvKyKVlJKOsIt2Zh7+ALu
XtqMcRlGNE+MrPBt3FVCcgYM+kgkZTZF+yQzslJiSlwvNSUZUZYoGHQahMls
EMquCaNBj6QYtt3/4DGRlAKzXsuPR5hGz1jJcd3YxAxo6FiFhiEtNsLtOpev
DuVTSmomDKZ22HrzKu7eOYHFLQ1oEW9inJ2CcKMeKnF+5XOs1erYOTbx+RSP
+voor9JTExFuikbO6rOsLVdxfWVbxJr0D9UfK0qpqakwh6diwIItePudq7x+
t4tmo214DPos3oZT509gZ64F6YypH3ddPfLoYUSsIPIySj7USr8Px/mJxNIO
HF2zuO+zs43aWRIXl+37oVQgWz9QwdSPmi9FfkThO03LRC4XwdRiPqLI5yIk
/D1oHiL5T5N9mvw9iKcpvgex+uPmZ3d5ek1yssTTDX14LGea60d+1NznQ63B
YpMZp2bPxpGJE7F33Dic2rChuJ8H4+Y+bCzNql4DnWp5YePoMWXGz6Pvdkye
zNdtyrbpERdXoo36+Jq12Ny7N3b16cPjUFP86T39+/PYHtzn47X6mFrvVR7f
g9pAbSndPh1dCk/Xk3i6dl2kJsew+1VciUpNjoVBq8blgS1xf1hT3B+c7lrD
snBxYAvuY0HbK8siv+aReUO4vXjsmOEuNWH8SLb+YO7P8ajKehSKTUyHMZX1
mzvS/XVvP3Y/jdZV+DbuKCEpA8aoXniLl3sAk1MZDyaEF1svOj4ZekMCcvJm
Ysu+o7h5S6rH+1eP4NDm2RjXLRnheh1aJFv+Z46JpGSYjbHos/0Sr8PdU1OQ
ZWBsmmLl38ewOhrSJ+AML+ss1rQ3QudGnctXh/IrKSWjGE83i4uE2ZyKoRsO
4Oo7V6T2kN49jbN7C5HfKwVxETpkpjza66P8bWH9wNwRGzmvnsbKtiY0izU9
9nqlpSTAZLaizcLjtmP53rVzuHFwFNKMyZhyXFq2rw97nrLqH3t9PfLoYUSs
UF/OfU5M3ajGa3b7dE1nnvaxx/ngkvK5iDmGgbIPNJdXaUztJ0sws5Kti3M2
rRtk26ZyeFrkGlcuF3MRRW5EEjE02alFPheRa5w4WtinKZ8L8fSxY8eqlP/0
mpRUTHjuBeQ3bIR8H9nnIyAQc8nnQ6XGptbZOFkwEwfHjsPOUaNw8+RJG+/S
vMPffv0VH7/3HtJf+A86eXljpEbLbdCu/n5lx2g0uxfTNqnPPIs777xTbB3a
16a+/fDmgAGMpQfjQF4en5c4s4nI4eKDaa8wpq77Cm8DtcUVTzv7TZueqQcD
42m9d12kJFn5c2dJiokOR15GFL4eko7/9o3n+rhXLE7mWGyfSfSZlovPtP6w
9Ejuj6Esq3mzTM61o0YOcVu0fvOsdJdlmYyaUlVWWe4oJTmFlaOHRq2SbXph
0Oi0iIoKh06jlm18aljCiUVikMrus+bIRLQePg0Lp/ZC80g9MpITpDJUKptd
UKVWI9ai5/zyINuI+tG24ZER0ISFyetoEB8trZNAvGfpjf02btPYfpMmeyht
HxXD2pcxAOvPyva1E5uxfnEB5syaicK1W3H2hrT86rZRaBVpQPPkqH/9MVEq
wpqEqO5rcZuvfxSzmurRIs7MvouDKdKKzGmHJZ66NB/ZRh3bb4JDnTOT4xBu
NkGrttdZrdFAV0YdqI46vq4aLeKpv8bDbDLxdQwGiXlTk9kysxlqm605DHr2
zJMZF46k5PRiPJ0Vy3jakI7pp2SOvnMBN69dwPuCq++cw9bcaKRGa5EuH8OI
iAhoVdIxDGPHMCbKwM8nr09ElLxcx/qEBSkpSTAZJDt+ZLgGlthEaFndqF80
S44u1zWnVKQ1GRHdVuMW1fHiPHaMtYgIL61e8vVqMrC+GWY7LnS846INbvcR
h+u+lL6WlMTGXmMLLLsoHcttPSOhks+Z3pjiwNNpjKfTXBzT1JREmPVSP4gw
a5HB1o+NT4OWfdbSeWU8E5+UDr3cpqxY4wMfU488Kq+IFeo/XQ8Nn5Z42qeG
3UbdmMfLk/yo/Wo4+k/7yTlbRH7E0u3SfiUv8xLLm8gq2f8jUMHSlcHTIr4H
sa+I8yH8PIR9WpkfkZha5EYkkX2auJrs08TSxNQiP+LjZufy8PS69AxMeP4/
kn26URMU+PpLPh+Mp+eHqXCQMfSRCROxf/QYbB2Rhw9l7j3F2mkNCkKMry8O
bt2KKc2ao6t3bWweO9YlS4u/HVOn8W2yatTErpUri33/8c2bWM9YevfgwTwX
45HxE3gOdMrlQvMnZ/iQ3wcx9Wu8DdSW0ni6TQk8zf2mn6nHfaeJp5MTo/lz
Z0kym3TY2ykWX/aKxpc9IrmOtzcjWhOEQ9lG/ple6fOJ9uG2dWh92o62V5bV
J7c7RuYNwojhA9wWrU/buSqLuJn8OpxFy8sqyx2ZIpthzMptOHHubZk9LuPq
wULkj8/HtmNnJBa5dgDbprZFgkmLlMRU6J1YRh/eFGNX78Cp8+fwgcwvt8++
gRXDmyIxQoPkpPJvk8HqlpyUDKMhFjkTC3H00mW+zq0zW7F0UAbiGNMkJaQp
2FGhQ0ORpNOx858CvbUnNl1hy27vx9K+r6PzmKU4dF4q6+6NEzjx5nIsWb2f
1+Hmhh5IYDxnjPj3HpOsZKvD+U9gdTdEdMSGa9J6F+Y0RYxZw+4vKYxPMzHr
tLT80rzmsLK+5VxngzkdA+aswsFTp23sevNIAVonllYHLfQOrK3nfiHZy05L
267NhsWggTk8Dh3m7MD5K/K5uvM2zu6ajUEZZqTHRherR9OYCMa7dp4+NNgq
sbg2DgO3XZB+j9jWCVbGbmlJSewYxqDDeHtfuH12O5aPaIFYxszmiFhkTNgt
7fdMPlqzc2zQxWLAVqmcs7NfR3zb6TjyzlXc2DMerdhzVVaSpVzXnSR6frKi
l1zu5YXNYdRGl1qv9KREqW+u2oaTir75TtEGzB+YgRh2fpq60Ud4+1k5rvon
PbNsuel0Di8vQGuzo306LZpday6OqYnVZ+BuaZsrrJ0W9mxmSB6FE3RednZD
jJ71i6ge2HNbOqeLWuof4Hh65NGDiViBeNrm80E8Lft9kP80MbXdNt3IwUZt
y4NITO1VEk/7KdhZUpCXJPGe+1c72LKbFCujsu3TxNFKO7XI4aL0nxb5XIT/
NLG0Mjci+XwQS4v5iBQvryr5e6xvmoWJL7wo2aeVPB0UjHmMp0/PncuYejTe
Yiy9cehQfMHaSX+vG40Ir1YNcdWro5tajdOMqdt7eePE1m1u8/RHN25g26RJ
2Jafj6tnzhT7/qtPPsHagQOxZ9gw7B8xAifzC7CSjcNzGMeTXwrPNe7TCDPq
N+RtoLaUxdORz77qECNP8vMg+3RdztNJCRb+3FmS9DoVbnWz4PNOOnyeo+X6
opcFZwe3Qow2CHOSQvnr2UGt8EXPKNs6tP7NblHcJ0NZ1rChAzB0SD8MGdzX
bdH6w4b2c1kWcXNJ2yuXl1SWO7JzCdOtC7Kd0q733hXvz2MLe55IsZiLsYza
oYzzNn8K/vs1e0ZJi44o9zYZ0QYYTVa0nX9EXn4R1y6cs9sa+0QjIcLowI63
LxbhwttFOL0xFymMgYyMVXJWnOYstqVPAppP2Sttf+VNbFm1Dmf4vXs3RiYx
Vtp+wWafVf+Lj0lmUrRTH4hjxykKbZeekso5PxuvM/6Ji2Hs1iwfF3g5hzEz
Q4eMuOIc61DnOxfwLr0/NgppsSXXIdlUnKf1+ojiPG20oM2yE3j/xllcPX/a
fg7OTEdzxmI6Z562FudpFRvvDNYWmLj3io1XY0xqGM0xaL/wqP2c3raf26Kp
mYjnfScdEw9Ky07PaIbEXitwg9YpmoKWbP/N5hyTtzmASansc5zR4bgmJ8az
c2XiNl21hh3PKMaH7Fib9Oz5gR3fpokWbp81WHpiFz/PRVjQMrrsehl1Ttcr
6yO2vngZB8elIN6sddlHkqJMxcsps38y5r10nJ/Dc29NQrNwR55OtWhdHtMo
9hyTmLfH/lyl1cKSu1l6JmCMnm1QwdhqPq7y63Mp2hm15RrHPPLoYUSsYOfp
VxhPv2q3T9eQ5iZKuV18+NxEv1qN5NjTjRFQzEZttzHbXr0kHg4Sr1z+krz8
HZm6VB8RSUGVFC9PsLTSP0P4T4vYHs7+02SjFrZpES+PmJr8p2/dusV5uirl
R9yQ1QwT//MSt/MSmxbQnET/AMxmzLoyIREnCwq4n8We4cOxdtAgfMGeHeiv
h9mMtt7e6Fz7GQzR6nB62za87uWFY9vc5+m7776L9TNmYPOcObh27lyJPL1u
yFC8lTeSM/2Z+fOxUKfjMf3Ix7vAL4DHJcln9aY2UFvK9Pdwsk0reVrnXQeJ
8VH8ubMk6bQqfNLZgE/bBDno825mrOiQhLCQAPaaiM+7GIutQ9tpNSqHsoYP
64+BA3rZVJaPhnK9EcP7u1WW8nNpy53LckeOfKSDKqozNstzjw4MiIZKHYvh
e2W742piHW0xllE7lRGqScDIfdI27yxvhegS+MfVNhayV8UNwkF+T34LkxjP
hYWqkTB4m3QPPjgYicVsnRpWXxX0BjWSyGc6vBO2kT/H8XFIt3TEJt6uNzE6
ia2nS5dtr4yn49h56ViIm6yc42MToTH+O49JRmIMjOx6s83VY9Lr1YiOSYGh
2XSc59ucwvJsA2fc1otOSvxzJA+prNzUhOQyeFquc1gYtAZ9MX8PUYcEdl4M
bvB0ckICTDraTo8IaywSm4+wtXtMog4ap3pkRoc78HQxnV+ILlFqxvlx7BgO
lss6i839YqEN0yItbyveo2U31qJHpA7x0fEwpI3CodsSh17hvLkP05sZkchY
05zYA7PXrcP6qR2RblYjnfGxuKaSEugZJRG9Fu7mfer60VUoyM1ApM6Kvuv2
4sjaoWgRrkVEVBys/bZI5+7MNLRIcVUvLbROxztMFY62Mw9Ibby2HDlmFXRu
9BFdufunjp9DjVbDngcc/T3iic9dHlM19ML3/t116BFuRoc1b9ueSaamGZAy
fj//fGtjR1ipD5RjHPPIo4cRscJrjKfrK+Yk+sg83YSzdAM5T6LCRs2YmvN0
LbuNOrBmEweWdrYvF5c/gr1kefu7ZGmyW1cGTwt/D+HrQcuU8adFvDzy9SCe
FvGnyT5NLC3iTwv/aWGfJn+PqhTfY31mU8aiL2NGfR/GpY0Zn/phJuNpsgFv
zm6DozQPcegw7B4yBGsHDMBd2d/jEntuGKZSY0RwCM5s3YqC7Gy09PLGinHj
3ebpZVOmwFq9BqKrV8eOFSuKff8R4+2NI0Zg35gxODxhAg6PHcfjYpPdnJh6
pj9j6ib+KPBpwttAbXHJ08/a5yEa5XmIZJsmnk6Ii2L3tugSRXbc6+00uJcd
gHut/W3ane4PqzYIm7qm8dc96f4O39P677DtyI6sLKtvnx7o17cHe+3ONWrU
0FIl1pHW7+GyLOJm8V4p5fKSynJHzkyn0cRhpGyXKxqdwMozodls2Ra3swss
jHHK5kADu9+GK7bp/EDbRGrUjHFXFbMN2/loNlqZnP109ciKMfB2RVglRiT7
6uUFzRCRMQlnab0TE5DBuNRgyFDwNLvXp0/k8+4uL2gOvfHfeExiYdBFodPm
Sw7b3N7QlnO6UZuEcYelZTdWtUO4uS1WX6bPV7C7P7vnRGgQH5/qss5NrTpY
41KK2aDFebHGpbq0T0fptJxHu8/ZJtkrHXQI09P1xfabYQmHUa/g6fP7cPTg
bhSdOm3b9ua2AUgy0DFcLR3Da8vQ3qhFckwStFE9sJevdxwLmuvQNIZ+C7Ag
bcwu2/Ynp6bDyp4/Ung7Erg/d0Q4Y/QEi8M1ZbYkIqrnWsknugTd2tQVceza
NeriMHiPZDt/Oz8dUW7Uy7ndiRYL4+chOMrXOYzpjJ9d9xFnLnevf9K5TYhP
hNGJpy0mk1vHVMOuuZmn5PLatcaCt9n7m1JckwODm6L/LjoWl7CzZyRSozTl
Gsc88uhhRKxQv1o9NHhampPoI89JtPl71JDmJCp52l/B05IETzfhXBxUyy76
HFyruI06UObpIJmnJT+Q0vytK98+LWzUIk+i8PcQXC1YWvhNK2PmEU+T74eY
jyj8p6uSvwf5HFN8jGn1GyC/YWM5DrXk87GrZy8cGj0aewcPxq5Bg7C6b19c
OXbMxrt/sHb+zp4dPn//fXSqWxftvGujK81HZMfQ1d8v7Pjm6PVo7uWF5s8/
jztXrxZb5/qZM9gyajQOjJ+AkzNnYlvHHCzU6vg8SYo/Qkw9yy8QBb5+vA0u
/aedfD1EXA8d42kN4+n42Ej23GkpUSY25u/KCsMnr/vhk5ZNuI6kN4FFHYBD
vdLwWa9o/kqfj6b72tah9Xey7WhukrKsjh3aILd3V/Tu1cVt0fq0nauyiJtL
2l65vKSy3JHzPVOri8EQ2U51fEwCYzAjMqfLc9J2dUO0Vu2SqYyGiIfeJkqr
gjFnrWTfunMEG+ZMxawCu2aO64SMCCNjs17YZ7Nx6ZDJOCiejY1mSzKM2Ytx
nX13YnwSTBmTJZ4+Phbpeo0TT7PPzWZw++zZGenQGf+Nx8RaBk8zxoyMRUw/
+ff3G+sxYpjMg1cL0dmsRVZcOGIZJ7uqc6ZFi+jYlFLPizWGfRfVU+Ys8iMp
ztMRWg0ixRy9d9/E0tF90X/oDBy7XRpP65FuMTnwNPl7UHxkjVqDiJxFMpcf
wJRUrZ03GfuRX0GyNdGJ/fTIsBoZ78ag52o7j9/eOQjJjPUz4qNgiYln9dYi
kh2bVPbZfk1FwxhuRWbechw5ugJ9Y3SIzOqJgo37uL/Iu0fmone8DslRsYyD
B8o23YOYlq5zq17OxzvZEgmdtZ9cDh1Prcs+khlhKHYe3emfdG7j2XOEs33a
YjK7VXeDjjH7nCLp+WHlEn49Hpk0BNuus2O7ezZ2029AtzajL9tP0xhTucYx
jzx6GBErvPZ0XcbT9SR/j+pKfw8pzoevLe+45Dst/D1IgTJPc6b2auLEv5KC
ZRYOZswcbONqmaVlnubysvtXB3kpuFq2XQdXkn1a+E0LHw8R24NehW1aaaMW
TC18Pch/WvA02afJ34PyuVQlf4+1aemY/HJdTH+tAZ/fRz7JxKfkT7Gn/wDs
HzYcewYOxC72fk1uLvaVMG+QYt1NzsxE12efRVPGx4vHjy8x/p1y/aWTJiGj
lhffZlxSconrH928BTvGjcMhtu7pefNQaInGQr2B55mh+NhzQmSm9g/kbaC2
lMbT2VoLt01HyLnFhX1aJ9umtUxxMRH8ubMkRTHuGBwdio9b+eLj5j5cd7JD
cLx3Gu51UPHP9Hq8dypuZwfb1qH1B7LtoiKNDmUlJcSgV8/O6N6to9ui9Wk7
V2WV5TtSVlnuqLw8bSnhPqtycW9+oG10GuiTRqKI34/PYeeIDJhVYQhjz13a
yDikROqQaI2D3tQR27gP6QVs6R7J56CptQZYLfEwtpiFS2z78zMzoY/sip20
3o116B2l5v4e+adkno7XImbwG1IZnc3FmOXfckwyYin+ttbR30OnQjJxbmwi
9BHtsOayoz3z/OymiDGpkMTWiYlNdlnnzCh2LGOTSq1DSlw8e17Jxvprku17
/9A4qEP1DjxtVuuQMn6fVIf9AxCrCkWYIRvrrgme1kFtaItN16Xyt/ckplPB
oHf2nw5DqEqPtMHr8S5vz35MTNFBa/OHOIvNfYVvwjaJQW+uQ0/WhgiTBdY+
q7i/xt2z6/HG21J9D41L4fZ8U0I3zFy9GqsntUeKSc3aFam4riwwhEdAo1Ez
Ljcj0kK/O2nZeZJiaKQzVtSZrUjMe1NqY9EY/oync1kvjcLP5RQKWxtYmez5
echmaZ13N6BnBOtXbvQRVzxdUv+kcxtPObZ0qZhUJNvsx7PnVuqXbhzT2Kg4
GJsVyD758rNWRiz67rTHN3x/Zy/EGTRILccY5pFHDytiBeJp4UPt8zTNR6xv
Y+omNp5uaM/nItunlXGnbXMJZT9om43aS2bpEuXo8xEs+1MX87dWMHZl8LSw
Tyv9M4R9ml6JoYV9Wuk/LezTxNPE0oKnKV5eVfOfphhzk+rU5bGcZzRshBlk
nyb/acbTe4cMwd7BQ/DWgIF4s18/rO+dizVjx3GbtPPfu6dOIbduXXR69jkk
PPMMNi5ZUiwGNeUj/4k9r8xjjJzI1sthom2uFx0vVt6vP/+CbbNn463JU3Bq
7jyeF3FJRAQWm8N5zsb5jKnnqNSYExzKczpSG8qKl8d5WsTJk/Mhijh5xNIa
r5d57Lg49txZsiLYfSAMxzP88FFWQ3zUtD4+auaDT7KDpPeyPskO5Mv5Z7be
Mba+Qa9GbIxjWcQl7du1Qtcu7dGlczuXovXat3sdenYfdVXWoEF9SlXZZbmW
8+++Gmd21BRnR+dtnJnKoC9+by7vNtE6dj/Xx6HHylMKvruA29yP9Tw2djAh
JUoHnS4BQ3aL+/EV3LxyAe+fKUBLI9s+Oleyj+0biDhNONovOcHXu3N4ORYt
XIVTvKxLOLZmKQ6Sbezt2WgTrinmm/vvOSaMU2JKuyYs0BosyJh6QFH2GxjB
njUyow18nWj6Dd9FndMY88XGxpRZB53Bis6rztr2c+fa2/bYIIynwzUamNst
xDV52bVjb2DvW/slthX2aX0yJh4V9TyF9Tnh0Cr9PW69jXcunXXwuXjvzSFI
NRAnWtFhUZG9nbfs65zKz0IM1dHSHZs4vx/D/FZGmFrly/7lb2JcqsLfR56P
SHG43b3mYmJioNcmYqzsX1M0NhGxjMl1xpgy62Vl9bIff9Jl3Lxm/73h0uJs
xBhc95GkSFNxfw83+ic/tzH0bBCNHlsuyGWfxc7hiYyxI8use6wpjG0bD70x
C/Pk2JV3z05HM70K1v7b5Bgjl7Ar14LkCFW5xjCPPHpYESsQT9t9qO1xPhrb
eFqKmyfi5Yl8LhJLN+YcHaDgZ87TZIu2cXXpPB3iZVew0veDs7Tdz0Mqz/+R
86Uz8wrfaeJoYZ8WOV1IIkeimI8oYnwo/T2Ip4uKiqoWTycnY0rdV3j+buLp
fG6f9rXZpynu855+/bGrT19s6tUbi3r14vMIS7I575w2DT2efwGtmM4cOIAl
BQWYPno03tyyBTs3bcL0vDykBAUhqkZN5LzyCvrVb4Bd02eUaJv+4Pp1bJo4
CfunTMWZBQv43MilURYbU8/X6zFPQ3ZqNeYypqY2lJXPpY2Cp002+3RdG0+r
GU9bKT84e+4sTWTLTTcE453MRvgw81V8mPFK6WLf03qp+hC+XUllUay6jh2y
kdOxDX8tTeJ7s1H/yMtypWI8rXVkR/0DsKNeV352dN4mmj1TxFljGePFo/Ok
Qhx8+4KNIa6d2IxZ7SKQEqFBuDUehviumLfzqOwzyr7fn4+24WyfujgM4j6Z
RVjU1gy1IQUDF+3AJX6vP4Oi7RtQJPsIX35rDgakGpAYZf5XH5OUGFPp14Ml
ETprb+ySee366g6wMt5JYPca+t4Sk+iapyPVfN2y6pAQbYUhsjlGLt+JS4IN
b5/D5aLtWDM8DfEmFWPLWLQevQSHzyv8U945gZO7ZqNPghaWiGiEZw3CygMn
GYsfxdxmOsbTyRi+7aQt/ptgyavHt2HN1O5IN7HnCasRVnYM9fpYdJ68EkVy
PLn3zu/CmjGtEcuelXUU902Od3JzfRdpGWPIrmukZ4A7O/sjq2M+im6w7/dO
RGtWblnH1VnmqEToU6RYcfT7yOhEicdd1SvemuDA09fPnJCO7btF2LuwN2uf
FilWE3vuiSuzjySGF+/j7vRPcW4jLHEwxnXFnB2H2TPORezuFYmEcG2ZdU+y
mvmzvpY9S6VPPci/p7kKUeSnHdsfB/j5XYWuFM/PWv5xzCOPHkbECq8+XQf1
nXw+RBzqxtVFjI8GNqYmnnbwnZbt08Jfmpg62MbUEge75GnZPk2vISXYqgO9
pPUryz4t4nsIf2nh8yEkWFr4TYs5icJ3mmJ70JxEkR+R/D0eNzuXh6dXJzGe
rvcqpr3WANMbNMSMRk0w09cPMwMCsIuxM/lOU67vXb1zsbVHTyzt0hW7l6/A
n3/8USJTb500CQt79sKHjLktzz4HY/XqXKbqNWCpWROZ/3kRe5ctw/Xjx/EO
e/b48/ffS2bzZYV4Y/JknGGvW9q1x/LYOBSy+yox9aLwcCwymjBfZ8A8tQZz
Q1W8DdSWsng60sl32uDE09EWE3/uLEvh4TrGyME4nNwQd9PrSkqrYxdfVg+H
2PepjL0jzPoyyzIZdWjZIgvt2rbiatvmdZvEspYtmnJerqyyXEkbJuVQSI1U
sXu6FTqNlOMh2hSKWGsk49Bw/lmjCUN8dDgsjJWU2zh/jqmgbahu0dHR0BuM
0KjCbD4KYex9QoTafqwsMdBq1Yp8IirGFQYYohJgajYRx/m9eiumd4yBLiyM
/+5O+6V4BSL3OG2TSL4K1uJ1/TcdE1d9ISIqHhr5mBh09n0Kua5zuFt1iGLX
PuXxCFPka6HzEcWPL20fBb0pHGqVMnd4GPehSLboeBmmKKuccyeMsZ6GHRd2
nrQaB38WXi47NmaDGomM00TdrFYLY3ajLTc5Hb8IEz07mNm9NYo9ixkkfxht
GNvOzOujlWOj0LkwR1ihpvdqVh9Fua4VAY3RirTJ8u8A+wcjUSvxpqt68WPt
HN9DbqOJPfckKerhqo88SP906Cfs3NKxpv0nhIe6rLtD++X9mPWh7PmQykqQ
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
lm7WXObpLCmmnezbvCazKfYwVj67dClOzF+Aw4yr90+ahH3jxmPvmLHYO2o0
9ublYe/w4djL2Potti7lNd/dty9n6jd798buPn2xjzE35WbcnN0GS8IjeB3m
hoTw+hDnU/yRAj+JpQt4nX15W0rn6SiJp22xPRhPe0mx8sg+HVbLw9MeeeSR
Rx555JFrlc7Tsr8HY2ru7yEztX+NRrK/hxwnz0vE9PCVWNrG02JOoi9XmBNP
i8/E0sTUEkMTVytVuTwtmFc5F1GZH1HpR01MLXw9KE6e0nda+E8TUxNPHz58
uGrxdEQkZ1Ky8+Yznp7BxBmV8TQxK7dRM45dqNfz+NM0D5FYel1Wlp2l09J5
jOjVKalYmZTM5zCuYu8pR/mxqdNwbukynGZsfXxGPo5MnIhDY8fi4KhR2D8i
DwfyRuLgyFE4xFj76ISJODJ+PHb368fLXmwyYW5oKOfo2UHBPH4f5W2c6S+x
NNWV6ixs1NSW0vO5RMEseFrO42Lj6VoenvbII4888sgjj9zTqwqebsh42seZ
p2soeboht09zpuYx8hhP15Ri5QXLvtOCn7m8GU97y6+yn4fKialVNvu0K1UO
T4uY0+KVGJreO/tOk32a7NJC5Osh5iRSrDxiamGfLioqqlI8vdQcjnzfAMln
wkHErQGcYclXmXyWKZfK9k6dOUs7c/Sq5BTO0SsTE3mM6BVx8Si0xmAZE21H
HE45y/cOGYpDo8fg8NhxnKPfGjSI+3nQ97T9Qr0B89UayR4t+0lTHWhuJLdL
szpR3ZR1LZDrS20pyz5NLG3ylniax56W87g8Np6uFoxWuUuxYXgatE/A+OCR
Rx555JFHHrnWKw48XZfzNI/vwWN82Hma53OpIcX4CKghz0fkErGnZZ6uZY+T
RxwdSr4e9Ortz2Xn6OI8rVbwc0n26kfNl+TvoeRoWiZs0krbtHgV8xFFPhdh
n1bmR6QYH+TvUZXyIy41mVHgx9jZT/ZHJrH3+Uy0fBbxdEgo59sFWh3WNs3C
5jZtOUuTfwfnaNkmvSJBYmmewzA2VuLpaCuWRlmYorAkIhKLGfOSP/YipoUG
I+fnBTodL5tztErNY3cIlp4j26VnyixNdaK6OdeXllNbXPG0kXG0xNN1bDxN
cxFDHwdPV4/EtHcAFHWHqQLKC34mEu2zuiK7js9jH2skNYI1fR6O3bwPngHz
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
FI4bz23OKydN5sy8Zuo0rJk2XRJ7zzmafUfr0Lq0DW1LZVBZkm26L98H7Yv2
SfumOlBdqE5UN6oj1ZXqTHWnNlBbTHJelxLnI5bK040fD09XC0ar3KXYMDzt
IeL4euSRRx555JFHlaniPN24XDwtmJrztJfg6cYKnvaV7NPeUhxqEXda4xXo
4Peh9g7mHK1z8vvQ2fToedqZeYXvNHG0sE+LnC4kkSNRzEcUMT6U/h7E00VF
RU88TwtfD8otOIRxaffISM6jubHx6JeYzO2+k7t2w0fsGUHENRFxTkRMbmHH
V0rkahfriLmcIsekeC4RcbyVuSbFvE7xbCLy45DN/+bNm7hx4wauXbuGc2fO
YFzHHF5HqivVmepObaC2GEvJk9ic87S/zdcjKNCP5zUSsacpLnulX5MVHM8r
+JlItM/qiuw6FZ9b9cHUCNb0eTh2874Uk/WvH/HF5b2YEVbOeKoe/cvUAOaE
tfj4j19xc3Lqo53v51GFyJ2xpax1QuoPg0OI8yc5hmG52+7pz/+Lkni6PuNp
yuniY4tBTVwRVKrPhzK3Syj39aD3kn26Sak8reb5EP3tvh5esvj7YOifIaYO
5jZqIcHTlRHfQxkrT0gwouBC4T8tWJD4T8xJFL7TxIA0J1HwH/l7PG52doen
KTYG5eselJqGruZw9IiKQm9rLPrEJaB/Ugr2bthoa6+SqYXvi5iv6Szx/FES
RytZWsRIEc8l4jgKlqa5neSP/u6773KWfuedd3D16lVcvnwZGxct5nWkulKd
qe7UBmoLtSm8BJ5u4YKnfXyc42Y0hCG4K2YVHsO7937G379dwcRGJY2nDaDX
TMTZH/Hg+REr6N7iKn9KZSvklT44/Rvw07H5GJ7SEh0ScjCoywC0r/uk8H5J
agBt0CDs/RS4X1J+3WqhaDd0N27zXBL/4Lt39qAguoRcCa70RJXjg/DwPGw+
ehff/yXlkfj2+gEsTNE55kasMPkgtus5ns/jl505VYarnkyVMv480wI775cS
tETkpi7HftwZW8pcp3ooksKSkKXviMI7FTHmVcL47Hbbn7D+XOljgosxs1Yi
lnxQvBteaqt6tLEoH7FsPN2oonha6e/hZ/ef9pZjezAVY2kmrXcQ4+kgztQS
Vwc5qLJ4WtiphS+10s4q/KaVDEksqMw3ThxIDKjkaZqPWBXs0xRvjvN0Sio6
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
4SBfDuHPIezQV65c4esLOzTti/ZNdRD1obodLyridaU6U92pDdSWsng6KMiP
26jplX6TCWDPkv7smZJiR9r8p59tg/0/suH6wDwMT8pAc30LDJlxAb/hJxxu
JTMuu9/HdSnCD59vR686Dfl1/FA8rRyDa1gx6waNfaORUF3aV3xvugHd+v/s
nXd8FFX3///7fb+PBMQAAUUpQgggIcmmN9IICUlIJfQACb0GBBNKkCZF6YpI
kYgUEbAgSAcFFBFJqA9EAYUHEOk1dMjnd8/M3N3JZsvdZLMk32fj6+Muu7Mz
987cOfe9Z889R2vHvN1n4SyzLj938ipmm0z9LqlxHo0jzx7jQK8A3fxWxRvv
/PAUOD4ZsdKxNMjc9gT4ezUGNyz7b3HmfieVefoBdsW5GZ4bXMbhOOv52clt
dX6VV2KxkOatA/LcINnZooMYWZc9j9+BR0V5yH7DGYGxW/Gg6BDGNiiFX8LI
3OATsISRfCG2xfiiy4fE9dfxdYQ/+q9/AJxbiA6OYvuvaPspsV+3sdjLhvPF
BV0QXEX/fRdEtJ2Mz2a/h75lGSOmuKpWJ3xzDXi+fyLijMyDQtfd0P1VIwFL
GbYU7R+NKGG2MH9fiNxfmiZjcayInddZqnw+dfpg/zMdT8v3jJE/bdyzhfan
Wiim/vYcODodCS+Xz70suo2p6y7Ud1vaZyv1S2SsiowfkfPzYmxCY5M87d1y
Eg5cuI0Hz+SmPrtwAKvTI+FnaD9GJGbnrTt/mZNz4zcVnlbnoG4mcYUU86Hw
RvGYj5K5qCmmmniaYj40js3gWaM5Y+m3lDx5POZDHS/txvhZlszUMjMH1uQx
1ApT19TFVZc3X/Lc0zzeg/tN6Tn3o5J4TLA6/7Q69pd4mjM1+U3JP12Z4qff
jm6Lrq4t0d1dg56e3sjw8ZO+E5BobSX1h3KWGOJrfcbmItYWkfozfD98v/r8
TG2gtlCbePuordRmajv1gfpilKe9FZ52N8zTzRSe1jR8B8fYPX9iUJDOrlWP
xoLTbH7fPQShzAZoGgzEzpt3sDuN/95tRZ5+qQXSFl4F7n2Pvk7ya5pGWcin
OXd0azbnuiBqwBEUPd2PUQ2K5yQxZfcD2n7PrKyRv8srkVZD2YdHDnZeoBdv
4OT6XHzQPhpBpfRplJWnA2M206/hWBuqjr92Rdoidn7ubpTOTzE7G7cND4vy
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
lbfHLPz59CI+D6wY9VrssqtCy8r1kspFdfrjYJl52i677LK1jPN0M4t5WsN5
2rE542jG0zVlnvZVeFqK91CzdE0lf4eap2spPK0nW65HVK9FVNdHVMdRE1Pz
WA/Kk6eOnebx08TUxNO0Zq4y8XTfgEC0rv4KIh1rILqmE6KdnLB27VqsW7dO
UosWLXB1XVdZX6Xh6tfdce3rHrj2TU+mdFz7NkNRL1xb31tRH52+61tc6vf4
9vRZvh/aJ+2bHYOOJR2THXv7jESpLbxd1EZqK7WZ2k59oL6Yj/eoXDytqd0a
3UKSkJY4ARvPPMOtdQMsrm1ml13/lTLH01VaIFITb/j3c0nxSGnsWr41ke08
bZddlVLW5Wkl/7Rjcf+07Js25J/mPM04ugbj5poeKv+07JuWeVp+bgue5jmn
+SMxND3Xj50m/zSvnc3XI/I1ibyGIPdPU26KysbTofSaQ1VEVKsucekXX3yB
1atXS2rSpAkufuyPiwsCi63ZNCceO2NMluyLjk1toLbwdlEbqa3UZmo79cEc
T0vj29BaROLpphWTpwMiv5RruT6/iZOrcpDq9KLr2dplVyWROZ5W1lCZ+ru6
IFkvTtbKsvO0XXZVSjVuRDz9prbmeHN9njawJtHTU1V7XGHqYv7pVyhPns5H
7cN5uqYr/GsV90/znNOBClMH1NAguBbJozhPO9km3kPN0fQa90mrfdP8ka9H
5PVcuH9aXR+RcnxQvEdlqo/YPyhYYlGJqavIXLp8+XKsWLECK1euRIMGDXB0
ZDAO9HTHbxkaJk/81ssLB3t742AfHxzs68vkh4P9/JHXP0BRoKwBRsTfV7an
z0r7oH3RPtm+6RjSsdgx6dhH3wmW2kJtorZRG9VtJlFfTPK0UgdUqjOuWotI
a3ObVlCetssuu+yyyy67KpYaMZ7W5fiQayQWW5PI6467qdck8nWJHsq6RA+J
rz0cdfHTnKeluog1uX/aVc47rTB1IGdpgzytE4/5sIV/Ws3VnKe5b1Vd/1pd
A5vX3yb/NK/lQuL+6cq2HpFijvV5etmyZVq99tpruLSmD27vHcM0VtZPObjz
0zhZP7+raLxO+yaISf0Zvh9lv3QM7fHYsS+t7i21Rd02fZ42GT/tHaLw9Fts
nBeP9aDc05Tz5kXfn3bZZZdddtllV8VXo0YNFJ5upOTM04v5aNlc+5u4zket
y53H4z4oBsTDsalcG1HlnyaW9lFiPfyVvB7cP83XGeqYmj2v4amN79AytZP8
WN58yWuCc1+yfowBsTT3TfMaiXxNIvdPk2+aRPHTvJ5LZVuPODAkpARP5+bm
Slq8eDFeffVVXN4xsqR2vsOUpShb0pVdpFEWKlv7ed3+3jF4TGoLtYm3T5+n
qS92nrbLLrvssssuu8pT1ufp5vJ6RKo1zv3TPHZaYmq9OA9FQZKIp0v6p23F
02qm5vEeJGJoXm+cXieWNpQvj69JpPweFPehro9YmXh6cHh4CZ7+9NNPJW79
8ssvkZeXh2PHjlms48eP49///jdOnDiBgoIC/P7771I9dvLh64tep/dpO9qe
Pkef198ntYVip6lt1EZ9nqa+mIr3cPnfN9Dkf1+HM1Pj/62LRv/zGt5kavg/
r6LB/9Sx/T3p4IGumZ/iy7GJZcjja5dddtlll1122VKv/79aqPf/nFD//9WW
+IE4gniCuIL4gjiDeIO4w+V/66Gpomb/qo/mWjXAW0zE057kn64h87QP42lf
ztPauohu8K+lx9O1dDwdVJOxc00dS7eq5ak82o6n9f3U6lgPntuDfNPE02r/
NI/3IJamR3X8NN9nRZIxnh4a0boETy9atAjz58/HkSNHtD54EdH3Czov9H2D
x8Xwc8fPJY9P53HrfN2n/u8A9Hme51v9W8DRo0eltlEb9Xl6qKn6iN4hFY+n
rZzPy6NWGNJT+yOtnvVrq5ZOTRGZ9DH2FNyUc7I+u4fLR7ZilpeF+VTt+j8m
Z7SKWYXzTx6iYHpC+a73s8sqErEtprbRNB6DYumMK3IOQ4v7bh/P/42yJk/z
XHleKv+0b01XSbzGuOSfriX7qAOVfB5Sjjw1T6t8062cZP+0LXiaszTP6UF8
R2ynro/I81CrOY/XR1SvRyQfNa83TvnyXjQ7W8LTmZFtEOZQDeGkKtWk5598
8gnmzp0r+YP37dtnVOSLV4v6vmvXLq3o3/T9gmqw//TTT/j555+LfZ7+Ta/T
+7Qt1RLfunWrVPuQ6rV89913WL9+fbGc07QNtY3aGKa0mdpOz6kvpvJPW8bT
TRDo0R/zcvfg94v38fzRUUxtasieOiPAdyoO3EPp6yNaaW4xVz/F1tI0HIb9
j4DCPQswNr4zMmJ6I6vfSKTXryi8b0jO8HPPwta/gZuGauc6eKLn6E04JdWS
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
02QsjjG0uDhLlc+nTh/sf6bjafmeMfJ37Uv0qClfA7P2xzEey86xz5xcgoFN
3mJ2wgWBzXrIscuMq8T7LnYvi25j6roL9d2W9tlK/RIZqyLjR+T8lItNMMbT
QteCtds9BzuoKbdP4seVW/DHvQc4MaMrQiyInxaz89adv8zJqjxdU8fTFDsd
qPA0901TDZdQSYyna8tMzXma+6cjtCKe9pFZuo5t/NP6PmrO1Po1Ennuac7U
PPc0j/cgnqZ4D+Lpyph/uqfGEymNnWWRn5qpXf03EVWvPmZPmapdf6gvHldN
Uuf74M9JfC2jek0jj8NWx46oGd0Qn6v925NGjUICY+fEBo2ktlKbefupL2Xl
aU3Dd3CM3fonBgXp7Fr1aCxg89Dz3UMQyvhC02Agdt68g91p3PdjRZ5+qQXS
Fl4F7n2Pvk7KXN0oC/k0545uzeZcF0QNOIKip/sxqkETYbsf0PZ7ZuWM/F1e
ibQayj48crDzAr14AyfX5+KD9tEIKqWfs6w8HRizmX4Nx9pQdfy1K9IWsfNz
d6N0forZ2bhteFiUj9H1nOX+Fh3BuIZNLG+7WZ5uya6dBtFNPeH9klsZOLhi
7EcnNj/5T8EvbChf/yYLcaVgD/Gxb5w/vNw+kHy2x/sZjycRuu4G7y82fhbL
46ePkwVj2cx9IXJ/BUjj+RrWhanGsx5Pe9QMRIp/IjoHGpBXMPwdRO0Pu5bB
07D7fJGqIU+l/z/Z2htBVr6XRbcxdd2F+m5L+2ylfomMVZHxI3J+rG8TGhv/
vU7gWtB3m9DYJTh55zJ+njEZc+Zuwkl2KfCfDRjbXDyOX9TOW3P+Mifr8vRb
8K2p4+kgxtPBKv90K8k/zXlaXocYQeI8XVufp4mlfSRF1il/ntaP9aDn6lou
nKXV8dM83oPip/maRGJp8k9Tfo/K6J/u6aFBe2dntG/cBO0bMS5lSmjYCG3r
NUDkG/URWvcNBNWtC/9XX4NPnTrwql0bnk5O8GByr1ULbkyuNWuiRY0aeIup
uaMjmjE1Jb3yClwU0fOmynvNlW3pM/TZlky0H9qnhomOQccKePVVBNd9HWGv
v4E29RugHcVLS370xlI723NR21kfqC9CPO3ghpS+s7H8W6o3vgmr509CP1/5
3vZ4IxOH2N14bnK0Loa3ihey9kHyE8RVc0ZYz4PGLB+bso5gsovgd2Nj8/0i
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
46BP8P1Px1BQUIBTpwpwZPd6fBjtrq037l9Lye3B807r8XSolqc9i+X2aK1V
cZ4mhm7DeJp81FHs0VYszXN6EEeTX1pdH5HnoVbHe/D6iOr1iOSj5vXGKV/e
i2ZnS3han6srq8z1T+ufNlcf0S677LLLLrvsssuESl3P5V/10VwrHU/712qh
5PVwk1Scp90lntb6pevoeFoX46GOmfaWOJqYOurV8udpztT0yOMzeL1xdb48
euQ8zXN78JgPdb1xztOUL68y5Pf4b1MnO0/bZZdddtlll11WkFV5muI99Hg6
pJa8BlGqL674p9U83bqOzjetZeracty01j9tI54mltbnXs7Sat808TSP9+A+
anVNFx4/zXPmVbZ4j/8a/7RgvXGbysEDXTM/xZdjE8uQx9cuu+yyyy677LKl
rO2fJp6mOI9gJze0cpJ5Wso5LXG0xjBPM8l+aVltavMYD7V/2nb5pzlX8zgP
HvfBfdSUK4+vReT1EfXXI/L8HqdPn8auXbsqFU//V8ZPVxSetnI+L49aYUhP
7Y+0etavrVo6NUVk0sfYU3BTzsn67B4uH9mKWV4W5lO16/+YnNEqZhXOP3mI
gukJ5bvezy6rSMS2mNpG03gMiqU4r8g5DC3uu308/zfK+v7pt4rztJPOPx0m
+aeV+uJ6PN2mGE/7SEwdVUeOmyZF28A/zesj8thpeo3XcuFMzdcj8nouXDze
g9YhUvw0+acp3oN4mvJ7EKu/aH4W4WnO0W1r18ag8AiM69QJUzIyMGPAAMzN
HIYF2aPw6bvj8fmUKfhi5iys+/AjfLtwIb7/7DNsW7UKu9auxZ716/HLpk34
bfsOHNq9G8d+3ocTBw7gj/x8nDl2DGdPnsT5P/6QRM/pNXqPtqFt6TP0WdoH
7Yv2SfumY9Cx6Jh0bGoDtYXaRG2jNlJbqc3U9mjWB6H8HsI83QSBHv0xL3cP
fr94H88fHcXUpobsqTMCfKfiwD2Uvj6ileYWc/VTbC1Nw2HY/wgo3LMAY+M7
IyOmN7L6jUR6/YrC+4bkDD/3LGz9G7ipX1+X5OCJnqM34ZRUv6AIt/+9GXNa
G6iVYE4Vaj8uCAkZh3W7z+LOM7mOxK0TO7Aw3r94bUSryQVR/Q9K9TwebOhd
abiqQumVWCz5q2Q+ksM9vHX5/aw1xl4Ssy0mt6nmiTivOKQG9ELuaWvYPBvY
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
u+GPx8DnExPgXcpaKei6lzS/GvphOcGW/BMj4Cb4fqP8eSFkfknEo3Axn3yv
s+Ty+TTrjRN5BTzNz5lS/h6vR5T0/tCs40ScuvcCb/P4t/LuncK6GBdYFrte
pY9nZc5loceUdd0F9b067bOS+iVkrAoZP0LHhjKvu0R3CM5Kxxjen8cvDkbF
7t2EHFOWhNlw5a5NylBV8TSf14Pfj+hCRHnaXbNIrAfH0zxTe5PXOJaW8rSP
jKWtq42nabyHPEfT15hPWt43zR7ZfkRWz4X5p+XrI9IcHzTeozbVR0xycUVn
dQ10IerVuiGOB+riRqgIN7uKOaaWxXz0pHHUvI86U+qjvkO4+p8ofZzppo/F
fZ2waLgbZo4JxHeEk9UifoV65ArUiaJaKdUKqIUtwbf+s/GNH2Fon5n4mnE0
Yeivu4zBNw4j8K3t9/jObhguXj6Mj7lH8TknGfk5Pvh43RX5b3ci/8Uc3Ett
iyGdPTHHpzHXdtoH2pfSeLqHHE8bNHVARMI8bNjP10f8TY6nJbrf4yIxC5cT
bAvsWj13LLxB1vfD/Qm3k2NaxePAs5c4HMF+71YiT3/XARGLcricJn2k9/iS
NsNwhq65I5zJmqsPt37nkf/pBIa3Egu2+9Yef5IVp5S/7DWIaCg9h/FoHLhH
X3yKK1tTMCPYHbYV9HNWlqdtPHfRX8Ox0VE+/toQEYvJ9/NqB/f9FLLF3nvx
Lv8MRuiI+P7mn8cYXbHibS+XpzuSayeBu4EJzL7rVAkOrhnnKRBZw6wm4zgZ
yk/+GAbvCrCH8LFfOn+YdprB+Wwv9S09nkTQdS9xfpHxs4QfP70V8KGVNy+E
zC9rbjw/xqbOcuO5CE8bN7JBkJU/utuUIFM7WKkXbZs+rA1CMWHFLeST+6lt
3ibFWaaW8LSQvlerfVZSv4SMVSHjR+GxoQz/dB0jeJkHoXfoGKw+8hz49A8W
WRsqfkwZEmrDlbk2KUPK5emOcKQ8La2LyPumTeDaVD7ntJlcrmk+3oP3TRf4
pyk7+2gyprbm5KNpXS3+aXmuZjzN6o+zOGqWK4/GejCepo/UP81quVAx/3Rt
2484yN0DXerUhRORf5P6uBTaBteCRbgRLOaY+nY4Ed2XGMvHUTMf9dVofew3
0ccBojWO5mjkPg4aXlPQJGAK/jdkIf6v6y/4KnQRvuq2GF/L6avgn/G1xxR8
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
S1XC05om0pqIZtJYD56n/TStZPsRKU8HyliaV7B2AUMHy3zUPEsHt6h6ni4a
60Gfy9dyYSwtHz/N4j1o/DTbk0hZmvqnaX6P2uSfZjEf9lKmtvr2O1gQmdcy
0TbTtnP3BaXEetRYnlY3RnjSMqwf5V+JPL4qqaSSSiqppFJ1Stk87VaEp72l
8R4+0ngPP21LLj+eH+Npacx0UZ4OoY9aBTwdUg08zZhXfi+ifH1E+ThqytQs
1oPmyZOPnWbx05SpKU8fOnSoVvC0PFNTny6Nk7CVsnVtkq207Q5lsHSN5Wkl
5/MybtwZMSFxiNBRfm3ViskALgELcCT9GZ+TNe81ss/vwSxTBfOpqvQvkwj2
nmuR+fEd0qf5Ve1+P5WUIiG2paxjJHojUSgddk3OYahw31Xj+b9RVcbTmoyn
zQlHm/N7EeV42l8uRx6N9Qgq6p/WKuyfri6eZjmn2SNlaPq8aOw09U9TvzQT
jfVgexJprjzK1Mw/nZqaWmt4mjE142pHad4Pmm+udqig3Z3LYGmqKCtFeVoM
G+M4zEs5gqtZb/D5/QVMMSjJnopgbTEFp16j4vURlbS2lFc/pbol0R2IE++B
3CMLMcq3O2I9e2FY36GIaVlTeL8kiWBpNAx77gPPSqqLq26C6BE7cZ2rJZGP
F//swhznEmollKcadR59ODiMwabDGXiZx9eReH55Pxb5WilcR0/o57nFnebq
ebzd3qvWcFWNUn0vLL1dPB/JuSgzaX6/dvAKW4ADZx+Br27xkasV9ZO7eYVq
8AixLWUeo2ECb1NvhFj3RMoNZdi8arDPgvtew8ZztdkEYXbDuIk3JqScwaP3
/DHPLu7GPLeKjcOapCrlaSLeL83LT1PK0rJ8HgX7ETn/dAsqqX9ai/qo5VRN
8R7yHE1fYz5ped80e2T7EVk9F+aflq+PSHN80HiPml4fsSyurq0qr3+RivC0
miGCkvbi0bscnFkxF5PCoxFj6wan+sVz1ZkbT8CJFx/xQsXTxdtjuwKP8ASb
uxh+8bYIkalOIEbPPsznJyR/z4vxtD48E2kt3zc4OzcZSSHJWHnsDfD+BCYW
reVbpmrYeeq5YPbfz5CxdQEmhMYgMXIqdlwna/GH4xitV0X3PnWM4GvnD4/G
qvyPFVKjYGzMBu7O6onuslrinvBqxq6XPtwjV+D36WMxLCAa/aOnYXs6gZ43
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
wXUOjhUcxCf2lpL46dYIn3oKV39Ygfi3dPG0i5KnY5q4qvLkNXNX5McT64xz
lhZ4WsLUPQSW9kKiEeI9OFPzvYj8Zzx+muf2UI+fJh81901z/ylxH8VP//TT
TwJP16T6iH2dXRDatAXCmjYXFCqoGWr5DlRq3759gkrxdKfeBlF5PE3i15e2
idoYqmiz2O4WQl8MwtPVVA42s/DzyxtY7VY96rWYZFK1loHrJVWJ3hmAU/ry
tEkmmfTaZdEoEB8tm4VUu26YmjMLg/ssxJezExDSbz1yP4+Dw784Tx/Cp7J4
Wj1+WuTpKIGpS8d7iPsP3RU58tSYWhLvkWCk+Gke78FjPehn0vzTPF8exXoQ
T/P80+SfJpbm+ad5/DT3T1O8R03K79HHyRlhzVoICm/+PkLZ99BmzVGrS5pS
e/fuFUR9fR3i15e2idoYqmgzbz/15b+Np20bdUEPr3Akhk3ErivFeLAlVVF3
yiSTTNKp8ni6djv42oZo/vxcUAgiW1lXLG+zXJl42iSTaqSamNlj4LylmD3i
U6yaHALbJtFYsDUHc3P2YNswT3xAexEV8R770j3KjfcI0eCfFnN7uJTh6bhm
om86QRI/3UPhn5b6poXvRvRPcx81r5PI4z04V3OW5nHT0px5xNMU+8H3I/L4
6ZoU79Hb0QnhLVoigklgUyb6d60uqUrt3r1b0OviacppR6rlk6pUeAtFW5mE
tjNRX+TwdGvzdnBv4wJP60hM2bgHm7Ij4NmqEjXEqlCuvhvF+tev7uPi+mxE
N3zd9WxNMqmGqDyeVuw71fV1Z1GEWpysgWXiaZNMqpFq8r/vI3jsCqxbl4NJ
bq3w/j/bIGbGTuTm7sfnvm1E1pDsR1yWloQk/xRM+PyY5v2IQr1xYunSPB0j
4Wmx3rgi1kPIOa2o4yKJn+4hye1hrHgPvheRM7S0zjh9575pqY+aMzWP9aD4
ac7T5J+meA+qO1KT4j1S7B0Yi7ZiTPq+wKhctXwGKPXVV18Jon6+DvHr1/Lp
r5S0rWLbWwl9kcPTH7Qfg23sOeUq8k/v2LEDW7Zsee3z0ySTTDLJJJNMqv5q
8j/vwiHmU6z7fBC861K+vPfQznkiduSuxqCWTVX5p+vYIGHICuw/SfnyCnH2
wFpMC3Asky+P87S6fzqG1xq3EPPk8dhpMde0B+NmtfjpZiJPCyzNjkkyUn4P
7p+Wxmdw/zR9J4bm/mlp/DT3TxNPc+YjnqZ8eTUtfrqXnT0i3m+JyPdbIbKl
Quy1dM/grl27qoWkbVJvL/WB+qKNp/u7dZZXb9wkk0wyySSTTDJJhwxZz0UZ
76Hg6QgpTzflPO2q3I/I/dMU79Gjmco/nSjhadE/bRyeVmdeHjtNHM3907ym
C4nXSOT7EXmOD2m8B/F0Xl5ejeLpnrZ2iGxlKSjqfZVqde6r1OvmaCVPS9ok
bStvP/VFO09riJ828bRJJplkkkkmmaSnDMnT3aiWi8DTDgizkPB0UxcVS0vy
e8Rzn7Sw39BDIZGliakpR57KP22ceA9pfg8eL81jPrg4S/O4ab4nkcdOU/4J
ivHl9REp3uN1s7NePG1jiyhLxqWtWiOqpaVSb7lGGyyHh6FFbZO2VWg76wP1
RStPu1dDnjazQULGcmwcG1aJPL4mmWSSSSaZZJIxZVj/tMjTYeSfthDjPaIk
8dMiT6vlnRZqI3qKvmkh7kPln6aYac7Txoqf5n5qHkvNfdM8vwfFTRNLS+On
pfXGyT/N98xJ643XDP+0mcCeie07INqytcCk0ZZWSjlZu6GWV0q1FLVN2lax
7a3Rw7q9gqfNagZPGzifl83bndEregCbQ4avrVoxtYFv+EIcLbwv5mQtfozb
Z/dhlr2e+VRN+i+TJTwD1+Pai79ROCO0avf7mWQQybEtuo6xbTUGpVKcV+cc
hnr33TSe/y+qKuI9who7IVzwTzuVip8Wcnso4qfjFfnyiJvjm3kqfdOJpdQJ
SUbkac7SnH25j5ozNa/pwuM91GOn1fNPS+sj1oT8Hp2Y3Bl7UpxE97YfMB5t
g+jWKkW1bgvn9u5o4BL92vmZi9pCbaK2SdtKbac+RLRsJfSpk0F4ujXcbAZg
Xs5R/HjjCV49O4dpbTTZU0u4Ok3DyceoeH1EA60t5dVPMbZsWwzB8WdA0dFF
GBsSh5TAPsjsPwK9mlUX3tckSzh3zMS+m8B99XrjJDM79By9G5eEWhIl+OuH
PZjTRb/aBNXvPFbw8hqHLUeu4mGxWEfiwYVcLA5xKV0b0WCygt+AU0I9j6ea
ahSbVL7eDMKyX8rmIzmT7KCW30+uHdMtObZF5zHmdgi2D0a0a2/kXDaEzTOC
fZbd9+o0ng04l8u1Lca2G9VLhuTpEIl/WuBpC4V/uin3T7sJ8R6ib9q9bA0X
9u/SPO1l9HgP+s5ze9BrXhOR8zSv5cL3I5KvmtcaJ980z/HBc0+Tf/ro0aOl
6sNUF3mr8SUxpwf5ct+sj8QOHRH3wYeIbdMWMVZlFVtNVLZtbYQ2U9upDx7m
dYU+dVLrq8jTeuxHrG2NyIz9+OPvOyhYNRdTEnqil7sffN4sm6vO0WYSjv/1
An+ZeLpse9xX4Q/cw1ZtdbOqmeybRiB79hExPyH7elCGp60QOJBq5z7B6blZ
yIjOwupjT4BnxzFZj9q51e489Xwx+7v7uLp9ISbF9sLApOnYdYmtoc+/RXar
KnrvU6cjQjzCEPC2Kf9jhdQgCptvA7/N6o04ZX34QAS9I3leetix8lRpnuYy
98L0c5W0ecayz/r0q7qMZ4PNZRm25XXYjWqkqoifVvqnhTourohuKsmVxxSv
8E8r8+NJeJq+Cz5pCU/Tv421H5HXc+H/5jHUUr80rzlOMR/kn+Y+apK03jjf
j1gT6rkoYz7eEGOoPevWQ6Rla4FJaU9fTRK1OaKVpcDSQqzHG2Vjp0kDZPun
LeHmvQrXHxZgjnN7nbUcbJv0xJarT3BxWhIyNlSgnq2yHnIhCq8/Exjuxc2C
UvWQbVsMQz577397frjkc0QbpO98CtzIQVx99u+3u2Pnfc35c59uS2L3hV/P
Cb1Hbcf3t8QassV3C3FgXAI6S+rD2L4Thulrz+B3XuT51VPcO78BaY31WCd0
tOeXbF9lnl3bxrGYuSQX5y7fRREva4uHODPGT1lPnOqND55+ED8/gOgjuZCL
JREeyt87Oc/BiV/Fxj6/no89a/JwrYg1+8/z2BDjqoefhL2f/OQy6+tuLEzM
wJe3NPB0/RCsvsaWlP0Z8DHjz2cIjv0N3JrdTUe9YzVVt/Mw2Zi3LeXTdumy
GQ/wCHv82pc+lmoUr614vXH5n/t/AP/QT/DVt9fwuEQxFB/fwImJwUK/ZD13
MyekLziJX+/wmtsvce/MbswPdtE717OseSFjfnWs64rUibtx8TYf8E9w5+Ix
rAlz0u9eNkzGwaJi5Mdry5sv345VdC4rbYtc+yPco8rytBHts4x+yRnPsm2U
nPFjyLmsSzJtiyGuJff+GGRtMqAMzdOhmvzT7HuskqfdlfEeCXz/IcVzNFf5
p8kXnaTg6SRFzjxj+Kd57mke78H3ItJrHutB4nsRpfmneW4PHuvBmZryT5N/
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
95HJ09qeu8z3q7KlY17ImV+Cv039/aEaT9NzsDW3gp0m1dExlt+OEeJwirYk
wvUNOXbMsHNZ7jG64z3K77tR7bM+/dIxnuWMVXn2We7YqPxclm9bKn8tvWy4
gdYmQ0jJ0/+0RPCgxdi2LQcTO7WFpZSnzT0waU8BTi1OgPMbYrzHhxTXf/Fn
nMz2QUeJfzpUzT8draiN2L1p6VouCZrip5srYqY5UzftxHhazJmX3KyzURhT
6qPmTK1eI5HnnuZMzXNP83gP4mmK9yCerin5p/8vSsrTba0ysIm971k/MgUx
Hr7oatMZfq6B4jypH4o11+mz5tEqm8H4ai372dMdKXAnW9PIC2GlbF44xu1+
AtxYjyGOXvCQu1ZpWu/rB2PJZaDkxJhSPOTquwH38Ac2RQ7F0aIXyO9dljUc
nRbjJh5jX2BZPuWfNd+cF6nc61i+LOFsPwMUfnJ1vK/ee7gMFe/x65RAWfEe
0r+tCp6msSHs0dk3CN58j07zwVr2/1nBx38ycjTFRVS38zDZWQ7DkYfA72vT
4Ktz/Oo+j2yxtTn7JK3N48pyf8Pu2H4PeJGXjaC6mv9e1nOXFU9VEZWdF3Lm
l90HkwVG+WVCVxULVjDeo4zYPftSwtNy7Jg+fdZlW/Q5pqOZKybms77kj4Kv
mq9dVt+NaZ/16pf28SxnrMoZP3LHhkHmskzbIv9a2lUxG165tckQUvJ0HScM
X7FF8MttHuqBthKetmreB18WFGBzmC28e36BgoJtyLZ2wqBtP+PqVwPRqTb3
T9szlhbjpyMsnCQ87cJYWqwzLvinmyniPRTx0zzOQ+RpTxVPK+I9ehJTG8E/
rR7rQa+ltVw4S0vjp3m8B8VP8z2JxNLkn6b8Hib/dPX1T6d6qvP0fnzi/L6G
/B5tETbme5TgCU5+lIZk93iMW3IJr3AD67217VmuZLzHlZUYG5qE1O7ZWHWI
gQSz3pv91fZL1euKebSR/AF7V/70G2Q1L2tjbJqk4uhT4PmpFZgQ1Qvp3Udh
Zl9/MS9IbRukLGAGkvHrxTWfYFxsCtIi0jEhayqGWPG9Ix3Ra/pmrMkaivSu
kUjwSsDwMfsZxxfjdH93g8dclsfTwn7E5eJ+xAMThiIjegQW7riFMvsRDcTT
NvVdEOYQjGjPodjLHkPRrkwkOgYj3JLvqWqDoEGUQ6oI+Z9mYnBkJnLyitii
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
6pjctjpCGtRE55qfwItxaLKNbCRbyWbSU2vL8THWS8GnK1kjevUh7PsuAcEu
nvBx7oFhU79HWtpccZxU64qVV+hZc4LKHzB+tYp99nRTODsO81mfuKJbIZ/n
h/FbnwBX1yDW1hXOxjLHpKb5vpoPFucABUfGFvJHDh5r2R39LXwfMBz7814i
q39RrmFrtwjX8BjbvYvyU/6s+dq8AOVaRzl+ta3NdJD85NIED53XcOlL7/FX
ircsvYf0t2+CT1PfENbfbB+K9lynWm9YMWt9LODuNQmpmnQRFW0/DNZmI7Dv
IXBj1WB4lNh/S96PbLB5NzGT5t3xRefdmj2x8S7w8kAiOlfR/HtZ112Wnqo0
KDou5Iwv66aTBP7x58SOKi5YGr2HDB+lW9/QjpJ8iy7btDZyQFIWa0vWGHgY
Ff5OX23Xm3/WqV3F92c5fVVO/5F7fvThE2Sdw9L2MTa+fygDny52vMsYp6Ub
75qh1/wetcX4dC9JfLqvcj2ig1hv3MRJyaf7C3mnXRBhqsqX97b1HgSe04N4
NPE5aX1Enodaqvfg9RGl6xEpRs3rjVO+vLfNneXyaTcJnw6zaQM3o8rCvzl6
f/oBZrf9F+Y4fIAdX0/GuXPnhHPB67O8CdB5p/P624nj2JM6Gwu96rLjf4gp
1h+gX10juKvZSDaT7ZxPF6f5UManOZ/+shtaKPQeDev0xry0NMU4aYJuY0+j
AE+QOXkwQpx6Y/ziC3iNq1jTvmUxY6uMeo+L32Bc136I6pmIFXsYkWDee72X
2nqpqh0xjxaS32d33E8PIr5eUf9hWScK+58CL44ux8TuYYjuOQYzBniJeUEq
WSL8K+b8GH89u3ImxgeFY7B/NCbGT0GsBV9z1hph09ZjZfxwRHcMQB/XPhg5
dgfj8fk4Fumkcy6HsvJpYT3iMnE94s6JwxETOAoLNl1HkfWIeuLTltXs0a2N
DwJdhmMbuwx5m+MQbOsDPzO+pqoxOg+l/FB5yPoiDsMC4pB6II9NKEeQop6L
qnog0opdt1fR9tMCIUvZTP1oD5Lb83xWIro3syq8FqrE/eiCZug1j67lZWwa
EY2Yvgn4vL+nYg5m7Yo+AFqif//AasyOiEJ0l3Bhm+mhHYVtdOLTT2i97ygM
7x6LOesugXLI7OrVVof+LGNcyBlfRnYYvoH5Cdbrtyey/hw0CrMWZQnt1EXv
Ic9H6dA35IyNknyLDtso14y9/h1rowaxazoG0xTXVH9t15N/1qldxfdnWX1V
Rv+Rd3705RPknEM5x2qJ3vGLMH/wEER37ofBvRORuoMOWnq9R/F+Xr/zlzbo
Oz6t0nvYKvl0P4neI1QRn+4vWY84oNB6RL4W0VXg0G9L78H1GbzeuDRfHr1y
Ps1ze3DNh7TeOOfTlC/vXcnvIc2VN8jJuRBPJYTW+Tc+t/mHgN3ffonTp08L
54LXRMy9cbUEXNOC4n+r5NSnTmF/Wirme5kINoxp+k/4Vf+giJ2Rjk5ac+aN
U49PS/h0/SrtMXF1mmqsGNtjUMpOXMwVE3W9uJyBVX3dSojplNJfs/l1yMKj
uJL7ShFkyMfdE+n4ytdRw720OdoFbhM0do/TwjWsExPnms4hq3Hi+gtxd6/u
4cyiMLjyOFBlW4THbUD2pTzl8R7m7MM8W0W9wsp2iPp8Ly7cfqEMe7y49Tv2
fxGFTm9Ad6iVTxOqOiPm819w6ZFoz+Pzv2BpdxdlfE+ffNrOMRU3NYR+8tb3
VcVRKtsgbGw6ch6I3z06sw1zPTTUSqC8cqtLyCtXkfZTxR2zzmhoOP0djUcH
Ix3s0QFWJv2wdN91sXbm6/s4t6Q/2vFjVWoOn+5zsC3zKnjqK+TdwKlFEewe
Wkc+/fg8cm6Ki6FeXT9WKB+lLMgdF9rGF4NlzU6YuDQLN4VdvcLtk+eEMa1T
fg+CHB8lt2/IghbfInubRrBuGIk1GbeF+ifIz8XZJeGq666vthdC2fi03HYV
159l+ygZ/Udef9WTb5FzDrUdq3JbDJ69Hxdv8pyVz3HnxE4s6+1eWGOoBbLO
oZ7nL23QN58Oksan60r0HqYqvUeYMj6tyD9t6iqJT7uq5csTOXV56D2IS6vz
Xs6lpbFp4tNc78Fj1NKaLlw/zXPmvUt6D54rz8W4Cvrb2hXhqYPqvY/p1v8Q
sP+n1TjF+C3PIXjr0nl852GEHZFtsWuYG3bFtFfAHbtiOxTCbgXUPxe25b9j
+9gRaS/s89afvwvHoPN76sRx7P1usWDDVMv3WP/5VxE7yXZqQ0k588Z1KolP
u2H8qjS9jzd9o43lLPzx6iq+dawY9VoMMKBCQ8/1kt4Iag3C0dLwaQMMMOCt
4k3Epzmf7ltI78H5tAji0hGS9YgRAod2UfBp4s/t3lr+ac6ruc6D6z54jJpy
5fG1iLw+ovp6RJ7fIycnB3v27Hmn+DTlxfCoWVPIO6fOU4eZ/RPTGI8lHN6d
jhMnTijvM66cysTWcCs8u3wW+fdv6gW0r/T+VmzfR5THOXnyJDL2bMNU4tMM
ZJO6nWQ7taGkHB/vKp+2+qQD+rr6IbhbEjZfzMf9tCi4v6H1ygYY8F8FbXy6
UnN4WPlqfn4uwBcBjVq82ZrIBj5tgAHvJN6c3sOukN6D10cU+LSa3qO/Qj8d
IfBpsZ5LpKkq/zTn1m+aX0pzUvA4Na/lwjk1X4/I67lwcL0HrZ0j/TTFp0nv
QXya8nsQV3/b/FkXPu1rYorezZozblqZfVZZeCWeOrrJPzHF6h8Cso5kCHya
zgXhj8PbsWe4B17dvYIHGT/g8sKBZcKDwxuEfe0Z0RF/HNqmPA4dMyszQ2nH
qCacT6ts7dW0udCGEvl0iXqPisunHTzWifWvX+fi7JpEBNZ82/VsDTDgHYE2
Pq1Yd1rS3+2F/mo6WT3DwKcNMOCdxJtcjyjGp1X5p0NNVXw6vBCf5noPF5Xe
w9RV0HhIOXV58Glea1z6OV+LyHUNBOLQFKfm9Vx4rXHi0Tw+TbmZiU/v37//
ndFP81x5gY2boIe5OdyMjNGewU1AZYxt8b9IYRyWkJ2dLXBbXt/m3I51ODDW
D69uXcKNtRNxOqxWmXBj7QRhXwfG+bN9r1Ueh+LTx44dU9pBNpFtUlsDzSyE
NpSUMy+xU8d3kk8bYIABBhhggAEVC29K79FbovcIUaxHJD4drsjvIeb24Prp
dgoureLTkQKf5loP13LTT3OtB8/zwXUePD4trY9InJrXRiRQfJp4NcWniUsT
p+b1Ed82d9aVT/ezskY30/poX7kK3BnaCzBGUqv/wSTL9zDduRqysrIE/TRp
XwinflyEjJS+eHk9B8//Po1nF7PLBNoH7StjcjBO/fC16jjsmHTs6S4fC7aQ
TWSb1Faq7xJibVMinx7P+bS2+ogGGGCAAQYYYIABJeBN8mnSewRL9NOhDOFq
eg9RP63i0xESPq3K7+FabvFpXk+Ex6l5DRepfprXc+H6aeLS0tqIpPkgLs3X
I1K+vHdB7yHNlTfQyRmda30G9ypVGaoI6MCQ1Po9AbM6m+HXX38V8ntwzUvW
t9Nx9ItIPL9yFs/+Oolnfx5jnPg34d+Pc7Lw8PfMQqDPH/5xsljk/XVa2Ib2
mbVimvI4dEw69hfMhonMFkIHhY0iqgq2Rzq7lJgzT6mfNvBpAwwwwAADDDCg
DNB3fUQxv4etKj5dV5Uvj/h0mCT/tLAe0VTUTxOX5usRBxbi027lpvfgnJqv
ReSfcf00z+2hrp+mGDWPTfN8ecSpST9N9U6IT78L9RGlufKGundAh6ofw8P4
I3RgEDhq9SqYwLgrYV5PW2RmZuK3335TxuczFibg+PxYxqVP4cZ3E/DHFB/c
P7Re+Pfi7s2FWLIUeX+eQHJyMhYuXKjEgoULMHv+LEyakYQNq1KF3x7/ajgy
FoxRHoeOScf+sped0h6f6iKPJlsFm5nt1IaScuaN966AfNrIEn1ilmHduG5l
yONrgAEGGGCAAQaUJ/Qen64jxqf7KPm0PePT9mL+aROKTxfOPx1hKuqnpXxa
fT1iecWnpTWveb1xaf5pnl+CtB7Ep3n+aeJ4xKV5/mmun+bxadJ7vAv5PXiu
POKgwzp4wINqIlZRgL33/4Rx0FbvCfh6gBcyMjJw5swZ4RwQDswYjN+WJODZ
xSzc2TwX11JH4FHWVuHfmxN6YE2EcyE8ufArpk6dihcvXihxL+8utl3ahGnb
krB2+SLht78tHcv2HaU8ztmzZ3HkyBHBBm6PH7NN3V5qg8inNa9JHO9dAfUe
es7nZVnDDWGBgxBsov/aqqVDY3j4LcD+c7liTtb8x7h5Yjtm2eiYT9WA/zKY
wcV7DS6/fIZz07u+2fV+BugFcnxLSdtYNRqLQinOK3IOQ53bbujP/xfxRvQe
dUU+Tfmng5X1XBwQaqKKTwt1EYlTm7oo4tOcU7eT6KfLV+/B49M8Rs3rJHK9
B+fVnEvzeKk0Zx7xadJ+8PWIXD/9rug9XBn/bF/tY0Q6ucDjo4/RkYFePapW
Q8/aRhjHuCth2YheOHz4sFAfkdpO2DOxD35fmYyn5zNwf/8q3N22AI9P7hL+
ffzbKTjy9dhCyDt3CFOmTMHDxw9x5K+DSD+/EXsv7cTgfcFYsu8rrFg0X/jt
7ysnsX33Vh6HjknHXjait9KeXrWNBBulNkc6OcP94+pCm/TDp83haDkI81L3
4/erT/D6+UlMbazJn5rBwW4qMh+j9PUR9TS3aKufUt6wqh+LjOdA3v6FGOfb
C+HeEYiLHIUw04rC9zXBDG1bx2H7NSBXvd44wcgaoQlbcUGoJVGAB7+lY06H
UtTIqFD7sYCr63ik7buEh/liHYn7Z3Zhka994dqIeoMFPAcdFep5PP054p3h
VRUPcnyUlv4sE3J8S4nbGFvDx8YHgQ79kZqjD59XDv5ZdtsrWH8ud59Qfv2w
IuFN8Wmunxbj04o1iQo+3V+i9xBye5i6KPXTA5Vc2rVQDuryik9z3TTXePDc
HvTKY9PSGDXn1FzrQfppzqcpPk16D6rn8q7oPSi/XKdPP0OYjS06VqsOTwXo
fbBpJYxt+Z6AlRMG49ChQ0L7eK7AHaN8kLN2OvLO7MflBQNwcZIX7h9KE/49
t+NnRfQej07vQ0pKCv64kYM+630xYscgxO4cgNi9A3Dy7AksnT9H+O3FdZ9j
O9s3Pw4dk469cmK00p5+JpWK2Es1x6ktxeXMG99ZBz5dqQUCYnbg1rPbyF4x
Fyl9QhHm5An3j4rmqrO1TEbGg5d4YODTRe1xWoFbuIsN7Vu8dVvkwMbEH4mz
94n5Cdnf/SJ+3wLeQ6i+7hMcmxuPmMB4fHvoCfA8A5N0quFcwfZT1QOzf83F
pY0LkBwUhiH9pmHzBTYXvziMxEZv6N6ncmv4OndDpxqG/I+lggwfpb0/y0eZ
+TSHsSumnSyjzysv/6xLuypMfy5nn1DO/bAiQd/66R7q+mkhPm3PuLS9EJ8O
V/BpsZ6Li1gbUcg/LdF7CPxZPb9H+fBpHp+W6jN4fJpeeQ5kiklL9dM8Pk18
mrg059OUL+9d0U/z3B7d6jdAcMtW8KpeE50YvATUQHj9DzGGcVfCdzMS8J//
/EeIv9O9BGFLlAsubZiNxyd3486WL3Hrh+l4eHSL8O+ML0fgwMzBhfDoxC4k
JSdh2f4F6L26Kw5dOIA12d/gUM5+gTMvnDNT+O2lH+awfTsr+TSd04MHD2Lt
zHFKe8g2slFqM7WB2lJcjo+JnT1l8mkzOLZfgSsPszGnbcsSazlY1QlF2qUn
ODu1H2LWlqKerbIe8jmcu/Jc8DUvr2UXqodsVX8EsvKBm/P9JM8RLRH981Pg
aip6VWP/rtETP+dqzp/79Kd+cFQezw79x2zE6euC+gL5d85h5/g+cJPUh7Gq
1Q3TVh3HDV7k+fVT3D21FoNr6zBPlGDPn4keyjy7VrWDMGPxLpzMuYO8l3yL
hzg+1lNZT5zqjQ+btht/3IcYazmzC4v9nZXf27WdgyN/ica+uJKF9JUHcDmP
mX3vFNb2cNAhvtoMQTNzWFu3YkFwDH64rsHvV/PFt5fZ1LQjBu5G/PrE4tAz
4PrsLiXUO1ZDRdsPg6Vxk0LxK/sO63Efj5Du2bLwtlSjeFXp643Lf+7fFF5d
Z2LL4ct4XKDoio+v4kiSj9AuWdfdyA7RX2Xir9u81vEr3D2+FfN97HXO9Sxr
XMgYX62rOCAqaSvO3uQd/glunz2Eld3sdDiXcnyUjP5cxrGs9C1y/Y9wjsrK
p8vRP8tol5z+LNtHyek/2lCuPqH8+qHcc6iX+Usm9B2f7qmMT9tK9B72gt5D
Gp/WxKcjFfHpgaauSg4dqXwtn/we0n9z7TTxaB6f5jVdCLxGIl+PyHN8SPUe
xP0OHDjwTvHpHo2bIMiiCbxqfMJQU0AnhshGHyC+xXsCNiycIbSL9OGcT28M
tcSVn+fjUXY6rq1KwJXlMUJdF/r3z6O6YsOQjoXwMGsrJiZNxIQf4rHx1w3K
+pIE0nTMnTlN+O2Vn7/CxpDWyuPQOk869oavZyrtIds6KWwV8YnQhh4l5KCe
IJdPG7VF/J4XwKOLuHj1MfLZf08uH8PGWD84GUnnBUckbM5F7sZYeBq3QPia
MvDpvGNYP2YkYvxjMHvtn4w1PsTOnm1FX1bZCcm/sm0uzIZfVcXvPg7AOnaz
//j7YHGuqtQc7i090StkMx4wj7c9pCv8rbwEdG3YQtxPpVYImfcnc0a/46dR
gxDu1gdxk34BKZuzh7VT+KMWCFl+l00WWfgmIhQhLgEI6zIEScOi0LmqDu0q
1p6O6Fy7iXK7NlZz8Tdr2t8rpiAhMBQDPIMxOCgGw1op4tmVrDFwKUU1rmJH
YiyG+A/H/J+oAMcNpHlbC/7bsetevMBFLPELQtxy2jYHqT2CkfQ9a8et79Cv
ui52m4lzgqLOh7rft2o8EefYEU6EO6PryCPMT5zAvDbtMIGuz7FEeMmc9yra
forCHO6hB9l5PYfZLRsX/q56IDbcFqeq3NQeuq+jNbZEp9asL7QJwbILxfEq
C3iG7WCjgF2DA6swe2A0hnQJx/DwRIx3tRb6s6zrzsdXznIk+PbDoMCxSN1z
T+hPaz2tdKh7KGNcyBlflawQsegqtQqZc8Yh1qcfBocuxZ/QsZ6LXB+lpT+X
bSxLfYuMbZTXv4x8ujz9s5x2yejPsvqqLP9cwXxCOfZDeX5eT/OXTLzxeuN1
HcTYtEQ/TXw6QqH3ELi0mt5jkETvEWnqWq75p6X5Pbhemms+ODiX5rppviaR
a6cptwetSeT1EUnv8ba5szY+Lc2V17dlKwQ0bIRONWvBm4FeiZ9GW/wLcYy7
EjatXCLUqaF7Bs6BN/RoiOvpi/EwcyP+mOqLnInubO5bK/x7ur1REb3HgyM/
IYnx6eTZE7F46SKkpqYqsWzZMsycNln4Le1zQ2AD5XHomHTsTauWYHTz9wRE
m/9LsFFqs3+DRkJbisuZN6GI3qMOmjQMQsqqdKyJcYI559M1+2HnY+Yidi3A
OB9/BDn0xJhZ2XiOPOzto+C4bL73ijyARzd+wlATc2Ecl4lPS31wFQ/MO0u+
LwnexuKxOg2jCei80o+1aT0Ll5h3OdjTphAnKOm5pJVZAk7kv0BmfwfV/Fap
DUbvfQWcTkFn4VhWiNnxEri2FkPql/05v7bnpCKffoo9Pq00zw0W43GatfxS
SidVXOWjzlhE81amODcIfrbgKEbVZu99d+F5QRbi65rBsfN2PC04hnH1ShGX
KMbv2zosZUw+Dzu87dD7S+L1d/GDuz0GbXwK/LUIParJ239F20+R/bYahwOs
O19d2BvOldS/t4B7pxR8M3syBpalj5TEq2r0xI93gNcZyfApZh6Udd01ja+P
u2I5oy0FGQnwlM0ttI8LOePLynwcThWw8zpLks+n1gBk5Kv4tDhmivm7sw4h
xBtk+Sjt/VmfY1nuNiVdd/21XU/+WU/tktNX5fQfOeenXH1COfZDeX5ev/OX
NujCp5vUDsb645lY6toYTaq0w5R9OTg82g2tJXw6SFJvvK+k3jjpp0OLxKfF
9YgDJPnyIuup4tGRhXh1+eg9eJyaa6l5bJrn9yDdNHFpqX5aWm+c4tPEpaV8
mtYjVvT4NM+VR9wzvI0tuprUg/cnn6Izg7eAWhja+H8xinFXQvqP64T7BGon
57nrfGri1s7lQo6825vn4NbPs3D/4PfCv0+ljsfJ5eMKgT4/+fPyYnFqc6qw
De1zXecayuPQMenY2378XmnPMGYb2Si1uauJqdAWp2Jy5k2U8OnGn7giOHoe
vt+1C+np6fhOwqet6o/GKeaFzkQ7qfxBVS8szGHz+76hjKuzbeoNxu7ch9gX
zJ9365FPf9gcwYtuA4+3YGBN8TOrhnHIpjk3oQObcy3gGXUCBa8yMKaeuWy/
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
NLNQoBF6NqqFsMZGCLd4/63z5iIgm5htZCPZyu3m7aA2UV5qdT6d4usln09X
aoGAmB249ew2slfMRUqfUIQ5ecL9o6K56mwtk5Hx4CUeGPh0UXucVuAW7mJD
+xZv3RY5sDHxR+LsfWJ+QvZ3v4jft4D3EKrl+wTH5sYjJjAe3x56AjzPwCT1
Wr4looLtp6oHZv+ai0sbFyA5KAxD+k3D5gtsLn5xGImN3tC9T+XW8HXuhk41
DPkfSwVtPkrP17TMfJrD2BXTTpbR55WXf9alXRWmP+vLt8jwh0Z2GPHjI+DZ
CXwb1gfBHoMxP/0uo9UnMatVE/n7eUehbz4dpNB79FXEp0Pqijw6VIFi+bSp
i0Q/rdJQDxL0HuL78uCYnFNzvQeBODSvN06fE5fWlC+Pr0mk/B6k+5DWR3wX
+DTV5e5h0RhBDIFmDOYiuhPMGiC+fWvEtjRS1h3XB4Y3/ydGWlXGeOfPMLGd
CcY61cYYh08x1vFTJNhVx8jWHyK26T8KIUYNsS0rIcG1MfpYmAr5prnd1AZq
C7WJ2lYkPu0rNz5tBsf2K3DlYTbmtG1ZYi0HqzqhSLv0BGen9kPM2lLUs1XW
Qz6Hc1eEG3y8vJZdqB6yVf0RyMoHbs73kzxHtET0z0+Bq6noVY39u0ZP/Jyr
OX/u05/6wVF5PDv0H7MRp68L6gvk3zmHneP7wE1SH8aqVjdMW3UcN3iR59dP
cffUWgyurcM8UYI9fyZ6KPPsWtUOwozFu3Ay5w7yXvItHuL4WE9lPXGqNz5s
2m78cR9irOXMLiz2d1Z+b9d2Do78JRr74koW0lcewOU8Zva9U1jbw0GHWFwz
BM3MYW3digXBMfjhuga/X80X315mU9OOGLgb8esTi0PPgOuzu5RQ71gNFW0/
DJbGTQrFlOw7rMd9PEK6Z8vC21KN4lWlrzcu/7l/U3h1nYkthy/jcYGiKz6+
iiNJPkK7ZF13Nt9Hf5WJv24/UxzsFe4e34r5PvY653qWNS5kjK/WVRwQlbQV
Z2/yDv8Et88ewspudjqcS3k+SvY1LeVYVvoWuf5HOEdl5dPl6J9ltEtOf5bt
o+T0H23Qm0/Q7g8tTWOR9Rq4NEHl0y0/i8Budu9y6ys+X8nwqzIg9xzqZf6S
iTfBp9X1Hqp641I+7cS4s5RPOzM+7VxIPz1IoZ8W83uUX/5p9Ti1VOvBc3tQ
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
mNHdi53b0vmbsvJpR+90ehqO9e2k+usWCF7Mzs+jzcL5KeRnfXbgWUE2EkzM
xPYWnMD4+ua6266VT7dk184KXo2t0ebDVmXgwRVjPyqw+cl+Cg6zrnz3xzj4
lIJ7yO/7xfMPm1YzhJjt6cji9SSyrrvG8cX6zxKx/wyoqUNf1jIu5IwvB6E/
30Gam6Q/q/Fpy+qOCLDvhl6OGmDjDHsjeT5K39e0PPi0vtquN/+sp3bJ6aty
+o+c86N/n9CoBB7M+pbzNOy7XCAx9pXw/5fbI+Akez/aIdfP63P+0gYpn25U
Pwgz1v6INHU+/UEz9P3iPzj563pM9fOBr0MvTFiaiW+Wp2Bsk0ZF4tOWNerj
I8ZlqhhVRvMapuhb164EPu2CgSZc71E4X16UCY9Ru5RbfFqd93IuLY1NE5/m
eg8eo5bWdOH6aZ4zr6LrPdyUNcdF3umk4NVtGWw++BBBrVqz9x8KcDCqhK97
WOLXZE8BRwlJCkwgdBQxXkRWIsM4D2SPZWDcT4Q7stlccSzODcdGtxMxwoXB
GcdiHBkccGyYvYihDEPsNCI72hbzPcyUthHIVrKZbHdQtMVFUmtcyqcnd1Wt
RzSvVI+9qvQejVvFYUXaStGn143BMTYa/0rxUml4K9kg7hCEOIGPsRncQo8W
5/mYOzmBFAuZ98bFzfeL1eZ7I1uMTGf+8MJc+Fezxei9L/H6UDw6qvmJkvy+
yE3vYUuw6pklh1+LtrCTzsFV7dCr91Ss+fkcHjHznmctQWRd/a9hksenGf9Q
59NLiuHTnbch7+VRxL8hPq16liqJARrZi89Sj5dGp1Ex9iPCHM7tv8SpZ8C1
VUPh9QaejxZCZRX/cFH7zqbldPzBvjoVIZNPF3fdZd6vykYJ40LO+BJiaer3
h2p8mq6DlbEFrDWhstiXtfso/V/T8lmPqI+269E/69KuEvqznL4qzz9rPz/6
9QkKaOXBjeHcqD26NLFHO+sZoPD02eGuRTUq+uLT2vy8nuYvbeB8ul41F4xc
uBoLgt3QNT6tEJ+2qNUTq49mY1ukPZop9B5Na3bHh0ZGmBbYCq0+MFXEp60Z
p26Df//rXzh79qzAKz/84AN0rtUc/RinJj4druTTqvqIIp92kWg9FFBoPcpL
78Hz5HFezXUeXPfBY9SUK4+vReT1EdXXI/L8Hjk5OUItv4rMp6Wcup2i9rgQ
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
Z9aVH/6YjZBycA/pfV8z/7BvN1mI2Z7ppVlPIum6qx1frP/Mk/WfNC3itGWN
Cynjy1Xoz39gjbeoP6vwaZu6bohyCUe8mxrYe8DFSJqPUhy/hjWCHaOQFjsC
Sw48Bt6cxRxX7dczVAWf1pXtOvPPOrJLSl+V0n+knJ8P5xPM4GoeizGLLuM9
48wbQ2TPD3XVHql+XpfzV1moCJ+2UKCZgk/HMT4d38ie8Wo7dGbbuIYOApdO
MXYR9NNpIj7dS8Sn00V8WrXWeDrj072rMF8e59X8tbjmONd8UGyaeDSPTxNI
4yJej0h6D15v/ENzZ3Ug3YMn45Ud6tZDHOk9zFsjjiHW3EJADHudYGuPvn4d
0Zn9m2NEUgq7p3jE7in+LBV/ML599uw5jBnzBQICAuHt7SPAh3Fmf/8AhIdH
ICIiEn7s+PwzQnJyCjuPjIvfvCXgxo2bAq5fv1ECI1NSldpGbe3K2hwj2NFa
ZFNrwcb2n9QW+DTZPkFF72FaLwAjlm7B3BRfdBq8QsGnbYyzcIKNxmtjA4o1
vNXtkX0IQpwgpKYJvFOOavJ8bL46ibFmEu+NNc33c1XmeyNHDNrG/M+FbxBZ
2xGf732Nd4dy0FHFT5Tm92Xc9E9sSSx+ZskRYekMJ/EcXMsJ8V3GY9mmQjxl
zXt5bB56GWt/v68bPs34hyqfnqeBTwdvR9Hro8ipJD5d/OxSFAM0cpE9u/y1
PDoN/TiODKbw8PkWp/8Gbi/pi4BKeD6qhBrF/MNT5TN7q4m4zD463UMin9Z0
3SXer0pGKeNCyvgSYmmq94cqfJqug21NM9ipQw1ZXy7bR2lof/0EbHhIOrEE
uGp5vapmPaIubNehf9bGrlL6s5S+Ks0/l31+PrhPqNdZ0IMVrUkU+piu2qOV
n9fR/FUWKoNPk1Y60diRwRkpjRnYtpucT6vGp9Pkmul0jfFpObeuovqIfN0g
r5EoXovI9R4E4tOcU5OOmrg0xagJFKOm2DTl96D1iBSf/tDcWT2flq1F9DCq
AZ86dRFi3AQRtI6PcnwwdGrZCv1DOqFz6zaIMjVHJENXewesmjtXuG/g4Gsw
xbF5wtdffw13d3e4ubkJID1Hdna2oNeg80J6mIKCAiQkJCj2IZD+g3QyFNsv
C0tnzUKio6PQNmpjDOPU/Tt1EtpONgi2MJuCGxvDu3YdoVYiX5OoxKerWyFh
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
WDlrNLpZtZSNmfpJ2PmMuetdszA8JBKxrnEYMuU4XqIIexPkHJeec/U6iKd3
16NvE1NhHFeIT4t98Md+mH6efN9oBNWU/VZgP5qAfldwGwfrKbjKvMtPccr+
qLTnkrYmQ3Hy7Ssc6e5aPL9Vd8Dne98AZ8YiWPgtW2TlvwZur0Cf5hV/zl/W
c1IZn36BPSHt1M8NZiNwhll+dWxgcRzjk2DMoXnriGxuEPzs+6MY3Ii9Dt2F
l++PIcfYBG7BO/Di/QkMb1aOuISG+cPRdT5j8kXID3JCl2+J1z/EOl8XpG94
AVybg861pR1f345T4rjthuMg6863ZneBR/WS86Zv4Fh8P/VL9KxIHymNV9WL
w49/AO8KxiBEwzwo6bqrG191wrCQ0Zb3BUPhL5lblD0upIwvW9PhOM2oxa0p
onw+DdJQ8LaYT8vGjIa/P1YimXiDJB/FxpfVFzhy8y+8eCv7+tubR7Cimx+c
S1zTio9lqfuUdt11Z7uO/LOO7JLSV6X0Hynnp1J8Qhl82rb5IJyQ9zG8PInv
vKyV5yXrXOyipvx1HvuWbsfvz17g3FcJ8NJCPy3Nz+t2/lKHyuLTPD7dtZED
49ROQoya6z26NyI+7SLTe8hz5fWS13KR8WZ3NTVciuPTVcWnxTFqzqlVayTy
3NOcU/Pc01zvQXya9B7Ep/U5/7TLR9XgzOBEYJzTXc6r6f2JOTlYtmgxFs1f
gOHDhjGOmS+sM9y4cRM+/vhjWFpalsmjCZwrawspvJraQG2hNlHb8vPzMWzo
UKHNyxYtEmwgW8gmWoPoJY9LU1zeu159fKPg003hEj0few7uxNzMOIR7dMaA
yWuxbuUEuW/4HKfZ0D+X6V7s12oFYPZFNr/v78uOyfZp1hu7Hz3B/kT+vFuH
fLpaWyTOeQA824Ke8nt825bZOE5z7tAObM41g3/GSbx/U4AhzUwl+33XwC3M
y2r4u7cUiXXkx7DJxe6b9OafOL8hD5OjA+BezjhnRfm0W9A2ehqO1e3F+mtL
JM5l5+fpZuH8KPnZkHz8/f44hjYxkdn7/iRGNDfVvu1l8mkrdu1sEWBuB4dq
7SrAg/XjOMVg85PLOPzMuvLDH7MRUg7uIb3va+Yf9u0mCzHbM70060kkXXe1
44v1n3my/pNWX3p7yxoXUsaXq9Cf/8Aab1F/VuHTNnXdEOUSjng3NbD3gIuR
NB+l3H4zuJrHYsyiy3jP+NXGEO11q1XBp3Vlu878s47sktJXpfQfKedH9z6h
Vdnx6RrWCHaMQlrsCCw58Bh4cxZzXHkfN0P74Pk4/+QefvpqLKZ9sxXn2aXA
9U0YbtFachuk+nldzl/qIJVPm0jg09u3bMSObZuxa8fW4louFJ9W6KcdBT7d
Q5TfoxfPPW3M49PucojzesheF+s9Kp9Pq2o96LW4lgvn0mL9NNd7kH6ar0kk
Lk3xacrvoc/x6dOnTwsgrcTMMWPgXusTuDH+2fGzhti6cSNWLVuO7xk3pTqF
P/9cIHDqkSNHoUGDBgK35XFiDs51Vfm1Op6tDuq+Iz6m+Lfot+lzasvIkSOF
tlH9cWortZnaTjaQLTyfh7c8n0lXJ2cc2L27mE/X9MTIDQXYMyUath/J9B4t
Pw3D+JXrZD7dOAsn2Gi8NjagWMNb3R7ZhyDECUJqmsA75agmz8d8yUmMNZN4
b6xpvp+rMt8bOWLQNuYPL3yDyNqO+Hzva7w7lIOOKn6iNL8v46Z/Ykti8TNL
jghLZziJ5+BaTojvMh7LNhXiKYUcjs1jY1j3a5ik8WnGP1T59DwNfDp4O4pe
H0VOJfHp4mepxTFAayMX2bPUX8uj09CP48hgCg+fb3H6b+D2kr4I0NHzUY2o
Ucw/PFU+s7eaiMvso9M9JPJpTddd4v2qZJQyLqSMLyGWpnp/qMKn6TrY1jSD
nTrUkPXlsn2UhvbX6yxodYrWJMJVy+tVNesRdWG7Dv2zNnaV0p+l9FVp/rns
86NbnyCHJL2HHPUTsOEhaRETZH2sflds+hO4Oqb4GaNtoySsZsf7e3NPeEp8
VqKVn9fR/KUOlcWnu1B8+jP5ekQhPi3Xe8jj02lyvYdM81Ecn87QwKdJP12V
eg/OecVrEcX1EcU6auLUXOtBefLE2mmunyZOTXx67969esmnKU+0GAunToX9
Rx9hXP/+2Lh2LdauWIEJ48Zj1arV2LdvP/Lzdwr6imbNmgl8lvQWBHrNIea8
qhxbG6geR/wb4t+ltnh7+whtozauXr2atXmc0HayYfLgwXKNh5GgnR7dKx2n
Tp4U7OV82rxZGlYyLp4XbAW3mJlYv342eppYImaSjE9b1w7DDzfpWfPQYt/D
/MkS9t6LjalwJ3/wqRfClXxeBEZsfQ7cWob+jl7w0DSflZhb1Mz3tUMw9yLw
/vAwJd/n6rcCD3Efq6IG4EDRaxzrXpJrODrNwW08w46gkvyUP2u+PT1Ksdax
bJjA2X4iSH5ydaSf1mu4dKX3uDY2SJLeQ/zdyuDT1DeEtT47+sKHr/Vp1k/D
Wh8z+AZ8gTx1ugh9Ow6DnclA7H8C3F3SG36l9t/SjyMZbI7PPUJz/IiSc3z9
OGFOfn0wF8Efq/++pOsuSU9VHpQcF1LGl53FFwLXuTKqYzEXLI/eQ4KPUttu
dl7XlZNPl+ZbtNnH2sgVo48xW44NgZ/K835d2a4z/6yVXZr7s5S+KqX/SD0/
uvIJCmjFp+OwnjWyaG2S0MfszEfjN7zGTzHiNbF2GLCbdfpTYySPwfL5+YrN
X+pQuXzaTs6nHZFC9VyM5XqPxsV6jzRaj0j58oT4tLsSn87g2ukPEJ/mufJ4
fg/Op+m1qnaa4tMUl+YgrQdfk0i58ohT8/j0wYMH9Z5Pzxo7Fu4f14JHrU+Q
v3WrsKZvDeOklE+a8npQ/Hfz5i3417/+hZYtW6JFixYK0L85WrVqVQKc/0qF
umOIf0P1t6lNmzZtFtpINWVIl01tJxvIFk9mE+k7lsyapWTzdDmfbmM1HFsK
9mKKswV8+6xmx1mNoe3M4Z+zQj5mWiN82Bm8x3Mc+bI3kt27YMTcC3iHW1jm
Y6VhnFVQ73HpewwPS0JGXC4W7WFEgnnv1QEq66VqdcR0Wkj+mN1xv/gJOc1K
+g+bxhk48AJ4dXQhRkV3Q2bcEExOC5DlBalug9SZzNEy/nr+h68wIjYVvSMz
MSpnHPqb8TVn1ug2YTV+yBmAzI5RSPBKwKBh+YzHv8WJXu5a53KoKJ8W1iMu
kK1H3DlqALJiBmPWxjsosR5RR3zaprYLwh1CEOM5ANvZZSjanI1ExxBEmPA1
VeYI7ku5qIpw7Ots9IvKRt7BIjZ5HcZY1VxUdWOwRuO6PX07jiWS57NJ8Oke
jPHhedVkiG5jq7wWqtTjaIM2iJ9O1/IGNg7MRFbXoZjU3V8+3zO7Mg+Clug/
PrgUU3tkILNTqrDPxJSOwj5a8enntN53MAZE98e0lVdBOWR2xTtr0Z8ljAsp
48vICQPWCg+7sSOX9efYwfh/7L15fNTVvf//5/fWfWHNvk/2ZCb7vkDIHrIS
QkhIQgKBJCyCgAqCIgjIjiKKsibsqwiCu9621qXW2qu21dbe1lpre7VV21ur
9vU777N85sxkkkwwhvT+Pvp4Pt7nnM/5fOacmc985pU37/M+m3a9xuc5mHgP
955R0Zi2dBd2zO1ER3Ej5k5bjj2X6IO7vHiPfp8tg+hjrBn75uc4PKedfabL
cK/8TIdu7kP0fB7UvPq+n926V924f9x7f4bqmeDG8/C6FHSu3IENLe2YWyTu
sUcv0gU/xulieY/dVIo979Etfw4bKipRHV+BjsWPgcKpf7O+xO38Hu4954f2
98sVwxPvkchjPQw9Lf3TPL+HQ/x0uhHvMaePeI9On+xh8U9TvIeuo6lN+aR1
37Syaj2i2s9F+af1/REpxwfFe4zE/RGt//E9O9/7Hl+zd3d7O86dPoOTR45i
y8aN2Lp1G5555lmcP38BixYtxnXXXcd9wr6+vhwqK/z9/Xuha9/B4Opa+mvp
r09jWrRoER8jjXXbtm3Yct9GPoezJ09hYX099mzd2ssfv31qqZOeZn8PsL9f
472Zrv9//pqeFs+J9tVP4r1PRKKuL3/7Eg5Oz+nnu3+Zz2v2+9q581X87pOv
pJPha54P//6yNBd/S4cgu+YJHmP3+fEWF+vExG9N8YxuvPGhyK6Pr/4Hb+1q
tq/7uDYRLUtO4Mfvf2G83l/ffR7bEuV+hdcmYc76Z/HLj7803B5f/vHneGHj
HBR+B3GHA+pp4oYMzF//HN7/TIzn8188h93VmYZ/byj1dFLaHnzkwvXzxbHp
dn/etfFovv0C3v2LOPbZW09ga56LvRIor1x3P3nlRtJ1rp+ATW+5mDj99+pS
TLxmEOMZBDafRux+/kOxd+Y3n+Kdh2ciW73W1ZEoqd6CJ17+ACr1Fb74A97c
1Yqcawappz//Bd79SCyY+urD1x3yUbqFu9+Lgb5fDOuYQqzc/Ro+4pf6Ch//
9B3+nR5Ufg9ioGfUtcmYu/kFvPeRyhX4D/zpjSfxyLQJjrFdbjPAs8XtPkGI
C5yNnpc+5vuf4OtP8PbDLfbPfSjm3otvp6fdnVdf97Pbzyg37h/37tehebYM
+Dy8IRd3PvISfv2xyv34d3z0+kU8PJV9Fto9lhjZhf1P/dqID//mk1/hB1s7
B7U+w633cIh/v1zxnenp8UJPN3oxTe0l/dNO8R5KT7fL+GnS0x18Dxd7fg/S
0p3eKm/e8PqndV2t9LTaf1zFUatceRTrofQ0WfJPq71cCOWfHqnrEZ3908nX
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
peb58ryHR0+r/RFV7DS1qb1clKZW6xHVfi4KFe9B6xApfpr80xTvQXqa8nuQ
Vr/S+rm3nr6Gr8/Luelm1MXFY1VbG3betRI9m9fj9M5NOH9kBx46tBnbuzdi
B+P+nq04zz7ri09cwJOXLuJxpnUf2b0b27dv4+v/duxQ7MD99+/Avr17eP7q
M2fOcE6fPoWTJ0+6xLHfaX4uXYOupa5Lr0GvtXv3w0xnn+VjoLE8zu5BGhuN
kcZKY6ax0xxoLjSnO1tbURefgGz290OGk3/afT0dgjRrO7bteQE//+Bv+OYf
P8XaUFfP02CkJq3Fy5/j8vdHHKLfloH2TxlubP4L8NI/gC9e2Ik7yurQUtSK
JbMXo9l3pOh9VwQjOXYJLv4e+MTV/rrXxKHptvP4Jd9L4l/4y39dwJaJLvZK
GIgRdR0LsrJW4Pjz7+OvX4t9JD596ynsKktx3BtxyLAgv/1Vvp/H3x9r/bfR
VSMPd55R7j7H+sedZ0u/fa6LQ0l8CWpSZ2LPu0PxzBuG57Pbcx9h9/MVeSYM
9D4P8Fz9N+E709MeSk8nOKxHbDXiPVJkfg/hn9bXInZwbd1bT6tY6uGIn9b3
Gtfb1VpEtTciQRqa/NRqPxe11zjpaOWfpv1cSE+/8MILIzJ+OkuuRyR9mU45
L66/FjU+Y7AoIQAbJ8dgxeIUxDcHG5TMy8SqdcvwwPYt2Ll9Kw7u34eM9DRY
rTGIs1kRH29FYoINiYlxmDRpAu5nGvjnP/85fvGLX/Cc0FVVFUhOTkBqaiLS
JFSmtml1U/HKK6/wvnQOael8dg26Fl2Trk2vQa+Vnp6KA/v28HFs23Qflq1a
iPw5qQ5jXb44mc+B5kJzormly78faM60FvP+Xv5pr7719NVRqJp/CX/834/x
431bsbq+Cc3p+ZhwY+9cdYnWu/DSX/6Jv5h6uvd40vfhj/gzTuRGXfGxuEO8
TyWWb35e5Cdk/33a67lvQVEn7eX7N7y+dSnm1yzF/h/8DfjHS7jbeS/ffhlh
17khD5tf+QTvn3kAd9U2o7PxXpz7Jfst/vKHWB70Hf3tc20syjLKUTjazP94
WbjzjBrEc2wgvrWeVlyXhXt/+i2fecP1fB7MvEbM/Xxlngn9vc8DP1f/fXBf
T3sNSk+r/RFneAo93azy5fH1iCmYJeM91HpEPfd0B98rkdYjZjA9ncHrc/m+
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
HVP9eKw0IzMjDdPrp+Hll3/E/45R4/7ib19wVP0nv3wNXfe3IEP60fWxL7or
FYcWZeB+Jx81aeqdbuppq/d8vM6+jb9ZXWCP4b06Hkt+AO4nKLkuGDlNr/b1
5AO+egOrLW7+bdzX7/1DTr/31yRi0QX2PPzlVlTelIhbn/0nvvnBUkxyek70
99wX2vR/8HiD/d8sFRVRyUjSf19vSELdtLXoeewdfMaG94/XHmbf46HPCeCe
nmb6w1lPP9yHni5+Al/881Us/Y70tP3fUjX/3jUp4t9Sf3I5cRoj4zqCEGTk
bseb/wv8/mAXCobo30f75Fq7/sh0OhYfvQ6/YofebHVTT/f1ubv596rb9PO9
cOf7xX1pzn8fOulp+hxs11kQ54prxb088DPKvT5D+V12t0//8R5DMfchfD4P
Zl793M/u3KvuPZ8Hfn+G75lwGe/zUOnpgZ7zQ/T75YrvSk9T7mnS0zM8ZPw0
g2I92pSWdoj3SDX80456Wvmo7XEewxXvodYiKg2t7zNOVvmmdR+10tQq1oPi
p5WeJv80xXvQfi4jNd5DcefGB7ClLA49a/MwaWk0shZHGTEeVCaK7klH4T1p
3E6+NxvN66dg4+416Dm4F4cP7sOxQ914/OwpPHnxAk4eP4bNG+9D68xmrpHj
4qx8PaHA5oRop3WN5JteMH8e9u7Zw/N9fPzHP+ILzS/92Wd/xQ/f/E90P7UX
r//yVd726s9/hDn3z0DmLZG9xk1zObJ+Erpr4rE2KxRtIZ4oG3XjoPR07E2T
ceB39G/Nt9mfPew5cJC1/f1sC9LpmTU2C+UOz7wKrDj/N+CDHixIzEKGu79V
rn7vbyrBQ+8C//rR7Q7PvtS8w/gz/oijVQvxwhf/xGsze2uNxKRd+D0+x8Wi
3vpU/Vvz77dVGWsdByYYyfHrQOEn79+ZN+g1XEMV7/Gb1UVuxXvo534Xepru
Db7W52IXctVaH795faz1sWBCwd3Y4youYqRdhxEXfAue/yvwh4Nzkdfv/dv/
ddyG/cYvf5l+41f0/o0fMxVn/gz888XlKL7e9flufe5uxVNdDr2/F+58v+LC
7+Za59crJ9m14OXEe7jxjHKrzyDo79kymD6x16Ri1WtsLq8tQ55THPdQzX3I
ns+Dmlff97M796o794+7789wPRMG/T4PkZ7u8/vuxvf08r7vdr47/7TQ040e
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
tmZMmjQBiUnxiE+wIT6+D9ixuP6IdwOK33DAKoi3E8ex8ViQXsg4kYTEOBQU
TMTcOa24n+npI4f34DjT0zS3k8e70V6Qx+dMc+9urcK2gnhsyrPhPsa9ubG4
J4fiqKOwPJPWJZp62sTExMTExMQ1up6eJLU07d9SOiZMi/OIQs14ETNdK+M8
7PnxSEvHGX5pu55OMuI8hG86WebHY/ikavHTTEfzNYb2dYhCS4sc1Nw/relp
rrGHKd6DUDk9SEeTX1rfH1HlodbjPdT+iPp6RPJRq/3GKV/eldbOfenpdKYt
75rbhp49D+LE8YM4dkzEe3Qf2I1dD27Ftq0bsHH9Pbhv/WoOlR3YsAabNrrJ
fa7ZyI5tvM81DudvWsvtxg339BqHPr7t2+7jY6c50FxoTjS37kcfwMpZM/mc
ae49TE9vZ3p666Q4rqnXT4zFmlzKnRfFfdR3ZETw74upp01MTExMTEyc0fW0
yulBvunJY2U+D+mXVvu28DiP8Vbpl7ah0VPuKy7zeTR7UIwHw1utQRS+ab4O
kfLjSS3tmG9a+Kf53i0yzmOepqe7lF9a6elh9E+TVfEZar9xPV8eWaWnVW4P
FfOh7zeu9DTlyxuJ+T0o7iH3xhvRkJSI/bu24WjPozjJtCf5qomzZ47g9KlD
OHVSQGVnzpw+jLNnjw6OMxKt7YzijOKIwOHcYxxX43AeJ4395IluAa2vZHPb
xzR2rTUW2dffwOfe01qJ+wvjsS0/TsZRx+LeCcJHfVd2NFZkRvLvi6mnTUxM
TExMTJzR9TTfC3FMKF+DWD5G7Cmu9m2pZdR5UJ7pWBkzLfzSKma6hWtpuRei
jPGYpcV5tPO8HsI3rfJ56OsQlVYWWjoT81XctK/Q0/OHWU+TlnbWvUpL675p
0tMq3kP5qPU9XVT8tMqZN1LjPbLkWsScm27G1DgblrfOwMY7lmLr3bdj6+oV
eGT7Bmy/Z0W/PHjfPdi9dX0vHt6isw4PbybuxUOKTaq8DruYJR5k7CTYsQc2
rcX9jAfpvG3smmwsxN6HtrHXvXPAcdHYaQ40F5rT8plNmBofx/dKVGsSD82q
woNFidhREM/jqO/Ls2L9RKv0UUfzXB/0fTH1tImJiYmJiYkzjnraHudRKeM8
puh7tmjrDxs9KS+ezI3nQXmmE438eG3eQku3GVparEEk33SHj8jp0aXFTHd5
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
S6uYaSsaPWxMR0stLfc/bFUxHjJmmuto72RNS6fY8+JxLZ1m5JvmetonXe7R
Iv3SMt5jvtpjXIvzIDt/mPN7kPZVeT5UnIfyT+v7I5KmVnsjEuSfJl1N/mnS
0qSp1f6IV1o796enlaYm/206s20pqSjx8DQoHs90laSU1YkyxmQvb7Qy7Tw7
LR2zUtPQJmlNIVKZxiZIXycxfZ2IpgTBjPgEBmnsJDSy9kamuacnJKOetdUx
pjKmMO1dxTR3LdPajXTdjCy0Z2ajq7SMa+QyOQY1HjU+PlZt7LPYONLl3HQt
TZxkenp3WRIeLknETtLTjG0FtDbRxjX1uoki7kP5qG+Xmnox+alTmKZOtqBL
+qrnxAehnWnqWXGB3FfdQv5qawAaY/wxnfup/Ziu9uVMjSR8mL724X7rKVJf
V0tIXzviJTR3uDfX2VxrMyrDhdXbiMlO1hnDDx4q+kyWbaJd2DJqUzj15YTa
bZm6RphTHzfpdV64hMYbbm8v1/qUyz66LdfOE3285TFvrZ+3bPc2Xsc4j6P6
esty3zgfn6wxmPPKw30GpIJbb24rXByf3Oc59rLAV+J8HV+tny+vVzhR3ke7
W4S5LpeHOR1Tx3XC/Rzq6pxK1l5l4M+p5lbV7e3OVKrjYQSrO1GhlaucLD8e
yqykItSx7txeYZF1iyxb7OUBCRGUS/S6QzlYloPtVGjlyc42qDdlfbRxAvun
NECWA0S5L0r8Zdlfq/sL6xI/zWoUM4p8hS32lWWNIhcU+mhWUuhEAVlvZg38
HK2XP9PkDLJMgwsr4Jqc8HRNHuHhyESnModp6Inj/QwmuLA6uUxTT2Dk9gnr
w/R0zgBkj2F2jLA6WZo1GM30eT9kjBJkMkh3q3qGrKczmzZKaHJny/XtKKlz
bxZW4KOVe2P0VVpZa8+42VEvK7JuVj5ohV1D6/5ooaODtPzSIi+e0NIiZrpM
7ileOS5S5pmOxtTxMTxmerrM5UFaupniO7iWTkCrJ+npJLlfi9izZZb0TZOO
bveWe7d4Cb90h/RNd/mkG/nwKFeeoam5b1r6qX3E3oh2/7TwS88fRv806Wjd
T632cNHjp9V+Lip+mrS0vjcixXyQllbrESlf3kiM99C1ZbZcm1juH4Bp4ZEo
82K/0QyypZ7eDKZ7mH6erFEVwDRjYhLaMzIwO51paqar24jUdAdd3UK+a0ZT
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
RJXrXbSpvvVOffq6Rp3TdaY59XO+juN76O/U7m+3sU59Y/Vr0nF/Vvbn5Wmq
rLWpPvXOdec2yXSnY/p17OUAx3OMuqt2O9Nj7ZYfi7WXjWOcQFkOdCjXO1wv
0KE/0SCt6Nvb1mt1V/3q+zlfXD+I28aYYM4MaRUNEr3e6II++0SzenQIK4dw
y8scdSxYtosyHWuIIuQxZqdHBvM2sooGbkMM65IIQb0L9Pbp4cxKpjHqtLLR
FibLYaI8TYPqdaGyHNqbqZrlZQuzTtQqG8JsiGyX5do+mOJMsGY5wahhKFsT
RDZE2KAQg+pAVg8UtlrZgGBpQwxbxQl2oNK/H/yC2e+KsKpMlGuW4+vIZAkv
+9gpk4h6ECvrBHNb6t2bEoUXESitoJjVi3kbs56KIMMWeQRyqE620MNujfJ4
OwVMTwsCOfnjZHmcgOr5hmU6nBjbmzzN5o0JYHrbXuZ1pq0nMjuBlxVM044O
MJggbd5ovV0rj+mjnZcFeVp5gtFGmjmIWzpOawonce0cJC1paKGjC5ktYlq6
kFEyhrS0hWnoUJSNFT5pHt9Belpq6RpGrfRN10s9re99SL7pNoqZNvR0ssjj
4Z0ktXQKz4nn7Jvukr7peVouDxEzTaQbOnq+FuuxkGnqBb72mGk91mPBMPqn
lY9a7ZOo4j2UrlZaWsVN6znzSE9T7Idaj6jip0dqvIfum26IiUU1e1bxv+v9
AtizwhGKmzD0ayDTiSWl2Me077PPXWI6+hIuPnUB5y8+hrPnTuHkmeM4dvII
Dh3tYXp4H9PKe5hWfhT7mV4+cGg/eg4dQM+Rbn6cOMw5xMs9h7tx8NBB7O/e
j25mTz92Ck899yT+8/vP4cSJo+isb0BJQCDXzcZ4/F2Ml485kM+J5ubso36s
oxYHylOwd3KK1NRJTFMn4gHKSV0Yh+08ltqKDRNJU8eIvNRKU2cyTZ0RweM/
lqYzXc209SKmq+cnifwfnYkWdElf9Vwtvnq2pC1e6OxWB50taCE0vd1i6G5N
g8eK+gypv2n9I+nyJlnXNbnS6A1ae4NmhxLjmlZZt8o2F3Uqq3bjHL1dqzvj
3M7n5uIcd86fIRH1ANFmC3CoN1Hd5m8v8z7O1w3gzJDWaGP96XrivIBe/YQN
ZFZA5SbCZm/j2Oy2Ueurjjdp9Sar47lNDtcOYuUg0W4LknX5mqwsrhFk7y/7
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
ZIcty/QAIZrJaKtjM01sRncmS8dnZoW5zcBmhYy1fW2nR8I0LaLt9EiI/ZDx
w8qfFg6p/qlswbQQ2yaElZ0SNLB/VcBqBzSTAzp+lfEVmY250qD8jASkh2gS
SAsy3E4LKTsxARNSg9pPDdF4RVDFxndryjjPD7EuD9LYrmy7BhXQ5WO7sN8l
oLiCfTCG/TGwnQONuFzopLmM/dGwQkdud9T+qI66PcqDtXoHth1YjysCihHt
WaO3DxgyLasZ3g6wNm+n/TLYtpoyA/xhrL9BGWxKhoqjXZpsSNF2aByGCEms
aeOSrvqGJGUamxFtsxYGQy0/io5pbZzpWWhkZZME6Oag0c0B1s1aO6tajiSt
ncuSsKd0RAEdDQ09OlnraG9/6eRsXy2t6zvyVH3HFAXrZ9bR07y8dAHrXbOX
h9HTav9otuVWXlp08wxLO6t7EFkri51p7j0UvPsR2/089dOSp5ZaaslNy/4e
qJuGlrbrp+3njSM/DS1t62ncj/hrzE+j7qGIdSWe1V2Geo+0dCpjhqVlxKXs
V07TnzndOqd0dY7n/O6fzfMST1F6+k7W0+uGFtJdg6Cp81lT56t7FFezrl41
kDX1pTle/Yd6huJF2eo+xRtZV0NTLzTPUYSung9tjfpqVWMdVHlrpbGRv2aN
PReIzrYQvT0L9zjC9s70rOhvpceZOpX7jlJXxJq8twEavbfV7q21eqxfExsv
bBqLjmNtb/xq9nU73euvNmNqrJg3T5HBGuv9HEXRMTX2ceaYmiLreKauj/H7
NI6DajN3XZxj1HF9rDlNu6aP5Vtx/T0ylV+nbKbXV2diGnv+zCbU8e+1VpHJ
34tjRZmq7R1/jvgBE4/aWGrj+Gq+ImkH9fcqEj/Ia6GtosgcD4s4g3GK3sYW
RW0tx+olZuK1RfaYUMw8IXWMN75I2iE9f2/boi9k+nyI6as3eLHCpsfUF+p4
fe8wt8MmHub3lqF3xFghophjrDCr0GoX6vaswjDPH1Z+fUFYxwvgM8YX0K9t
FtusRrYuX8fr84UIxzjeC3CfWC9myItE4XZtnqYul21uhDEx9nVM4kxOFtXk
RBS1Obpd2zNLx2F7RqjaQ8e8draOVWdnaZ+p7BGhKkO1slmmnaWoBN0jGuVn
UYWhPItjWdqWezZCFcaWRzgWYRuO0ExmhrJZys4Is15nje1ZhY5Phw3Bsl5X
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
Q1lw9R3kC/oXLFjgu47vffgOldzamaq35HpaGhTf1IHSxx1HC7ZeqNpXPNy1
iZ6ONx/qD6DdUMMur2msE64T4UN7ImeMWinoPHkuNtYTr32/9+aKv1ATWnWv
9ojXn+g9OmHCBKWnD+dvxfjx46l///5e+7777lPrITXNsSxatIguvPBC5Uci
ETUe/sCBA2nx4sVKk+N4XFvgfSs1HjZSDyIaHXpa6j2A7PEh13v4+2Lfk4hr
F9HgDofD4XAcLdqxnmxT3kD/OBjNa3aq3alisPKFfsQw/uGHH044JzQC7rWC
XrBBDQjqD2Bj+zAeffh/ebw50Sd7YcFvDnvstm3b4s7ZlvUcuH4/NaIzn+PZ
fWsVq74gD4l1TrAGzd1/+L8b76X9k/rQ3r6t6d1zWtMjF+SoWHl5ebPrumPv
59Rzzk6a9+pf6Y4vqRE37T1Aeayp1z+vNTU0GnTqypUrfddTrjkOhUTrKbn4
NtMbFNDN4tvYccnN+527XX+eUbRWkTpgtbJ1S8kX9F977bVx53zgtdvp/CVn
Ut6/HU/LPiuh9T+O8bh22/nU7fLjaejSLqp9+1dDmujpeHPi9Qs9bb+mkSPF
ewH1Mahngp7G61v6oavR77ee7fl1dtOn1IRWPeo84vW3T/D6hJ7u16+f72sM
1wMDBgyg0047jdLT0+n6669X8dLSUjr55JPppJNOopSUFJo/f77KOWM9kpOT
VTt2LuTeMc/IkSPVMeedd57S5O3atVM/Q2FhIWVnZ6uxsk+e6Gob6GHJUcvc
qPWAnpb9p209LWsPvY7nI0KH2xrc4XA4HI4jTTJr5LMqdtCHVn76Dw9/Qm2r
dyorX+jHOIzHZ3WiOZ944gn1P2x8pgnIFaFGAloa/Wjb/RiPOLRFvDlxLP6P
e6jgONSrxptTNN3vWYLaIG96M+sSP9DvtwaJ7j9cVjqaPrgkmf42fzD9uGam
4m/XDqYPBqTQg4Nzml3XMbe9TcWrP6Jln1NcFr5zgHpes4cW3/Wi0qjY38Jv
TqxL7DVNS0i0npWVlerckXMH0M3i29hxfOE4v59Tct6oaQedylYq0s6/i9IK
V/sS7LNU6el4c/a74XSat6Mn5Vz3G1rxzUCadH+YLlubTje815/W/H0I5VX9
jtKuOJFWflNCa/6vqZ6ONyfqkrEu9msaIIacNF7X8fqg93Dt4/feXLCPFGXr
GqhV9hxfBq1+3Rub6D0KPQstG68P2jQYDFLfvn3Vz7xkyRI64YQTaM2aNSrX
XlxcrPqQc8d1AXLMWA9cK+D9G29OjMW4Ll260JgxY5QPnT5ixAhVP408MsbZ
z3aRPDU0NGqnRVMjty15atR7SA21Xe8he+bJM12g6e3xDofD4XAcDc5ibRi6
4X26/qnG9dM7P/o7TVrxnrf/xGLuxziMf+ihhxLO+fTTT6taA+SHbCRHBxvb
h/HYMw3768WbE334fIRtKTLeb85+1+2hM1nT1b5PjUie0UBnnFOrEI0CJIZ+
vzXwu//wyisW03sXJ9GPd8wgWl/XCMTQ9+x1Nb5rumX3p9Stfidd8+4PtHg/
+TLvrQPUsXIb3XDDDUpTIW/qt56x+q4lJFpP1Kzg69TJDYpE9dMyRmpd/NZT
ct6oc4+l/ej1lFK60gP3ng0bNowuuugipaVXrVoVd87s+f9EN35aQL0WnUQT
HkqjDqUneBTUn0F95v2L8qdvCNNt/3NeEz0db07k7ZHbjX1dA+ybh+sQaGfc
I4B78/B7QRvvBRzn996c8wF55C/YSK16Xt2EHnMebTQu0XtU9HS8PmhPnJ/s
OwJQ31FSUqL6oYdRqyHj77nnHjUeNRfN/Z2BDl+7dq3yMSeu9ez+/wf86nHY

      "], {{0, 541.}, {724., 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1:eJx1kLFLQlEUxj9NMULKoqGhwUDCwaK0wCEIdSihwTSh2t57Pp+CPi/3vRD3
iIYWoTFa7A+IhlojGtoakoaiOZoDl5TXub5KLTqXc87vfnwcDmdGrqTzTgDG
MJW0VI1xLtUyPvpkdaOo6WouqZuqpvKo7CARTrtIjJVcRGXd5Om1uH97Z9fv
eYMbo5jALBYlxWCxVGpDuL/7YLQe0R34MCdmycHXC3f7bt06Wok078f/2gdj
JKcaCvU2ZVBh3AQcAeJU1WSCKTHJaSniQ8GazSeCZZvPu56tdIL4ltinFKQc
cZM4JPfpWh+XS3vK1w5ie6+qZzOiU04jgzjC9Baw+Y9vqetLoAKGGjiK0FCA
CT9ipDCUoBInoUPBPELEYloYy+K+v+/W0ypnQLQFDNV7mnwMXB0AU089LXAK
jO0DlzdM4tLPNR0tl5GPhG32rgLuF8t6DwKeOtCpW9ZHw7I6DZr/DFzXPgF0
Wm8O
        "], "RGB", "XYZ"], Interleaving -> True, 
      MetaInformation -> <|"XMP" -> <||>|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{724., 541.},
    PlotRange->{{0, 724.}, {0, 541.}}]}]}]], "Code",
 CellChangeTimes->{{3.945628002040225*^9, 3.945628012752407*^9}, {
   3.9456280878494*^9, 3.945628088328771*^9}, {3.946399992166339*^9, 
   3.946400000519692*^9}, {3.946400092218977*^9, 3.946400098048021*^9}, {
   3.9464005651350517`*^9, 3.946400565303549*^9}, 
   3.956254808673254*^9},ExpressionUUID->"fa7b4e01-4c18-4917-a999-\
1bda8b185149"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bodyidxs", "[", 
   RowBox[{"ca_List", ",", " ", "row_Integer"}], "]"}], ":=", " ", 
  RowBox[{"Range", "@@", 
   RowBox[{"nonzeroRange", "[", 
    RowBox[{"ca", "[", 
     RowBox[{"[", "row", "]"}], "]"}], "]"}]}]}]], "Code",ExpressionUUID->\
"de12be9f-307b-4708-9976-4bee3746cc52"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getcoloridxs", "[", "ca_", "]"}], ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"GatherBy", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"SparseArray", "[", "ca", "]"}], "[", "\"\<NonzeroPositions\>\"",
      "]"}], ",", " ", "First"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943828486452312*^9, 3.943828538205599*^9}, {
  3.943829890163829*^9, 3.9438299806650476`*^9}, {3.943830016776329*^9, 
  3.943830019677407*^9}, {3.943830626699462*^9, 3.943830628464438*^9}, {
  3.943830804970452*^9, 3.943830807035177*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"f7a36137-a1fb-499c-9888-f233a7dc896a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getflatcoloridxs", "[", "ca_", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"SparseArray", "[", "ca", "]"}], "[", "\"\<NonzeroPositions\>\"", 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.943835654954757*^9, 3.943835661600816*^9}, 
   3.9438364730841513`*^9},
 CellLabel->"In[12]:=",ExpressionUUID->"0cbe98b9-5d15-4e25-aea5-9f81b98a8f78"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getcolorrules", "[", 
   RowBox[{"ca_", ",", " ", 
    RowBox[{"pertbitfunc_", ":", "\"\<Random\>\""}]}], "]"}], ":=", " ", 
  RowBox[{"Flatten", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"MapIndexed", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"#1", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "->", 
         RowBox[{"{", 
          RowBox[{
          "#2", ",", " ", "\"\<Enumerate\>\"", ",", " ", "pertbitfunc"}], 
          "}"}]}], "&"}], ",", " ", "#"}], "]"}], "&"}], "/@", 
    RowBox[{"getcoloridxs", "[", "ca", "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943830633816234*^9, 3.943830648823629*^9}, {
  3.943830679368305*^9, 3.943830702474283*^9}, {3.943830739526439*^9, 
  3.94383074632425*^9}, {3.943830824601147*^9, 3.9438308263492827`*^9}, {
  3.943830861474888*^9, 3.943830944969814*^9}, {3.943831477583398*^9, 
  3.943831480973905*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"5a97706c-555b-42d3-b8c3-5f2eb8316a29"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualizations", "Section",
 CellChangeTimes->{{3.942889350592349*^9, 3.942889353963724*^9}, {
  3.944521604299152*^9, 
  3.9445216062320557`*^9}},ExpressionUUID->"cf0c77fd-76e4-44d5-911f-\
081db9d3cd97"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PerturbedArrayPlot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ca_", ",", " ", "pert_"}], "}"}], ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"ca", ",", "ops", ",", " ", 
    RowBox[{"Epilog", "->", 
     RowBox[{"(", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Arrowheads", "[", "Large", "]"}], ",", " ", "\n", 
        RowBox[{
         RowBox[{
          RowBox[{"Arrow", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", " ", 
               RowBox[{
                RowBox[{"Length", "[", "ca", "]"}], " ", "-", " ", "#1", " ", 
                "+", " ", ".5"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"#2", "-", ".5"}], " ", ",", 
               RowBox[{
                RowBox[{"Length", "[", "ca", "]"}], " ", "-", " ", "#1", " ", 
                "+", ".5"}]}], "}"}]}], "}"}], "]"}], "&"}], "@@@", 
         RowBox[{"Keys", "[", "pert", "]"}]}]}], "}"}], ")"}]}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.946069968774268*^9, 3.946070024039197*^9}, {
  3.946070066202227*^9, 3.946070073455491*^9}, {3.9460701099963017`*^9, 
  3.946070178538649*^9}, {3.946070265427083*^9, 3.946070272494901*^9}, {
  3.9460704020578337`*^9, 3.946070434245559*^9}, {3.9460705396583147`*^9, 
  3.9460705925553293`*^9}, {3.946070713753205*^9, 3.9460707345179462`*^9}, {
  3.946071865371168*^9, 3.946071879364648*^9}},
 CellLabel->"In[14]:=",
 CellID->1804130915,ExpressionUUID->"a4a97538-7d00-4ff9-a50b-d7344da05bab"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gettrimoffsets", "[", 
   RowBox[{"ca_", ",", " ", 
    RowBox[{"{", 
     RowBox[{"trimwidth_", ",", " ", "trimheight_"}], "}"}]}], "]"}], ":=", 
  " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"left", ",", " ", "right", ",", " ", "bottom"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"left", ",", " ", "right"}], "}"}], " ", "=", " ", 
      RowBox[{"Replace", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"bodyidxs", "[", "ca", "]"}], ",", " ", "1"}], "]"}], ",",
           " ", "trimwidth"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"_", ",", " ", "None"}], "}"}], ":>", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", " ", 
             RowBox[{"Length", "[", 
              RowBox[{"ca", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], ",", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "}"}], ",", " ", "width_"}], "}"}], ":>", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", " ", 
             RowBox[{
              RowBox[{"2", "width"}], "+", "1"}]}], "}"}]}], ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"idxs_", ",", " ", "width_"}], "}"}], ":>", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Max", "[", 
                 RowBox[{"1", ",", " ", 
                  RowBox[{"#1", " ", "-", " ", "width"}]}], "]"}], ",", " ", 
                RowBox[{"Min", "[", 
                 RowBox[{
                  RowBox[{"Length", "[", 
                   RowBox[{"ca", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
                  RowBox[{"#2", "+", "width"}]}], "]"}]}], "}"}], "&"}], 
             ")"}], "@@", 
            RowBox[{"MinMax", "[", 
             RowBox[{"idxs", "[", 
              RowBox[{"[", " ", 
               RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "]"}]}]}]}], 
         "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"bottom", " ", "=", " ", 
      RowBox[{"Replace", "[", 
       RowBox[{"trimheight", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"None", "->", 
           RowBox[{"Length", "[", "ca", "]"}]}], ",", " ", 
          RowBox[{"h_", ":>", " ", 
           RowBox[{"Min", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Replace", "[", 
               RowBox[{
                RowBox[{"TestCALifeTime", "[", "ca", "]"}], ",", " ", 
                RowBox[{
                 RowBox[{"-", "Infinity"}], "->", "0"}]}], "]"}], " ", "+", 
              " ", "trimheight"}], ",", " ", 
             RowBox[{"Length", "[", "ca", "]"}]}], "]"}]}]}], "}"}]}], 
       "]"}]}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"left", ",", " ", "right"}], "}"}], ",", " ", "bottom"}], 
      "}"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945293194658641*^9, 3.9452932867187643`*^9}, {
   3.945293322355928*^9, 3.945293357136991*^9}, {3.945293421873876*^9, 
   3.945293494229478*^9}, 3.945293534644459*^9, {3.945293588253034*^9, 
   3.9452935924197893`*^9}, {3.945293681304782*^9, 3.94529380369692*^9}, 
   3.945293850614188*^9, {3.945293882011123*^9, 3.945293886715385*^9}, {
   3.9452974644331837`*^9, 3.945297561725452*^9}, {3.94529761593769*^9, 
   3.945297618749472*^9}, {3.945297691265308*^9, 3.945297722631607*^9}, {
   3.945297787180779*^9, 3.945297789483876*^9}, {3.945298172886071*^9, 
   3.945298316467525*^9}, {3.9452984588534603`*^9, 3.945298461589884*^9}, {
   3.945300077631274*^9, 3.945300078042661*^9}, {3.945383439210944*^9, 
   3.945383440606598*^9}, {3.945656331796973*^9, 3.9456563345873947`*^9}, {
   3.946690665789307*^9, 3.946690676760977*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"dc2050e0-8d63-4cc7-b717-093004985c57"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TrimArray", "[", 
   RowBox[{"arr_", ",", 
    RowBox[{"{", 
     RowBox[{"width_", ",", "height_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"TrimArray", "[", 
   RowBox[{"arr", ",", " ", 
    RowBox[{"gettrimoffsets", "[", 
     RowBox[{"arr", ",", " ", 
      RowBox[{"{", 
       RowBox[{"width", ",", " ", "height"}], "}"}]}], "]"}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.943017569451321*^9, 3.9430175709684896`*^9}, {
   3.943106922113555*^9, 3.9431069310990877`*^9}, {3.943198900893907*^9, 
   3.943198901224431*^9}, {3.943373306178551*^9, 3.943373377600519*^9}, {
   3.943373423220467*^9, 3.943373424630056*^9}, {3.943459669162932*^9, 
   3.943459695627218*^9}, {3.944493476128366*^9, 3.944493516653517*^9}, 
   3.945292356243822*^9, {3.945292429192463*^9, 3.945292433938679*^9}, {
   3.945292530147868*^9, 3.945292538376861*^9}, {3.945292572343821*^9, 
   3.945292648968839*^9}, {3.94529281419796*^9, 3.945292832753424*^9}, {
   3.945292883805492*^9, 3.945292931108096*^9}, {3.9452929629217243`*^9, 
   3.945293091701778*^9}, {3.945293384723844*^9, 3.945293402742858*^9}, {
   3.945293567958729*^9, 3.945293639228851*^9}, {3.945293941315177*^9, 
   3.945294022233339*^9}, {3.945294091289926*^9, 3.945294386509444*^9}, 
   3.945294416616627*^9, {3.945294618550905*^9, 3.945294624188524*^9}, {
   3.945294671884531*^9, 3.945294699185649*^9}, {3.945298321348089*^9, 
   3.945298332825746*^9}, {3.946403856292363*^9, 3.946403860952742*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"236f1f6b-ae32-4891-93eb-46abd3e368cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TrimArray", "[", 
   RowBox[{"arr_", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"left_", ",", " ", "right_"}], "}"}], ",", "bottom_"}], 
     "}"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"#", "[", 
     RowBox[{"[", 
      RowBox[{"left", ";;", " ", "right"}], "]"}], "]"}], "&"}], "/@", " ", 
   RowBox[{"arr", "[", 
    RowBox[{"[", 
     RowBox[{";;", "bottom"}], "]"}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.943017569451321*^9, 3.9430175709684896`*^9}, {
   3.943106922113555*^9, 3.9431069310990877`*^9}, {3.943198900893907*^9, 
   3.943198901224431*^9}, {3.943373306178551*^9, 3.943373377600519*^9}, {
   3.943373423220467*^9, 3.943373424630056*^9}, {3.943459669162932*^9, 
   3.943459695627218*^9}, {3.944493476128366*^9, 3.944493516653517*^9}, 
   3.945292356243822*^9, {3.945292429192463*^9, 3.945292433938679*^9}, {
   3.945292530147868*^9, 3.945292538376861*^9}, {3.945292572343821*^9, 
   3.945292648968839*^9}, {3.94529281419796*^9, 3.945292832753424*^9}, {
   3.945292883805492*^9, 3.945292931108096*^9}, {3.9452929629217243`*^9, 
   3.945293091701778*^9}, {3.945293384723844*^9, 3.945293402742858*^9}, {
   3.945293567958729*^9, 3.945293639228851*^9}, {3.945293941315177*^9, 
   3.945294022233339*^9}, {3.945294091289926*^9, 3.945294386509444*^9}, 
   3.945294416616627*^9, {3.945294618550905*^9, 3.945294664969989*^9}, 
   3.9452946951882153`*^9, 3.945297648752054*^9, {3.945297917133191*^9, 
   3.945297952805462*^9}, {3.945297983947146*^9, 3.945297988951889*^9}, {
   3.945298338937427*^9, 3.945298354347632*^9}, {3.945299225211084*^9, 
   3.945299226614546*^9}, {3.945384135842697*^9, 3.945384136410026*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"a1ac0263-c9ed-44b1-89a4-a9f6a28dbc40"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PlotCA", "[", 
   RowBox[{"ca_List", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{"PlotCA", ",", " ", "ArrayPlot"}], "}"}], "]"}]}]}], "]"}], ":=",
   " ", 
  RowBox[{"PlotCA", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ca", ",", " ", 
      RowBox[{"<|", "|>"}]}], "}"}], ",", "\n", 
    RowBox[{"Normal", "[", 
     RowBox[{"Merge", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ops", ",", " ", 
         RowBox[{"\"\<PerturbationArrows\>\"", "->", "False"}]}], "}"}], ",", 
       " ", "Last"}], "]"}], "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945294845624233*^9, 3.945294873786907*^9}, {
   3.945294983499583*^9, 3.9452950510281057`*^9}, {3.945296909754796*^9, 
   3.945296950145707*^9}, 3.945298866189291*^9, {3.945300447162889*^9, 
   3.945300448193713*^9}, {3.945302689272188*^9, 3.945302773782592*^9}, {
   3.94530282174085*^9, 3.945302870957955*^9}, {3.9453029277364283`*^9, 
   3.945302980666069*^9}, {3.945303027226782*^9, 3.945303060146553*^9}, 
   3.945526057656592*^9, {3.945635294326138*^9, 3.945635294929057*^9}, {
   3.945641100353385*^9, 3.945641100702373*^9}, {3.945656565229887*^9, 
   3.9456565690322723`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"bc482545-8a99-4e13-a439-ea9bdf712480"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "PlotCA", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ColorRules", " ", "->", " ", "colorrules"}], ",", " ", 
     RowBox[{"\"\<Trim\>\"", " ", "->", " ", 
      RowBox[{"{", 
       RowBox[{"1", ",", " ", "None"}], "}"}]}], ",", " ", "\n", 
     RowBox[{"Mesh", "->", "False"}], ",", " ", 
     RowBox[{"MeshStyle", " ", "->", " ", 
      RowBox[{"Opacity", "[", "0.1", "]"}]}], ",", " ", 
     RowBox[{"\"\<PerturbationArrows\>\"", "->", "True"}], ",", " ", 
     RowBox[{"\"\<ArrowSize\>\"", "->", "Medium"}], ",", " ", 
     RowBox[{"\"\<MaxWidth\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"1", ",", " ", "All"}], "}"}]}], ",", " ", "\n", 
     RowBox[{"\"\<ArrowDirection\>\"", "->", "Automatic"}], ",", " ", 
     RowBox[{"\"\<Graphics\>\"", "->", 
      RowBox[{"{", "}"}]}], ",", "\n", 
     RowBox[{"\"\<ArrowStyle\>\"", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Haloing", "[", 
         RowBox[{
          RowBox[{"Lighter", "[", 
           RowBox[{"Cyan", ",", " ", ".85"}], "]"}], ",", "2"}], "]"}], ",", 
        RowBox[{"GrayLevel", "[", "0.35", "]"}]}], "}"}]}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"PlotCA", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ca_", ",", "perts_Association"}], "}"}], ",", " ", 
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", 
       RowBox[{"{", 
        RowBox[{"PlotCA", ",", " ", "ArrayPlot"}], "}"}], "]"}]}]}], "]"}], 
   " ", ":=", " ", "\n", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"allops", " ", "=", " ", 
        RowBox[{"Merge", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Options", "[", "PlotCA", "]"}], ",", "ops"}], "}"}], ",",
           "Last"}], "]"}]}], ",", " ", "left", ",", " ", "right", ",", " ", 
       "bottom", ",", " ", "capped"}], "}"}], ",", "\n", 
     RowBox[{
      RowBox[{"capped", " ", "=", " ", 
       RowBox[{"ca", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"allops", "[", "\"\<MaxWidth\>\"", "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ";;", 
           RowBox[{
            RowBox[{"allops", "[", "\"\<MaxWidth\>\"", "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}]}], "]"}], "]"}]}], ";", "\n", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"left", ",", " ", "right"}], "}"}], ",", " ", "bottom"}], 
        "}"}], " ", "=", " ", 
       RowBox[{"gettrimoffsets", "[", 
        RowBox[{"capped", ",", " ", 
         RowBox[{"allops", "[", "\"\<Trim\>\"", "]"}]}], "]"}]}], ";", " ", 
      "\n", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"ArrayPlot", "[", 
         RowBox[{
          RowBox[{"TrimArray", "[", 
           RowBox[{"capped", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"left", ",", " ", "right"}], "}"}], ",", " ", 
              "bottom"}], "}"}]}], "]"}], ",", " ", "##"}], "]"}], "&"}], "[",
        "\[IndentingNewLine]", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"Normal", "[", "allops", "]"}], ",", " ", 
           RowBox[{"Options", "[", "ArrayPlot", "]"}]}], "]"}], ",", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"allops", "[", "\"\<PerturbationArrows\>\"", "]"}], " ", "||",
             " ", 
            RowBox[{
             RowBox[{"allops", "[", "\"\<Graphics\>\"", "]"}], " ", "=!=", 
             " ", 
             RowBox[{"{", "}"}]}]}], ",", " ", "\n", 
           RowBox[{"Epilog", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Sequence", "@@", 
               RowBox[{"allops", "[", "\"\<Graphics\>\"", "]"}]}], ",", 
              RowBox[{"Arrowheads", "[", 
               RowBox[{"{", 
                RowBox[{"allops", "[", "\"\<ArrowSize\>\"", "]"}], "}"}], 
               "]"}], ",", "\n", 
              RowBox[{
               RowBox[{
                RowBox[{"getarrow", "[", 
                 RowBox[{"capped", ",", " ", "#", ",", " ", 
                  RowBox[{"left", " ", "+", " ", 
                   RowBox[{"First", "[", 
                    RowBox[{"allops", "[", "\"\<MaxWidth\>\"", "]"}], "]"}], 
                   " ", "-", " ", "1"}], ",", " ", "bottom", ",", " ", "\n", 
                  RowBox[{"allops", "[", "\"\<ArrowDirection\>\"", "]"}], ",",
                   " ", 
                  RowBox[{"allops", "[", "\"\<ArrowStyle\>\"", "]"}]}], "]"}],
                 "&"}], "/@", " ", 
               RowBox[{"Keys", "[", "perts", "]"}]}]}], "}"}]}], ",", " ", 
           "\n", "Nothing"}], "]"}]}], "]"}], "]"}]}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"PlotCA", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_Integer", ",", " ", "k_Integer", ",", " ", "r_Integer"}], 
     "}"}], ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], " ", ":=", "  ", "\n", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Steps\>\"", "->", 
            RowBox[{"{", 
             RowBox[{"200", ",", " ", "All"}], "}"}]}], "}"}], ",", "ops"}], 
         "}"}], ",", "Last"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"PlotCA", "[", 
     RowBox[{
      RowBox[{"getca", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], ",", " ", 
        RowBox[{"allops", "[", "\"\<Steps\>\"", "]"}]}], "]"}], ",", " ", 
      RowBox[{"Sequence", "@@", 
       RowBox[{"Normal", "[", "allops", "]"}]}]}], "]"}]}], "]"}]}]}], "Code",\

 CellChangeTimes->{{3.943106358688594*^9, 3.943106375048778*^9}, {
   3.943106979531597*^9, 3.943106988235869*^9}, {3.94310786010571*^9, 
   3.943107865349316*^9}, {3.94311390218522*^9, 3.943113916165694*^9}, 
   3.943114206799518*^9, {3.943364337468414*^9, 3.943364356291*^9}, {
   3.94336439171276*^9, 3.9433644005207233`*^9}, {3.943364472464894*^9, 
   3.943364473040235*^9}, {3.94337218900583*^9, 3.943372193858235*^9}, {
   3.943372227748727*^9, 3.943372229008975*^9}, {3.943377838524406*^9, 
   3.943377844722754*^9}, {3.943455471192767*^9, 3.943455542176583*^9}, {
   3.943455637493842*^9, 3.943455685260359*^9}, {3.943455721343861*^9, 
   3.943455769714992*^9}, {3.943456396435326*^9, 3.943456432408684*^9}, {
   3.94353834209827*^9, 3.943538367957181*^9}, {3.943566345930059*^9, 
   3.943566351208854*^9}, {3.943566468830921*^9, 3.943566469091758*^9}, {
   3.943566841883333*^9, 3.943566842042541*^9}, {3.943567082571121*^9, 
   3.943567100426882*^9}, 3.943799420615381*^9, {3.943800726099045*^9, 
   3.94380074188017*^9}, {3.9438008034312897`*^9, 3.943800813658866*^9}, {
   3.943800844862834*^9, 3.943800902396796*^9}, {3.943800958948412*^9, 
   3.943800963102242*^9}, {3.943801200441373*^9, 3.943801282513608*^9}, {
   3.943801312748512*^9, 3.943801328887786*^9}, {3.9438020059305143`*^9, 
   3.9438020148781543`*^9}, 3.94380264751248*^9, {3.943802684760384*^9, 
   3.943802687214029*^9}, {3.944432031546154*^9, 3.944432032264789*^9}, {
   3.944493423584108*^9, 3.94449343416045*^9}, {3.945295199439509*^9, 
   3.945295221703529*^9}, {3.945295311298005*^9, 3.945295361190892*^9}, {
   3.945295397137776*^9, 3.945295450027227*^9}, {3.945295487660928*^9, 
   3.94529571318329*^9}, {3.945295849347142*^9, 3.945295872323279*^9}, {
   3.94529590487897*^9, 3.945296022782197*^9}, {3.945296486934933*^9, 
   3.945296503346024*^9}, 3.945296847269151*^9, {3.945296898097121*^9, 
   3.945296898658659*^9}, {3.945298369086669*^9, 3.945298485925401*^9}, {
   3.94529866756955*^9, 3.945298683712995*^9}, {3.945299631267777*^9, 
   3.945299634545657*^9}, {3.9453001790861607`*^9, 3.94530018039613*^9}, {
   3.945300334249873*^9, 3.9453003343238573`*^9}, {3.945303088195676*^9, 
   3.945303088996951*^9}, 3.945349703961798*^9, {3.94536369904582*^9, 
   3.945363717297109*^9}, 3.945363839510446*^9, 3.945379146293873*^9, {
   3.945383374631634*^9, 3.9453833794638863`*^9}, {3.945383718796687*^9, 
   3.945383725704792*^9}, {3.94552528404148*^9, 3.945525289542871*^9}, 
   3.945526051899728*^9, {3.945533790223825*^9, 3.945533800552722*^9}, {
   3.94563495520962*^9, 3.945634968299815*^9}, {3.945634999044939*^9, 
   3.945635032143476*^9}, {3.945647176059946*^9, 3.945647208017284*^9}, {
   3.945647493698488*^9, 3.945647538372767*^9}, 3.945656574061282*^9, {
   3.945657863909787*^9, 3.945657864956173*^9}, {3.945658108797264*^9, 
   3.945658121326334*^9}, 3.945660491379346*^9, {3.945660909367015*^9, 
   3.94566091016302*^9}, {3.9456613765511*^9, 3.9456614081585827`*^9}, {
   3.9456615103833714`*^9, 3.945661512498241*^9}, {3.945661629111843*^9, 
   3.9456616307049427`*^9}, {3.945661720077988*^9, 3.945661729966634*^9}, {
   3.945661761897276*^9, 3.945661762840654*^9}, {3.945661883775737*^9, 
   3.945661923089397*^9}, {3.945662036644912*^9, 3.9456620796553307`*^9}, {
   3.9464012769439*^9, 3.946401287994206*^9}, {3.946401396558921*^9, 
   3.946401402890257*^9}, {3.946401452631402*^9, 3.946401492653789*^9}, {
   3.946401991083851*^9, 3.946402045579023*^9}, 3.946403095129546*^9, {
   3.946403407334115*^9, 3.946403489672303*^9}, {3.946404190006364*^9, 
   3.946404190680002*^9}, {3.946404226666936*^9, 3.946404265332048*^9}, {
   3.946404840847248*^9, 3.946404849598381*^9}, {3.94640565712808*^9, 
   3.946405664323269*^9}, {3.946405847885517*^9, 3.946405848686509*^9}, {
   3.946406060594774*^9, 3.946406060781722*^9}, {3.946406275387241*^9, 
   3.946406293063033*^9}, 3.9464063547659883`*^9, {3.946414707200455*^9, 
   3.946414781969375*^9}, {3.946414819710042*^9, 3.9464148216942787`*^9}, {
   3.9464148572512283`*^9, 3.946414859681031*^9}, {3.9464148992397947`*^9, 
   3.946414903182425*^9}, {3.946414944854201*^9, 3.9464149812347183`*^9}, {
   3.9464150519677*^9, 3.946415053239094*^9}, {3.9464151610623407`*^9, 
   3.9464151666288767`*^9}, {3.946415236367476*^9, 3.9464152539082127`*^9}, {
   3.946415285666033*^9, 3.94641529413087*^9}, {3.9464155856255198`*^9, 
   3.946415619744156*^9}, {3.946415655890505*^9, 3.946415660595259*^9}, {
   3.946416626703637*^9, 3.9464166588834047`*^9}, 3.946416865188572*^9, {
   3.9464170259351597`*^9, 3.946417041968081*^9}, {3.946423705040704*^9, 
   3.946423759012779*^9}, {3.946424379552889*^9, 3.946424385317236*^9}, {
   3.946424441834894*^9, 3.946424445567153*^9}, {3.946426113376052*^9, 
   3.946426118625676*^9}, {3.946426314118448*^9, 3.946426339357868*^9}, {
   3.946426513534689*^9, 3.946426532523633*^9}, {3.9465661693390923`*^9, 
   3.946566170841405*^9}, {3.9470258808161592`*^9, 3.947025905851392*^9}, {
   3.947025955337736*^9, 3.9470259862155123`*^9}, {3.947026044978957*^9, 
   3.94702605825441*^9}, {3.9470263884946547`*^9, 3.947026415277069*^9}, {
   3.947026457288498*^9, 3.9470264574168243`*^9}, {3.9470265127699423`*^9, 
   3.9470265157555037`*^9}, 3.947026546098349*^9, {3.947026954566276*^9, 
   3.94702695846712*^9}, {3.947026996472039*^9, 3.9470269981821833`*^9}, {
   3.947027430150867*^9, 3.947027478279839*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"0a278221-ec8e-4818-a10d-902b323e33f0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getarrow", "[", 
   RowBox[{"ca_", ",", " ", 
    RowBox[{"{", 
     RowBox[{"i_", ",", " ", "j_"}], "}"}], ",", " ", "left_", ",", " ", 
    "bottom_", ",", " ", 
    RowBox[{"direction_", ":", "Automatic"}], ",", " ", "\n", 
    RowBox[{"arrowstyle_", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Haloing", "[", 
        RowBox[{
         RowBox[{"Lighter", "[", 
          RowBox[{"Cyan", ",", " ", ".85"}], "]"}], ",", "2"}], "]"}], ",", 
       RowBox[{"GrayLevel", "[", "0.35", "]"}]}], "}"}]}]}], "]"}], ":=", " ",
   "\n", 
  RowBox[{"Append", "[", 
   RowBox[{"arrowstyle", ",", 
    RowBox[{"Arrow", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\n", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"direction", " ", "===", " ", "Automatic"}], ",", " ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"j", "-", "left"}], "<", 
              RowBox[{"Ceiling", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"Length", "[", 
                  RowBox[{"ca", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], "]"}], ")"}], "/", "2"}], 
               "]"}]}], ",", 
             RowBox[{"Length", "[", 
              RowBox[{"ca", "[", 
               RowBox[{"[", "i", "]"}], "]"}], "]"}], ",", " ", "0"}], "]"}], 
           ",", " ", "\n", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"direction", " ", "===", " ", "\"\<Right\>\""}], ",", 
             " ", "0", ",", " ", 
             RowBox[{"Length", "[", 
              RowBox[{"ca", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "]"}]}], "]"}], "\n", 
         ",", 
         RowBox[{"bottom", "-", "i", " ", "-", "0.5"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"j", "+", ".5", "-", "left"}], ",", 
         RowBox[{"bottom", "-", "i", "-", "0.5"}]}], "}"}]}], "}"}], "]"}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.945634907821689*^9, 3.945634937648013*^9}, {
   3.9456578721408243`*^9, 3.945657993641839*^9}, {3.945658041164122*^9, 
   3.94565804139354*^9}, {3.9456580780167*^9, 3.945658139931852*^9}, {
   3.945658173827106*^9, 3.945658184044565*^9}, {3.945658221489928*^9, 
   3.945658223412406*^9}, {3.94565831147316*^9, 3.945658330192912*^9}, {
   3.946404722040398*^9, 3.946404728693056*^9}, {3.946406188612273*^9, 
   3.946406206851822*^9}, {3.946406487953494*^9, 3.94640649569016*^9}, {
   3.946409552293276*^9, 3.946409575324222*^9}, {3.946414153742974*^9, 
   3.946414164147415*^9}, {3.9464142342885447`*^9, 3.94641425127284*^9}, {
   3.946414866250152*^9, 3.946414872334289*^9}, {3.946414990474228*^9, 
   3.946414996242106*^9}, {3.946415061065434*^9, 3.946415061696402*^9}, {
   3.946415102138871*^9, 3.946415104837607*^9}, 3.946415648616823*^9, {
   3.946416185199712*^9, 3.946416378046973*^9}, 3.946416453024721*^9, {
   3.94641650884992*^9, 3.9464165250419893`*^9}, {3.946416596068718*^9, 
   3.946416598815462*^9}, {3.9464170635984173`*^9, 3.946417066686971*^9}, {
   3.946417239925265*^9, 3.94641724285909*^9}, {3.946425974845911*^9, 
   3.94642597621773*^9}, {3.946426051262994*^9, 3.94642605169182*^9}, {
   3.946430926082719*^9, 3.946430957801482*^9}, {3.946480594617242*^9, 
   3.9464805974426622`*^9}, {3.946480627873939*^9, 3.94648065758916*^9}, {
   3.947025972982477*^9, 3.947026023218471*^9}, {3.947026119864112*^9, 
   3.947026125043384*^9}, {3.9470263145537987`*^9, 3.94702635465266*^9}, {
   3.947027003835165*^9, 3.947027105673911*^9}, 3.947027469113757*^9},
 CellLabel->"In[22]:=",ExpressionUUID->"9b014647-0901-4c26-91a1-98130b47cbf3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PlotCAs", "[", 
   RowBox[{"cas_", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "PlotCA", "]"}], ",", "ops"}], "}"}], ",", 
        "Last"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"ArrayPlot", "[", 
       RowBox[{
        RowBox[{"ArrayFlatten", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"TrimArray", "[", 
             RowBox[{"#", ",", " ", 
              RowBox[{"allops", "[", "\"\<Trim\>\"", "]"}]}], "]"}], "&"}], "/@",
            " ", "cas"}], "}"}], "]"}], ",", " ", "##"}], "]"}], "&"}], "[", 
     RowBox[{"FilterRules", "[", 
      RowBox[{
       RowBox[{"Normal", "[", "allops", "]"}], ",", "\n", " ", 
       RowBox[{"Options", "[", "ArrayPlot", "]"}]}], "]"}], "]"}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.945526076049056*^9, 3.945526080001117*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"1215da87-9b66-4944-8205-67d788d9054a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"LocationDifferences", "[", 
   RowBox[{"arr1_", ",", " ", "arr2_", ",", " ", 
    RowBox[{"levelspec_", ":", "2"}]}], "]"}], " ", ":=", " ", "\n", 
  RowBox[{"Position", "[", 
   RowBox[{
    RowBox[{"MapThread", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#1", ",", " ", "#2"}], "}"}], " ", "&"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"arr1", ",", " ", "arr2"}], "}"}], ",", " ", "2"}], "]"}], ",",
     " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x_", ",", " ", "y_"}], "}"}], " ", "/;", " ", 
     RowBox[{"x", " ", "!=", " ", "y"}]}], ",", " ", "levelspec"}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.94284109345717*^9, 3.942841123199259*^9}, {
   3.942841245628819*^9, 3.9428412530122347`*^9}, 3.942841464181205*^9, {
   3.9428415042017107`*^9, 3.942841570648151*^9}, {3.942841603752768*^9, 
   3.942841605973318*^9}, {3.942841685917691*^9, 3.942841716147069*^9}, {
   3.942947182267355*^9, 3.942947182459833*^9}, {3.943105711024732*^9, 
   3.943105738718268*^9}, {3.943105784418694*^9, 3.943105787791119*^9}, {
   3.943374484112621*^9, 3.943374530822165*^9}, 3.944307889143518*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"00820d1f-bba9-49cf-9118-7a39c77588ec"],

Cell[BoxData[
 RowBox[{"ClearAll", "@", "PlotDifferences"}]], "Input",
 CellChangeTimes->{{3.9470261582896*^9, 3.947026166278064*^9}},
 CellLabel->
  "In[268]:=",ExpressionUUID->"b57fed20-e5c0-4c2a-bf2e-02cb78802afd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "PlotDifferences", "]"}], " ", "=", " ", 
   RowBox[{"{", " ", 
    RowBox[{
     RowBox[{"\"\<Perturbations\>\"", "->", 
      RowBox[{"<|", "|>"}]}], ",", "\n", 
     RowBox[{"ColorRules", " ", "->", " ", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"0", " ", "->", " ", "White"}], ",", " ", 
          RowBox[{
           RowBox[{"-", "100"}], " ", "->", " ", "Black"}]}], "}"}], ",", " ",
         "\n", "    ", 
        RowBox[{
         RowBox[{
          RowBox[{"#1", " ", ":>", " ", 
           RowBox[{"Lighter", "[", 
            RowBox[{"#2", ",", " ", ".7"}], "]"}]}], " ", "&"}], " ", "@@@", 
         " ", "colorrules"}], ",", "\n", "    ", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "#1"}], " ", ":>", " ", 
           RowBox[{"Darker", "[", 
            RowBox[{"#2", ",", " ", ".7"}], "]"}]}], " ", "&"}], " ", "@@@", 
         " ", "colorrules"}]}], "\n", "    ", "]"}]}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"PlotDifferences", "[", 
   RowBox[{"ca1_", ",", " ", "ca2_", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], " ", ":=", " ", "\n", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "locs", ",", " ", "vals", ",", " ", "rus", ",", " ", "highlighted", ",", 
      " ", "trimmed", ",", " ", "allops", ",", "perts", ",", " ", "left", ",",
       "\n", "right", ",", " ", "bottom"}], "}"}], ",", "\n", "\t", 
    RowBox[{
     RowBox[{"allops", "=", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Options", "[", "PlotCA", "]"}], ",", " ", 
            RowBox[{"Options", "[", "PlotDifferences", "]"}]}], "]"}], ",", 
          "ops"}], "}"}], ",", "Last"}], "]"}]}], ";", "\n", "    ", 
     RowBox[{"locs", " ", "=", " ", 
      RowBox[{"LocationDifferences", "[", 
       RowBox[{"ca1", ",", " ", "ca2"}], "]"}]}], ";", "\n", "    ", 
     RowBox[{"vals", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"ca2", "[", 
         RowBox[{"[", 
          RowBox[{"#1", ",", " ", "#2"}], "]"}], "]"}], " ", "&"}], " ", "@@@",
        " ", "locs"}]}], ";", "\n", "    ", 
     RowBox[{"rus", " ", "=", " ", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#1", " ", "->", " ", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#2", " ", "==", " ", "0"}], ",", " ", 
            RowBox[{"-", "100"}], ",", " ", 
            RowBox[{"-", "#2"}]}], "]"}]}], " ", "&"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"locs", ",", " ", "vals"}], "}"}]}], "]"}]}], ";", "\n", 
     "    ", 
     RowBox[{"highlighted", " ", "=", " ", 
      RowBox[{"ReplacePart", "[", 
       RowBox[{"ca1", ",", " ", "rus"}], "]"}]}], ";", "\n", "    ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"left", ",", " ", "right"}], "}"}], ",", " ", "bottom"}], 
       "}"}], " ", "=", " ", 
      RowBox[{"gettrimoffsets", "[", 
       RowBox[{"ca2", ",", " ", 
        RowBox[{"allops", "[", "\"\<Trim\>\"", "]"}]}], "]"}]}], ";", "\n", 
     "    ", 
     RowBox[{"trimmed", " ", "=", " ", 
      RowBox[{"TrimArray", "[", 
       RowBox[{"highlighted", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"left", ",", " ", "right"}], "}"}], ",", " ", "bottom"}], 
         "}"}]}], "]"}]}], ";", "\n", "    ", 
     RowBox[{
      RowBox[{
       RowBox[{"ArrayPlot", "[", 
        RowBox[{"trimmed", ",", " ", "##"}], "]"}], "&"}], "[", 
      "\[IndentingNewLine]", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"Normal", "[", "allops", "]"}], ",", " ", 
          RowBox[{"Options", "[", "ArrayPlot", "]"}]}], "]"}], ",", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<PerturbationArrows\>\"", "]"}], ",", 
          " ", "\n", 
          RowBox[{"Epilog", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Arrowheads", "[", 
              RowBox[{"{", 
               RowBox[{"allops", "[", "\"\<ArrowSize\>\"", "]"}], "}"}], 
              "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"getarrow", "[", 
                RowBox[{
                "trimmed", ",", " ", "#", ",", "left", ",", " ", "bottom", ",",
                  " ", "\n", 
                 RowBox[{"allops", "[", "\"\<ArrowDirection\>\"", "]"}], ",", 
                 " ", 
                 RowBox[{"allops", "[", "\"\<HaloingWidth\>\"", "]"}]}], 
                "]"}], "&"}], "/@", " ", 
              RowBox[{"Keys", "[", 
               RowBox[{"allops", "[", "\"\<Perturbations\>\"", "]"}], 
               "]"}]}]}], "}"}]}], ",", " ", "\n", "Nothing"}], "]"}]}], 
       "]"}], "]"}]}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.943140779972243*^9, 3.943140829408785*^9}, {
   3.943140887462928*^9, 3.943140898149803*^9}, {3.9433721303152437`*^9, 
   3.943372147354694*^9}, 3.943377852602972*^9, 3.943379790272509*^9, {
   3.943537959725543*^9, 3.943537993795289*^9}, {3.943538264100615*^9, 
   3.943538273295963*^9}, {3.94355225625259*^9, 3.943552259024941*^9}, {
   3.943799896063838*^9, 3.943799902262787*^9}, {3.943799987363011*^9, 
   3.943800037817508*^9}, {3.943800374543797*^9, 3.9438003801044*^9}, {
   3.943800431351125*^9, 3.9438004710455093`*^9}, {3.9438005227218447`*^9, 
   3.943800524474503*^9}, {3.943800626121389*^9, 3.943800633785177*^9}, {
   3.943801173008723*^9, 3.943801193393601*^9}, 3.943801249712264*^9, 
   3.943802737450279*^9, {3.943802781851212*^9, 3.943802782996443*^9}, {
   3.943802818648016*^9, 3.943802838269998*^9}, {3.945384041816818*^9, 
   3.945384048001148*^9}, {3.945658635748845*^9, 3.945658898852055*^9}, {
   3.945658938296267*^9, 3.945658968322533*^9}, 3.945659217695423*^9, {
   3.9456593823394423`*^9, 3.94565941357098*^9}, {3.945659451538164*^9, 
   3.945659456358239*^9}, {3.945659557279435*^9, 3.945659567562809*^9}, {
   3.945659832680685*^9, 3.945659865763013*^9}, {3.945660598792308*^9, 
   3.945660648742975*^9}, {3.945660689474099*^9, 3.945660894125504*^9}, {
   3.945660924924346*^9, 3.945660929778511*^9}, {3.945661124448642*^9, 
   3.945661124825705*^9}, {3.945661229655545*^9, 3.945661269283289*^9}, {
   3.945662262187432*^9, 3.945662271187779*^9}, 3.945662401521862*^9, {
   3.945662446593384*^9, 3.945662452204391*^9}, 3.945662512927724*^9, {
   3.945662834556205*^9, 3.945662834832768*^9}, 3.945664469738006*^9, {
   3.945664500105354*^9, 3.945664501053206*^9}, {3.945739232159182*^9, 
   3.945739238397667*^9}, {3.946513256755281*^9, 3.9465132952748537`*^9}, {
   3.946513367920168*^9, 3.9465133722387657`*^9}, {3.946513583877543*^9, 
   3.9465135874220476`*^9}, {3.946516671238366*^9, 3.946516711993268*^9}, {
   3.947001155256077*^9, 3.947001198755054*^9}, {3.947001256753283*^9, 
   3.947001279937295*^9}, {3.9470013382247667`*^9, 3.947001351269285*^9}, {
   3.947001437322412*^9, 3.947001439031752*^9}, {3.9470015224424467`*^9, 
   3.947001545440494*^9}, {3.947001656690154*^9, 3.947001681856786*^9}, {
   3.947002635746716*^9, 3.947002637169669*^9}, {3.94702617887142*^9, 
   3.947026196954626*^9}, {3.947026561849224*^9, 3.947026562449195*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"490e47d5-e5d0-4a8c-a100-0a62ff6c7f65"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "HighlightPerturbations", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ColorRules", "->", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", "->", "White"}], "}"}], ",", "\n", "    ", 
        RowBox[{
         RowBox[{
          RowBox[{"#1", " ", "->", " ", 
           RowBox[{"GrayLevel", "[", "0.8", "]"}]}], " ", "&"}], " ", "@@@", 
         " ", "colorrules"}], ",", "\n", "    ", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"-", "#1"}], " ", "->", " ", "#2"}], "&"}], " ", "@@@", 
         " ", "colorrules"}]}], "]"}]}], ",", " ", 
     RowBox[{"\"\<Span\>\"", "->", "All"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"HighlightPerturbations", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ca_", ",", " ", "perts_"}], "}"}], ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\n", 
     RowBox[{
     "highlighted", ",", " ", "allops", ",", " ", "left", ",", " ", "right", ",",
       " ", "bottom", ",", " ", "trimmed"}], "}"}], ",", "\n", 
    RowBox[{
     RowBox[{"allops", "=", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"Options", "[", "PlotCA", "]"}], ",", 
            RowBox[{"Options", "[", "HighlightPerturbations", "]"}]}], "]"}], 
          ",", "ops"}], "}"}], ",", "Last"}], "]"}]}], ";", "\n", 
     RowBox[{"highlighted", " ", "=", " ", 
      RowBox[{
       RowBox[{"ReplacePart", "[", 
        RowBox[{"ca", ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"#1", "->", 
            RowBox[{"-", "#2"}]}], "&"}], " ", "@@@", 
          RowBox[{"Normal", "[", "perts", "]"}]}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"allops", "[", "\"\<Span\>\"", "]"}], "]"}], "]"}]}], ";", 
     "\n", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"left", ",", " ", "right"}], "}"}], ",", " ", "bottom"}], 
       "}"}], " ", "=", " ", 
      RowBox[{"gettrimoffsets", "[", 
       RowBox[{"ca", ",", " ", 
        RowBox[{"allops", "[", "\"\<Trim\>\"", "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"trimmed", " ", "=", " ", 
      RowBox[{"TrimArray", "[", 
       RowBox[{"highlighted", ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"left", ",", " ", "right"}], "}"}], ",", " ", "bottom"}], 
         "}"}]}], "]"}]}], ";", "\n", 
     RowBox[{
      RowBox[{
       RowBox[{"ArrayPlot", "[", 
        RowBox[{"trimmed", ",", " ", "##"}], "]"}], "&"}], "[", 
      "\[IndentingNewLine]", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"FilterRules", "[", 
         RowBox[{
          RowBox[{"Normal", "[", "allops", "]"}], ",", " ", 
          RowBox[{"Options", "[", "ArrayPlot", "]"}]}], "]"}], ",", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<PerturbationArrows\>\"", "]"}], ",", 
          " ", "\n", 
          RowBox[{"Epilog", "->", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Arrowheads", "[", 
              RowBox[{"{", 
               RowBox[{"allops", "[", "\"\<ArrowSize\>\"", "]"}], "}"}], 
              "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"getarrow", "[", 
                RowBox[{"ca", ",", " ", "#", ",", " ", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"left", ",", " ", "right"}], "}"}], ",", " ", 
                   "bottom"}], "}"}]}], "]"}], "&"}], "/@", " ", 
              RowBox[{"Keys", "[", "perts", "]"}]}]}], "}"}]}], ",", " ", 
          "\n", "Nothing"}], "]"}]}], "]"}], "]"}]}]}], "\[IndentingNewLine]",
    "]"}]}]}], "Code",
 CellChangeTimes->{{3.943106685517144*^9, 3.94310677904241*^9}, 
   3.943106870352314*^9, {3.943107599822666*^9, 3.94310773548406*^9}, {
   3.94310779502401*^9, 3.943107812275255*^9}, 3.943107902392624*^9, {
   3.9431079903214*^9, 3.943108001961671*^9}, {3.943117565625243*^9, 
   3.94311760767655*^9}, {3.943118261634057*^9, 3.943118264127614*^9}, {
   3.943118310387644*^9, 3.943118338561084*^9}, {3.943118501698257*^9, 
   3.943118514665153*^9}, {3.943119032917924*^9, 3.943119046038877*^9}, 
   3.943119127604664*^9, {3.943119296902045*^9, 3.943119339979965*^9}, {
   3.943119560372925*^9, 3.943119592441654*^9}, {3.943119954020553*^9, 
   3.943120075695915*^9}, {3.943120126861842*^9, 3.943120148915618*^9}, {
   3.943120193550227*^9, 3.94312019625139*^9}, {3.943120244135589*^9, 
   3.943120244294791*^9}, {3.943369750018495*^9, 3.943369750909212*^9}, {
   3.9433697832791233`*^9, 3.943369830073592*^9}, {3.943369873282905*^9, 
   3.943369887355904*^9}, {3.943369984394773*^9, 3.9433699845053*^9}, 
   3.943377856878038*^9, {3.943380021841707*^9, 3.943380032187724*^9}, {
   3.943537932634395*^9, 3.943537952520741*^9}, {3.9436463581738358`*^9, 
   3.9436463593952503`*^9}, {3.943814028903208*^9, 3.943814107429339*^9}, {
   3.9438141696089687`*^9, 3.94381421192414*^9}, {3.944405684349122*^9, 
   3.944405739058359*^9}, {3.94440579937637*^9, 3.944406079766323*^9}, 
   3.944420599808983*^9, {3.9444206322689*^9, 3.944420641207638*^9}, {
   3.944420676870726*^9, 3.944420694453733*^9}, {3.944421216241522*^9, 
   3.94442132628037*^9}, {3.944424523376267*^9, 3.944424567268689*^9}, {
   3.94442460127194*^9, 3.9444246136162987`*^9}, {3.944427378392194*^9, 
   3.944427387851761*^9}, {3.944522647617392*^9, 3.944522701760391*^9}, {
   3.945384095830322*^9, 3.945384106590083*^9}, {3.9456628720001583`*^9, 
   3.945662874400648*^9}, {3.94566332508942*^9, 3.945663418500539*^9}, {
   3.9456634499125557`*^9, 3.9456634765759172`*^9}, {3.94566352466411*^9, 
   3.945663530445005*^9}, {3.945663634646159*^9, 3.945663706811124*^9}, {
   3.945663742913786*^9, 3.945663786882972*^9}, {3.9456638218337317`*^9, 
   3.945663861337218*^9}, {3.945664030646152*^9, 3.945664032426483*^9}, {
   3.945664152411584*^9, 3.945664156013639*^9}, 3.94566423210784*^9, {
   3.945664313731479*^9, 3.945664330813746*^9}, {3.94566459122963*^9, 
   3.94566459286037*^9}, {3.945664625686434*^9, 3.945664631393455*^9}, {
   3.945664766656722*^9, 3.945664792875109*^9}, 3.945664860366918*^9, {
   3.945664938940698*^9, 3.945664964778101*^9}, {3.94573666581114*^9, 
   3.94573667477476*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"e5721ff3-e4b7-47dc-bde0-27b33fda6738"],

Cell[BoxData[
 RowBox[{"ClearAll", "@", "DiseasePropagationPlot"}]], "Input",
 CellChangeTimes->{{3.946514205559841*^9, 3.9465142097883577`*^9}},
 CellLabel->
  "In[273]:=",ExpressionUUID->"ecfee036-990d-4b7f-90fe-c7bb776881aa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "DiseasePropagationPlot", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"PlotRange", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "5"}], ",", " ", "50"}], "}"}]}], ",", " ", 
     RowBox[{"PlotHighlighting", "->", "None"}], ",", " ", 
     RowBox[{"\"\<LineStyle\>\"", "->", 
      RowBox[{"{", 
       RowBox[{"Red", ",", " ", "Thick"}], "}"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DiseasePropogationPlot", "[", 
   RowBox[{
   "ru_", ",", " ", "init_", ",", " ", "txspec_", ",", " ", "row_", ",", " ", 
    "nperts_", ",", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "allops", ",", " ", "ca", ",", " ", "pcasperts", ",", " ", "lt"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "DiseasePropogationPlot", "]"}], ",", " ", 
          "ops"}], "}"}], ",", " ", "Last"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pcasperts", " ", "=", " ", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"PerturbedCellularAutomaton", "[", 
         RowBox[{"ru", ",", "init", ",", "txspec", ",", " ", 
          RowBox[{"{", 
           RowBox[{"row", ",", " ", "RandomChoice"}], "}"}]}], "]"}], ",", 
        " ", "nperts"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"DiseasePropogationPlot", "[", 
      RowBox[{
       RowBox[{"CellularAutomaton", "[", 
        RowBox[{"ru", ",", " ", "init", ",", " ", "txspec"}], "]"}], ",", " ",
        "pcasperts", ",", " ", "ops"}], "]"}]}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.9442257261890907`*^9, 3.9442257990828953`*^9}, {
   3.944225887831559*^9, 3.944225903424333*^9}, {3.944225950715973*^9, 
   3.944225965794786*^9}, {3.9442260257882137`*^9, 3.9442260829631233`*^9}, {
   3.9442262867732887`*^9, 3.944226350407386*^9}, {3.944226386340079*^9, 
   3.944226458491509*^9}, {3.944226560265594*^9, 3.9442266254154997`*^9}, {
   3.944226690273789*^9, 3.944226698858684*^9}, {3.944226751746167*^9, 
   3.944226767725651*^9}, {3.944226807488984*^9, 3.9442269438234663`*^9}, {
   3.94422701601368*^9, 3.944227043036899*^9}, 3.9442271346617317`*^9, {
   3.944227278830962*^9, 3.94422738168391*^9}, {3.944227452006888*^9, 
   3.944227460029377*^9}, 3.944227509551169*^9, {3.944227544000881*^9, 
   3.944227544392918*^9}, 3.944227602087277*^9, {3.9442277297702208`*^9, 
   3.944227749510415*^9}, {3.944227857419705*^9, 3.944227857752283*^9}, {
   3.944227917479233*^9, 3.944227917619583*^9}, {3.944513457034573*^9, 
   3.9445136395240183`*^9}, {3.944513677092892*^9, 3.944513757292581*^9}, {
   3.944513794768525*^9, 3.944513804030795*^9}, {3.944513834357344*^9, 
   3.944514040078794*^9}, {3.944514081972793*^9, 3.944514519265048*^9}, {
   3.944514551973295*^9, 3.944514685901204*^9}, 3.944514749340536*^9, {
   3.944515011259468*^9, 3.944515019828166*^9}, {3.944515099801543*^9, 
   3.9445151236839*^9}, {3.944515215418655*^9, 3.944515240348115*^9}, {
   3.94451540421021*^9, 3.944515416204427*^9}, {3.9445155641337433`*^9, 
   3.9445155666582203`*^9}, {3.944516124319501*^9, 3.944516126444302*^9}, {
   3.944516467982931*^9, 3.944516777236442*^9}, {3.944516956311542*^9, 
   3.944516956531832*^9}, {3.944517020504977*^9, 3.944517065620974*^9}, {
   3.94451787222213*^9, 3.944517959206838*^9}, {3.944518065707601*^9, 
   3.944518067246185*^9}, {3.944518105492508*^9, 3.944518112866763*^9}, {
   3.944518216176889*^9, 3.944518229074774*^9}, {3.944519030761211*^9, 
   3.944519064138102*^9}, {3.944519239143301*^9, 3.944519251667643*^9}, {
   3.944520875331632*^9, 3.944520878421109*^9}, 3.944521550848152*^9, {
   3.94452548157586*^9, 3.94452548255165*^9}, {3.944768547125078*^9, 
   3.944768550716289*^9}, {3.945361205943533*^9, 3.945361206124344*^9}, {
   3.945384084268691*^9, 3.945384084728002*^9}, {3.945652742747711*^9, 
   3.945652748166785*^9}, {3.946513972678568*^9, 3.94651404688856*^9}, {
   3.946514182228158*^9, 3.946514240021245*^9}, {3.946514309216181*^9, 
   3.9465143398844957`*^9}, {3.946514370835895*^9, 3.946514430295424*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"1aad2baa-0495-436d-95f2-af44da44fb73"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiseasePropagationPlot", "[", 
   RowBox[{"ca_List", ",", " ", "pcasperts_List", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", "\n", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allops", ",", " ", "diffstepcountslist", ",", " ", 
      RowBox[{"lt", " ", "=", " ", 
       RowBox[{"TestCALifeTime", "[", "ca", "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "DiseasePropogationPlot", "]"}], ",", " ", 
          "ops"}], "}"}], ",", " ", "Last"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"diffstepcountslist", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"PadLeft", "[", 
         RowBox[{
          RowBox[{"PadRight", "[", 
           RowBox[{
            RowBox[{"countstepdiffs", "[", 
             RowBox[{"ca", ",", " ", "#1"}], "]"}], ",", " ", "\n", 
            RowBox[{
             RowBox[{"Length", "[", "ca", "]"}], " ", "-", 
             RowBox[{
              RowBox[{"#2", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<rowidx\>\"", 
              "]"}]}]}], "]"}], ",", " ", 
          RowBox[{"Length", "[", "ca", "]"}]}], "]"}], "&"}], "@@@", " ", 
       "pcasperts"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Show", "[", 
      RowBox[{
       RowBox[{"ListLinePlot", "[", 
        RowBox[{"diffstepcountslist", ",", "\n", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"FilterRules", "[", 
           RowBox[{
            RowBox[{"Normal", "[", "allops", "]"}], ",", " ", 
            RowBox[{"Options", "@", "ListLinePlot"}]}], "]"}]}]}], "]"}], ",",
        "\n", 
       RowBox[{"Graphics", "[", 
        RowBox[{"Style", "[", 
         RowBox[{
          RowBox[{"Line", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"lt", ",", " ", "0"}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"lt", ",", " ", "50"}], "}"}]}], "}"}], "]"}], ",", " ", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"allops", "[", "\"\<LineStyle\>\"", "]"}]}]}], "]"}], 
        "]"}]}], "]"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.944517653871515*^9, 3.944517818989222*^9}, {
   3.944517982155702*^9, 3.944517985149261*^9}, 3.944518046887535*^9, 
   3.944518220024178*^9, 3.944518306785303*^9, {3.944518849995941*^9, 
   3.944518851253766*^9}, {3.944519131225924*^9, 3.944519137406631*^9}, {
   3.944519177805513*^9, 3.944519223420328*^9}, {3.944519260479782*^9, 
   3.944519268661899*^9}, {3.944519317722184*^9, 3.944519332640952*^9}, {
   3.9445215160675*^9, 3.944521535009185*^9}, {3.945361202827179*^9, 
   3.945361202967128*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"3e4c1673-a209-481f-8807-8508bf6ca7d8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CAMask", "[", 
   RowBox[{"caspec_", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Color\>\"", "->", "Black"}], ",", "ops"}], "}"}], ",", 
        " ", "Last"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"cas", ",", " ", "dims"}], "}"}], " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"Dimensions", "[", "caspec", "]"}], "]"}], " ", "==", " ", 
         "2"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "caspec", "}"}], ",", " ", 
          RowBox[{"Dimensions", "[", "caspec", "]"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"caspec", ",", " ", 
          RowBox[{"Dimensions", "[", 
           RowBox[{"First", "[", "caspec", "]"}], "]"}]}], "}"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"PlotCA", "[", 
      RowBox[{
       RowBox[{"Normal", "[", 
        RowBox[{"Total", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"SparseArray", "[", 
            RowBox[{
             RowBox[{"Thread", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"bodyidxs", "[", "#", "]"}], ",", " ", "1"}], "]"}], 
               "->", "1"}], "]"}], ",", " ", "dims"}], "]"}], "&"}], "/@", 
          " ", "cas"}], "]"}], "]"}], ",", 
       RowBox[{"ColorRules", "->", "None"}], ",", " ", 
       RowBox[{"ColorFunction", "->", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Blend", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"White", ",", " ", 
              RowBox[{"allops", "[", "\"\<Color\>\"", "]"}]}], "}"}], ",", 
            "#"}], "]"}], "&"}], ")"}]}], ",", " ", 
       RowBox[{"Sequence", "@@", 
        RowBox[{"Normal", "[", "allops", "]"}]}]}], "]"}]}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.945735827663903*^9, 3.945735854163924*^9}, {
   3.94573612058687*^9, 3.945736204899493*^9}, {3.945736254969167*^9, 
   3.945736282785199*^9}, {3.945736413492496*^9, 3.945736435669447*^9}, {
   3.945736476524037*^9, 3.945736577117764*^9}, {3.9457371012087603`*^9, 
   3.945737129019669*^9}, {3.945737195863595*^9, 3.945737255762477*^9}, {
   3.945737857433801*^9, 3.945737873255891*^9}, {3.945737918467053*^9, 
   3.945738059326247*^9}, {3.94573818119514*^9, 3.945738228139231*^9}, {
   3.9457382874196444`*^9, 3.945738357488632*^9}, 3.945738405120159*^9, {
   3.945739125011757*^9, 3.945739125893588*^9}, {3.945739165992743*^9, 
   3.94573916767379*^9}, {3.945743241781191*^9, 3.945743243779094*^9}, {
   3.945743891301496*^9, 3.945743985955874*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"3400f618-dcf3-4b13-a393-083977ae1616"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowSilhouette", "[", 
   RowBox[{"ca_", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Opacity\>\"", "->", "0.25"}], ",", 
          RowBox[{"\"\<Color\>\"", "->", 
           RowBox[{"Lighter", "@", "Blue"}]}], ",", "ops"}], "}"}], ",", " ", 
        "Last"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"coords", " ", "=", " ", 
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<left\>\"", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#1", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"Length", "[", "ca", "]"}], " ", "-", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}]}], ",", 
           RowBox[{"\"\<right\>\"", "->", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#1", "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"Length", "[", "ca", "]"}], " ", "-", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}]}]}], "|>"}], "&"}], 
        ",", " ", 
        RowBox[{"TakeWhile", "[", 
         RowBox[{
          RowBox[{"nonzeroRange", "/@", "ca"}], ",", " ", 
          RowBox[{
           RowBox[{"#", "!=", 
            RowBox[{"{", "}"}]}], "&"}]}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"points", " ", "=", " ", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"coords", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "\"\<left\>\""}], "]"}], "]"}], ",", " ", 
        RowBox[{"Reverse", "[", 
         RowBox[{"coords", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "\"\<right\>\""}], "]"}], "]"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Opacity", "[", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<Opacity\>\"", "]"}], ",", " ", 
          RowBox[{"allops", "[", "\"\<Color\>\"", "]"}]}], "]"}], ",", 
        RowBox[{"Polygon", "[", "points", "]"}]}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}], " "}]], "Code",
 CellChangeTimes->{{3.945706656239897*^9, 3.945706665448127*^9}, {
   3.9457067034366*^9, 3.945706705755614*^9}, {3.9457067532382383`*^9, 
   3.945706789766719*^9}, {3.945706936147888*^9, 3.945706966442313*^9}, {
   3.945728672094096*^9, 3.945728676799097*^9}, 3.945733103694798*^9, {
   3.945733168019871*^9, 3.945733293323498*^9}, {3.945733329750662*^9, 
   3.945733394679002*^9}, {3.9457335660722*^9, 3.945733739488207*^9}, {
   3.9457338200781*^9, 3.945733910761564*^9}, {3.945733944856778*^9, 
   3.945733945355929*^9}, {3.945734010630609*^9, 3.94573408764926*^9}, {
   3.945734188421773*^9, 3.945734204452782*^9}, {3.945735782995775*^9, 
   3.945735787879803*^9}, {3.945736920939543*^9, 3.945736934780781*^9}, {
   3.945744408818396*^9, 3.945744409321233*^9}, {3.945744487885826*^9, 
   3.945744494117784*^9}, {3.9457445420202*^9, 3.945744542338766*^9}, {
   3.945744673028083*^9, 3.94574467996231*^9}, {3.945744715059937*^9, 
   3.945744718429005*^9}, {3.945744913577353*^9, 3.945744918634297*^9}, 
   3.945747038516181*^9},
 CellLabel->"In[33]:=",ExpressionUUID->"8b456d75-7800-4707-8a81-af938e4ed276"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CAPolygon", "[", 
   RowBox[{"ca_", ",", " ", 
    RowBox[{"z_", ":", "None"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "coords", "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"coords", " ", "=", " ", 
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<left\>\"", "->", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#1", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"Length", "[", "ca", "]"}], " ", "-", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}]}], ",", 
           RowBox[{"\"\<right\>\"", "->", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "+", "1"}], ",", " ", 
              RowBox[{
               RowBox[{"Length", "[", "ca", "]"}], " ", "-", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}]}]}], "|>"}], "&"}], 
        ",", " ", 
        RowBox[{"TakeWhile", "[", 
         RowBox[{
          RowBox[{"nonzeroRange", "/@", "ca"}], ",", " ", 
          RowBox[{
           RowBox[{"#", "!=", 
            RowBox[{"{", "}"}]}], "&"}]}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"points", " ", "=", " ", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"coords", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "\"\<left\>\""}], "]"}], "]"}], ",", " ", 
        RowBox[{"Reverse", "[", 
         RowBox[{"coords", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "\"\<right\>\""}], "]"}], "]"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Polygon", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"z", " ", "===", " ", "None"}], ",", " ", "points", ",", " ", 
        
        RowBox[{
         RowBox[{
          RowBox[{"Append", "[", 
           RowBox[{"#", ",", " ", "z"}], "]"}], "&"}], "/@", "points"}]}], 
       "]"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.945744831924307*^9, 3.945744840362073*^9}, {
  3.945744871924444*^9, 3.9457449114901114`*^9}, {3.945744965771405*^9, 
  3.945745032813649*^9}, {3.945745066550909*^9, 3.94574508153551*^9}, {
  3.945745255472953*^9, 3.945745257802269*^9}, {3.946511352513284*^9, 
  3.94651137870137*^9}, {3.946511492832424*^9, 3.946511495361601*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"eabae733-cad1-49bd-b660-550d5daa91cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowOutline", "[", 
   RowBox[{"ru_", ",", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "coords", ",", " ", "leftlines", ",", " ", "rightlines", ",", " ", "ca", 
      ",", " ", "allops"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"\"\<Steps\>\"", "->", "200"}], ",", " ", 
            RowBox[{"\"\<Perturbation\>\"", "->", "None"}], ",", " ", 
            RowBox[{"\"\<Color\>\"", "->", "Black"}]}], "}"}], ",", " ", 
          "ops"}], "}"}], ",", " ", "Last"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ca", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], " ", "=!=", 
         " ", "None"}], ",", " ", 
        RowBox[{"PerturbCA", "[", 
         RowBox[{"ru", ",", " ", 
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], ",", " ", 
          RowBox[{"\"\<ReturnPerturbations\>\"", "->", "False"}], ",", 
          RowBox[{"Sequence", "@@", 
           RowBox[{"FilterRules", "[", 
            RowBox[{
             RowBox[{"Normal", "[", "allops", "]"}], ",", 
             RowBox[{"Options", "[", "PerturbCA", "]"}]}], "]"}]}]}], "]"}], ",", 
        RowBox[{"getca", "[", 
         RowBox[{"ru", ",", 
          RowBox[{"allops", "[", "\"\<Steps\>\"", "]"}]}], "]"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"coords", " ", "=", " ", 
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<left\>\"", "->", 
            RowBox[{"{", " ", 
             RowBox[{
              RowBox[{"#1", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"Length", "[", "ca", "]"}], " ", "-", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}]}], ",", 
           RowBox[{"\"\<right\>\"", "->", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#1", "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"Length", "[", "ca", "]"}], " ", "-", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}]}], "}"}]}]}], "|>"}], "&"}], 
        ",", " ", 
        RowBox[{"TakeWhile", "[", 
         RowBox[{
          RowBox[{"nonzeroRange", "/@", "ca"}], ",", " ", 
          RowBox[{
           RowBox[{"#", "!=", 
            RowBox[{"{", "}"}]}], "&"}]}], "]"}]}], "]"}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"leftlines", " ", "=", " ", 
      RowBox[{"Line", "/@", 
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{"coords", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "\"\<left\>\""}], "]"}], "]"}], ",", " ", 
         "2", ",", " ", "1"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"rightlines", " ", "=", " ", 
      RowBox[{"Line", "/@", 
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{"coords", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "\"\<right\>\""}], "]"}], "]"}], ",", " ",
          "2", ",", " ", "1"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{"Thick", ",", " ", 
        RowBox[{"allops", "[", "\"\<Color\>\"", "]"}], ",", " ", "leftlines", 
        ",", " ", "rightlines"}], "}"}], "]"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945729081093933*^9, 3.945729081726697*^9}, {
   3.945729112245399*^9, 3.945729276749132*^9}, {3.945729324138149*^9, 
   3.945729450268693*^9}, {3.945729511228953*^9, 3.94572955488807*^9}, {
   3.945729850155202*^9, 3.945729930150075*^9}, {3.945729962782752*^9, 
   3.945730012258929*^9}, {3.945730109622468*^9, 3.945730148374419*^9}, {
   3.9457301834501133`*^9, 3.94573026860685*^9}, {3.94573030958622*^9, 
   3.945730440283462*^9}, {3.945730497878462*^9, 3.945730498173025*^9}, {
   3.945730672555506*^9, 3.945730680230145*^9}, {3.945730769595306*^9, 
   3.945730820276444*^9}, {3.945730869327408*^9, 3.945730870801984*^9}, 
   3.945730925357628*^9, {3.945731092092215*^9, 3.945731104555622*^9}, {
   3.945731152380892*^9, 3.945731156165577*^9}, {3.945731297608451*^9, 
   3.9457314061186666`*^9}, 3.945731458427512*^9, {3.945731507269926*^9, 
   3.945731623570175*^9}, {3.945731661372219*^9, 3.945731690129507*^9}, {
   3.945731849649918*^9, 3.945732036437199*^9}, {3.945732078891801*^9, 
   3.945732081589557*^9}, {3.945732387955454*^9, 3.945732388422957*^9}, {
   3.9457357991511717`*^9, 3.945735802325714*^9}, {3.945742209024681*^9, 
   3.945742210184125*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"96cb2af5-052b-4986-a402-473a39d13c58"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Perturbation Function", "Section",
 CellChangeTimes->{{3.942889340094302*^9, 3.942889343808528*^9}, {
  3.942943963284713*^9, 
  3.942943965416974*^9}},ExpressionUUID->"0d54c013-5695-4af7-a5d8-\
526052a920b4"],

Cell[CellGroupData[{

Cell["Low level", "Subsubsection",
 CellChangeTimes->{{3.943808132743845*^9, 
  3.943808133973564*^9}},ExpressionUUID->"f9337781-00ed-4cf6-b7d6-\
15b108cb404b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nonzeroRange", "[", "list_", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"SparseArray", "[", "list", "]"}], "[", "\"\<NonzeroPositions\>\"",
     "]"}], " ", "//", " ", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", "#", "]"}], " ", "==", " ", "0"}], ",", " ", 
      "#", ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"-", "1"}], ",", " ", "1"}], "]"}], "]"}]}], "}"}]}], 
     "]"}], "&"}]}]}]], "Code",
 CellChangeTimes->{{3.943634765875016*^9, 3.94363476741509*^9}, {
   3.943634828026243*^9, 3.943634828706764*^9}, {3.943634873613714*^9, 
   3.943634952247225*^9}, {3.943635004008057*^9, 3.943635007241334*^9}, {
   3.943635081426149*^9, 3.943635107496182*^9}, {3.943635157819008*^9, 
   3.943635161013969*^9}, {3.94363521039839*^9, 3.943635252222834*^9}, {
   3.94363533449787*^9, 3.943635880394552*^9}, {3.9436359307451773`*^9, 
   3.943635995708077*^9}, 3.943636166156807*^9, {3.944493572078703*^9, 
   3.944493583911049*^9}, {3.945621036427002*^9, 3.9456210394939947`*^9}, {
   3.945624404493595*^9, 3.945624407438113*^9}},
 CellLabel->"In[36]:=",
 CellID->2093550075,ExpressionUUID->"28df7aef-fff4-4559-b797-414e7dee1c93"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tofunc", "[", 
   RowBox[{"bitfuncspec_", ",", " ", "k_"}], "]"}], " ", ":=", " ", 
  RowBox[{"Which", "[", "\n", 
   RowBox[{
    RowBox[{"IntegerQ", "[", "bitfuncspec", "]"}], ",", " ", 
    RowBox[{"bitfuncspec", "&"}], ",", "\[IndentingNewLine]", 
    RowBox[{"bitfuncspec", " ", "===", "\"\<Random\>\""}], ",", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"RandomChoice", "[", 
       RowBox[{"Delete", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", " ", 
           RowBox[{"k", " ", "-", " ", "1"}]}], "]"}], ",", " ", 
         RowBox[{"#", "+", "1"}]}], "]"}], "]"}], "&"}], ")"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"bitfuncspec", "[", 
      RowBox[{"[", "1", "]"}], "]"}], " ", "===", "\"\<AddValue\>\""}], ",", 
    " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#", " ", "+", " ", 
          RowBox[{"bitfuncspec", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ")"}], ",", " ", "k"}], "]"}], 
      " ", "&"}], ")"}], ",", "\[IndentingNewLine]", "True", ",", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"bitfuncspec", "[", 
       RowBox[{"#", ",", " ", "k"}], "]"}], "&"}], ")"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9453614924208517`*^9, 3.945361622175321*^9}, {
  3.9453616609286633`*^9, 3.945361767712916*^9}, {3.945877682480416*^9, 
  3.945877688083214*^9}, {3.94598587061668*^9, 3.945985903250106*^9}, {
  3.945995580883376*^9, 3.945995581491375*^9}},
 CellLabel->"In[37]:=",
 CellID->1726971227,ExpressionUUID->"347745f7-cee9-499d-91cd-b4ed01243b3d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"interprettspec", "[", "tspec_", "]"}], ":=", " ", 
  RowBox[{"Replace", "[", 
   RowBox[{"tspec", ",", " ", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"t_Integer", ":>", " ", 
       RowBox[{"{", 
        RowBox[{"t", ",", " ", "All"}], "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", "t_Integer", "}"}], ":>", " ", 
       RowBox[{"{", 
        RowBox[{"t", ",", " ", 
         RowBox[{"{", 
          RowBox[{"t", " ", "+", " ", "1"}], "}"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"{", "t_Integer", "}"}], "}"}], ":>", " ", 
       RowBox[{"{", 
        RowBox[{"t", ",", " ", 
         RowBox[{"t", " ", "+", " ", "1"}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t1_Integer", ",", " ", "t2_Integer"}], "}"}], ":>", " ", 
       RowBox[{"{", 
        RowBox[{"t2", ",", " ", 
         RowBox[{
          RowBox[{"t1", " ", "+", " ", "1"}], ";;", 
          RowBox[{"t2", " ", "+", " ", "1"}]}]}], "}"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t1_Integer", ",", " ", "t2_Integer", ",", " ", "dt_Integer"}], "}"}],
        ":>", " ", 
       RowBox[{"{", 
        RowBox[{"t2", ",", " ", 
         RowBox[{
          RowBox[{"t1", " ", "+", " ", "1"}], ";;", 
          RowBox[{"t2", " ", "+", " ", "1"}], ";;", "dt"}]}], "}"}]}]}], 
     "\[IndentingNewLine]", "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9461833175292*^9, 3.946183453417712*^9}, {
  3.946431927727075*^9, 3.94643195057854*^9}, {3.946433398037158*^9, 
  3.946433405539648*^9}},
 CellLabel->"In[38]:=",
 CellID->651132542,ExpressionUUID->"219a2aa2-cb6c-4c3b-98d2-da08394390d9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"interpretxspec", "[", "xspec___", "]"}], ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"xspec", " ", "===", " ", 
      RowBox[{"Nothing", " ", "xspec"}], " ", "===", " ", "Automatic"}], " ", 
     "||", " ", 
     RowBox[{"xspec", " ", "===", " ", "All"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "25"}], ",", " ", "25"}], "}"}], ",", " ", "xspec"}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.946183330990664*^9, 3.9461833365767193`*^9}, {
  3.9461834670502243`*^9, 3.946183472608314*^9}, {3.9461835182891617`*^9, 
  3.9461835185092487`*^9}, {3.946183688945549*^9, 3.946183693357554*^9}, {
  3.946183743027657*^9, 3.9461837829798403`*^9}},
 CellLabel->"In[39]:=",
 CellID->201266207,ExpressionUUID->"6f4da41a-65fe-42e4-b976-64947aa0fa7a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"interprettxspec", "[", "txspec_", "]"}], ":=", " ", 
  RowBox[{"Replace", "[", 
   RowBox[{"txspec", ",", 
    RowBox[{"{", " ", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"t_Integer", " ", ":>", " ", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"interprettspec", "[", "t", "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "25"}], ",", " ", "25"}], "}"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ts_", ",", " ", "xs___"}], "}"}], ":>", " ", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"interprettspec", "[", "ts", "]"}], ",", " ", 
         RowBox[{"interpretxspec", "[", "xs", "]"}]}], "]"}]}]}], "}"}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.946144738668741*^9, 3.946144745323369*^9}, {
   3.9461453057255583`*^9, 3.946145346907213*^9}, {3.946145568275429*^9, 
   3.94614562334881*^9}, {3.946150706225065*^9, 3.946150779201581*^9}, {
   3.94615081914487*^9, 3.9461508237173038`*^9}, {3.94615089815753*^9, 
   3.946150903438021*^9}, {3.946150955314368*^9, 3.946150957278764*^9}, {
   3.946151184925393*^9, 3.946151189049234*^9}, {3.946156621915888*^9, 
   3.9461566296620407`*^9}, {3.9461573078092823`*^9, 3.946157375764061*^9}, {
   3.946157612406724*^9, 3.946157612756859*^9}, {3.946157773763062*^9, 
   3.946157778586995*^9}, {3.94616111182379*^9, 3.946161148222164*^9}, {
   3.946161195392544*^9, 3.946161323169023*^9}, {3.946161504947806*^9, 
   3.946161507272572*^9}, {3.946181778203472*^9, 3.946181786331966*^9}, {
   3.946183186957528*^9, 3.946183215384836*^9}, {3.946183279175763*^9, 
   3.94618327949693*^9}, {3.946183351828659*^9, 3.946183352691519*^9}, {
   3.946183480028716*^9, 3.946183500174834*^9}, {3.946183538715415*^9, 
   3.946183589110979*^9}, {3.946183648397125*^9, 3.946183654829617*^9}, 
   3.946183862545632*^9},
 CellLabel->"In[40]:=",
 CellID->1596562746,ExpressionUUID->"bb80d0b7-babf-4b33-a1bc-62c0cb2ef33a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"interpretrule", "[", "rule_", "]"}], " ", ":=", " ", 
  RowBox[{"Replace", "[", 
   RowBox[{"rule", ",", " ", 
    RowBox[{"{", "\n", "   ", 
     RowBox[{
      RowBox[{"n_Integer", " ", ":>", " ", 
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "2", ",", " ", "1"}], "}"}]}], ",", "\n", 
      "   ", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"n_Integer", ",", " ", "k_Integer"}], "]"}], " ", ":>", "  ", 
       
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "k", ",", " ", "1"}], "}"}]}], ",", "\n", 
      "   ", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"n_Integer", ",", " ", "k_Integer", ",", " ", 
         RowBox[{"r_", "?", "NumberQ"}]}], "]"}], " ", ":>", " ", 
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}]}], ",", "\n", 
      "   ", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"n_Integer", ",", " ", "k_Integer", ",", " ", 
         RowBox[{"r_", "?", "NumberQ"}], ",", " ", "s_Integer"}], "]"}], " ", 
       ":>", " ", 
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}]}], ",", "\n", 
      "   ", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"n_Integer", ",", " ", 
         RowBox[{"List", "[", 
          RowBox[{"k_Integer", ",", " ", "1"}], "]"}]}], "]"}], " ", ":>", 
       " ", 
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "k", ",", " ", "1"}], "}"}]}], ",", "\n", 
      "   ", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{"n_Integer", ",", " ", 
         RowBox[{"List", "[", 
          RowBox[{"k_Integer", ",", " ", "1"}], "]"}], ",", " ", 
         RowBox[{"r_", "?", "NumberQ"}]}], "]"}], " ", ":>", " ", 
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}]}]}], "\n", "   ", 
     "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943306327490436*^9, 3.94330641756797*^9}, {
  3.943306573704802*^9, 3.943306674496083*^9}, {3.943306705362965*^9, 
  3.943306855240611*^9}, {3.943307010998331*^9, 3.943307011293704*^9}, {
  3.943307045470796*^9, 3.943307074880732*^9}, {3.9433071284836483`*^9, 
  3.943307270220673*^9}, {3.943377871784828*^9, 3.943377872038154*^9}, {
  3.943545128893005*^9, 3.9435451384052277`*^9}, {3.943545334276613*^9, 
  3.943545342616293*^9}, {3.943545476272172*^9, 3.9435454847219048`*^9}, {
  3.943545836929001*^9, 3.943545874910882*^9}, {3.943545907560986*^9, 
  3.943545916385167*^9}},
 CellLabel->"In[41]:=",
 CellID->829937698,ExpressionUUID->"7eca9cad-21b4-45d0-83f5-1e145ae13584"],

Cell[BoxData[
 RowBox[{"ClearAll", "@", "expandrange"}]], "Input",
 CellChangeTimes->{{3.9465678626060753`*^9, 3.9465678697448378`*^9}},
 CellLabel->
  "In[287]:=",ExpressionUUID->"e5123221-7716-4d07-9b4f-77a5f655e1f3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"expandrange", "[", 
   RowBox[{"idxspec_", ",", " ", "t_", ",", " ", 
    RowBox[{"start_", ":", "1"}]}], "]"}], ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"t", " ", "==", " ", "0"}], " ", "&&", " ", 
     RowBox[{"start", " ", "==", " ", "1"}]}], ",", " ", 
    RowBox[{"{", "}"}], ",", " ", 
    RowBox[{"Replace", "[", 
     RowBox[{"idxspec", ",", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"i_Integer", ":>", " ", 
         RowBox[{"{", "i", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", "is__", "}"}], " ", ":>", " ", 
         RowBox[{"{", "is", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Span", "[", 
          RowBox[{"s_", ",", " ", "e_"}], "]"}], " ", ":>", " ", 
         RowBox[{"Range", "[", 
          RowBox[{"s", ",", " ", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"e", " ", "===", " ", "All"}], ",", " ", "t", ",", " ", 
             "e"}], "]"}]}], "]"}]}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{"f_", ":>", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"IntegerQ", "[", "#", "]"}], ",", " ", 
              RowBox[{"{", "#", "}"}], ",", " ", "#"}], "]"}], "&"}], ")"}], "[", 
          RowBox[{"f", "[", 
           RowBox[{"Range", "[", 
            RowBox[{"start", ",", " ", "t"}], "]"}], "]"}], "]"}]}]}], 
       "\[IndentingNewLine]", "}"}]}], "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->CompressedData["
1:eJwdxW0o43EAB/D/sNu9oLhcMs7I312Y6DyVEVOUxXF/Y0JZk6eu20oUOw9Z
SyOEjSK50dx5bNR113WatheShxAiT9O92JVMHkJc4ff9v/j0CVKomDIXiqJo
ApdHffLNKXeKHyVv+LiZdx+HmTBhAr6UJjOYe/QzDxtTy5TYy91ci+ctIWp8
7lxswgb9shbfHgy3YsXhTS9ek1j7sGBm9vNH8kSRSYkPb+IFDPmKa6Px6AAT
ib/R9hi8LZSLMCfYmI4zL7ok7FnmKuy5K1Ljp4W0Btz/P6kF6xR69kprjA47
rCHdeOd06ziXTOVX23GKoI0rJb9fPedhRc2r7gKyzPChF794HaAtIl+0V7BT
md8jSsibgd5ReFoZGofb647Zj+zycazhjE/ilwGFWjl5yX+wE6t2F3rwxGm4
HnPqbXPY2zj0AzevFg+Xkv0cPl9xx0riryny2Mg/doNVNvqbPKcLNOH+aP6X
P+R3ljD2xBEPDZati9gdLW0deEOz3Ind/GaTLWRThkGMXc9OLtUVTvFbocs1
prMf1nmVTrFtP38D88dU2/iv0X8Pixo1ZpocG3vH/gwsMhtC
  "],
 CellLabel->"In[42]:=",
 CellID->749686386,ExpressionUUID->"83501654-c1f4-4a8a-b177-b98d15f5c419"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TestCALifeTime", "[", "ca_List", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"#", "==", "0"}], ",", " ", 
      RowBox[{"-", "Infinity"}], ",", " ", 
      RowBox[{
       RowBox[{"Length", "[", "ca", "]"}], "-", "#"}]}], "]"}], "&"}], "[", 
   RowBox[{"LengthWhile", "[", 
    RowBox[{
     RowBox[{"Reverse", "[", "ca", "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Total", "[", "#", "]"}], "==", "0"}], "&"}]}], "]"}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.943106462055011*^9, 3.943106524282854*^9}, {
  3.943106554858834*^9, 3.943106617417737*^9}, {3.943457965776842*^9, 
  3.943457976864903*^9}, {3.943458102665765*^9, 3.943458104020798*^9}, {
  3.94449110560067*^9, 3.944491144856763*^9}, {3.945289812844039*^9, 
  3.945289814678841*^9}, {3.94552603587239*^9, 3.945526036468112*^9}, {
  3.945544826684551*^9, 3.945544827400023*^9}, {3.946163651177885*^9, 
  3.946163658063177*^9}, {3.94616954251236*^9, 3.946169545469195*^9}},
 CellLabel->"In[43]:=",
 CellID->1409920688,ExpressionUUID->"60d5bb48-9a1e-4a70-a84b-cd7a129709a9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tosingle", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"is_", ",", " ", "j_"}], "}"}], "->", "r_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#", ",", " ", "j"}], "}"}], "->", "r"}], "&"}], "/@", 
   "is"}]}]], "Code",
 CellChangeTimes->{{3.9459791127972097`*^9, 3.945979130878134*^9}, 
   3.945979184010693*^9},
 CellLabel->"In[44]:=",
 CellID->692532553,ExpressionUUID->"aa52e2ef-57c4-4450-aded-a5a2b68db2c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tofullform", "[", 
   RowBox[{"idxspec_", ",", " ", "t_"}], "]"}], " ", ":=", " ", "\n", " ", 
  RowBox[{
   RowBox[{"Composition", "[", "\n", "   ", 
    RowBox[{
     RowBox[{
      RowBox[{"Catenate", "[", 
       RowBox[{"tosingle", "/@", "#"}], "]"}], "&"}], ",", "\n", "   ", 
     RowBox[{
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"expandrange", "[", 
          RowBox[{"#", ",", " ", "t", ",", " ", "0"}], "]"}], " ", "&"}], ",",
         " ", "#", ",", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", 
            RowBox[{"Length", "[", "#", "]"}]}], "}"}]}], "]"}]}], "]"}], " ",
       "&"}], ",", "\n", "   ", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"!", " ", 
           RowBox[{"MatchQ", "[", 
            RowBox[{"#", ",", " ", "_Rule"}], "]"}]}], ",", " ", 
          RowBox[{"#", " ", "->", " ", "\"\<Random\>\""}], ",", " ", "#"}], 
         "]"}], " ", "&"}], " ", "/@", " ", "#"}], " ", "&"}], ",", " ", "\n",
      "   ", 
     RowBox[{
      RowBox[{"Replace", "[", 
       RowBox[{"#", ",", " ", 
        RowBox[{
         RowBox[{"Rule", "[", 
          RowBox[{"idxs_", ",", " ", "val_"}], "]"}], " ", ":>", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"#", " ", "->", " ", "val"}], " ", "&"}], " ", "/@", " ", 
           "idxs"}], ")"}]}]}], "]"}], " ", "&"}], ",", "\n", "   ", 
     RowBox[{
      RowBox[{"Replace", "[", 
       RowBox[{"#", ",", " ", 
        RowBox[{"{", "\n", "      ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ispec_", ",", " ", "jspec_"}], "}"}], " ", "/;", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"!", 
               RowBox[{"ListQ", "[", "ispec", "]"}]}], "&&", 
              RowBox[{"!", 
               RowBox[{"MatchQ", "[", 
                RowBox[{"ispec", ",", " ", "_Rule"}], "]"}]}]}], ")"}]}], " ",
            ":>", " ", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"ispec", ",", " ", "jspec"}], "}"}], "}"}]}], ",", "\n", 
          "      ", 
          RowBox[{
           RowBox[{
            RowBox[{"Rule", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ispec_", ",", " ", "jspec_"}], "}"}], ",", " ", 
              "b_"}], "]"}], " ", "/;", " ", 
            RowBox[{"(", 
             RowBox[{"!", " ", 
              RowBox[{"ListQ", "[", "ispec", "]"}]}], ")"}]}], " ", ":>", " ", 
           RowBox[{"(", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ispec", ",", " ", "jspec"}], "}"}], " ", "->", " ", 
              "b"}], "}"}], ")"}]}]}], "\n", "      ", "}"}]}], "]"}], " ", 
      "&"}]}], "]"}], "[", "idxspec", "]"}]}]], "Code",
 CellChangeTimes->{{3.945965335955739*^9, 3.9459655669756603`*^9}, {
   3.9459656057658567`*^9, 3.94596560839567*^9}, {3.945965647649691*^9, 
   3.945965663171432*^9}, {3.945965702593849*^9, 3.945965702837867*^9}, {
   3.945965822319288*^9, 3.945965824032654*^9}, {3.945972586974916*^9, 
   3.945972654020731*^9}, {3.9459731768633432`*^9, 3.945973177766283*^9}, {
   3.945973218383348*^9, 3.945973237312745*^9}, {3.945973316387176*^9, 
   3.945973325049215*^9}, {3.945976032952442*^9, 3.945976039122938*^9}, 
   3.9459762834906893`*^9, {3.945976379060482*^9, 3.945976379757921*^9}, 
   3.9459768536850357`*^9, {3.945977169583667*^9, 3.945977289081301*^9}, {
   3.945977325152865*^9, 3.945977430693564*^9}, {3.945978357565381*^9, 
   3.945978436271504*^9}, {3.9459789686075*^9, 3.945978969969175*^9}, {
   3.9459790342255077`*^9, 3.945979074678514*^9}, {3.945979111564921*^9, 
   3.945979148372497*^9}, {3.945993863172447*^9, 3.945993921521391*^9}, 
   3.945993958448521*^9, 3.945993998827099*^9, {3.946063817849854*^9, 
   3.946063821692799*^9}, {3.9460640999607964`*^9, 3.946064105631814*^9}, {
   3.946064182225891*^9, 3.9460642248235397`*^9}, {3.946072355810805*^9, 
   3.94607235616791*^9}, 3.946168085688933*^9, {3.946168229921286*^9, 
   3.946168231556159*^9}, {3.946168300251487*^9, 3.946168340114693*^9}, {
   3.946181184111516*^9, 3.946181184980519*^9}, 3.946222383991489*^9, {
   3.946222437202747*^9, 3.946222471851318*^9}},
 CellLabel->"In[45]:=",
 CellID->512733297,ExpressionUUID->"4a4cc2a1-e847-4463-8f8c-c33185acd6d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["High level", "Subsubsection",
 CellChangeTimes->{{3.945564847425189*^9, 3.945564852676676*^9}, {
  3.94621326241999*^9, 
  3.946213262928296*^9}},ExpressionUUID->"1bd5b1e8-f0cc-4125-9b09-\
7d63843f5002"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PerturbAll", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"ca_", ",", " ", 
       RowBox[{"{", 
        RowBox[{"n_Integer", ",", " ", "k_Integer", ",", " ", "r_Integer"}], 
        "}"}]}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i_Integer", ",", " ", "j_Integer"}], "}"}], ",", " ", "\n", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<ReturnPerturbations\>\"", " ", "->", " ", "False"}], ",",
         " ", "PerturbedCellularAutomaton"}], "}"}], "]"}]}], "]"}], " ", ":=",
    "  ", "\n", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"cas", ",", " ", "newbits", ",", " ", "newrows"}], "}"}], ",", 
     "\n", "  ", 
     RowBox[{
      RowBox[{"newbits", " ", "=", " ", 
       RowBox[{"Delete", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", " ", 
           RowBox[{"k", " ", "-", " ", "1"}]}], "]"}], ",", " ", 
         RowBox[{
          RowBox[{"ca", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", " ", "j"}], "]"}], "]"}], " ", "+", " ", 
          "1"}]}], "]"}]}], ";", "\n", "  ", 
      RowBox[{"newrows", " ", "=", " ", 
       RowBox[{"Tuples", "[", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{
          RowBox[{"List", " ", "/@", " ", 
           RowBox[{"ca", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], ",", " ", 
          RowBox[{"j", " ", "->", " ", "newbits"}]}], "]"}], "]"}]}], ";", 
      "\n", "  ", 
      RowBox[{"cas", " ", "=", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"ca", "[", 
            RowBox[{"[", 
             RowBox[{";;", " ", 
              RowBox[{"i", " ", "-", " ", "1"}]}], "]"}], "]"}], ",", " ", 
           RowBox[{"CellularAutomaton", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], ",", " ", 
             "#", ",", " ", 
             RowBox[{
              RowBox[{"Length", "[", "ca", "]"}], " ", "-", " ", "i"}]}], 
            "]"}]}], "]"}], " ", "&"}], " ", "/@", " ", "newrows"}]}], ";", 
      "\n", "  ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<ReturnPerturbations\>\"", "]"}], ",",
         " ", 
        RowBox[{"MapThread", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#1", ",", " ", 
             RowBox[{"<|", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"i", ",", " ", "j"}], "}"}], "->", "#2"}], "|>"}]}], 
            "}"}], "&"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"cas", ",", " ", "newbits"}], "}"}]}], "]"}], ",", " ", 
        "cas"}], "]"}]}]}], "]"}]}], ";"}]], "Code",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGCQAGIQvcPi58fa1LeOVj8XfgHRl9df+QuiJ2V/ANOdWyYx
1QHpjr4LYJq5ndkCRP9v32ENorM/K7qB6Ht/fcH0weRubxA9q3uGL4je8O1p
MIgOV10eBqJn8nBVguiKLBkwLdcb2FoP0h/1G0wzZnPOAdGT8/kXgOh590WX
gGi7GW2XQHRX77LHIDpgntlLEB12w/s9iN5Xdf8TiJ6xp4OlAUhPWPcBTB8s
mHYCRBvoO58C0Z9q5j/bCaSPfr72HET7zBQt2wWk0wRUwbSVTlU1iN5nurAZ
RNtcv9QNokMi1/eC6BirirkgOrTCeBmI7rpWuAZEO3zzXguiJzjM2Qiij859
thtE6/yrzHoBpP8su5INondfaft2Ng3Iv78eTAMABOvSlA==
  "],
 CellLabel->"In[46]:=",ExpressionUUID->"d58fdab0-ea42-4924-a385-218028c56fa3"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "PerturbedCellularAutomaton", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<ReturnPerturbations\>\"", "->", "True"}], ",", " ", 
     RowBox[{"\"\<Body\>\"", "->", "False"}]}], "}"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.946223459064588*^9, 3.946223494821115*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"025156d3-4e73-4d0a-a1fe-e6b1332d08e6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"PerturbedCellularAutomaton", "[", 
   RowBox[{"ru_", ",", " ", "init_", ",", " ", "txspec_", ",", " ", 
    RowBox[{"<|", "|>"}]}], "]"}], ":=", " ", 
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"ru", ",", " ", "init", ",", " ", "txspec"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"PerturbedCellularAutomaton", "[", 
   RowBox[{"ru_", ",", " ", "init_", ",", " ", "txspec_", ",", " ", 
    RowBox[{"{", "}"}]}], "]"}], ":=", " ", 
  RowBox[{"CellularAutomaton", "[", 
   RowBox[{"ru", ",", " ", "init", ",", " ", "txspec"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"PerturbedCellularAutomaton", "[", 
   RowBox[{"ru_", ",", " ", "init_", ",", " ", "txspec_", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "PerturbedCellularAutomaton", "]"}]}]}], 
   "]"}], ":=", " ", "\n", "  ", 
  RowBox[{"PerturbedCellularAutomaton", "[", 
   RowBox[{
   "ru", ",", " ", "init", ",", " ", "txspec", ",", " ", "1", ",", " ", 
    "ops"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PerturbedCellularAutomaton", "[", 
   RowBox[{
   "ru_", ",", " ", "init_", ",", " ", "txspec_", ",", " ", "idxspec_Integer",
     ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", "\n", "  ", 
  RowBox[{"PerturbedCellularAutomaton", "[", 
   RowBox[{"ru", ",", " ", "init", ",", " ", "txspec", ",", " ", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"RandomChoice", "[", 
         RowBox[{"#", ",", " ", "idxspec"}], "]"}], " ", "&"}], ",", " ", 
       "RandomChoice"}], "}"}], "}"}], ",", " ", "\n", "  ", 
    RowBox[{"Sequence", "@@", 
     RowBox[{"Normal", "[", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Body\>\"", "->", "True"}], "}"}], ",", " ", "ops"}], 
         "}"}], ",", " ", "Last"}], "]"}], "]"}]}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PerturbedCellularAutomaton", "[", 
   RowBox[{"ru_", ",", " ", "init_", ",", " ", "txspec_", ",", " ", 
    RowBox[{"idxspec_Integer", "->", "b_"}], ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", "\n", "  ", 
  RowBox[{"PerturbedCellularAutomaton", "[", 
   RowBox[{"ru", ",", " ", "init", ",", " ", "txspec", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"RandomChoice", "[", 
          RowBox[{"#", ",", " ", "idxspec"}], "]"}], " ", "&"}], ",", " ", 
        "RandomChoice"}], "}"}], " ", "->", " ", "b"}], "}"}], ",", " ", "\n",
     "  ", 
    RowBox[{"Sequence", "@@", 
     RowBox[{"Normal", "[", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<Body\>\"", "->", "True"}], "}"}], ",", " ", "ops"}], 
         "}"}], ",", " ", "Last"}], "]"}], "]"}]}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.9460718415956*^9, 3.946071843851215*^9}, {
  3.946071889185918*^9, 3.946071919898172*^9}, {3.946071954501865*^9, 
  3.946072156947014*^9}, {3.9460722495226088`*^9, 3.946072249961039*^9}, {
  3.946072285576694*^9, 3.946072316675511*^9}, {3.946072615862463*^9, 
  3.946072629834423*^9}, {3.946179558379966*^9, 3.946179569063106*^9}, {
  3.946179749995074*^9, 3.9461798128932953`*^9}, {3.946180482502071*^9, 
  3.946180521974565*^9}, {3.946394081302047*^9, 3.946394088299378*^9}, {
  3.946916244013322*^9, 3.946916246908828*^9}, {3.94701591023999*^9, 
  3.947015921209468*^9}, {3.947016271102623*^9, 3.947016277759243*^9}},
 CellLabel->"In[48]:=",
 CellID->171383505,ExpressionUUID->"bbaa5d85-f19b-4a78-9106-d91216c142e3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PerturbedCellularAutomaton", "[", 
   RowBox[{"ru_", ",", 
    RowBox[{"init_", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", " ", "0"}], "}"}]}], ",", " ", 
    RowBox[{"txspec_", ":", 
     RowBox[{"{", 
      RowBox[{"10", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "25"}], ",", " ", "25"}], "}"}]}], "}"}]}], ",", " ", 
    RowBox[{"idxspec_", ":", "1"}], ",", " ", 
    RowBox[{"OptionsPattern", "[", "PerturbedCellularAutomaton", "]"}]}], 
   "]"}], ":=", " ", "\n", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "ca", ",", " ", "k", ",", " ", "tmax", ",", " ", "trange", ",", " ", 
      "xspec", ",", " ", "tpert", ",", " ", "fullidxs", ",", " ", "pre", ",", 
      " ", "ts", ",", " ", "indexfunc", ",", " ", "evoca", ",", " ", "row", ",",
       " ", "rowidxs", ",", " ", "rowinrange", ",", " ", "caperts", ",", " ", 
      "pca"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"k", " ", "=", " ", 
      RowBox[{
       RowBox[{"interpretrule", "[", "ru", "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tmax", ",", " ", "trange", ",", " ", "xspec"}], "}"}], " ", "=",
       " ", 
      RowBox[{"interprettxspec", "[", "txspec", "]"}]}], ";", 
     "\[IndentingNewLine]", " ", 
     RowBox[{"tpert", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Body\>\"", "]"}], ",", 
        RowBox[{
         RowBox[{"ca", " ", "=", " ", 
          RowBox[{"CellularAutomaton", "[", 
           RowBox[{"ru", ",", " ", "init", ",", " ", 
            RowBox[{"{", 
             RowBox[{"tmax", ",", " ", "xspec"}], "}"}]}], "]"}]}], ";", " ", 
         "\n", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#", " ", "==", " ", 
              RowBox[{"-", "Infinity"}]}], ",", " ", 
             RowBox[{
              RowBox[{"Length", "[", "ca", "]"}], "-", "1"}], ",", " ", "#"}],
             "]"}], "&"}], "[", 
          RowBox[{
           RowBox[{"TestCALifeTime", "[", "ca", "]"}], "-", "1"}], "]"}]}], ",",
         " ", "tmax"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"fullidxs", " ", "=", " ", 
      RowBox[{"SortBy", "[", 
       RowBox[{
        RowBox[{"tofullform", "[", 
         RowBox[{
          RowBox[{"Normal", "[", "idxspec", "]"}], ",", " ", "tpert"}], "]"}],
         ",", " ", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pre", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Body\>\"", "]"}], ",", " ", 
        RowBox[{"ca", "[", 
         RowBox[{"[", 
          RowBox[{";;", 
           RowBox[{
            RowBox[{"fullidxs", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "]"}], "]"}], "+", 
            "1"}]}], "]"}], "]"}], ",", 
        RowBox[{"CellularAutomaton", "[", 
         RowBox[{"ru", ",", " ", "init", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"fullidxs", "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "]"}], "]"}], ",", 
            " ", "xspec"}], "}"}]}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ts", " ", "=", " ", 
      RowBox[{"Differences", "[", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"fullidxs", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "1", ",", " ", "1"}], "]"}], "]"}], ",", 
         "  ", 
         RowBox[{"tmax", " ", "+", " ", "1"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"indexfunc", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Body\>\"", "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#", " ", "==", " ", 
              RowBox[{"{", "}"}]}], ",", " ", 
             RowBox[{"{", "}"}], ",", " ", 
             RowBox[{"Range", "@@", "#"}]}], "]"}], "&"}], "[", 
          RowBox[{"nonzeroRange", "[", "#", "]"}], "]"}], "&"}], ",", " ", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "#", "]"}], "]"}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"evoca", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"preca_", ",", " ", "prepert_"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"i1_", ",", " ", "j1_"}], "}"}], "->", "bitfunc_"}], ",", 
          "tcurr_"}], "}"}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"row", " ", "=", " ", 
          RowBox[{"Last", "[", "preca", "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"rowidxs", " ", "=", " ", 
          RowBox[{"indexfunc", "[", "row", "]"}]}], ";", "\n", 
         RowBox[{"expanded", " ", "=", " ", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"expandrange", "[", 
             RowBox[{"j1", ",", " ", 
              RowBox[{"Length", "[", "rowidxs", "]"}]}], "]"}], ",", " ", 
            RowBox[{
             RowBox[{"#", "<=", " ", 
              RowBox[{"Length", "[", "rowidxs", "]"}]}], "&"}]}], "]"}]}], ";",
          "\[IndentingNewLine]", 
         RowBox[{"rowinrange", " ", "=", " ", 
          RowBox[{"rowidxs", "[", 
           RowBox[{"[", "expanded", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"CellularAutomaton", "[", 
            RowBox[{"ru", ",", " ", 
             RowBox[{"replaced", " ", "=", " ", 
              RowBox[{"ReplacePart", "[", 
               RowBox[{"row", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{"#", "->", 
                   RowBox[{
                    RowBox[{"tofunc", "[", 
                    RowBox[{"bitfunc", ",", " ", "k"}], "]"}], "[", 
                    RowBox[{"row", "[", 
                    RowBox[{"[", "#", "]"}], "]"}], "]"}]}], "&"}], "/@", 
                 "rowinrange"}]}], "]"}]}], ",", "tcurr"}], "]"}], ",", "\n", 
           
           RowBox[{"Thread", "[", 
            RowBox[{
             RowBox[{"Thread", "[", 
              RowBox[{"{", 
               RowBox[{"i1", ",", "rowinrange"}], "}"}], "]"}], "->", " ", 
             RowBox[{"replaced", "[", 
              RowBox[{"[", "rowinrange", "]"}], "]"}]}], "]"}]}], "}"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"caperts", " ", "=", " ", 
      RowBox[{"FoldList", "[", 
       RowBox[{"evoca", ",", " ", 
        RowBox[{"{", 
         RowBox[{"pre", ",", " ", 
          RowBox[{"{", "}"}]}], "}"}], ",", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{"fullidxs", ",", " ", "ts"}], "}"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pca", " ", "=", " ", 
      RowBox[{"Join", "@@", 
       RowBox[{"(", 
        RowBox[{"Most", "/@", 
         RowBox[{"caperts", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<ReturnPerturbations\>\"", "]"}], ",", 
       
       RowBox[{"{", 
        RowBox[{
         RowBox[{"pca", "[", 
          RowBox[{"[", "trange", "]"}], "]"}], ",", "  ", 
         RowBox[{"Association", "[", 
          RowBox[{"Cases", "[", 
           RowBox[{
            RowBox[{"caperts", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"2", ";;"}], ",", " ", "2"}], "]"}], "]"}], ",", " ", 
            "_Rule", ",", " ", "2"}], "]"}], "]"}]}], "}"}], ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{"pca", "[", 
        RowBox[{"[", "trange", "]"}], "]"}]}], "]"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945564854387958*^9, 3.9455649209907303`*^9}, {
   3.945565064662647*^9, 3.945565092077922*^9}, {3.945565142190632*^9, 
   3.9455651934105377`*^9}, {3.945565389808919*^9, 3.945565426351673*^9}, 
   3.945565597663636*^9, 3.94556586297538*^9, {3.945565939005967*^9, 
   3.94556594304769*^9}, {3.945566001035863*^9, 3.945566003168552*^9}, {
   3.945566101093194*^9, 3.9455661099710617`*^9}, {3.945566232209316*^9, 
   3.9455662353172607`*^9}, {3.945566363850244*^9, 3.945566472518067*^9}, {
   3.9455665195085993`*^9, 3.945566521794959*^9}, {3.945566567466765*^9, 
   3.945566664530416*^9}, {3.945566695313137*^9, 3.945566722911668*^9}, {
   3.945566773151082*^9, 3.945566859576585*^9}, {3.9455669089646053`*^9, 
   3.945566993166974*^9}, {3.945567055301301*^9, 3.945567161944401*^9}, {
   3.945567213307018*^9, 3.945567266570752*^9}, {3.945567304547831*^9, 
   3.9455673649582043`*^9}, {3.945567436501055*^9, 3.945567677884582*^9}, {
   3.945567899991283*^9, 3.9455679730604267`*^9}, {3.945568242529466*^9, 
   3.945568252218586*^9}, {3.9455684446031027`*^9, 3.945568446154142*^9}, {
   3.945568629378972*^9, 3.945568653303083*^9}, {3.9455686993915577`*^9, 
   3.945568758128219*^9}, {3.945568915252228*^9, 3.945568916557683*^9}, {
   3.945569035914846*^9, 3.945569040243853*^9}, {3.945569095352459*^9, 
   3.945569096948833*^9}, {3.945569188120613*^9, 3.945569209793717*^9}, {
   3.945569260338842*^9, 3.945569270002475*^9}, {3.945569344891751*^9, 
   3.945569346086515*^9}, 3.945569378689702*^9, {3.945569548422887*^9, 
   3.945569574832016*^9}, {3.945569644942238*^9, 3.945569649843801*^9}, {
   3.9456108922004843`*^9, 3.945610913775126*^9}, {3.945611373326125*^9, 
   3.945611538139295*^9}, {3.94561161049885*^9, 3.945611643117488*^9}, {
   3.945611720538444*^9, 3.945611753931011*^9}, {3.945613414282668*^9, 
   3.945613414481608*^9}, {3.945617343247187*^9, 3.945617343505967*^9}, {
   3.945618750798959*^9, 3.9456187913806047`*^9}, {3.94561882501226*^9, 
   3.945618865864017*^9}, {3.945620113403321*^9, 3.94562011374802*^9}, {
   3.945620252658791*^9, 3.945620255651802*^9}, 3.945620358590395*^9, {
   3.945626762854234*^9, 3.945626769516276*^9}, {3.9456268187302322`*^9, 
   3.945626822135152*^9}, {3.9456295319236183`*^9, 3.9456295791661873`*^9}, {
   3.945629734988823*^9, 3.9456298012983522`*^9}, {3.945629838829083*^9, 
   3.945629842055011*^9}, {3.945629929150675*^9, 3.9456299501143417`*^9}, {
   3.945630319824434*^9, 3.945630321925333*^9}, {3.945630476006742*^9, 
   3.9456304917199907`*^9}, {3.9456308540541*^9, 3.945630854724384*^9}, {
   3.9456331811094522`*^9, 3.945633271754642*^9}, 3.945634364158344*^9, {
   3.945634410179576*^9, 3.94563444150272*^9}, {3.945635058803431*^9, 
   3.9456351026467113`*^9}, {3.945636023224997*^9, 3.945636051778284*^9}, {
   3.945636123574259*^9, 3.9456361259043922`*^9}, {3.945636168185083*^9, 
   3.945636171932963*^9}, {3.945636699505157*^9, 3.945636858055952*^9}, {
   3.945636907338262*^9, 3.945636933832975*^9}, {3.945637003244535*^9, 
   3.945637005942765*^9}, {3.945637072835722*^9, 3.945637360312528*^9}, {
   3.945637431243556*^9, 3.945637557528727*^9}, {3.945637626606348*^9, 
   3.94563762930323*^9}, {3.94563766570674*^9, 3.945637780655936*^9}, {
   3.945637824876812*^9, 3.945637886456723*^9}, {3.945638718256763*^9, 
   3.945638719063764*^9}, {3.94564032555943*^9, 3.945640426559726*^9}, {
   3.94564062106589*^9, 3.945640642306943*^9}, {3.945640680110565*^9, 
   3.945640720716984*^9}, {3.945640754253708*^9, 3.945640768034375*^9}, {
   3.945640831055541*^9, 3.9456408360851107`*^9}, 3.945641016006737*^9, {
   3.945641252942339*^9, 3.945641263279813*^9}, {3.945641324650139*^9, 
   3.945641347254607*^9}, 3.945641641277536*^9, {3.945641734055994*^9, 
   3.945641735883544*^9}, {3.945641788145612*^9, 3.945641802875277*^9}, {
   3.945641876850329*^9, 3.94564187775984*^9}, {3.945641953092898*^9, 
   3.9456420237899523`*^9}, {3.945642267009985*^9, 3.945642268378473*^9}, {
   3.945642315005647*^9, 3.9456424772070923`*^9}, {3.94564251351525*^9, 
   3.945642529914897*^9}, 3.945642609516411*^9, {3.945642821848054*^9, 
   3.945642832943038*^9}, {3.945642905563719*^9, 3.945643000782466*^9}, {
   3.945643064875382*^9, 3.945643082355438*^9}, {3.945643199510627*^9, 
   3.945643208074139*^9}, 3.94564328519401*^9, {3.945643407290581*^9, 
   3.945643423613723*^9}, {3.945643464784686*^9, 3.945643508130039*^9}, {
   3.945643586638302*^9, 3.945643591591855*^9}, 3.945643720400498*^9, {
   3.945644091395174*^9, 3.945644095043854*^9}, 3.945644275308377*^9, 
   3.9456444417133713`*^9, {3.9456445993664627`*^9, 3.945644627204362*^9}, {
   3.9456447299845963`*^9, 3.945644733767869*^9}, {3.945644885314126*^9, 
   3.945644885810425*^9}, {3.945644937415226*^9, 3.945644959801022*^9}, {
   3.945645037027165*^9, 3.945645048693818*^9}, {3.945645079561424*^9, 
   3.945645080177339*^9}, {3.9456451471213913`*^9, 3.945645172544615*^9}, {
   3.945645223409771*^9, 3.94564522648722*^9}, {3.945645356676486*^9, 
   3.9456453572214746`*^9}, {3.945645484133642*^9, 3.945645545749918*^9}, {
   3.945645590909075*^9, 3.945645708667966*^9}, 3.9456457420965843`*^9, {
   3.945646237287916*^9, 3.945646244935281*^9}, {3.945646356522284*^9, 
   3.945646358354308*^9}, 3.945653718135929*^9, 3.945656237858609*^9, {
   3.945660329826086*^9, 3.9456603302658567`*^9}, {3.9458878816484013`*^9, 
   3.945887882050497*^9}, {3.945887950750848*^9, 3.945887955542006*^9}, {
   3.945899470360111*^9, 3.945899470889515*^9}, {3.945899501639595*^9, 
   3.945899519117752*^9}, {3.945899652866143*^9, 3.945899671447626*^9}, 
   3.945899728958289*^9, {3.945899921397027*^9, 3.94589993321021*^9}, {
   3.945900183684778*^9, 3.945900222287728*^9}, 3.945901231389453*^9, {
   3.94590128264411*^9, 3.945901284409274*^9}, {3.945910289433428*^9, 
   3.945910347571181*^9}, {3.945949932474243*^9, 3.945950001400909*^9}, {
   3.945951702053653*^9, 3.945951721633325*^9}, {3.945954275658063*^9, 
   3.945954360256893*^9}, {3.9459544012900248`*^9, 3.945954419356032*^9}, {
   3.945954480119594*^9, 3.945954504725897*^9}, {3.945954611983808*^9, 
   3.945954700009926*^9}, {3.94595483055954*^9, 3.945954860291252*^9}, {
   3.945954915063428*^9, 3.9459549250425034`*^9}, {3.945954977982039*^9, 
   3.9459549813618593`*^9}, {3.9459551434760723`*^9, 3.945955181719782*^9}, {
   3.945955260255157*^9, 3.945955283001497*^9}, {3.945978591349657*^9, 
   3.945978624293531*^9}, {3.945979309484518*^9, 3.945979319017934*^9}, {
   3.945979365517386*^9, 3.945979399047859*^9}, {3.945979433554727*^9, 
   3.945979438920322*^9}, {3.945979909976758*^9, 3.945979912136489*^9}, {
   3.945980024086074*^9, 3.945980058816512*^9}, {3.945980090484645*^9, 
   3.945980223250351*^9}, {3.945980288817212*^9, 3.945980389160634*^9}, {
   3.945980424327888*^9, 3.945980455184745*^9}, {3.945980501047874*^9, 
   3.945980572407316*^9}, {3.9459806171296463`*^9, 3.945980658233486*^9}, {
   3.945980777981628*^9, 3.945980877565237*^9}, {3.945980920651031*^9, 
   3.945980994785961*^9}, {3.945981027535656*^9, 3.945981043516881*^9}, {
   3.945981154084898*^9, 3.94598128009009*^9}, {3.945981493331264*^9, 
   3.945981493973534*^9}, {3.945981582246415*^9, 3.945981650450899*^9}, {
   3.945981706719965*^9, 3.945981751227412*^9}, {3.94598179541354*^9, 
   3.945981803231414*^9}, {3.945981849777975*^9, 3.945981872791196*^9}, {
   3.945981935688718*^9, 3.945981936352383*^9}, {3.945982094937886*^9, 
   3.945982135039751*^9}, {3.9459825225806847`*^9, 3.945982533457672*^9}, {
   3.945982570153918*^9, 3.945982605198462*^9}, {3.94598289110137*^9, 
   3.945982891624757*^9}, {3.9459829523098507`*^9, 3.945982955172619*^9}, {
   3.945983121217964*^9, 3.945983122581058*^9}, {3.94598408659284*^9, 
   3.945984108271386*^9}, {3.94598419142025*^9, 3.945984229952263*^9}, {
   3.945984264670665*^9, 3.945984279035056*^9}, {3.9459845113292*^9, 
   3.945984607918695*^9}, {3.945984702871541*^9, 3.9459847316802*^9}, {
   3.945991246075955*^9, 3.945991279681704*^9}, {3.945991332203476*^9, 
   3.945991380393558*^9}, {3.945993003310892*^9, 3.945993017640567*^9}, 
   3.945993113662118*^9, {3.94599315446382*^9, 3.945993155400598*^9}, {
   3.945993277973955*^9, 3.945993279702696*^9}, {3.945993342398526*^9, 
   3.945993388863004*^9}, {3.9459934645242767`*^9, 3.945993516980267*^9}, {
   3.945993591597203*^9, 3.945993604647334*^9}, {3.945993657735557*^9, 
   3.945993658916209*^9}, {3.94599380987108*^9, 3.945993829246912*^9}, {
   3.945994105630556*^9, 3.945994154159828*^9}, {3.945994419094791*^9, 
   3.9459944246890593`*^9}, {3.945994545648909*^9, 3.945994548589602*^9}, {
   3.945994677148686*^9, 3.945994678226427*^9}, {3.9459953377047863`*^9, 
   3.9459953382927*^9}, {3.945995590920783*^9, 3.945995591546712*^9}, {
   3.945995664461948*^9, 3.945995698197419*^9}, {3.945995916906798*^9, 
   3.945995917269504*^9}, {3.945996083114585*^9, 3.945996084725947*^9}, {
   3.945996318039239*^9, 3.945996320316819*^9}, {3.946033981113184*^9, 
   3.946033981520111*^9}, {3.946034104080377*^9, 3.946034146597061*^9}, {
   3.946034180795663*^9, 3.946034191043227*^9}, {3.946064251436506*^9, 
   3.946064252755916*^9}, {3.946064432740367*^9, 3.946064434627742*^9}, {
   3.946064760367833*^9, 3.946064837463447*^9}, {3.946066382704019*^9, 
   3.946066383731625*^9}, {3.94606644931458*^9, 3.946066451927668*^9}, {
   3.946066488330406*^9, 3.946066490212941*^9}, {3.946071467163835*^9, 
   3.946071479312889*^9}, {3.946134693389347*^9, 3.946134714413784*^9}, {
   3.946152734532546*^9, 3.946152757020159*^9}, {3.946155723096078*^9, 
   3.946155765042006*^9}, {3.946155874493668*^9, 3.946155926285573*^9}, {
   3.946156126333436*^9, 3.946156134099635*^9}, {3.946156169388645*^9, 
   3.946156200213213*^9}, 3.946156479482671*^9, {3.946156745100921*^9, 
   3.946156749717506*^9}, {3.946157124418914*^9, 3.946157127769731*^9}, {
   3.9461610609015436`*^9, 3.946161061172872*^9}, {3.9461616078337507`*^9, 
   3.946161615855894*^9}, {3.946162161119635*^9, 3.946162162976255*^9}, {
   3.946162789914358*^9, 3.946162791773041*^9}, {3.946163361128784*^9, 
   3.946163361280663*^9}, {3.9461635189245443`*^9, 3.946163519343185*^9}, {
   3.946163679620331*^9, 3.946163695298393*^9}, {3.946163802961725*^9, 
   3.946163803547845*^9}, {3.946164014759865*^9, 3.946164025089123*^9}, {
   3.946164866180666*^9, 3.946164867589972*^9}, {3.946164901752612*^9, 
   3.946164915707404*^9}, {3.946164955922978*^9, 3.9461649581157084`*^9}, {
   3.94616499938936*^9, 3.946165000200625*^9}, {3.946165080203477*^9, 
   3.946165084261224*^9}, {3.946169597318919*^9, 3.94616965367192*^9}, {
   3.946175930944998*^9, 3.9461759429990053`*^9}, 3.946178973052822*^9, {
   3.94617901772355*^9, 3.946179046884939*^9}, {3.946179489788151*^9, 
   3.946179492359894*^9}, {3.946179725784432*^9, 3.946179727766074*^9}, {
   3.946180608140894*^9, 3.946180647141325*^9}, {3.946181104546417*^9, 
   3.946181110323604*^9}, {3.946183980882976*^9, 3.946183997346745*^9}, {
   3.946184156553396*^9, 3.946184158491613*^9}, {3.946184200882712*^9, 
   3.946184248949012*^9}, {3.94622251312263*^9, 3.946222576561921*^9}, {
   3.946504668522339*^9, 3.946504697825506*^9}, {3.946566380090914*^9, 
   3.946566383777483*^9}, {3.946566453989181*^9, 3.946566464262829*^9}, 
   3.946575207808757*^9},
 CellLabel->"In[53]:=",
 CellID->1222021125,ExpressionUUID->"a8e0db7b-b97f-448c-b184-05bde6a0546b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Analysis Functions", "Section",
 CellChangeTimes->{{3.943103306870668*^9, 
  3.943103310441294*^9}},ExpressionUUID->"c0def580-a913-4d5e-a53d-\
54a25ec47976"],

Cell[CellGroupData[{

Cell["PerturbationSensitivities", "Subsection",
 CellChangeTimes->{{3.945540252407796*^9, 3.945540267419267*^9}, {
  3.9455447868155212`*^9, 3.945544787091506*^9}, {3.945659926108226*^9, 
  3.945659931398574*^9}},ExpressionUUID->"50d9c160-8288-4bb0-9e5b-\
2b84d07f431b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"absdeltalt", "[", 
   RowBox[{"ca_", ",", " ", "pca_"}], "]"}], ":=", " ", 
  RowBox[{"Abs", "[", 
   RowBox[{
    RowBox[{"TestCALifeTime", "[", "pca", "]"}], " ", "-", " ", 
    RowBox[{"TestCALifeTime", "[", "ca", "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.94449081794423*^9, 3.9444909094177628`*^9}, {
  3.944490959322697*^9, 3.944490993340799*^9}, {3.94449106774311*^9, 
  3.944491076349791*^9}, {3.944491170777509*^9, 3.9444912813137217`*^9}, {
  3.944491363048721*^9, 3.944491366658052*^9}, {3.9444923081545258`*^9, 
  3.944492345557996*^9}, {3.9444926213548927`*^9, 3.944492621477656*^9}, {
  3.944493742156652*^9, 3.944493743773632*^9}, {3.94450727168178*^9, 
  3.944507277086361*^9}, {3.944507341580439*^9, 3.944507368077084*^9}, {
  3.94450746055916*^9, 3.9445074636883783`*^9}, {3.944507732861686*^9, 
  3.944507753281385*^9}, {3.944759752554522*^9, 3.944759793343004*^9}, {
  3.945540561309663*^9, 3.9455405972853813`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"0b23d3e2-0338-4e49-8bb1-477458e606df"],

Cell[BoxData[
 RowBox[{
  RowBox[{"maxdeltalt", "[", 
   RowBox[{"ca_", ",", " ", "pcas_"}], "]"}], ":=", 
  RowBox[{"Max", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"absdeltalt", "[", 
      RowBox[{"ca", ",", " ", "#"}], "]"}], "&"}], "/@", " ", "pcas"}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.945544516921167*^9, 3.945544535754789*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"9bd0d211-f111-4848-bb4f-5dc8732b5d6e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"absdeltanorm", "[", 
   RowBox[{"ca_", ",", " ", "sense_"}], "]"}], ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"sense", " ", "==", " ", 
     RowBox[{"-", "Infinity"}]}], ",", " ", "1", ",", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"sense", " ", "==", " ", "0"}], ",", " ", 
      RowBox[{"-", "1"}], ",", " ", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"lt", " ", "=", 
          RowBox[{"TestCALifeTime", "[", "ca", "]"}]}], "}"}], ",", "  ", 
        RowBox[{"sense", " ", "/", " ", 
         RowBox[{"Max", "[", 
          RowBox[{"lt", ",", " ", 
           RowBox[{
            RowBox[{"Length", "[", "ca", "]"}], " ", "-", " ", "lt"}]}], 
          "]"}]}]}], "]"}]}], "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945540987419342*^9, 3.9455410355027943`*^9}, {
  3.94554108656793*^9, 3.945541193539502*^9}, {3.945541239785759*^9, 
  3.9455412505284*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"b2510a1a-df91-45cd-904f-a22e4094597b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "PerturbationSensitivities", "]"}], " ", "=", " ", 
   
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Steps\>\"", "->", "200"}], ",", " ", 
     RowBox[{"\"\<SensitivityFunction\>\"", "->", "absdeltalt"}], ",", " ", 
     RowBox[{"\"\<IndexFunction\>\"", "->", "bodyidxs"}], ",", " ", "\n", 
     RowBox[{"\"\<PerturbationFunction\>\"", "->", 
      "PerturbedCellularAutomaton"}], ",", " ", 
     RowBox[{"\"\<BitFunction\>\"", "->", "\"\<Random\>\""}], ",", " ", 
     RowBox[{"\"\<InitialPerturbation\>\"", "->", "None"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PerturbationSensitivities", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_Integer", ",", " ", "k_Integer", ",", " ", "r_Integer"}], 
     "}"}], ",", "\n", 
    RowBox[{"OptionsPattern", "[", "PerturbationSensitivities", "]"}]}], 
   "]"}], ":=", " ", "\n", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ca", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<InitialPerturbation\>\"", "]"}], 
         " ", "===", " ", "None"}], ",", " ", 
        RowBox[{"getca", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], ",", " ", 
          RowBox[{"OptionValue", "[", "\"\<Steps\>\"", "]"}]}], "]"}], ",", 
        " ", "\n", 
        RowBox[{"PerturbedCellularAutomaton", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], ",", " ", 
          RowBox[{"OptionValue", "[", "\"\<InitialPerturbation\>\"", "]"}], ",",
           " ", 
          RowBox[{"OptionValue", "[", "\"\<Steps\>\"", "]"}]}], "]"}]}], 
       "]"}]}], "}"}], ",", "\n", 
    RowBox[{"AssociationMap", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<SensitivityFunction\>\"", "]"}], "[", 
        RowBox[{"ca", ",", " ", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<PerturbationFunction\>\"", "]"}], "[",
           "\n", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ca", ",", " ", 
             RowBox[{"{", 
              RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}]}], "}"}], ",",
            " ", "#", ",", " ", 
           RowBox[{"\"\<BitFunction\>\"", "->", 
            RowBox[{"OptionValue", "[", "\"\<BitFunction\>\"", "]"}]}], ",", 
           " ", 
           RowBox[{"\"\<Body\>\"", "->", "False"}], ",", " ", 
           RowBox[{"\"\<ReturnPerturbations\>\"", "->", "False"}]}], "]"}]}], 
        "]"}], "&"}], ",", " ", "\n", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<IndexFunction\>\"", "]"}], "[", 
         "ca", "]"}], ",", " ", "1"}], "]"}]}], "]"}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.944486915866929*^9, 3.944487005355361*^9}, {
   3.944487039577426*^9, 3.944487056554845*^9}, {3.944487087828568*^9, 
   3.944487199630529*^9}, {3.944487237621695*^9, 3.9444872744506893`*^9}, {
   3.944487375767552*^9, 3.944487380970046*^9}, {3.944490432127099*^9, 
   3.94449051359888*^9}, {3.94449059426232*^9, 3.9444905952149887`*^9}, {
   3.944490634237767*^9, 3.94449068604597*^9}, {3.9444908596183853`*^9, 
   3.944490859990075*^9}, {3.944491887938538*^9, 3.9444918895325212`*^9}, 
   3.944492070172682*^9, {3.944492875221411*^9, 3.944492883040357*^9}, {
   3.944493032971727*^9, 3.9444930365891867`*^9}, {3.944493081901815*^9, 
   3.944493082908987*^9}, {3.944506683516601*^9, 3.9445066848150873`*^9}, {
   3.944507424435897*^9, 3.944507484003048*^9}, {3.944507763271254*^9, 
   3.944507770322781*^9}, 3.944511707317666*^9, {3.944512046217747*^9, 
   3.944512052374105*^9}, {3.944759437364381*^9, 3.944759474250016*^9}, {
   3.9447597142051687`*^9, 3.944759715368204*^9}, {3.944760396736481*^9, 
   3.944760401740182*^9}, {3.944768110953274*^9, 3.944768144015161*^9}, {
   3.944768196796276*^9, 3.94476820794529*^9}, {3.944768652340193*^9, 
   3.944768653383917*^9}, {3.9455307042596493`*^9, 3.945530721970703*^9}, {
   3.945530752299985*^9, 3.945530765651554*^9}, {3.9455333329651*^9, 
   3.945533344969485*^9}, {3.945533695155109*^9, 3.945533766503653*^9}, {
   3.945533813725759*^9, 3.9455339334465647`*^9}, {3.945539400082763*^9, 
   3.945539410812356*^9}, {3.945539684776298*^9, 3.945539785637553*^9}, {
   3.9455407385754232`*^9, 3.945540762072873*^9}, 3.945541780295742*^9, {
   3.945547155464478*^9, 3.9455473159312077`*^9}, {3.945609255725046*^9, 
   3.945609269073526*^9}, {3.9456480281994553`*^9, 3.945648048424395*^9}, {
   3.945648089143779*^9, 3.94564811158888*^9}, {3.945648157380201*^9, 
   3.945648162630842*^9}, {3.945648285033061*^9, 3.945648286285751*^9}, {
   3.945648472081294*^9, 3.945648475653928*^9}, {3.94564886738975*^9, 
   3.945648874112725*^9}, 3.94564971311404*^9, {3.945650324906981*^9, 
   3.945650325643325*^9}, {3.946213401892294*^9, 3.946213410634062*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"ed8fa20c-135e-4bb7-9658-cc5b070ea7cb"],

Cell[BoxData[
 RowBox[{"ClearAll", "@", "PerturbationSensitivityPlot"}]], "Input",
 CellChangeTimes->{{3.945531629194338*^9, 3.945531647271728*^9}, {
  3.945544188146636*^9, 3.94554418969355*^9}, {3.945650065464342*^9, 
  3.945650069065601*^9}},
 CellLabel->
  "In[305]:=",ExpressionUUID->"d8bb5dd4-ea88-4998-8752-f08502cdf390"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "PlotSensitivities", "]"}], " ", "=", " ", 
   RowBox[{"{", "\n", 
    RowBox[{
     RowBox[{"ColorFunction", "->", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"#", "==", 
           RowBox[{"-", "1"}]}], ",", "Gray", ",", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#", "==", "1"}], ",", 
            RowBox[{"Darker", "[", "Red", "]"}], ",", 
            RowBox[{"Blend", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"LightBlue", ",", "Blue"}], "}"}], ",", " ", "#"}], 
             "]"}]}], "]"}]}], "]"}], "&"}], ")"}]}], ",", " ", 
     RowBox[{"\"\<NormalizationFunction\>\"", "->", "absdeltanorm"}], ",", 
     "\n", 
     RowBox[{"\"\<BackgroundColor\>\"", "->", "White"}], ",", " ", 
     RowBox[{"\"\<Steps\>\"", "->", "200"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PlotSensitivities", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_Integer", ",", " ", "k_Integer", ",", " ", "r_Integer"}], 
     "}"}], ",", " ", "sensitivities_Association", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", "\n", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ca", ",", " ", "allops", ",", " ", "idxs", ",", " ", "calts"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", "=", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "PlotSensitivities", "]"}], ",", "ops"}], 
         "}"}], ",", "Last"}], "]"}]}], ";", "\n", 
     RowBox[{"ca", " ", "=", " ", 
      RowBox[{"getca", "[", 
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], "]"}]}], ";", 
     "\n", 
     RowBox[{"normalized", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"absdeltanorm", "[", 
         RowBox[{"ca", ",", " ", "#"}], "]"}], "&"}], " ", "/@", " ", 
       "sensitivities"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"replaced", " ", "=", " ", 
      RowBox[{"ReplacePart", "[", 
       RowBox[{"ca", ",", 
        RowBox[{"Normal", "[", "normalized", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"PlotCA", "[", 
      RowBox[{
       RowBox[{"replaced", "[", 
        RowBox[{"[", 
         RowBox[{";;", 
          RowBox[{"allops", "[", "\"\<Steps\>\"", "]"}]}], "]"}], "]"}], ",", 
       " ", "\n", 
       RowBox[{"ColorFunctionScaling", "->", "False"}], ",", "\n", 
       RowBox[{"ColorRules", "->", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "1"}], "->", 
           RowBox[{
            RowBox[{"allops", "[", "ColorFunction", "]"}], "[", "0", "]"}]}], 
          ",", " ", 
          RowBox[{"0", "->", 
           RowBox[{"allops", "[", "\"\<BackgroundColor\>\"", "]"}]}]}], 
         "}"}]}], ",", " ", "\n", 
       RowBox[{"Sequence", "@@", 
        RowBox[{"Normal", "[", "allops", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.944486915866929*^9, 3.944487005355361*^9}, {
   3.944487039577426*^9, 3.944487056554845*^9}, {3.944487087828568*^9, 
   3.944487199630529*^9}, {3.944487237621695*^9, 3.9444872744506893`*^9}, {
   3.944487375767552*^9, 3.944487380970046*^9}, {3.944490432127099*^9, 
   3.94449051359888*^9}, {3.94449059426232*^9, 3.9444905952149887`*^9}, {
   3.944490634237767*^9, 3.94449068604597*^9}, {3.9444908596183853`*^9, 
   3.944490859990075*^9}, {3.944491887938538*^9, 3.9444918895325212`*^9}, 
   3.944492070172682*^9, {3.944492875221411*^9, 3.944492883040357*^9}, {
   3.944493942089341*^9, 3.944494007317971*^9}, {3.944494038237578*^9, 
   3.944494040048719*^9}, {3.944512093176009*^9, 3.944512108084495*^9}, {
   3.944512729671383*^9, 3.944512732767447*^9}, {3.944512930408449*^9, 
   3.944512931286265*^9}, {3.944513040124568*^9, 3.944513040278975*^9}, {
   3.944767498636023*^9, 3.944767504711857*^9}, {3.944768402829117*^9, 
   3.9447684100913143`*^9}, {3.944768518764978*^9, 3.9447685264411297`*^9}, 
   3.9451073768192997`*^9, {3.9455408344771957`*^9, 3.945540898123932*^9}, {
   3.945540938659734*^9, 3.945540953963854*^9}, {3.945541233091652*^9, 
   3.945541255389922*^9}, {3.945541286705964*^9, 3.945541354404351*^9}, {
   3.945541956256894*^9, 3.945542060514563*^9}, 3.945542326696133*^9, {
   3.945544177779934*^9, 3.945544183677325*^9}, {3.945544228294546*^9, 
   3.945544229823065*^9}, 3.945544318756554*^9, 3.945544466439392*^9, {
   3.945544751920841*^9, 3.94554475933426*^9}, {3.945666823794183*^9, 
   3.945666855000097*^9}, {3.946502123941042*^9, 3.946502124922147*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"3b50bac8-1bb5-436c-957e-bb81d052d4da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PerturbationSensitivityPlot", "[", 
   RowBox[{"ru_", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "allops", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", "=", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "PerturbationSensitivities", "]"}], ",", 
          "ops"}], "}"}], ",", "Last"}], "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"PlotSensitivities", "[", 
      RowBox[{"ru", ",", " ", 
       RowBox[{"PerturbationSensitivities", "[", 
        RowBox[{"ru", ",", "\n", 
         RowBox[{"Sequence", "@@", 
          RowBox[{"FilterRules", "[", 
           RowBox[{
            RowBox[{"Normal", "[", "allops", "]"}], ",", " ", 
            RowBox[{"Options", "[", "PerturbationSensitivities", "]"}]}], 
           "]"}]}]}], "]"}], ",", " ", 
       RowBox[{"Sequence", "@@", 
        RowBox[{"Normal", "[", "allops", "]"}]}]}], "]"}]}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.944486915866929*^9, 3.944487005355361*^9}, {
   3.944487039577426*^9, 3.944487056554845*^9}, {3.944487087828568*^9, 
   3.944487199630529*^9}, {3.944487234449445*^9, 3.944487249741836*^9}, {
   3.944487289642845*^9, 3.94448733463884*^9}, {3.944487624595282*^9, 
   3.944487648149055*^9}, {3.944488738735078*^9, 3.944488757916947*^9}, {
   3.9444899596631527`*^9, 3.9444899855434837`*^9}, {3.944490417629325*^9, 
   3.944490418853786*^9}, {3.944490622862787*^9, 3.944490626143667*^9}, {
   3.9444906958000917`*^9, 3.944490718187745*^9}, {3.944491899797738*^9, 
   3.944491901578408*^9}, {3.944494456563126*^9, 3.9444944633900414`*^9}, {
   3.944494619554298*^9, 3.944494664681058*^9}, {3.94449471551963*^9, 
   3.944494730231015*^9}, {3.944494768338414*^9, 3.944494786811378*^9}, {
   3.944494834981859*^9, 3.944494836775361*^9}, {3.944494871342134*^9, 
   3.944494918851764*^9}, {3.944494957815713*^9, 3.944494961981246*^9}, {
   3.94449500405479*^9, 3.944495049459453*^9}, {3.944495095288765*^9, 
   3.944495140999696*^9}, {3.944495190270718*^9, 3.944495193097069*^9}, {
   3.94449524973536*^9, 3.944495259911443*^9}, {3.944495294077693*^9, 
   3.944495437419049*^9}, {3.94451211763026*^9, 3.944512128622864*^9}, {
   3.9445127868558702`*^9, 3.944512789833928*^9}, {3.944512940746048*^9, 
   3.944512941625601*^9}, {3.944513037738683*^9, 3.944513037949251*^9}, {
   3.94475964861346*^9, 3.944759660912164*^9}, {3.944760377493174*^9, 
   3.944760381453443*^9}, 3.944766223627833*^9, {3.945531580843669*^9, 
   3.945531587683104*^9}, {3.945541523813892*^9, 3.945541583730515*^9}, {
   3.945650045070356*^9, 3.945650045159443*^9}, {3.945666420923435*^9, 
   3.94566642400524*^9}, {3.945666484682631*^9, 3.94566648503578*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"96fd15f1-3639-4ccc-98ca-b22def45415c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other", "Subsection",
 CellChangeTimes->{{3.945540336575057*^9, 
  3.94554033767337*^9}},ExpressionUUID->"6e8e5439-3e8c-4912-85e9-\
1dca1a23c8a3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CountSame", "[", 
   RowBox[{"arr1_", ",", " ", "arr2_"}], "]"}], ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "sa", "}"}], ",", 
    RowBox[{
     RowBox[{"sa", " ", "=", " ", "\n", 
      RowBox[{"SparseArray", "[", 
       RowBox[{"arr1", "-", "arr2"}], "]"}]}], ";", " ", 
     RowBox[{
      RowBox[{"Times", "@@", 
       RowBox[{"Dimensions", "[", "sa", "]"}]}], " ", "-", " ", 
      RowBox[{"Length", "[", 
       RowBox[{"sa", "[", "\"\<NonzeroValues\>\"", "]"}], "]"}]}]}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.943105653145685*^9, 3.943105700669275*^9}, {
   3.943106430212906*^9, 3.943106443869117*^9}, {3.943374573951805*^9, 
   3.9433746050982857`*^9}, 3.943381343379084*^9, {3.9433813844652853`*^9, 
   3.943381403318468*^9}, {3.943381439817117*^9, 3.943381495759122*^9}, {
   3.943382147699435*^9, 3.943382215612746*^9}, {3.943394135733881*^9, 
   3.9433941368258057`*^9}, 3.943395370941695*^9, {3.94364309903135*^9, 
   3.943643099930312*^9}, {3.943643255012763*^9, 3.943643257552268*^9}, {
   3.943643839887081*^9, 3.943643943749331*^9}, 3.944307747587144*^9},
 CellLabel->"In[62]:=",ExpressionUUID->"914e413a-3638-490f-aca9-493735b3966c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CountDifferences", "[", 
   RowBox[{"arr1_", ",", "arr2_"}], "]"}], ":=", 
  RowBox[{"Length", "[", 
   RowBox[{
    RowBox[{"SparseArray", "[", 
     RowBox[{"arr1", "-", "arr2"}], "]"}], "[", "\"\<NonzeroValues\>\"", 
    "]"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943642656048552*^9, 3.943642658020051*^9}, 
   3.94364269636675*^9, 3.943642850731148*^9, {3.94364290879478*^9, 
   3.943642924981742*^9}, {3.943643190064183*^9, 3.943643224486829*^9}, 
   3.943643303926519*^9, 3.943643835515625*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"fb87530d-1647-4eac-8404-f0e8157f5a49"],

Cell[BoxData[
 RowBox[{
  RowBox[{"meanfragility", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ca_", ",", " ", "ru_"}], "}"}], ",", " ", 
    RowBox[{"pertbitfunc_", ":", "\"\<Random\>\""}], ",", " ", 
    RowBox[{"lt_", ":", 
     RowBox[{"-", "1"}]}], ",", " ", 
    RowBox[{"cr_", ":", "True"}]}], "]"}], ":=", " ", "\n", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"clt", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"lt", "==", " ", 
         RowBox[{"-", "1"}]}], ",", " ", 
        RowBox[{"TestCALifeTime", "[", "ca", "]"}], ",", " ", "lt"}], "]"}]}],
      " ", "}"}], ",", " ", "\n", 
    RowBox[{"Mean", "[", 
     RowBox[{"PerturbationSensitivities", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ca", ",", " ", "ru"}], "}"}], ",", " ", "pertbitfunc", ",", 
       " ", "clt"}], "]"}], "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943810123780548*^9, 3.943810154519761*^9}, {
   3.943810218736228*^9, 3.943810284550947*^9}, {3.943810323363736*^9, 
   3.943810368488123*^9}, 3.943810578558991*^9, {3.943810649677017*^9, 
   3.943810655945159*^9}, {3.94383115874373*^9, 3.943831164471401*^9}, {
   3.944307732012402*^9, 3.944307733992714*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"010986f6-6641-4c6a-9859-d5bc0c5ed0c0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newltblend", "[", "value_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Piecewise", "[", 
   RowBox[{"{", "\n", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Blend", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"LightGray", ",", "Blue"}], "}"}], ",", "value"}], "]"}], ",", 
       RowBox[{"value", "<=", "0.975"}]}], "}"}], ",", "\n", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Blend", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Blue", ",", " ", "Red"}], "}"}], ",", "value"}], "]"}], ",", 
       RowBox[{"value", ">", "0.975"}]}], "}"}]}], "}"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.944150216546483*^9, 3.9441502393608437`*^9}, 
   3.944150300480433*^9, {3.94415036425091*^9, 3.944150365272736*^9}, {
   3.944150402738605*^9, 3.9441504123284597`*^9}, {3.944150463644236*^9, 
   3.94415046385846*^9}, {3.944150548041984*^9, 3.944150626147049*^9}, {
   3.944150765698477*^9, 3.944150820410365*^9}, {3.944150971159443*^9, 
   3.944150996382962*^9}, {3.944151084181592*^9, 3.944151086223316*^9}, {
   3.944151133027474*^9, 3.944151171875409*^9}, {3.944307705805352*^9, 
   3.9443077219657*^9}, {3.944512549743142*^9, 3.944512631456539*^9}, {
   3.94451302657828*^9, 3.944513027597559*^9}, {3.944513067609299*^9, 
   3.944513069838722*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"bd0ce26c-8793-41ce-9d99-a5fe0cc40a54"],

Cell[BoxData[
 RowBox[{
  RowBox[{"countstepdiffs", "[", 
   RowBox[{"arr1_", ",", " ", "arr2_"}], "]"}], ":=", " ", "\n", 
  RowBox[{"Length", "/@", 
   RowBox[{"GatherBy", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"SparseArray", "[", 
       RowBox[{"arr1", " ", "-", " ", "arr2"}], "]"}], 
      "[", "\"\<NonzeroPositions\>\"", "]"}], ",", " ", 
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "&"}]}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.944306888140517*^9, 3.9443069873158083`*^9}, 
   3.944307405180588*^9},
 CellLabel->"In[66]:=",ExpressionUUID->"e9675c57-8c37-4554-b4d9-64de01f118e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getcancerperts", "[", 
   RowBox[{"ru_", ",", " ", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Steps\>\"", "->", "200"}], "}"}], "]"}]}], "]"}], ":=", 
  " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "perts", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"perts", " ", "=", 
      RowBox[{"allperts", "[", 
       RowBox[{
        RowBox[{"CellularAutomaton", "[", 
         RowBox[{"ru", ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", "1", "}"}], ",", " ", "0"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<Steps\>\"", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"-", "50"}], ",", " ", "50"}], "}"}]}], "}"}]}], "]"}], 
        ",", " ", 
        RowBox[{"ru", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Select", "[", 
      RowBox[{"perts", ",", " ", "\n", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"TestCALifeTime", "[", 
           RowBox[{"PerturbedCellularAutomaton", "[", 
            RowBox[{"ru", ",", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "1", "}"}], ",", " ", "0"}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"OptionValue", "[", "\"\<Steps\>\"", "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "50"}], ",", " ", "50"}], "}"}]}], "}"}], ",", 
             " ", "#", ",", " ", 
             RowBox[{"\"\<ReturnPerturbations\>\"", "->", "False"}]}], "]"}], 
           "]"}], " ", "==", " ", 
          RowBox[{"-", "Infinity"}]}], "&"}], ")"}]}], "]"}]}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.9451183683981247`*^9, 3.945118487727295*^9}, {
   3.945118755251984*^9, 3.945118757010066*^9}, {3.945118793825553*^9, 
   3.9451188487981853`*^9}, {3.9451191181040077`*^9, 3.945119138047632*^9}, {
   3.945119393259388*^9, 3.94511940251574*^9}, {3.945119450171067*^9, 
   3.945119513776975*^9}, {3.945119545488598*^9, 3.945119547329953*^9}, {
   3.945120312216143*^9, 3.945120314053685*^9}, {3.945120519349265*^9, 
   3.9451205296186*^9}, {3.945120587171876*^9, 3.945120589712695*^9}, {
   3.945120652265414*^9, 3.945120658083557*^9}, {3.945120739775329*^9, 
   3.945120739925272*^9}, {3.945653249736024*^9, 3.9456532750541773`*^9}, {
   3.945701326998122*^9, 3.945701331118793*^9}, {3.945701396727569*^9, 
   3.945701410187202*^9}, {3.945701736023038*^9, 3.945701743630467*^9}, 
   3.945701880388506*^9, {3.945701928908922*^9, 3.945701929617415*^9}, {
   3.945705002318081*^9, 3.945705002591833*^9}, {3.946213782131207*^9, 
   3.9462138260947523`*^9}, {3.94621388456251*^9, 3.946213975983157*^9}, {
   3.946223398712873*^9, 3.9462234406781797`*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"57294f1b-a5b9-4720-99cf-4822c83dcf9b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Population", "Section",
 CellChangeTimes->{{3.945124905426052*^9, 
  3.945124906681363*^9}},ExpressionUUID->"9833750c-2556-43b1-b3be-\
7cb6bb80404d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getallmutations", "[", 
   RowBox[{"{", 
    RowBox[{"n_Integer", ",", " ", "k_Integer", ",", " ", "r_Integer"}], 
    "}"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"getallmutations", "[", 
    RowBox[{"{", 
     RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], "]"}], " ", "=", " ",
    "\n", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"digits", " ", "=", " ", 
        RowBox[{"List", "/@", 
         RowBox[{"IntegerDigits", "[", 
          RowBox[{"n", ",", " ", "k", ",", " ", 
           RowBox[{"k", "^", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"2", "r"}], "+", "1"}], ")"}]}]}], "]"}]}]}], ",", " ", 
       "mudigs"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mudigs", " ", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Tuples", "[", 
            RowBox[{"ReplacePart", "[", 
             RowBox[{"digits", ",", " ", 
              RowBox[{"#", "->", 
               RowBox[{"Complement", "[", 
                RowBox[{
                 RowBox[{"Range", "[", 
                  RowBox[{"0", ",", " ", 
                   RowBox[{"k", " ", "-", " ", "1"}]}], "]"}], ",", " ", 
                 RowBox[{"digits", "[", 
                  RowBox[{"[", "#", "]"}], "]"}]}], "]"}]}]}], "]"}], "]"}], 
           "&"}], "/@", " ", 
          RowBox[{"Range", "[", 
           RowBox[{
            RowBox[{"Length", "[", "digits", "]"}], "-", "1"}], "]"}]}], " ", 
         ")"}], "//", " ", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{"#", ",", " ", "1"}], "]"}], "&"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#", ",", " ", "k", ",", " ", "r"}], "}"}], "&"}], "/@", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"FromDigits", "[", 
           RowBox[{"#", ",", " ", "k"}], "]"}], "&"}], "/@", " ", "mudigs"}], 
        ")"}]}]}]}], "\n", "  ", "]"}]}]}]], "Code",
 CellChangeTimes->{
  3.944327090570977*^9, {3.944327133666074*^9, 3.944327135650968*^9}, {
   3.944327282418949*^9, 3.944327321100698*^9}, {3.944327433549917*^9, 
   3.944327846827814*^9}, {3.94432795115841*^9, 3.944328005643941*^9}, {
   3.944328124354177*^9, 3.9443281258076687`*^9}, {3.944328169541747*^9, 
   3.944328196182477*^9}, {3.94432826882672*^9, 3.944328312163135*^9}, {
   3.944328524631875*^9, 3.944328535635455*^9}, {3.944328749923945*^9, 
   3.944328751417588*^9}, {3.944329012054535*^9, 3.944329019822937*^9}, {
   3.944751278766341*^9, 3.944751285160718*^9}, 3.944751326891244*^9, {
   3.944751389120824*^9, 3.944751453347126*^9}, 3.945017137389016*^9},
 CellLabel->"In[68]:=",ExpressionUUID->"87343c1c-81c4-4008-9ef2-649f897b7b84"],

Cell[BoxData[
 RowBox[{
  RowBox[{"exhaustiveneutral", "[", 
   RowBox[{"ru_", ",", " ", 
    RowBox[{"cut_", ":", "200"}]}], "]"}], ":=", " ", "\n", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"lt", " ", "=", " ", 
      RowBox[{"TestLifetime", "[", 
       RowBox[{"ru", ",", " ", "cut"}], "]"}]}], "}"}], ",", " ", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"getallmutations", "[", "ru", "]"}], ",", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"TestLifetime", "[", 
         RowBox[{"#", ",", " ", "cut"}], "]"}], " ", "==", " ", "lt"}], 
       "&"}]}], "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.944751067575765*^9, 3.944751189698888*^9}, {
   3.944751477114224*^9, 3.944751500538378*^9}, {3.944751659623405*^9, 
   3.944751664508668*^9}, 3.944751736701893*^9, {3.944751783432912*^9, 
   3.944751791480487*^9}, {3.945017148242858*^9, 3.9450171602550983`*^9}, 
   3.945112288915782*^9, {3.945118947832473*^9, 3.945118952412799*^9}, 
   3.945526246933545*^9, {3.9455262835201283`*^9, 3.945526295018798*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"7133c0ef-2767-46cc-b759-35a901e7a5eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"quickneutral", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_Integer", ",", "k_Integer", ",", "r_Integer"}], "}"}], ",", 
    RowBox[{"cut_", ":", "200"}]}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"mask", "=", 
       RowBox[{"RuleMask", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"n", ",", "k", ",", "r"}], "}"}], ",", 
         RowBox[{"TestLifetime", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"n", ",", "k", ",", "r"}], "}"}], ",", "cut"}], "]"}]}], 
        "]"}]}], ",", 
      RowBox[{"digs", "=", 
       RowBox[{"IntegerDigits", "[", 
        RowBox[{"n", ",", "k", ",", 
         RowBox[{"k", "^", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", "r"}], "+", "1"}], ")"}]}]}], "]"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#", ",", "k", ",", "r"}], "}"}], "&"}], "/@", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"FromDigits", "[", 
         RowBox[{"#", ",", "k"}], "]"}], "&"}], "\[IndentingNewLine]", "/@", 
       RowBox[{"Tuples", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"index", ",", "digit"}], "}"}], ",", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"mask", "[", 
                 RowBox[{"[", "index", "]"}], "]"}], "==", "0"}], ",", 
               RowBox[{"Range", "[", 
                RowBox[{"0", ",", 
                 RowBox[{"k", "-", "1"}]}], "]"}], ",", 
               RowBox[{"{", "digit", "}"}]}], "]"}]}], "]"}], "[", 
           RowBox[{"#", ",", 
            RowBox[{"digs", "[", 
             RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "&"}], 
         "\[IndentingNewLine]", "/@", 
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "digs", "]"}], "]"}]}], "]"}]}], ")"}]}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.945115813120508*^9, 3.945115813125668*^9}, {
   3.945119004132131*^9, 3.9451190062337713`*^9}, {3.945123859496854*^9, 
   3.945123923478093*^9}, {3.945123984708405*^9, 3.94512402749656*^9}, 
   3.945124129009829*^9},
 CellLabel->"In[70]:=",ExpressionUUID->"3f9495ca-95d8-4e4a-a37d-408683ffc6b3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PerturbPopulation", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_Integer", ",", " ", "k_Integer", ",", " ", "r_Integer"}], 
     "}"}], ",", " ", 
    RowBox[{"samplefunc_", ":", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", 
         RowBox[{";;", 
          RowBox[{"UpTo", "[", "10", "]"}]}], "]"}], "]"}], "&"}], ")"}]}], ",",
     " ", 
    RowBox[{"pertspec_", ":", 
     RowBox[{"(", 
      RowBox[{"\"\<Random\>\"", "->", "1"}], ")"}]}], ",", " ", 
    RowBox[{"steps_Integer", ":", "200"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"rus", " ", "=", 
       RowBox[{"quickneutral", "[", 
        RowBox[{"{", 
         RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], "]"}]}], ",", 
      " ", "s"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"PerturbPopulation", "[", 
     RowBox[{
      RowBox[{"samplefunc", "[", 
       RowBox[{"quickneutral", "[", 
        RowBox[{"{", 
         RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], "]"}], "]"}], ",",
       "  ", "pertspec", ",", " ", "steps"}], "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9451207953818808`*^9, 3.945120853804368*^9}, {
   3.94512089321872*^9, 3.94512089328799*^9}, {3.945121004211645*^9, 
   3.945121081718935*^9}, {3.945121166239255*^9, 3.945121187845364*^9}, {
   3.945121291290398*^9, 3.945121325611682*^9}, {3.945121387981635*^9, 
   3.945121406635539*^9}, {3.945122178602026*^9, 3.945122189784541*^9}, {
   3.945122283576271*^9, 3.945122308166499*^9}, {3.945122713630536*^9, 
   3.945122731023986*^9}, {3.9451227846445293`*^9, 3.94512280007278*^9}, {
   3.945122841437958*^9, 3.945122913746992*^9}, {3.945122971624249*^9, 
   3.945122973325691*^9}, {3.945123492271601*^9, 3.945123496615378*^9}, {
   3.945123537584054*^9, 3.945123538285596*^9}, {3.945123612248053*^9, 
   3.945123623671673*^9}, {3.945123760495822*^9, 3.945123766861141*^9}, {
   3.945124245265932*^9, 3.945124246581737*^9}, 3.945124678953227*^9, {
   3.945126890913911*^9, 3.945126892349599*^9}, {3.945127182609988*^9, 
   3.945127224617054*^9}, {3.945127261327314*^9, 3.945127263958499*^9}, {
   3.945127569240232*^9, 3.945127570220824*^9}, 3.945128559298685*^9, {
   3.945129550748648*^9, 3.945129585996633*^9}, {3.945129636415519*^9, 
   3.9451296367844553`*^9}, {3.945129693501587*^9, 3.945129705398319*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"2c64da26-4ed6-479d-a657-a6c14a89bd13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PerturbPopulation", "[", 
   RowBox[{"rus_List", ",", " ", 
    RowBox[{"pertspec_Rule", ":", 
     RowBox[{"(", 
      RowBox[{"\"\<Random\>\"", "->", "1"}], ")"}]}], ",", " ", 
    RowBox[{"steps_Integer", ":", "200"}]}], "]"}], ":=", " ", 
  RowBox[{"PerturbPopulation", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"getca", "[", 
       RowBox[{"#", ",", " ", "steps"}], "]"}], "&"}], "/@", " ", "rus"}], ",",
     " ", "rus", ",", " ", "pertspec"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9451207953818808`*^9, 3.945120853804368*^9}, {
   3.94512089321872*^9, 3.94512089328799*^9}, {3.945121004211645*^9, 
   3.945121081718935*^9}, {3.945121166239255*^9, 3.945121187845364*^9}, {
   3.945121291290398*^9, 3.945121325611682*^9}, {3.945121387981635*^9, 
   3.945121388431172*^9}, {3.9451214244278717`*^9, 3.945121442525996*^9}, {
   3.945122646508793*^9, 3.945122648495297*^9}, {3.945122711066759*^9, 
   3.945122752758585*^9}, {3.945122975840968*^9, 3.945122977635197*^9}, {
   3.945127230233573*^9, 3.945127239092495*^9}, {3.94512758731314*^9, 
   3.945127627793437*^9}, {3.945127931310405*^9, 3.945127932212486*^9}, 
   3.945128562895161*^9, {3.94512865166099*^9, 3.945128652085614*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"96687295-1def-49bb-8675-468fe0e90892"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PerturbPopulation", "[", 
   RowBox[{"cas_List", ",", " ", "rus_List", ",", " ", "pertspec_"}], "]"}], ":=",
   " ", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ps", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"pertspec", "[", 
          RowBox[{"[", "1", "]"}], "]"}], " ", "==", " ", "\"\<Random\>\""}], 
        ",", " ", 
        RowBox[{"RandomChoice", "[", 
         RowBox[{"getbodyrules", "[", 
          RowBox[{
           RowBox[{"cas", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{"\"\<AddValue\>\"", "->", "1"}]}], "]"}], "]"}], ",", " ", 
        "pertspec"}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"PerturbCA", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#1", ",", " ", "#2"}], "}"}], ",", " ", "ps"}], "]"}], 
      "&"}], "@@@", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{"cas", ",", " ", "rus"}], "}"}], "]"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9451207953818808`*^9, 3.945120853804368*^9}, {
   3.94512089321872*^9, 3.94512089328799*^9}, {3.945121004211645*^9, 
   3.945121081718935*^9}, {3.945121166239255*^9, 3.945121187845364*^9}, {
   3.945121291290398*^9, 3.945121325611682*^9}, {3.945121387981635*^9, 
   3.945121388431172*^9}, {3.9451214244278717`*^9, 3.9451214747866497`*^9}, {
   3.945122334287568*^9, 3.945122404193021*^9}, {3.9451225382342*^9, 
   3.945122621580563*^9}, {3.9451227388348293`*^9, 3.945122744081846*^9}, {
   3.945123119077734*^9, 3.945123120904056*^9}, {3.945124458028131*^9, 
   3.945124464225045*^9}, 3.945124520296139*^9, {3.945127630179598*^9, 
   3.945127635425282*^9}, 3.945128564962919*^9},
 CellLabel->"In[73]:=",ExpressionUUID->"5658bfaa-3608-4231-9ca2-7a7502e6aa61"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Therapy", "Section",
 CellChangeTimes->{{3.943554524259576*^9, 3.943554526486482*^9}, {
  3.945107085664616*^9, 3.945107086562048*^9}, {3.945124763762751*^9, 
  3.9451247644956923`*^9}},ExpressionUUID->"bc7b5f81-b8b3-411d-99af-\
77f90d1a1f1c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AdaptTherapy", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"initpat_", ",", " ", "initru_"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"ca_", ",", " ", "currdiff_", ",", " ", "mca_", ",", " ", "i_"}],
      "}"}]}], "]"}], ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"pca", ",", " ", "nca", ",", " ", "nmca", ",", " ", "newdiff"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"nmca", " ", "=", " ", 
      RowBox[{
       RowBox[{"Reap", "[", 
        RowBox[{"pca", " ", "=", 
         RowBox[{"PerturbCA", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ca", ",", " ", "initru"}], "}"}], ",", " ", 
           RowBox[{"Floor", "[", 
            RowBox[{"11", "+", "i"}], "]"}]}], "]"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"2", ",", " ", "1", ",", " ", "1", ",", " ", "1"}], "]"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newdiff", " ", "=", " ", 
      RowBox[{"CountDifferences", "[", 
       RowBox[{"initpat", ",", "pca"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"nca", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"newdiff", "<=", " ", "currdiff"}], ",", " ", "pca", ",", 
        "ca"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"nca", ",", " ", 
       RowBox[{"Min", "[", 
        RowBox[{"newdiff", ",", " ", "currdiff"}], "]"}], ",", " ", "nmca", ",",
        " ", 
       RowBox[{"i", "+", 
        RowBox[{"(", 
         RowBox[{"1", "/", "5"}], ")"}]}]}], "}"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943395880405551*^9, 3.943396006639639*^9}, {
   3.943396218619499*^9, 3.943396229368534*^9}, {3.94339631463708*^9, 
   3.943396317100731*^9}, {3.94339639749044*^9, 3.94339641031278*^9}, {
   3.943397186398964*^9, 3.943397207418297*^9}, {3.94339727297303*^9, 
   3.943397282031959*^9}, {3.943397349388679*^9, 3.943397388988446*^9}, {
   3.943397465757667*^9, 3.943397466172511*^9}, {3.943397618764945*^9, 
   3.943397655011775*^9}, {3.943397696483054*^9, 3.943397811985132*^9}, {
   3.9433979190037403`*^9, 3.943397929599284*^9}, {3.943397966384178*^9, 
   3.943397966711248*^9}, {3.943398097168415*^9, 3.943398132944777*^9}, {
   3.943398163085023*^9, 3.943398170426689*^9}, 3.943398258527637*^9, {
   3.94339834684286*^9, 3.943398361580974*^9}, {3.943398416061253*^9, 
   3.943398477545807*^9}, {3.943400030738473*^9, 3.943400050938936*^9}, 
   3.943400340942998*^9, {3.9434004869038477`*^9, 3.9434004999217777`*^9}, {
   3.943400535477778*^9, 3.9434005355668507`*^9}, {3.943400680781386*^9, 
   3.943400728214313*^9}, 3.94340081913684*^9, {3.943400867462179*^9, 
   3.943400880148367*^9}, {3.943400937796553*^9, 3.943400972124466*^9}, 
   3.943401039749408*^9, 3.943401085015738*^9, 3.943401142060587*^9, {
   3.943553202708556*^9, 3.943553205486194*^9}, 3.943553741459091*^9, {
   3.943553887357324*^9, 3.943553890174745*^9}, {3.943553936062168*^9, 
   3.9435539696667423`*^9}, {3.943554018724535*^9, 3.943554021334249*^9}, {
   3.943554085668019*^9, 3.943554145977961*^9}, {3.943554221562248*^9, 
   3.943554354391051*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"5abfbed9-f83e-4006-a93c-e32bc3f9495b"],

Cell[BoxData[
 RowBox[{"ClearAll", "@", "HealCA"}]], "Input",
 CellChangeTimes->{{3.946408118809504*^9, 3.946408123459606*^9}},
 CellLabel->
  "In[322]:=",ExpressionUUID->"06e02745-5149-4a04-a119-5aac7162d61c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"HealCA", "[", 
   RowBox[{"ru_", ",", 
    RowBox[{"init_", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", " ", "0"}], "}"}]}], ",", 
    RowBox[{"txspec_", ":", 
     RowBox[{"{", 
      RowBox[{"200", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "200"}], ",", " ", "200"}], "}"}]}], "}"}]}], ",", "  ",
     "pert_Association", ",", " ", 
    RowBox[{"n_", ":", "1"}], ",", " ", 
    RowBox[{"healfunc_", ":", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"#", "!=", 
        RowBox[{"-", "Infinity"}]}], "&"}], ")"}]}], ",", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Steps\>\"", "->", "200"}], ",", " ", 
       RowBox[{"\"\<Order\>\"", "->", "\"\<First\>\""}]}], "}"}], "]"}]}], 
   "]"}], ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "ca", ",", " ", "perts", ",", " ", "psorted", ",", " ", "found", ",", 
      " ", "aps", ",", " ", "i", ",", " ", "max"}], "}"}], ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ca", " ", "=", " ", 
      RowBox[{"PerturbedCellularAutomaton", "[", 
       RowBox[{
       "ru", ",", " ", "init", ",", " ", "txspec", ",", " ", "pert", ",", " ", 
        RowBox[{"\"\<ReturnPerturbations\>\"", "->", "False"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"perts", " ", "=", " ", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"aps", " ", "=", " ", 
         RowBox[{"allperts", "[", 
          RowBox[{"ca", ",", " ", 
           RowBox[{
            RowBox[{"interpretrule", "[", "ru", "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Keys", "[", "#", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], ">", " ", 
          RowBox[{
           RowBox[{"Keys", "[", "pert", "]"}], "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", " ", "1"}], "]"}], "]"}]}], "&"}]}], "]"}]}], ";",
      " ", "\[IndentingNewLine]", 
     RowBox[{"psorted", " ", "=", " ", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<Order\>\"", "]"}], " ", "==", 
          " ", "\"\<First\>\""}], ",", " ", "Identity", ",", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<Order\>\"", "]"}], " ", "==", 
            " ", "\"\<Last\>\""}], ",", " ", "Reverse", ",", " ", 
           "RandomSample"}], "]"}]}], "]"}], "[", "perts", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"found", " ", "=", " ", 
      RowBox[{"{", "}"}]}], ";", " ", 
     RowBox[{"i", " ", "=", " ", "1"}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"max", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", " ", "===", " ", "All"}], ",", " ", 
        RowBox[{"Length", "[", "perts", "]"}], ",", " ", "n"}], "]"}]}], ";", 
     
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "found", "]"}], " ", "<", " ", "max"}], " ", "&&",
         " ", 
        RowBox[{"i", " ", "<", " ", 
         RowBox[{"Length", "[", "perts", "]"}]}]}], ",", " ", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"healfunc", "[", 
           RowBox[{"TestCALifeTime", "[", 
            RowBox[{"pca", " ", "=", " ", 
             RowBox[{"PerturbedCellularAutomaton", "[", 
              RowBox[{"ru", ",", "init", ",", " ", "txspec", ",", " ", 
               RowBox[{"Join", "[", 
                RowBox[{"pert", ",", " ", 
                 RowBox[{"psorted", "[", 
                  RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ",", " ", 
               RowBox[{"\"\<ReturnPerturbations\>\"", "->", "False"}]}], 
              "]"}]}], "]"}], "]"}], ",", " ", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"found", ",", " ", 
            RowBox[{"psorted", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], "]"}], ";", " ", 
        RowBox[{"i", " ", "+=", "  ", "1"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", "found"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9451191847745*^9, 3.945119444372617*^9}, {
   3.94511955142013*^9, 3.945119628740043*^9}, {3.945119668343119*^9, 
   3.945119675612154*^9}, {3.945119745244145*^9, 3.945119824144596*^9}, {
   3.945120204639851*^9, 3.945120232816122*^9}, {3.945120304032649*^9, 
   3.945120304892949*^9}, {3.9451273212157993`*^9, 3.945127324228445*^9}, {
   3.945127430702441*^9, 3.945127432189741*^9}, 3.945128101473031*^9, {
   3.945547096329152*^9, 3.945547106534934*^9}, {3.945608613579886*^9, 
   3.945608614005372*^9}, {3.945608925701435*^9, 3.945608928912286*^9}, {
   3.9456528777251987`*^9, 3.945652918678259*^9}, {3.945653113499507*^9, 
   3.94565312710362*^9}, {3.945702116617474*^9, 3.945702195352232*^9}, {
   3.945702227984547*^9, 3.945702584357367*^9}, {3.9457026259223146`*^9, 
   3.945702689557318*^9}, {3.945702720907929*^9, 3.94570273992575*^9}, {
   3.945702783142737*^9, 3.94570292989657*^9}, 3.945703030237057*^9, {
   3.94570306480057*^9, 3.945703065062009*^9}, {3.945703265303306*^9, 
   3.945703283284389*^9}, {3.945703377700892*^9, 3.945703430041501*^9}, {
   3.945703515140817*^9, 3.945703582569285*^9}, {3.945703636871813*^9, 
   3.945703645768406*^9}, {3.945703774493022*^9, 3.9457038033086357`*^9}, {
   3.9457038917818823`*^9, 3.945703900565548*^9}, {3.945703974293365*^9, 
   3.945703983300021*^9}, {3.9458205909299088`*^9, 3.945820591489964*^9}, {
   3.945822342686748*^9, 3.9458223578697987`*^9}, {3.946407248109583*^9, 
   3.946407267555167*^9}, {3.946407384978135*^9, 3.946407390933806*^9}, {
   3.946407425861401*^9, 3.946407450456554*^9}, 3.946407532182637*^9, {
   3.946407566671421*^9, 3.946407648516808*^9}, {3.946408135905139*^9, 
   3.946408136419673*^9}, {3.946408234553084*^9, 3.946408236605494*^9}, {
   3.946408421320196*^9, 3.946408428968034*^9}, {3.9464085219314404`*^9, 
   3.946408528071485*^9}, {3.946408707742983*^9, 3.946408709437258*^9}, {
   3.946409434455683*^9, 3.946409438237912*^9}, {3.946645725331329*^9, 
   3.946645754388591*^9}, {3.946645793846539*^9, 3.946645915013744*^9}, {
   3.946646395362421*^9, 3.946646425731506*^9}, {3.9466840659147387`*^9, 
   3.946684072902844*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"55fa00ea-a9f3-404e-afc8-aa0fa7289c2c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"TherapySensitivityPlot", "[", 
   RowBox[{
   "ru_", ",", " ", "init_", ",", " ", "txspec_", ",", " ", "pertspec_", ",", 
    " ", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<MaxLength\>\"", "->", "All"}], "}"}], ",", " ", 
       "ArrayPlot"}], "}"}], "]"}]}], "]"}], ":=", " ", "\n", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "ca", ",", " ", "pca", ",", " ", "rowidx", ",", " ", "pertsenserus", ",",
       " ", "replaced"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ca", " ", "=", " ", 
      RowBox[{"PerturbedCellularAutomaton", "[", 
       RowBox[{"ru", ",", " ", "init", ",", " ", "txspec", ",", " ", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pca", " ", "=", " ", 
      RowBox[{"First", "[", 
       RowBox[{"PerturbedCellularAutomaton", "[", 
        RowBox[{
        "ru", ",", " ", "init", ",", " ", "txspec", ",", " ", "pertspec"}], 
        "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"rowidx", " ", "=", " ", 
      RowBox[{
       RowBox[{"Normal", "[", "pertspec", "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"1", ",", " ", "1", ",", " ", "1"}], "]"}], "]"}]}], " ", ";",
      "\[IndentingNewLine]", 
     RowBox[{"pertsenserus", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"#", " ", "->", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"#", " ", "==", " ", "0"}], ",", " ", 
              RowBox[{"-", "1"}], ",", " ", "#"}], "]"}], "&"}], "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"TestCALifeTime", "[", 
               RowBox[{"pcap", " ", "=", " ", 
                RowBox[{"PerturbedCellularAutomaton", "[", 
                 RowBox[{
                 "ru", ",", " ", "init", ",", " ", "txspec", ",", " ", "\n", 
                  RowBox[{"Append", "[", 
                   RowBox[{
                    RowBox[{"Normal", "[", "pertspec", "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"#", " ", "-", " ", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", " ", "0"}], "}"}]}], ")"}], "->", 
                    RowBox[{"{", 
                    RowBox[{"\"\<AddValue\>\"", ",", " ", "1"}], "}"}]}]}], 
                   "]"}], ",", " ", 
                  RowBox[{"\"\<ReturnPerturbations\>\"", "->", "False"}]}], 
                 "]"}]}], "]"}], " ", "-", " ", "rowidx"}], ")"}], " ", "/", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"OptionValue", "[", "\"\<MaxLength\>\"", "]"}], " ", "-",
               " ", "rowidx"}], ")"}]}], "]"}], ")"}]}], "&"}], "/@", "  ", 
       RowBox[{"Catenate", "[", 
        RowBox[{
         RowBox[{"bodyidxs", "[", "pca", "]"}], "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"rowidx", " ", "+", " ", "1"}], ";;"}], "]"}], "]"}], 
        "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"replaced", " ", "=", " ", 
      RowBox[{"ReplacePart", "[", 
       RowBox[{"pca", ",", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"Thread", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#1", " ", "+", " ", "1"}], ",", " ", "#2"}], "}"}], 
               "&"}], "@@@", 
              RowBox[{"Keys", "[", "pertspec", "]"}]}], ")"}], "->", "Red"}], 
           "]"}], ",", 
          RowBox[{"Thread", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Catenate", "[", 
              RowBox[{
               RowBox[{"bodyidxs", "[", "pca", "]"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", 
                 RowBox[{"UpTo", "[", 
                  RowBox[{"rowidx", "+", "1"}], "]"}]}], "]"}], "]"}], "]"}], 
             ")"}], "->", "LightGray"}], "]"}], ",", "pertsenserus"}], 
         "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"PlotCA", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"replaced", "[", 
          RowBox[{"[", 
           RowBox[{";;", 
            RowBox[{"OptionValue", "[", "\"\<MaxLength\>\"", "]"}]}], "]"}], 
          "]"}], ",", " ", "pertspec"}], "}"}], ",", " ", 
       RowBox[{"ColorFunctionScaling", "->", "False"}], ",", " ", 
       RowBox[{"ColorFunction", "->", 
        RowBox[{"(", "\n", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", " ", ">", " ", "1"}], " ", "||", " ", 
             RowBox[{"#", " ", "==", " ", 
              RowBox[{"-", "Infinity"}]}]}], ",", 
            RowBox[{"Darker", "[", "Red", "]"}], ",", 
            RowBox[{"Blend", "[", 
             RowBox[{
              RowBox[{"Reverse", "@", 
               RowBox[{"{", 
                RowBox[{"Orange", ",", " ", 
                 RowBox[{"Lighter", "[", 
                  RowBox[{"Orange", ",", " ", ".5"}], "]"}], ",", " ", 
                 RowBox[{"Lighter", "[", 
                  RowBox[{"Orange", ",", " ", ".7"}], "]"}], ",", "  ", 
                 RowBox[{"Lighter", "[", 
                  RowBox[{"Yellow", ",", " ", ".7"}], "]"}]}], 
                RowBox[{"(*", 
                 RowBox[{",", 
                  TemplateBox[<|"color" -> RGBColor[0.73, 0.8, 0]|>,
                   "RGBColorSwatchTemplate"], ",", " ", 
                  TemplateBox[<|"color" -> RGBColor[0.73, 0.8, 0]|>,
                   "RGBColorSwatchTemplate"]}], "*)"}], "}"}]}], ",", " ", 
              "#"}], "]"}]}], "]"}], "&"}], ")"}]}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"Mesh", "->", 
        RowBox[{"OptionValue", "[", "Mesh", "]"}]}], ",", " ", 
       RowBox[{"ImageSize", "->", 
        RowBox[{"OptionValue", "[", "ImageSize", "]"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.947012561381022*^9, 3.9470125731656713`*^9}, 
   3.947015226421233*^9},
 CellLabel->"In[76]:=",ExpressionUUID->"74eb1a10-64bd-4c9a-9e2f-fa0a6b524a4b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Micro ", "Section",
 CellChangeTimes->{{3.943563483255291*^9, 
  3.943563542404564*^9}},ExpressionUUID->"d6852212-b3fa-464d-9fd5-\
2873ef55d3c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleTuples", "[", 
   RowBox[{"k_", ",", "r_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"RuleTuples", "[", 
    RowBox[{"k", ",", "r"}], "]"}], "=", 
   RowBox[{"Tuples", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reverse", "[", 
      RowBox[{"Range", "[", 
       RowBox[{"0", ",", 
        RowBox[{"k", "-", "1"}]}], "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"2", "r"}], "+", "1"}]}], "]"}]}]}]], "Code",
 CellLabel->"In[77]:=",ExpressionUUID->"7f2be1c5-0353-4225-917f-f2d50cea3add"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleMask", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ru_", ",", "k_", ",", "r_"}], "}"}], ",", "lt_"}], "]"}], ":=", 
  
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"data", ",", "mask", ",", "canonical"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"data", "=", 
      RowBox[{"Union", "[", 
       RowBox[{"Catenate", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"#", ",", 
             RowBox[{
              RowBox[{"2", "r"}], "+", "1"}], ",", "1"}], "]"}], "&"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"CellularAutomaton", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"ru", ",", "k", ",", "r"}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"CenterArray", "[", 
             RowBox[{"1", ",", 
              RowBox[{
               RowBox[{"2", " ", "r", "*", 
                RowBox[{"(", 
                 RowBox[{"lt", "+", "4"}], ")"}]}], "+", "1"}]}], "]"}], ",", 
            
            RowBox[{"lt", "+", "2"}]}], "]"}]}], "]"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mask", "=", 
      RowBox[{"Lookup", "[", 
       RowBox[{
        RowBox[{"Association", "[", 
         RowBox[{"Thread", "[", 
          RowBox[{"data", "->", "1"}], "]"}], "]"}], ",", 
        RowBox[{"RuleTuples", "[", 
         RowBox[{"k", ",", "r"}], "]"}], ",", "0"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{
  3.943495176443308*^9, {3.943495345241512*^9, 3.943495349595083*^9}, {
   3.944307190155628*^9, 3.9443071903703814`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"1167ac24-28bb-42eb-8554-f1fe6819b441"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getperts", "[", 
   RowBox[{"tup_", ",", " ", "k_"}], "]"}], ":=", " ", 
  RowBox[{"Tuples", "[", 
   RowBox[{"Replace", "[", 
    RowBox[{
     RowBox[{"ReplacePart", "[", 
      RowBox[{"tup", ",", " ", "\n", 
       RowBox[{
        RowBox[{"Ceiling", "[", 
         RowBox[{
          RowBox[{"Length", "[", "tup", "]"}], " ", "/", " ", "2"}], "]"}], "->", 
        RowBox[{"Complement", "[", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{"0", ",", " ", 
            RowBox[{"k", " ", "-", " ", "1"}]}], "]"}], ",", " ", 
          RowBox[{"tup", "[", 
           RowBox[{"[", 
            RowBox[{"{", 
             RowBox[{"Ceiling", "[", 
              RowBox[{
               RowBox[{"Length", "[", "tup", "]"}], " ", "/", " ", "2"}], 
              "]"}], "}"}], "]"}], "]"}]}], "]"}]}]}], "]"}], ",", "\n", 
     RowBox[{"i_Integer", ":>", " ", 
      RowBox[{"{", "i", "}"}]}], ",", " ", "1"}], "]"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943481041012143*^9, 3.94348106878887*^9}, {
   3.9434811994872713`*^9, 3.943481228521406*^9}, {3.9434858604672*^9, 
   3.94348586808162*^9}, {3.943485911648578*^9, 3.943485916385562*^9}, {
   3.94348595601386*^9, 3.943485956927729*^9}, 3.943486046578634*^9, {
   3.9434861197226343`*^9, 3.943486123627069*^9}, {3.943533598323098*^9, 
   3.943533599047058*^9}, {3.94442167294912*^9, 3.944421688556637*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"bee9e125-9c08-4ab3-a081-a2ef8ee2c10c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getpertrus", "[", 
   RowBox[{"i_", ",", " ", "perts_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", " ", "#"}], "}"}], "&"}], "/@", " ", 
   "perts"}]}]], "Code",
 CellChangeTimes->{{3.943481258535507*^9, 3.943481290450325*^9}, {
  3.944008891576692*^9, 3.944008897328699*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"09adc84a-a279-4018-bdd1-53ae96dc4b48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getsubs", "[", 
   RowBox[{"{", 
    RowBox[{"n_", ",", " ", "k_", ",", " ", "r_"}], "}"}], "]"}], ":=", " ", 
  RowBox[{"MapThread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#1", "->", "#2"}], "&"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Reverse", "[", 
       RowBox[{"Tuples", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", " ", 
           RowBox[{"k", " ", "-", " ", "1"}]}], "]"}], ",", " ", 
         RowBox[{"1", " ", "+", " ", 
          RowBox[{"2", "r"}]}]}], "]"}], "]"}], ",", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{"n", ",", " ", "k", ",", " ", 
        RowBox[{"k", "^", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", "r"}], "+", "1"}], ")"}]}]}], "]"}]}], "}"}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.943483958204916*^9, 3.943484006288759*^9}, {
  3.943484099831672*^9, 3.94348418620397*^9}, {3.943484228964634*^9, 
  3.943484261754797*^9}, {3.943484359580515*^9, 3.9434843610687838`*^9}, {
  3.943484394980937*^9, 3.943484398643656*^9}, {3.943564397404496*^9, 
  3.943564405331441*^9}, {3.9442598259949913`*^9, 3.944259830483087*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"61c09f1a-6996-44c1-abac-9ee339ea646e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getpertedges", "[", 
   RowBox[{"k_", ",", " ", "r_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"getpertrus", "[", 
     RowBox[{"#", ",", " ", 
      RowBox[{"getperts", "[", 
       RowBox[{"#", ",", " ", "k"}], "]"}]}], "]"}], "&"}], "/@", 
   RowBox[{"Tuples", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", " ", 
       RowBox[{"k", " ", "-", " ", "1"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"4", "r"}], "+", " ", "1"}]}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.943484525252606*^9, 3.943484561684527*^9}, {
  3.94348465663787*^9, 3.94348467675038*^9}, {3.94348618784658*^9, 
  3.943486190643013*^9}, {3.943533638615285*^9, 3.943533642912948*^9}, {
  3.9435337165538893`*^9, 3.943533717681363*^9}, {3.94400893256437*^9, 
  3.94400895215824*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"0fddcb93-8a52-4500-9fa7-9dc78c741d04"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getruparts", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"arr1_", ",", " ", "arr2_"}], "}"}], ",", " ", 
    RowBox[{"r_", ":", "1"}]}], "]"}], ":=", " ", 
  RowBox[{"Transpose", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Partition", "[", 
      RowBox[{"#", ",", " ", 
       RowBox[{
        RowBox[{"2", "r"}], "+", "1"}], ",", " ", "1"}], "]"}], "&"}], "/@", 
    " ", 
    RowBox[{"{", 
     RowBox[{"arr1", ",", " ", "arr2"}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943486507302359*^9, 3.943486622832364*^9}, {
  3.9434883556367273`*^9, 3.943488361513817*^9}, {3.9440091589862843`*^9, 
  3.944009165314611*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"2ec127b0-b6c5-4950-9519-4c65d04e32ab"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pertdiffs", "[", 
   RowBox[{"{", 
    RowBox[{"n_", ",", " ", "k_", ",", " ", "r_"}], "}"}], "]"}], ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ruparts", ",", " ", "stepped"}], "}"}], ",", 
    "\[IndentingNewLine]", " ", 
    RowBox[{
     RowBox[{"ruparts", " ", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getruparts", "[", 
          RowBox[{"#", ",", " ", "r"}], "]"}], "&"}], ",", " ", 
        RowBox[{"getpertedges", "[", 
         RowBox[{"k", ",", " ", "r"}], "]"}], ",", " ", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"stepped", " ", "=", " ", 
      RowBox[{"Replace", "[", 
       RowBox[{"ruparts", ",", " ", 
        RowBox[{"l_List", ":>", " ", 
         RowBox[{"Replace", "[", 
          RowBox[{"l", ",", " ", 
           RowBox[{"getsubs", "[", 
            RowBox[{"{", 
             RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], "]"}], ",", 
           " ", 
           RowBox[{"{", "4", "}"}]}], "]"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], " ", "-", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", " ", 
       "stepped", ",", " ", 
       RowBox[{"{", "3", "}"}]}], "]"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943488276493325*^9, 3.94348829421737*^9}, {
  3.943488325075017*^9, 3.943488329551101*^9}, {3.943488368693169*^9, 
  3.943488506657982*^9}, {3.943488573217678*^9, 3.943488578991692*^9}, {
  3.943488657430828*^9, 3.943488674631031*^9}, {3.943488905555903*^9, 
  3.943488969705639*^9}, {3.9435336648038673`*^9, 3.943533666445611*^9}, {
  3.943534525315949*^9, 3.943534529032213*^9}, {3.944005946498619*^9, 
  3.944005948184443*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"89b85e4d-4802-4b40-b6e5-d9d5f1138b38"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getpertpairs", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_", ",", " ", "k_", ",", " ", "r_"}], "}"}], ",", " ", 
    "active_"}], "]"}], ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"getpertrus", "[", 
      RowBox[{"#", ",", " ", 
       RowBox[{"getperts", "[", 
        RowBox[{"#", ",", " ", "k"}], "]"}]}], "]"}], "&"}], "/@", "active"}],
    ")"}], " "}]], "Code",
 CellChangeTimes->{{3.944004893875792*^9, 3.944004897345372*^9}, {
   3.944005058399239*^9, 3.9440050617568283`*^9}, {3.944005092743585*^9, 
   3.944005102983451*^9}, {3.944005327678811*^9, 3.9440053321178637`*^9}, {
   3.944005407103117*^9, 3.944005423682027*^9}, {3.944006005850071*^9, 
   3.944006006699265*^9}, {3.944007338237412*^9, 3.944007339278685*^9}, {
   3.944007509512716*^9, 3.94400754891026*^9}, 3.944008435691231*^9, 
   3.944008691246401*^9, 3.944009069951805*^9, {3.944048269647918*^9, 
   3.944048272157452*^9}, {3.944048316528047*^9, 3.944048320330218*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"41e0f7db-104a-4846-bdc6-82e8613020dc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pertdiffs", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_", ",", " ", "k_", ",", " ", "r_"}], "}"}], ",", " ", 
    "pertpairs_"}], "]"}], ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ruparts", ",", " ", "stepped"}], "}"}], ",", 
    "\[IndentingNewLine]", " ", 
    RowBox[{
     RowBox[{"ruparts", " ", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getruparts", "[", 
          RowBox[{"#", ",", " ", "r"}], "]"}], "&"}], ",", " ", "pertpairs", ",",
         " ", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"stepped", " ", "=", " ", 
      RowBox[{"Replace", "[", 
       RowBox[{"ruparts", ",", " ", 
        RowBox[{"l_List", ":>", " ", 
         RowBox[{"Replace", "[", 
          RowBox[{"l", ",", " ", 
           RowBox[{"getsubs", "[", 
            RowBox[{"{", 
             RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], "]"}], ",", 
           " ", 
           RowBox[{"{", "4", "}"}]}], "]"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Abs", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], " ", "-", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "&"}], ",", " ", 
       "stepped", ",", " ", 
       RowBox[{"{", "3", "}"}]}], "]"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9440059825918207`*^9, 3.944006012901524*^9}, 
   3.944009134480545*^9, {3.9440482631478033`*^9, 3.944048295191884*^9}, {
   3.944307174341209*^9, 3.944307177739485*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"70ee3023-4f28-426d-bd63-82fecb8f1e5c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"totalpertdiffs", "[", "ru_", "]"}], ":=", " ", 
  RowBox[{"Total", "[", 
   RowBox[{
    RowBox[{"pertdiffs", "[", "ru", "]"}], ",", " ", "3"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943488999175635*^9, 3.943489031675508*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"98769222-0260-425b-9432-156479b78447"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getruleloc", "[", 
   RowBox[{"bits_", ",", " ", "k_", ",", " ", "r_"}], "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"FirstPosition", "[", 
    RowBox[{
     RowBox[{"RuleTuples", "[", 
      RowBox[{"k", ",", " ", "r"}], "]"}], ",", " ", "bits"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943536225135035*^9, 3.943536268422502*^9}, {
  3.943536312907648*^9, 3.943536341524619*^9}, {3.943536877478697*^9, 
  3.943536882177637*^9}, {3.943630428601265*^9, 3.943630429778505*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"47522f53-f4f0-4f5a-a80d-879102e4a018"],

Cell[BoxData[
 RowBox[{
  RowBox[{"plotrule", "[", 
   RowBox[{"rule_", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Trim\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"None", ",", " ", "None"}], "}"}]}], ",", " ", 
        RowBox[{"ColorRules", "->", "colorrules"}], ",", 
        RowBox[{"Mesh", "->", "True"}], ",", " ", 
        RowBox[{"MeshStyle", "->", "Gray"}], ",", " ", "ArrayPlot"}], "}"}], 
      "]"}]}]}], "]"}], ":=", " ", "\n", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"digits", ",", " ", "n", ",", " ", "k", ",", " ", "r"}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], " ", "=", 
      RowBox[{"interpretrule", "[", "rule", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"digits", " ", "=", " ", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{"n", ",", " ", "k", ",", " ", 
        RowBox[{"k", "^", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", "r"}], "+", "1"}], ")"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ArrayPlot", "[", 
      RowBox[{
       RowBox[{"{", "digits", "}"}], ",", " ", 
       RowBox[{"ColorRules", "->", 
        RowBox[{"OptionValue", "[", "ColorRules", "]"}]}], ",", "\n", "   ", 
       RowBox[{"Mesh", " ", "->", " ", 
        RowBox[{"OptionValue", "[", "Mesh", "]"}]}], ",", " ", 
       RowBox[{"MeshStyle", " ", "->", " ", 
        RowBox[{"OptionValue", "[", "MeshStyle", "]"}]}], ",", " ", 
       RowBox[{"ImageSize", " ", "->", " ", 
        RowBox[{"OptionValue", "[", "ImageSize", "]"}]}]}], "]"}]}]}], "\n", 
   "]"}]}]], "Code",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQ7f6VL3Jz4lvHGYukE0H05Ll3U0G0z3S+dBC9QEI2
G0T3bdpYCqJ3P6quAtEsC83rQPSpgucPQbTQofxHIPpQjtNPEL1czA1M89bf
+AuilVYqM28B0q8clr8C0Z80GF6D6Gsth9+DaJeNmZ9B9L4LwT9AtNcHn98g
+sbXJP6tQNpxp4UAiL5ot04ORAvLMSiC6LL8BnMQ3VJXawGiZeJL5LYB6StW
p8D0FgduVbPUt47elhEaINpeq0EfRG+4NAtMNxSwWYBoiY3GliB60YNPU0D0
++Sq6WB5E8FXFkD6yiVbMP2IbVlvHZDWm3UZTAMAI3KkOA==
  "],
 CellLabel->"In[89]:=",ExpressionUUID->"11e9a943-ffa8-4d87-8acf-7ac334323613"],

Cell[BoxData[
 RowBox[{
  RowBox[{"plotmaskedrule", "[", 
   RowBox[{"rule_", ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Overlap\>\"", "->", "False"}], ",", 
        RowBox[{"\"\<Trim\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"None", ",", " ", "None"}], "}"}]}], ",", " ", 
        RowBox[{"ColorRules", "->", "withmask"}], ",", 
        RowBox[{"Mesh", "->", "True"}], ",", " ", 
        RowBox[{"MeshStyle", "->", "Gray"}], ",", " ", "ArrayPlot"}], "}"}], 
      "]"}]}]}], "]"}], ":=", " ", "\n", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "n", ",", " ", "k", ",", " ", "r", ",", " ", "mult", ",", " ", "mask", ",",
       " ", "masked", ",", "digits"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], " ", "=", 
      RowBox[{"interpretrule", "[", "rule", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"digits", " ", "=", " ", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{"n", ",", " ", "k", ",", " ", 
        RowBox[{"k", "^", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"2", "r"}], "+", "1"}], ")"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mult", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Overlap\>\"", "]"}], ",", " ", 
        RowBox[{"-", "1"}], ",", " ", "100"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mask", " ", "=", " ", 
      RowBox[{
       RowBox[{"RuleMask", "[", 
        RowBox[{"rule", ",", " ", 
         RowBox[{"TestLifetime", "[", 
          RowBox[{"rule", ",", " ", "200"}], "]"}]}], "]"}], "*", "mult"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"masked", " ", "=", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"mask", "/.", " ", 
         RowBox[{"0", ":>", " ", "1"}]}], ")"}], " ", "*", " ", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"digits", ",", " ", 
         RowBox[{"0", ":>", " ", "100"}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ArrayPlot", "[", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"OptionValue", "[", "\"\<Overlap\>\"", "]"}], ",", " ", 
         RowBox[{"{", "masked", "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"digits", ",", " ", "mask"}], "}"}]}], "]"}], ",", " ", 
       RowBox[{"ColorRules", "->", 
        RowBox[{"OptionValue", "[", "ColorRules", "]"}]}], ",", "\n", "   ", 
       RowBox[{"Mesh", " ", "->", " ", 
        RowBox[{"OptionValue", "[", "Mesh", "]"}]}], ",", " ", 
       RowBox[{"MeshStyle", " ", "->", " ", 
        RowBox[{"OptionValue", "[", "MeshStyle", "]"}]}], ",", " ", 
       RowBox[{"ImageSize", " ", "->", " ", 
        RowBox[{"OptionValue", "[", "ImageSize", "]"}]}]}], "]"}]}]}], "\n", 
   "]"}], " "}]], "Code",
 CellChangeTimes->{{3.943543018520018*^9, 3.943543024925357*^9}, {
   3.943543056712764*^9, 3.943543086078494*^9}, {3.943543188883298*^9, 
   3.943543212356685*^9}, {3.943543467538574*^9, 3.943543469967079*^9}, {
   3.943544014779114*^9, 3.94354408055616*^9}, {3.943544118060804*^9, 
   3.94354413717463*^9}, {3.9435442207317657`*^9, 3.943544222286158*^9}, {
   3.943544898663068*^9, 3.943544899783491*^9}, {3.943565120332209*^9, 
   3.943565120715345*^9}, {3.943565232240555*^9, 3.943565248193024*^9}, {
   3.943571648337151*^9, 3.943571649091946*^9}, {3.945378293559987*^9, 
   3.945378299576045*^9}, 3.94537841066947*^9},
 CellLabel->"In[90]:=",ExpressionUUID->"8ca4d791-001e-4ff9-92cb-df43c5aa6a93"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getgenelocs", "[", 
   RowBox[{"{", 
    RowBox[{"pca_", ",", " ", "ru_"}], "}"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "n", ",", " ", "k", ",", " ", "r", ",", " ", "pidxs", ",", " ", 
      "windows", ",", " ", "oldwindows", ",", " ", "newwindows", ",", " ", 
      "oldrulesets", ",", " ", "newrulesets", ",", " ", "genepairs", ",", " ",
       "locs"}], "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], " ", "=", " ", 
      RowBox[{"interpretrule", "[", "ru", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pidxs", " ", "=", " ", 
      RowBox[{"Position", "[", 
       RowBox[{"pca", ",", " ", 
        RowBox[{"perturb", "[", 
         RowBox[{"_", ",", "_"}], "]"}], ",", " ", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"windows", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"pca", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "-", " ", 
             RowBox[{"2", "r"}]}], ";;", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "+", " ", 
             RowBox[{"2", "r"}]}]}]}], "]"}], "]"}], "&"}], "/@", " ", 
       "pidxs"}]}], ";", "\n", 
     RowBox[{"oldwindows", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"#", " ", "/.", " ", 
         RowBox[{
          RowBox[{"perturb", "[", 
           RowBox[{"old_Integer", ",", " ", "new_Integer"}], "]"}], ":>", " ",
           "old"}]}], "&"}], "/@", "windows"}]}], ";", "\n", 
     RowBox[{"newwindows", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"#", " ", "/.", " ", 
         RowBox[{
          RowBox[{"perturb", "[", 
           RowBox[{"old_Integer", ",", " ", "new_Integer"}], "]"}], ":>", " ",
           "new"}]}], "&"}], "/@", "windows"}]}], ";", "\n", 
     RowBox[{"oldrulesets", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{
           RowBox[{"2", "r"}], "+", "1"}], ",", " ", "1"}], "]"}], "&"}], "/@",
        " ", "oldwindows"}]}], ";", "\n", 
     RowBox[{"newrulesets", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{
           RowBox[{"2", "r"}], "+", "1"}], ",", " ", "1"}], "]"}], "&"}], "/@",
        " ", "newwindows"}]}], ";", "\n", 
     RowBox[{"genepairs", " ", "=", " ", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"#1", ",", " ", "#2"}], "}"}], "&"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"oldrulesets", ",", " ", "newrulesets"}], "}"}], ",", " ", 
        "2"}], "]"}]}], ";", "\n", 
     RowBox[{"locs", " ", "=", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getruleloc", "[", 
          RowBox[{"#", ",", " ", "k", ",", " ", "r"}], "]"}], "&"}], ",", " ",
         "genepairs", ",", " ", 
        RowBox[{"{", "3", "}"}]}], "]"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Code",
 CellOpen->False,
 CellChangeTimes->{{3.943535216934062*^9, 3.943535289748008*^9}, {
   3.943535408793947*^9, 3.943535462250216*^9}, {3.9435355220241146`*^9, 
   3.943535724103119*^9}, {3.943535840870116*^9, 3.943535901265486*^9}, {
   3.943535938187645*^9, 3.943536096169996*^9}, {3.943536151455696*^9, 
   3.943536172251875*^9}, {3.943536215521476*^9, 3.943536220496792*^9}, {
   3.943536363713807*^9, 3.943536364420107*^9}, {3.943537059843223*^9, 
   3.943537106041222*^9}, {3.943544859224308*^9, 3.943544860767973*^9}, {
   3.943567713933944*^9, 3.9435677560368*^9}, 3.943630348821065*^9, 
   3.943632168039295*^9, {3.943806688629696*^9, 3.943806694542572*^9}, {
   3.943988225981876*^9, 3.943988233116807*^9}, 3.9439883884248953`*^9, {
   3.943988618058452*^9, 3.943988658585402*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"5776f0b4-ff49-4d9e-ad5d-921e615769e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"withmask", " ", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"colorrules", ",", " ", 
     RowBox[{"{", 
      RowBox[{"100", "->", 
       RowBox[{"GrayLevel", "[", "0.2", "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Code",
 CellChangeTimes->{{3.943541004391426*^9, 3.943541042345522*^9}, {
   3.9435411183138027`*^9, 3.943541131214537*^9}, {3.943544093893063*^9, 
   3.943544094051305*^9}, 3.943544191718172*^9, {3.945379045205536*^9, 
   3.945379049763938*^9}, {3.945383769485014*^9, 3.945383777880656*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"cda64b35-4644-476c-b214-c3a22c1cc08f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getmidx", "[", 
   RowBox[{"x1_", ",", " ", "x2_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x1", " ", "-", " ", "x2"}], ")"}], "/", " ", "2"}], "+", 
   "x2"}]}]], "Code",
 CellLabel->"In[93]:=",ExpressionUUID->"5b91306a-5235-432f-8739-e5cdb7a6bcab"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getcurves", "[", 
   RowBox[{"locs_", ",", " ", 
    RowBox[{"{", 
     RowBox[{"n_", ",", " ", "k_", ",", " ", "r_"}], "}"}], ",", " ", 
    RowBox[{"y_", ":", "2"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "digs", ",", " ", "cols", ",", " ", "withmid", ",", " ", "pts", ",", " ",
       "curves", ",", " ", "styled"}], "}"}], ",", "\n", 
    RowBox[{
     RowBox[{"digs", " ", "=", " ", 
      RowBox[{"IntegerDigits", "[", 
       RowBox[{"n", ",", " ", "k"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cols", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"digs", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], " ", "==", " ", 
           RowBox[{"digs", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], ",", 
          TemplateBox[<|"color" -> RGBColor[0.36, 0.8300000000000001, 0]|>,
           "RGBColorSwatchTemplate"], ",", " ", 
          TemplateBox[<|"color" -> RGBColor[1., 0.63, 0.1]|>,
           "RGBColorSwatchTemplate"]}], "]"}], "&"}], "/@", " ", 
       RowBox[{"Flatten", "[", 
        RowBox[{"locs", ",", " ", "1"}], "]"}]}]}], ";", "\n", 
     RowBox[{"withmid", " ", "=", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{"getmidx", "[", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}], "]"}], ",", " ", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", " ", 
        RowBox[{"locs", " ", "-", " ", 
         RowBox[{"1", "/", "2"}]}], ",", " ", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pts", " ", "=", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", " ", "y"}], "}"}], ",", 
           " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
             RowBox[{"Min", "[", 
              RowBox[{
               RowBox[{"Max", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Abs", "[", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], "-", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], " ", "+", " ", 
                    "1"}], ")"}], "/", "2"}], ",", " ", 
                 RowBox[{"y", "+", "3"}]}], "]"}], ",", " ", "10"}], "]"}]}], 
            "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "3", "]"}], "]"}], ",", " ", "y"}], "}"}]}], "}"}],
          " ", "&"}], ",", " ", "withmid", ",", " ", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"curves", " ", "=", " ", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"BezierCurve", ",", " ", "pts", ",", " ", 
          RowBox[{"{", "2", "}"}]}], "]"}], ",", " ", "1"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"styled", " ", "=", " ", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#1", ",", " ", "#2"}], "]"}], "&"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Arrow", "/@", " ", "curves"}], ",", " ", "cols"}], "}"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Graphics", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Arrowheads", "[", "0.025", "]"}], ",", 
        RowBox[{"GrayLevel", "[", "0.4", "]"}], ",", " ", "styled"}], "}"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.943544795102071*^9, 3.943544838624312*^9}, {
   3.943544935265343*^9, 3.943544959621169*^9}, {3.943545013723435*^9, 
   3.9435450398428383`*^9}, {3.943546537026382*^9, 3.943546537139508*^9}, {
   3.943547863810707*^9, 3.9435478761548643`*^9}, {3.943564805141321*^9, 
   3.943564811748916*^9}, {3.943565199196966*^9, 3.943565206167427*^9}, {
   3.943986434658898*^9, 3.94398645798109*^9}, {3.943986494590817*^9, 
   3.943986520034356*^9}, {3.943986552387456*^9, 3.943986596681422*^9}, {
   3.943986939334586*^9, 3.943986981320734*^9}, {3.943987025957817*^9, 
   3.943987026062334*^9}, 3.943987077967525*^9, {3.943987388459023*^9, 
   3.943987404067129*^9}, {3.94398745275674*^9, 3.943987457919425*^9}, {
   3.943987529289364*^9, 3.943987567336049*^9}, {3.943987613937373*^9, 
   3.943987619026284*^9}, {3.943987650353419*^9, 3.943987663181628*^9}, {
   3.943987696403656*^9, 3.943987819599753*^9}, 3.94398786923733*^9, {
   3.943988043867075*^9, 3.94398804864673*^9}, {3.943988082476531*^9, 
   3.943988119566781*^9}, {3.94398824687779*^9, 3.94398824817213*^9}, {
   3.9439882855613832`*^9, 3.943988305778015*^9}, {3.943988386444175*^9, 
   3.9439884643267803`*^9}, {3.943988532267455*^9, 3.943988561178733*^9}, {
   3.9439886242932577`*^9, 3.943988632768743*^9}, {3.944307213996324*^9, 
   3.94430722298189*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"f561a8ee-a541-4829-8d20-5d76e4cc776a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PerturbedRulePlot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"pca_", ",", " ", "ru_"}], "}"}], ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", "\n", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<Mask\>\"", "->", "False"}], ",", " ", "ops"}], "}"}], ",",
         "Last"}], "]"}]}], "}"}], ",", "\n", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"allops", "[", "\"\<Mask\>\"", "]"}], ",", " ", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"plotmaskedrule", "[", "ru", "]"}], ",", 
        RowBox[{"getcurves", "[", 
         RowBox[{
          RowBox[{"getgenelocs", "[", 
           RowBox[{"{", 
            RowBox[{"pca", ",", " ", "ru"}], "}"}], " ", "]"}], ",", "ru", ",",
           " ", "2"}], "]"}], ",", " ", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"Normal", "[", "allops", "]"}], ",", " ", 
           RowBox[{"Options", "[", "Graphics", "]"}]}], "]"}]}]}], "]"}], ",",
       " ", "\n", 
      RowBox[{"Show", "[", 
       RowBox[{
        RowBox[{"plotrule", "[", "ru", "]"}], ",", 
        RowBox[{"getcurves", "[", 
         RowBox[{
          RowBox[{"getgenelocs", "[", 
           RowBox[{"{", 
            RowBox[{"pca", ",", " ", "ru"}], "}"}], "]"}], ",", " ", "ru", ",",
           " ", "1"}], "]"}], ",", " ", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"Normal", "[", "allops", "]"}], ",", " ", 
           RowBox[{"Options", "[", "Graphics", "]"}]}], "]"}]}]}], "]"}]}], 
     "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.943546585830142*^9, 3.943546700959848*^9}, {
   3.943546733696267*^9, 3.943546783376753*^9}, {3.943565687127426*^9, 
   3.943565771163789*^9}, {3.943565808630843*^9, 3.943565815624713*^9}, {
   3.943566678352837*^9, 3.943566703834824*^9}, {3.943985383402685*^9, 
   3.943985451836494*^9}, {3.943985520761273*^9, 3.943985555021875*^9}, {
   3.943985585476218*^9, 3.943985599967126*^9}, {3.943985650309591*^9, 
   3.943985660710388*^9}, {3.943985700989663*^9, 3.943985776525967*^9}, {
   3.943985878536968*^9, 3.943985879537179*^9}, 3.943985972164542*^9, {
   3.943986035077784*^9, 3.943986038393976*^9}, {3.943986141046876*^9, 
   3.94398617546957*^9}, {3.943986295225086*^9, 3.943986295366105*^9}, {
   3.943988675757477*^9, 3.943988684293489*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"4ef5c2fd-2540-4840-b4bc-d647e18d6feb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"activebodytups", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ca_", ",", " ", "ru_"}], "}"}], ",", " ", 
    RowBox[{"tupfunc_", ":", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"4", "#"}], "+", "1"}], "&"}], ")"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "n", ",", " ", "k", ",", " ", "r", ",", " ", "lt", ",", " ", 
      "bodytups"}], "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], " ", "=", " ", 
      RowBox[{"interpretrule", "[", "ru", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lt", " ", "=", " ", 
      RowBox[{"TestCALifeTime", "[", "ca", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"bodytups", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"tupfunc", "[", "r", "]"}], ",", " ", "1"}], "]"}], "&"}], "/@", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#1", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{
              RowBox[{"#2", "[", 
               RowBox[{"[", "1", "]"}], "]"}], " ", "-", " ", 
              RowBox[{"2", "r"}]}], ";;", " ", 
             RowBox[{
              RowBox[{"#2", "[", 
               RowBox[{"[", "2", "]"}], "]"}], " ", "+", " ", 
              RowBox[{"2", "r"}]}]}], "]"}], "]"}], "&"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"ca", "[", 
            RowBox[{"[", 
             RowBox[{";;", "lt"}], "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"nonzeroRange", "/@", "ca"}], ")"}], "[", 
            RowBox[{"[", 
             RowBox[{";;", "lt"}], "]"}], "]"}]}], "}"}]}], "]"}]}]}]}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.9440046799197903`*^9, 3.944004692765506*^9}, {
  3.944004752693272*^9, 3.944004757086856*^9}, {3.944004857547843*^9, 
  3.94400489237796*^9}, {3.9440049467986803`*^9, 3.944005039118494*^9}, {
  3.944005171248589*^9, 3.944005188081563*^9}, {3.944010919817169*^9, 
  3.944010920742443*^9}, {3.944012827562276*^9, 3.944013017745034*^9}, {
  3.944013129031476*^9, 3.94401315476455*^9}, {3.944013392552102*^9, 
  3.944013392887691*^9}, {3.94424869201299*^9, 3.944248734874711*^9}, {
  3.944307227705228*^9, 3.944307231034797*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"5c2cfaa5-916d-44f1-9ae1-a17fffaa374f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getpertpairs", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_", ",", " ", "k_", ",", " ", "r_"}], "}"}], ",", " ", 
    "active_"}], "]"}], ":=", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"getpertrus", "[", 
      RowBox[{"#", ",", " ", 
       RowBox[{"getperts", "[", 
        RowBox[{"#", ",", " ", "k"}], "]"}]}], "]"}], "&"}], "/@", "active"}],
    ")"}], " "}]], "Code",
 CellChangeTimes->{{3.944004893875792*^9, 3.944004897345372*^9}, {
   3.944005058399239*^9, 3.9440050617568283`*^9}, {3.944005092743585*^9, 
   3.944005102983451*^9}, {3.944005327678811*^9, 3.9440053321178637`*^9}, {
   3.944005407103117*^9, 3.944005423682027*^9}, {3.944006005850071*^9, 
   3.944006006699265*^9}, {3.944007338237412*^9, 3.944007339278685*^9}, {
   3.944007509512716*^9, 3.94400754891026*^9}, 3.944008435691231*^9, 
   3.944008691246401*^9, 3.944009069951805*^9, {3.944048269647918*^9, 
   3.944048272157452*^9}, {3.944048316528047*^9, 3.944048320330218*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"8954d162-4f8e-420b-9308-3ece81ecba04"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pertdiffs", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n_", ",", " ", "k_", ",", " ", "r_"}], "}"}], ",", " ", 
    "pertpairs_"}], "]"}], ":=", " ", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ruparts", ",", " ", "stepped", ",", " ", "mask"}], "}"}], ",", 
    "\[IndentingNewLine]", " ", 
    RowBox[{
     RowBox[{"ruparts", " ", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"getruparts", "[", 
          RowBox[{"#", ",", " ", "r"}], "]"}], "&"}], ",", " ", "pertpairs", ",",
         " ", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"stepped", " ", "=", " ", 
      RowBox[{"Replace", "[", 
       RowBox[{"ruparts", ",", " ", 
        RowBox[{"l_List", ":>", " ", 
         RowBox[{"Replace", "[", 
          RowBox[{"l", ",", " ", 
           RowBox[{"getsubs", "[", 
            RowBox[{"{", 
             RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], "]"}], ",", 
           " ", 
           RowBox[{"{", "4", "}"}]}], "]"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"mask", " ", "=", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Replace", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], " ", "-", " ", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
           RowBox[{
            RowBox[{"Except", "[", "0", "]"}], "->", "1"}]}], "]"}], "&"}], ",",
         " ", "stepped", ",", " ", 
        RowBox[{"{", "3", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Total", "[", 
      RowBox[{"mask", ",", " ", 
       RowBox[{"{", "3", "}"}]}], "]"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9440059825918207`*^9, 3.944006012901524*^9}, 
   3.944009134480545*^9, {3.9440482631478033`*^9, 3.944048295191884*^9}, {
   3.944057877395526*^9, 3.944057901187666*^9}, {3.944057948755806*^9, 
   3.944058039270236*^9}, {3.944058180582039*^9, 3.944058247245678*^9}, {
   3.944058289014187*^9, 3.944058312282283*^9}, {3.9440583575057793`*^9, 
   3.944058364152249*^9}, {3.94430723420575*^9, 3.944307241522789*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"8993189a-b736-449c-a026-a7fc5825985f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"meanmicrofragility", "[", 
   RowBox[{"{", 
    RowBox[{"ca_", ",", " ", "ru_"}], "}"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", "k", ",", " ", "r", ",", "counts", ",", " ", "pd"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"counts", " ", "=", " ", 
      RowBox[{"ReverseSort", "[", 
       RowBox[{"Counts", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"activebodytups", "[", 
           RowBox[{"{", 
            RowBox[{"ca", ",", " ", "ru"}], "}"}], "]"}], ",", " ", "1"}], 
         "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pd", " ", "=", " ", 
      RowBox[{"pertdiffs", "[", 
       RowBox[{"ru", ",", " ", 
        RowBox[{"getpertpairs", "[", 
         RowBox[{"ru", ",", " ", 
          RowBox[{"Keys", "[", "counts", "]"}]}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"N", "@", 
      RowBox[{"Mean", "[", 
       RowBox[{"WeightedData", "[", 
        RowBox[{
         RowBox[{"Mean", "/@", " ", "pd"}], ",", " ", 
         RowBox[{"Values", "[", "counts", "]"}]}], "]"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.944089470000523*^9, 3.944089567444223*^9}, {
  3.944089610819311*^9, 3.944089612627388*^9}, {3.944089651309394*^9, 
  3.944089728204438*^9}, {3.94408980953834*^9, 3.944089835320683*^9}, {
  3.94409000278721*^9, 3.944090044832939*^9}, {3.94409032329638*^9, 
  3.9440903345896797`*^9}, {3.944090367357248*^9, 3.944090446261436*^9}, {
  3.944091572228297*^9, 3.94409157774517*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"76d73aa6-a494-4450-9c21-505a85a21ed7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PerturbationSensitivityGraphs", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ca_", ",", " ", "ru_"}], "}"}], ",", " ", 
    RowBox[{"size_", ":", "1"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", "\n", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"counts", " ", "=", 
       RowBox[{
        RowBox[{"Rest", "[", 
         RowBox[{"Counts", "[", 
          RowBox[{"Sort", "[", 
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"activebodytups", "[", 
              RowBox[{"{", 
               RowBox[{"ca", ",", " ", "ru"}], "}"}], "]"}], ",", " ", "1"}], 
            "]"}], "]"}], "]"}], "]"}], "*", "size"}]}], ",", " ", "\n", 
      "pairs", ",", " ", "diffs", ",", " ", "edges", ",", " ", "cols", ",", 
      " ", "styled", ",", " ", "cg", ",", " ", "cgs", ",", " ", "gps"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pairs", " ", "=", " ", 
      RowBox[{"getpertpairs", "[", 
       RowBox[{"ru", ",", 
        RowBox[{"Keys", "[", "counts", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"diffs", " ", "=", " ", 
      RowBox[{"pertdiffs", "[", 
       RowBox[{"ru", ",", "pairs"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"edges", " ", "=", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "\[DirectedEdge]", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", " ", "pairs", ",", 
        " ", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cols", " ", "=", " ", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Replace", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"0", ":>", 
              TemplateBox[<|"color" -> RGBColor[0, 0.77, 0]|>,
               "RGBColorSwatchTemplate"]}], ",", 
             RowBox[{"1", ":>", 
              TemplateBox[<|"color" -> RGBColor[0.88, 0.84, 0]|>,
               "RGBColorSwatchTemplate"]}], ",", " ", 
             RowBox[{"2", ":>", " ", "Orange"}], ",", 
             RowBox[{"3", ":>", " ", "Red"}]}], "}"}]}], "]"}], "&"}], ",", 
        " ", "diffs", ",", " ", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"styled", "  ", "=", " ", "\[IndentingNewLine]", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Style", "[", 
          RowBox[{"#1", ",", "#2"}], " ", "]"}], "&"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"edges", ",", "cols"}], "}"}], ",", " ", "2"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"cg", " ", "=", " ", 
      RowBox[{"WeaklyConnectedGraphComponents", "[", 
       RowBox[{"Flatten", "[", "styled", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cgs", " ", "=", " ", 
      RowBox[{"ReverseSortBy", "[", 
       RowBox[{"cg", ",", " ", 
        RowBox[{
         RowBox[{"Total", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"counts", "[", "#", "]"}], "&"}], "/@", 
           RowBox[{
            RowBox[{"EdgeList", "[", "#", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], "]"}], "&"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"gps", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"cw", " ", "=", 
             RowBox[{"Total", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"counts", "[", "#", "]"}], "&"}], "/@", 
               RowBox[{
                RowBox[{"EdgeList", "[", "#", "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], "]"}]}], ",",
             " ", 
            RowBox[{"vws", " ", "=", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "->", 
                RowBox[{
                 RowBox[{"counts", "[", "#", "]"}], "/", "20"}]}], "&"}], "/@", 
              RowBox[{"VertexList", "[", "#", "]"}]}]}]}], "}"}], ",", " ", 
          "\n", 
          RowBox[{"GraphPlot", "[", 
           RowBox[{"#", ",", 
            RowBox[{"ImageSize", "->", 
             RowBox[{"cw", "*", ".75"}]}], ",", 
            RowBox[{"EdgeShapeFunction", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "\"\<FilledArrow\>\"", "}"}], ",", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"Style", "[", 
                  RowBox[{
                   RowBox[{"Arrow", "[", "#1", "]"}], ",", "\n", 
                   RowBox[{"Arrowheads", "[", 
                    RowBox[{
                    RowBox[{"counts", "[", 
                    RowBox[{"#2", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "/", "200"}], 
                    "]"}], ",", " ", 
                   RowBox[{"Thickness", "[", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"counts", "[", 
                    RowBox[{"#2", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "]"}], "/", 
                    RowBox[{"(", 
                    RowBox[{"cw", "*", "5"}], ")"}]}], ")"}], "]"}]}], "]"}], 
                 "&"}], ")"}]}], "}"}]}], ",", " ", "\n", 
            RowBox[{"VertexLabels", "->", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"x_", "/;", 
                RowBox[{
                 RowBox[{"counts", "[", "x", "]"}], ">=", "8"}]}], ":>", 
               RowBox[{"Placed", "[", 
                RowBox[{
                 RowBox[{"ArrayPlot", "[", 
                  RowBox[{
                   RowBox[{"{", "x", "}"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Mesh", "->", "True"}], ",", 
                   RowBox[{"ImageSize", "->", 
                    RowBox[{"1.25", 
                    RowBox[{"counts", "[", "x", "]"}]}]}], ",", " ", 
                   RowBox[{"ColorRules", "->", "colorrules"}]}], "]"}], ",", 
                 "Center"}], "]"}]}], "}"}]}]}], "]"}]}], "]"}], "&"}], "/@", 
       " ", "cgs"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Multicolumn", "[", 
      RowBox[{"gps", ",", " ", 
       RowBox[{"{", 
        RowBox[{"Automatic", ",", " ", 
         RowBox[{"Floor", "[", 
          RowBox[{
           RowBox[{"Length", "[", "counts", "]"}], "/", "12"}], "]"}]}], 
        "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.944238420450803*^9, 3.944238467737119*^9}, {
   3.944238520618046*^9, 3.944238543749881*^9}, {3.944238579950418*^9, 
   3.9442387151492653`*^9}, 3.944238868297678*^9, {3.944238924562327*^9, 
   3.944238927340978*^9}, {3.944238963429169*^9, 3.944238964090165*^9}, {
   3.944239185557859*^9, 3.944239222900076*^9}, {3.944239355581547*^9, 
   3.944239357277615*^9}, {3.944239488113841*^9, 3.944239504221046*^9}, {
   3.944239547623726*^9, 3.944239547721741*^9}, 3.94423972060432*^9, {
   3.94430725336372*^9, 3.944307290711181*^9}, {3.944307328092708*^9, 
   3.944307347568986*^9}, {3.945383828611046*^9, 3.945383830126903*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"9227b1b7-0d7b-48e5-ac25-014980542ee9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "PerturbationSensitivityChart", "]"}], " ", "=", 
   " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<NumBars\>\"", "->", "100"}], ",", " ", 
     RowBox[{"\"\<ShowSequences\>\"", "->", "False"}], ",", " ", 
     RowBox[{"\"\<TuplesFunction\>\"", "->", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"4", "#"}], "+", "1"}], "&"}], ")"}]}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PerturbationSensitivityChart", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ca_", ",", " ", "ru_"}], "}"}], ",", " ", 
    RowBox[{"OptionsPattern", "[", "PerturbationSensitivityChart", "]"}]}], 
   "]"}], ":=", " ", "\n", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"counts", " ", "=", 
       RowBox[{"Rest", "[", 
        RowBox[{"Counts", "[", 
         RowBox[{"Sort", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"activebodytups", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"ca", ",", " ", "ru"}], "}"}], ",", " ", 
              RowBox[{"OptionValue", "[", "\"\<TuplesFunction\>\"", "]"}]}], 
             "]"}], ",", " ", "1"}], "]"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "n", ",", " ", "k", ",", " ", "r", ",", " ", "pp", ",", " ", "pd", ",", 
      "\n", "withcols", ",", " ", "labfunc"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], " ", "=", " ", 
      RowBox[{"interpretrule", "[", "ru", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pp", " ", "=", " ", 
      RowBox[{"getpertpairs", "[", 
       RowBox[{"ru", ",", 
        RowBox[{"Keys", "[", 
         RowBox[{"ReverseSort", "[", "counts", "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pd", " ", "=", " ", 
      RowBox[{"pertdiffs", "[", 
       RowBox[{"ru", ",", "pp"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"withcols", " ", "=", "  ", 
      RowBox[{
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{"#1", ",", " ", 
            RowBox[{"Blend", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                TemplateBox[<|"color" -> RGBColor[0, 0.77, 0]|>,
                 "RGBColorSwatchTemplate"], ",", 
                TemplateBox[<|"color" -> RGBColor[0.88, 0.84, 0]|>,
                 "RGBColorSwatchTemplate"], ",", " ", "Orange", ",", "Red"}], 
               "}"}], ",", 
              RowBox[{
               RowBox[{"Total", "[", "#2", "]"}], "/", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"k", " ", "-", " ", "1"}], ")"}], " ", "*", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"2", "r"}], "+", "1"}], ")"}]}], ")"}]}]}], 
             "]"}]}], "]"}], "&"}], ",", " ", "\n", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Values", "[", 
            RowBox[{"ReverseSort", "[", "counts", "]"}], "]"}], ",", " ", 
           "pd"}], "}"}]}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{";;", 
         RowBox[{"UpTo", "[", 
          RowBox[{"Replace", "[", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<NumBars\>\"", "]"}], ",", " ", 
            RowBox[{"All", ":>", " ", 
             RowBox[{"Length", "[", "pd", "]"}]}]}], "]"}], "]"}]}], "]"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"labfunc", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<ShowSequences\>\"", "]"}], ",", " ", 
        
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Placed", "[", 
           RowBox[{
            RowBox[{"PlotCA", "[", 
             RowBox[{
              RowBox[{"Transpose", "@", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Keys", "[", 
                  RowBox[{"ReverseSort", "[", "counts", "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"#2", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], "}"}]}], ",",
               " ", 
              RowBox[{"ImageSize", "->", 
               RowBox[{"{", 
                RowBox[{"20", ",", " ", "30"}], "}"}]}]}], "]"}], ",", 
            "Below"}], "]"}], "&"}], ")"}], ",", " ", "Automatic"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"BarChart", "[", 
      RowBox[{"withcols", ",", " ", 
       RowBox[{"LabelingFunction", "->", " ", "labfunc"}]}], "]"}]}]}], 
   "]"}]}]}], "Code",
 CellChangeTimes->{{3.944241249383291*^9, 3.944241260816337*^9}, {
  3.944241295763332*^9, 3.944241382921158*^9}, {3.944241459928853*^9, 
  3.944241851170583*^9}, {3.944241923484763*^9, 3.944241947731597*^9}, {
  3.944242011537417*^9, 3.944242011751195*^9}, {3.944242998362563*^9, 
  3.944243009829999*^9}, {3.944307309202841*^9, 3.944307315017668*^9}, {
  3.944307358924268*^9, 3.944307369369523*^9}, {3.9453829097961683`*^9, 
  3.9453829224291687`*^9}, {3.945382965722271*^9, 3.945382976473565*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"687166cd-9349-4a64-af9d-54599751fe14"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RuleFrequencyChart", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ca_", ",", " ", "ru_"}], "}"}], ",", " ", 
    RowBox[{"OptionsPattern", "[", "PerturbationSensitivityChart", "]"}]}], 
   "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"counts", " ", "=", 
       RowBox[{"Counts", "[", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"activebodytups", "[", 
           RowBox[{"{", 
            RowBox[{"ca", ",", " ", "ru"}], "}"}], "]"}], ",", " ", "1"}], 
         "]"}], "]"}]}], ",", " ", "n", ",", " ", "k", ",", " ", "r", ",", 
      " ", "pp", ",", " ", "pd", ",", "\n", "withcols", ",", " ", "labfunc"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"counts", " ", "=", 
      RowBox[{"Counts", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"activebodytups", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"ca", ",", " ", "ru"}], "}"}], ",", " ", 
           RowBox[{"OptionValue", "[", "\"\<TuplesFunction\>\"", "]"}]}], 
          "]"}], ",", " ", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"{", 
       RowBox[{"n", ",", " ", "k", ",", " ", "r"}], "}"}], " ", "=", " ", 
      RowBox[{"interpretrule", "[", "ru", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pp", " ", "=", " ", 
      RowBox[{"getpertpairs", "[", 
       RowBox[{"ru", ",", 
        RowBox[{"Keys", "[", 
         RowBox[{"ReverseSort", "[", "counts", "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pd", " ", "=", " ", 
      RowBox[{"pertdiffs", "[", 
       RowBox[{"ru", ",", "pp"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"labfunc", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<ShowSequences\>\"", "]"}], ",", " ", 
        "\n", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Placed", "[", 
           RowBox[{
            RowBox[{"ArrayPlot", "[", 
             RowBox[{
              RowBox[{"Transpose", "@", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Keys", "[", 
                  RowBox[{"ReverseSort", "[", "counts", "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"#2", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}], "}"}]}], ",",
               " ", 
              RowBox[{"ImageSize", "->", 
               RowBox[{"{", 
                RowBox[{"20", ",", " ", "20"}], "}"}]}], ",", " ", 
              RowBox[{"ColorRules", "->", "colorrules"}]}], "]"}], ",", 
            "Below"}], "]"}], "&"}], ")"}], ",", " ", "Automatic"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"BarChart", "[", 
      RowBox[{
       RowBox[{"Values", "[", 
        RowBox[{"ReverseSort", "[", "counts", "]"}], "]"}], ",", " ", 
       RowBox[{"LabelingFunction", "->", " ", "labfunc"}]}], "]"}]}]}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.945382743071206*^9, 3.945382882980315*^9}, {
   3.9453830339230623`*^9, 3.945383088405328*^9}, {3.945383138134822*^9, 
   3.945383145198866*^9}, {3.945383215752412*^9, 3.945383238676326*^9}, {
   3.945383289052498*^9, 3.945383290413406*^9}, {3.945383863700986*^9, 
   3.945383899194386*^9}, {3.945383933081987*^9, 3.945383935825959*^9}, 
   3.945384315649118*^9},
 CellLabel->
  "In[103]:=",ExpressionUUID->"cece8040-3c79-43f7-af08-d97ac1d642ee"]
}, Closed]],

Cell[CellGroupData[{

Cell["Adaptive Cellular Automaton", "Section",
 CellChangeTimes->{{3.945266329376746*^9, 
  3.945266342090605*^9}},ExpressionUUID->"4fc1db56-03ee-46e3-b8fa-\
bf546a73f757"],

Cell[BoxData[
 RowBox[{"ClearAll", "@", "AdaptCA"}]], "Input",
 CellChangeTimes->{{3.945288805599286*^9, 3.945288812776019*^9}},
 CellLabel->
  "In[352]:=",ExpressionUUID->"64c1bb36-84e9-41c7-962a-588dfa935683"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SymIndexMap", "[", 
   RowBox[{"k_", ",", "r_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"SymIndexMap", "[", 
    RowBox[{"k", ",", "r"}], "]"}], "=", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tups", "=", 
       RowBox[{"Tuples", "[", 
        RowBox[{
         RowBox[{"Reverse", "[", 
          RowBox[{"Range", "[", 
           RowBox[{"0", ",", 
            RowBox[{"k", "-", "1"}]}], "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"2", "r"}], "+", "1"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Sort", "[", 
      RowBox[{"Catenate", "[", 
       RowBox[{"MapIndexed", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"Position", "[", 
              RowBox[{"tups", ",", "#"}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", 
            RowBox[{"#2", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"GatherBy", "[", 
          RowBox[{"tups", ",", 
           RowBox[{
            RowBox[{"Sort", "[", 
             RowBox[{"{", 
              RowBox[{"#", ",", 
               RowBox[{"Reverse", "[", "#", "]"}]}], "}"}], "]"}], "&"}]}], 
          "]"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}], "]"}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}]}]], "Code",
 CellChangeTimes->{{3.921276552687866*^9, 3.921276580328933*^9}, {
  3.9216710929557953`*^9, 3.921671100676935*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"0a23268f-a11c-439d-a0e2-59a24b67a0a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SymUp", "[", 
   RowBox[{"k_", ",", "r_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"SymUp", "[", 
    RowBox[{"k", ",", "r"}], "\[IndentingNewLine]", "]"}], "=", 
   RowBox[{
    RowBox[{"SymIndexMap", "[", 
     RowBox[{"k", ",", "r"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.921276384975207*^9, 3.921276649760997*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"0b0e8d19-9312-4197-9836-619b59ac8dc8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SymDown", "[", 
   RowBox[{"k_", ",", "r_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"SymDown", "[", 
    RowBox[{"k", ",", "r"}], "\[IndentingNewLine]", "]"}], "=", 
   RowBox[{"Values", "[", 
    RowBox[{"KeySort", "[", 
     RowBox[{"Map", "[", 
      RowBox[{"First", ",", "\[IndentingNewLine]", 
       RowBox[{"GroupBy", "[", 
        RowBox[{
         RowBox[{"SymIndexMap", "[", 
          RowBox[{"k", ",", "r"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Last", "->", "First"}]}], "]"}]}], "]"}], "]"}], 
    "]"}]}]}]], "Code",
 CellChangeTimes->{{3.9212766561634283`*^9, 3.921276659673758*^9}, {
  3.9212767190156803`*^9, 3.921276735250161*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"26fc0ac2-e7a8-4c94-a4bd-abc4d2e33646"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomRuleMutation", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rn_", ",", "k_", ",", "r_"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"many_Integer", ":", "1"}], ",", "\[IndentingNewLine]", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Symmetric\>\"", "->", "False"}], "}"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"up", ",", "down", ",", "cases"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"up", ",", "down"}], "}"}], "=", 
      RowBox[{"If", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"TrueQ", "[", 
         RowBox[{"OptionValue", "[", "\"\<Symmetric\>\"", "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"SymUp", "[", 
           RowBox[{"k", ",", "r"}], "]"}], ",", 
          RowBox[{"SymDown", "[", 
           RowBox[{"k", ",", "r"}], "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"All", ",", "All"}], "}"}]}], "\[IndentingNewLine]", "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"cases", "=", 
      RowBox[{
       RowBox[{"IntegerDigits", "[", 
        RowBox[{"rn", ",", "k", ",", 
         RowBox[{"k", "^", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", "r"}], "+", "1"}], ")"}]}]}], "]"}], "[", 
       RowBox[{"[", "down", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"FromDigits", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "up", "]"}], "]"}], ",", "k"}], "]"}], ",", "k", ",",
          "r"}], "}"}], "&"}], "[", "\[IndentingNewLine]", 
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"#", "+", 
            RowBox[{"RandomInteger", "[", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"k", "-", "1"}]}], "}"}], "]"}]}], ",", "k"}], "]"}], 
         "&"}], ",", "\[IndentingNewLine]", "cases", ",", 
        RowBox[{"List", "/@", 
         RowBox[{"RandomSample", "[", 
          RowBox[{
           RowBox[{"1", ";;", 
            RowBox[{
             RowBox[{"Length", "[", "cases", "]"}], "-", "1"}]}], ",", 
           "many"}], "]"}]}]}], "]"}], "\[IndentingNewLine]", "]"}]}]}], " ", 
   "\[IndentingNewLine]", "]"}]}]], "Code",
 CellLabel->
  "In[107]:=",ExpressionUUID->"1c06dd49-3956-4c69-9d3d-46b071ea723a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getevofunc", "[", 
   RowBox[{"pertfunc_", ",", " ", "nperts_", ",", " ", "allops_Association"}],
    "]"}], ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Function", "[", 
   RowBox[{"evoobject", ",", " ", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"nru", " ", "=", " ", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<VariationFunction\>\"", "]"}], "[", 
          RowBox[{"evoobject", "[", "\"\<rule\>\"", "]"}], "]"}]}], ",", " ", 
        "nca", ",", "ncas", ",", "  ", "ffit", ",", " ", "nfit", ",", "nfits",
         ",", " ", "nobject"}], "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nca", " ", "=", " ", 
        RowBox[{
         RowBox[{"allops", "[", "\"\<AutomatonFunction\>\"", "]"}], "[", 
         "nru", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ffit", "  ", "=", " ", 
        RowBox[{
         RowBox[{"allops", "[", "\"\<FitnessFunction\>\"", "]"}], "[", "nca", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"allops", "[", "\"\<FitnessDeathValue\>\"", "]"}], " ", "==",
           "  ", "ffit"}], ",", " ", "evoobject", ",", "\[IndentingNewLine]", 
         
         RowBox[{
          RowBox[{"ncas", " ", "=", " ", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "nca", "}"}], ",", " ", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"pertfunc", "[", 
                RowBox[{"{", 
                 RowBox[{"nca", ",", " ", "nru"}], "}"}], "]"}], ",", " ", 
               "nperts"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"nfits", " ", "=", " ", 
           RowBox[{
            RowBox[{"allops", "[", "\"\<FitnessFunction\>\"", "]"}], "/@", 
            "ncas"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"nfit", " ", "=", " ", 
           RowBox[{
            RowBox[{"allops", "[", "\"\<CombinationFunction\>\"", "]"}], "[", 
            "nfits", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"nobject", " ", "=", " ", 
           RowBox[{"<|", 
            RowBox[{
             RowBox[{"\"\<rule\>\"", "->", " ", "nru"}], ",", " ", 
             RowBox[{"\"\<fitness\>\"", "->", "nfit"}], ",", " ", 
             RowBox[{"\"\<cas\>\"", "->", " ", "ncas"}]}], "|>"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Merge", "[", 
           RowBox[{
            RowBox[{"KeyIntersection", "[", 
             RowBox[{"{", 
              RowBox[{"evoobject", ",", " ", "nobject"}], "}"}], "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"allops", "[", "\"\<SelectionFunction\>\"", "]"}], "[", 
               RowBox[{
                RowBox[{"evoobject", "[", "\"\<fitness\>\"", "]"}], ",", " ", 
                "nfit"}], "]"}], ",", " ", "Last", ",", " ", "First"}], 
             "]"}]}], "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}]}], 
     "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945447215478972*^9, 3.945447321729787*^9}, 
   3.945447395588907*^9, {3.945447429001214*^9, 3.94544743046972*^9}, {
   3.945447478534067*^9, 3.945447487248889*^9}, {3.945448299817816*^9, 
   3.945448315181275*^9}, {3.945464029623768*^9, 3.945464075391758*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"9b036818-9af7-4239-b0e3-f9f4afcfa338"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getevofunc", "[", 
   RowBox[{"pertfunc_", ",", " ", "nperts_", ",", " ", "allops_Association"}],
    "]"}], ":=", " ", "\[IndentingNewLine]", 
  RowBox[{"Function", "[", 
   RowBox[{"evoobject", ",", " ", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"nru", " ", "=", " ", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<VariationFunction\>\"", "]"}], "[", 
          RowBox[{"evoobject", "[", "\"\<rule\>\"", "]"}], "]"}]}], ",", " ", 
        "nca", ",", "ncas", ",", "  ", "ffit", ",", " ", "nfit", ",", "nfits",
         ",", " ", "nobject"}], "}"}], ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"nca", " ", "=", " ", 
        RowBox[{
         RowBox[{"allops", "[", "\"\<AutomatonFunction\>\"", "]"}], "[", 
         "nru", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"ffit", "  ", "=", " ", 
        RowBox[{
         RowBox[{"allops", "[", "\"\<FitnessFunction\>\"", "]"}], "[", "nca", 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"allops", "[", "\"\<FitnessDeathValue\>\"", "]"}], " ", "==",
           "  ", "ffit"}], ",", " ", "evoobject", ",", "\[IndentingNewLine]", 
         
         RowBox[{
          RowBox[{"ncas", " ", "=", " ", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", "nca", "}"}], ",", " ", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"pertfunc", "[", 
                RowBox[{"{", 
                 RowBox[{"nca", ",", " ", "nru"}], "}"}], "]"}], ",", " ", 
               "nperts"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"nfits", " ", "=", " ", 
           RowBox[{
            RowBox[{"allops", "[", "\"\<FitnessFunction\>\"", "]"}], "/@", 
            "ncas"}]}], ";", " ", "\[IndentingNewLine]", 
          RowBox[{"nfit", " ", "=", " ", 
           RowBox[{
            RowBox[{"allops", "[", "\"\<CombinationFunction\>\"", "]"}], "[", 
            "nfits", "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"nobject", " ", "=", " ", 
           RowBox[{"<|", 
            RowBox[{
             RowBox[{"\"\<rule\>\"", "->", " ", "nru"}], ",", " ", 
             RowBox[{"\"\<fitness\>\"", "->", "nfit"}]}], "|>"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Merge", "[", 
           RowBox[{
            RowBox[{"KeyIntersection", "[", 
             RowBox[{"{", 
              RowBox[{"evoobject", ",", " ", "nobject"}], "}"}], "]"}], ",", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"allops", "[", "\"\<SelectionFunction\>\"", "]"}], "[", 
               RowBox[{
                RowBox[{"evoobject", "[", "\"\<fitness\>\"", "]"}], ",", " ", 
                "nfit"}], "]"}], ",", " ", "Last", ",", " ", "First"}], 
             "]"}]}], "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}]}], 
     "]"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945447215478972*^9, 3.945447321729787*^9}, 
   3.945447395588907*^9, {3.945447429001214*^9, 3.94544743046972*^9}, {
   3.945447478534067*^9, 3.945447487248889*^9}, {3.945448299817816*^9, 
   3.945448315181275*^9}, {3.945464029623768*^9, 3.945464088804923*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"a0edf564-a0b8-4bc1-8fea-113b64b18b8a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getinitobject", "[", 
   RowBox[{
   "initrule_", ",", " ", "pertfunc_", ",", "nperts_", ",", " ", 
    "allops_Association"}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "ca", ",", " ", "pcaops", ",", " ", "initcas", ",", " ", "initfits", ",",
       " ", "initobject"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ca", " ", "=", " ", 
      RowBox[{
       RowBox[{"allops", "[", "\"\<AutomatonFunction\>\"", "]"}], "[", 
       "initrule", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"initcas", " ", "=", " ", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", "ca", "}"}], ",", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"pertfunc", "[", 
           RowBox[{"{", 
            RowBox[{"ca", ",", " ", "initrule"}], "}"}], "]"}], ",", " ", 
          "nperts"}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"initfits", " ", "=", " ", 
      RowBox[{
       RowBox[{"allops", "[", "\"\<FitnessFunction\>\"", "]"}], "/@", 
       "initcas"}]}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"initobject", " ", "=", "  ", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<rule\>\"", "->", " ", "initrule"}], ",", " ", 
        RowBox[{"\"\<fitness\>\"", "->", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<CombinationFunction\>\"", "]"}], "[", 
          "initfits", "]"}]}], ",", " ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<ReturnCAs\>\"", "]"}], ",", 
          RowBox[{"\"\<cas\>\"", "->", " ", "initcas"}], ",", "Nothing"}], 
         "]"}]}], "|>"}]}]}]}], "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.945447363981943*^9, 3.945447401375894*^9}, {
  3.9454474409867077`*^9, 3.945447511479883*^9}, {3.9454475605723352`*^9, 
  3.945447562020033*^9}, {3.945447873168528*^9, 3.945447875706834*^9}, {
  3.945448031456316*^9, 3.945448043294574*^9}, {3.945460244044112*^9, 
  3.945460251180218*^9}, {3.945462683557873*^9, 3.9454626844304233`*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"52493db3-29ba-47cb-8cce-e9563a6a30b4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "AdaptCA", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<VariationFunction\>\"", "->", "RandomRuleMutation"}], ",", 
     RowBox[{"\"\<AutomatonFunction\>\"", "->", "getca"}], ",", " ", 
     RowBox[{"\"\<FitnessFunction\>\"", "->", "TestCALifeTime"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<FitnessDeathValue\>\"", "->", 
      RowBox[{"-", "Infinity"}]}], ",", 
     RowBox[{"\"\<Perturbation\>\"", "->", "None"}], ",", 
     RowBox[{"\"\<NPerturbations\>\"", "->", "1"}], ",", 
     RowBox[{"\"\<CombinationFunction\>\"", "->", "Min"}], ",", " ", 
     RowBox[{"\"\<SelectionFunction\>\"", "->", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"fit1", ",", " ", "fit2"}], "}"}], ",", " ", 
        RowBox[{"fit2", ">=", "fit1"}]}], "]"}]}], ",", " ", 
     RowBox[{"\"\<ReturnCAs\>\"", "->", "False"}], ",", " ", 
     RowBox[{"\"\<ReturnPerturbations\>\"", "->", "False"}], ",", " ", 
     RowBox[{"\"\<PerturbationFunction\>\"", "->", "None"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"AdaptCA", "[", 
   RowBox[{
    RowBox[{"initrule_List", ":", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "3", ",", " ", "1"}], "}"}]}], ",", " ", 
    RowBox[{"iterations_", ":", "100"}], ",", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", "\n", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "allops", ",", " ", "ca", ",", " ", "pcaops", ",", " ", "pertfunc", ",", 
      " ", "initcas", ",", " ", "initfits", ",", " ", "initobject", ",", " ", 
      "nperts", ",", " ", "evofunc", ",", " ", "ncas", ",", " ", "nfits", ",",
       " ", "nobject"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "AdaptCA", "]"}], ",", " ", "ops"}], "}"}], 
        ",", " ", "Last"}], "]"}]}], ";", "\n", 
     RowBox[{"nperts", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], "===", 
          "None"}], " ", "&&", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], " ", "===",
           " ", "None"}]}], ",", " ", "0", ",", " ", 
        RowBox[{"allops", "[", "\"\<NPerturbations\>\"", "]"}]}], "]"}]}], ";",
      "\n", 
     RowBox[{"pertfunc", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], "=!=", 
         " ", "None"}], ",", " ", 
        RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], ",", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], ",", " ", 
          "\n", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"None", "->", " ", 
             RowBox[{"(", 
              RowBox[{"#", "&"}], ")"}]}], ",", 
            RowBox[{"True", "->", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "pcaops"}], "]"}], "&"}], ")"}]}], ",",
             " ", 
            RowBox[{"o_", ":>", "  ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "o", ",", " ", "pcaops"}], "]"}], 
               "&"}], ")"}]}]}], "}"}]}], "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"initobject", " ", "=", " ", 
      RowBox[{"getinitobject", "[", 
       RowBox[{
       "initrule", ",", " ", "pertfunc", ",", "nperts", ",", " ", "allops"}], 
       "]"}]}], ";", "\n", 
     RowBox[{"evofunc", " ", "=", " ", 
      RowBox[{"getevofunc", "[", 
       RowBox[{"pertfunc", ",", " ", "nperts", ",", " ", "allops"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"NestList", "[", 
      RowBox[{"evofunc", ",", " ", "initobject", ",", " ", "iterations"}], 
      "]"}]}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.945266347298204*^9, 3.945266510611971*^9}, {
   3.945266548825857*^9, 3.945266550410791*^9}, {3.945268016078183*^9, 
   3.945268032142717*^9}, {3.945269107272526*^9, 3.94526911449774*^9}, {
   3.945269279580195*^9, 3.9452692938640947`*^9}, {3.945271810557001*^9, 
   3.945272218099633*^9}, {3.945273385911368*^9, 3.945273436835957*^9}, {
   3.945273506952347*^9, 3.945273560819565*^9}, {3.9452735910394588`*^9, 
   3.945274203127338*^9}, {3.945274237522272*^9, 3.945274343950425*^9}, {
   3.945274506234223*^9, 3.945274562658798*^9}, {3.945274616503378*^9, 
   3.9452746603173656`*^9}, {3.945274698429175*^9, 3.945274783319426*^9}, {
   3.945274848605851*^9, 3.9452749606025352`*^9}, {3.945275029070685*^9, 
   3.945275135733245*^9}, {3.945275182863851*^9, 3.945275221946412*^9}, {
   3.945275262417237*^9, 3.945275596744805*^9}, {3.945275738704367*^9, 
   3.945276013867606*^9}, 3.945276058551349*^9, 3.945276651635416*^9, {
   3.945276699749899*^9, 3.945276711552902*^9}, {3.945276792387329*^9, 
   3.9452768229580507`*^9}, {3.945277094229609*^9, 3.945277103309697*^9}, 
   3.945278579486566*^9, {3.945278684328342*^9, 3.945278777648252*^9}, {
   3.945283207433051*^9, 3.94528322304812*^9}, {3.945286751130001*^9, 
   3.945286967127088*^9}, {3.94528703938305*^9, 3.9452871136798*^9}, {
   3.945287144861001*^9, 3.945287157454178*^9}, {3.945287343138464*^9, 
   3.945287405517154*^9}, {3.945287451123786*^9, 3.94528751497371*^9}, {
   3.94528876852215*^9, 3.945288773503803*^9}, {3.94528926679877*^9, 
   3.945289335808309*^9}, {3.945289406537052*^9, 3.945289407270677*^9}, {
   3.94528950551687*^9, 3.945289510055008*^9}, {3.945291265390485*^9, 
   3.945291266776462*^9}, {3.945297202206361*^9, 3.945297251261252*^9}, {
   3.945299500736367*^9, 3.9452995337161303`*^9}, {3.945304908454424*^9, 
   3.945304913598891*^9}, {3.9453051411135817`*^9, 3.945305152655653*^9}, {
   3.945305457248176*^9, 3.945305457646864*^9}, 3.9453059174390373`*^9, 
   3.945352393400782*^9, {3.9453525156122513`*^9, 3.945352549273878*^9}, {
   3.94535285315694*^9, 3.945352856079548*^9}, {3.945353982277117*^9, 
   3.945353990091741*^9}, {3.945362901544997*^9, 3.94536291249011*^9}, 
   3.945363008943507*^9, {3.945363352880908*^9, 3.945363375695158*^9}, {
   3.945446735263548*^9, 3.94544673911515*^9}, {3.9454468264216337`*^9, 
   3.945446826670126*^9}, 3.945446923977113*^9, {3.94544708592466*^9, 
   3.945447102909171*^9}, {3.945447139870059*^9, 3.945447199327375*^9}, {
   3.945447772503014*^9, 3.945447832502127*^9}, {3.945447884839051*^9, 
   3.945447890618701*^9}, {3.9454479862228947`*^9, 3.9454480110229683`*^9}, {
   3.945448064874631*^9, 3.945448112337237*^9}, {3.945449561694101*^9, 
   3.945449569219738*^9}, {3.945449620409198*^9, 3.945449642254697*^9}, 
   3.945460073247253*^9},
 CellLabel->
  "In[111]:=",ExpressionUUID->"a732ee15-b599-4761-a230-33dd80415b6f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "AdaptCA", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<VariationFunction\>\"", "->", "RandomRuleMutation"}], ",", 
     RowBox[{"\"\<AutomatonFunction\>\"", "->", "getca"}], ",", " ", 
     RowBox[{"\"\<FitnessFunction\>\"", "->", "TestCALifeTime"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<FitnessDeathValue\>\"", "->", 
      RowBox[{"-", "Infinity"}]}], ",", 
     RowBox[{"\"\<Perturbation\>\"", "->", "None"}], ",", 
     RowBox[{"\"\<NPerturbations\>\"", "->", "1"}], ",", 
     RowBox[{"\"\<CombinationFunction\>\"", "->", "Min"}], ",", " ", 
     RowBox[{"\"\<SelectionFunction\>\"", "->", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"fit1", ",", " ", "fit2"}], "}"}], ",", " ", 
        RowBox[{"fit2", ">=", "fit1"}]}], "]"}]}], ",", " ", 
     RowBox[{"\"\<ReturnCAs\>\"", "->", "False"}], ",", " ", 
     RowBox[{"\"\<ReturnPerturbations\>\"", "->", "False"}], ",", " ", 
     RowBox[{"\"\<PerturbationFunction\>\"", "->", "None"}]}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"AdaptCA", "[", 
   RowBox[{
    RowBox[{"initrule_List", ":", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "3", ",", " ", "1"}], "}"}]}], ",", " ", 
    RowBox[{"iterations_", ":", "100"}], ",", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", "\n", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "allops", ",", " ", "ca", ",", " ", "pcaops", ",", " ", "pertfunc", ",", 
      " ", "initcas", ",", " ", "initfits", ",", " ", "initobject", ",", " ", 
      "nperts", ",", " ", "evofunc", ",", " ", "ncas", ",", " ", "nfits", ",",
       " ", "nobject"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "AdaptCA", "]"}], ",", " ", "ops"}], "}"}], 
        ",", " ", "Last"}], "]"}]}], ";", "\n", 
     RowBox[{"nperts", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], "===", 
          "None"}], " ", "&&", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], " ", "===",
           " ", "None"}]}], ",", " ", "0", ",", " ", 
        RowBox[{"allops", "[", "\"\<NPerturbations\>\"", "]"}]}], "]"}]}], ";",
      "\n", 
     RowBox[{"pertfunc", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], "=!=", 
         " ", "None"}], ",", " ", 
        RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], ",", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], ",", " ", 
          "\n", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"None", "->", " ", 
             RowBox[{"(", 
              RowBox[{"#", "&"}], ")"}]}], ",", 
            RowBox[{"True", "->", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "pcaops"}], "]"}], "&"}], ")"}]}], ",",
             " ", 
            RowBox[{"o_", ":>", "  ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "o", ",", " ", "pcaops"}], "]"}], 
               "&"}], ")"}]}]}], "}"}]}], "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"initobject", " ", "=", " ", 
      RowBox[{"getinitobject", "[", 
       RowBox[{
       "initrule", ",", " ", "pertfunc", ",", "nperts", ",", " ", "allops"}], 
       "]"}]}], ";", "\n", 
     RowBox[{"evofunc", " ", "=", " ", 
      RowBox[{"getevofunc", "[", 
       RowBox[{"pertfunc", ",", " ", "nperts", ",", " ", "allops"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"NestList", "[", 
      RowBox[{"evofunc", ",", " ", "initobject", ",", " ", "iterations"}], 
      "]"}]}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.945266347298204*^9, 3.945266510611971*^9}, {
   3.945266548825857*^9, 3.945266550410791*^9}, {3.945268016078183*^9, 
   3.945268032142717*^9}, {3.945269107272526*^9, 3.94526911449774*^9}, {
   3.945269279580195*^9, 3.9452692938640947`*^9}, {3.945271810557001*^9, 
   3.945272218099633*^9}, {3.945273385911368*^9, 3.945273436835957*^9}, {
   3.945273506952347*^9, 3.945273560819565*^9}, {3.9452735910394588`*^9, 
   3.945274203127338*^9}, {3.945274237522272*^9, 3.945274343950425*^9}, {
   3.945274506234223*^9, 3.945274562658798*^9}, {3.945274616503378*^9, 
   3.9452746603173656`*^9}, {3.945274698429175*^9, 3.945274783319426*^9}, {
   3.945274848605851*^9, 3.9452749606025352`*^9}, {3.945275029070685*^9, 
   3.945275135733245*^9}, {3.945275182863851*^9, 3.945275221946412*^9}, {
   3.945275262417237*^9, 3.945275596744805*^9}, {3.945275738704367*^9, 
   3.945276013867606*^9}, 3.945276058551349*^9, 3.945276651635416*^9, {
   3.945276699749899*^9, 3.945276711552902*^9}, {3.945276792387329*^9, 
   3.9452768229580507`*^9}, {3.945277094229609*^9, 3.945277103309697*^9}, 
   3.945278579486566*^9, {3.945278684328342*^9, 3.945278777648252*^9}, {
   3.945283207433051*^9, 3.94528322304812*^9}, {3.945286751130001*^9, 
   3.945286967127088*^9}, {3.94528703938305*^9, 3.9452871136798*^9}, {
   3.945287144861001*^9, 3.945287157454178*^9}, {3.945287343138464*^9, 
   3.945287405517154*^9}, {3.945287451123786*^9, 3.94528751497371*^9}, {
   3.94528876852215*^9, 3.945288773503803*^9}, {3.94528926679877*^9, 
   3.945289335808309*^9}, {3.945289406537052*^9, 3.945289407270677*^9}, {
   3.94528950551687*^9, 3.945289510055008*^9}, {3.945291265390485*^9, 
   3.945291266776462*^9}, {3.945297202206361*^9, 3.945297251261252*^9}, {
   3.945299500736367*^9, 3.9452995337161303`*^9}, {3.945304908454424*^9, 
   3.945304913598891*^9}, {3.9453051411135817`*^9, 3.945305152655653*^9}, {
   3.945305457248176*^9, 3.945305457646864*^9}, 3.9453059174390373`*^9, 
   3.945352393400782*^9, {3.9453525156122513`*^9, 3.945352549273878*^9}, {
   3.94535285315694*^9, 3.945352856079548*^9}, {3.945353982277117*^9, 
   3.945353990091741*^9}, {3.945362901544997*^9, 3.94536291249011*^9}, 
   3.945363008943507*^9, {3.945363352880908*^9, 3.945363375695158*^9}, {
   3.945446735263548*^9, 3.94544673911515*^9}, {3.9454468264216337`*^9, 
   3.945446826670126*^9}, 3.945446923977113*^9, {3.94544708592466*^9, 
   3.945447102909171*^9}, {3.945447139870059*^9, 3.945447199327375*^9}, {
   3.945447772503014*^9, 3.945447832502127*^9}, {3.945447884839051*^9, 
   3.945447890618701*^9}, {3.9454479862228947`*^9, 3.9454480110229683`*^9}, {
   3.945448064874631*^9, 3.945448112337237*^9}, {3.945449561694101*^9, 
   3.945449569219738*^9}, {3.945449620409198*^9, 3.945449642254697*^9}, 
   3.945460073247253*^9},
 CellLabel->
  "In[113]:=",ExpressionUUID->"fa33823a-2844-4518-9881-509120d89bef"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AdaptCAFinal", "[", 
   RowBox[{
    RowBox[{"initrule_List", ":", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "4", ",", " ", "1"}], "}"}]}], ",", " ", 
    RowBox[{"iterations_", ":", "100"}], ",", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", "\n", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "allops", ",", " ", "ca", ",", " ", "pcaops", ",", " ", "pertfunc", ",", 
      " ", "initcas", ",", " ", "initfits", ",", " ", "initobject", ",", " ", 
      "nperts", ",", " ", "evofunc", ",", " ", "ncas", ",", " ", "nfits", ",",
       " ", "nobject"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "AdaptCA", "]"}], ",", " ", "ops"}], "}"}], 
        ",", " ", "Last"}], "]"}]}], ";", "\n", 
     RowBox[{"nperts", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], "===", 
          "None"}], " ", "&&", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], " ", "===",
           " ", "None"}]}], ",", " ", "0", ",", " ", 
        RowBox[{"allops", "[", "\"\<NPerturbations\>\"", "]"}]}], "]"}]}], ";",
      "\n", 
     RowBox[{"pertfunc", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], "=!=", 
         " ", "None"}], ",", " ", 
        RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], ",", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], ",", " ", 
          "\n", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"None", "->", " ", 
             RowBox[{"(", 
              RowBox[{"#", "&"}], ")"}]}], ",", 
            RowBox[{"True", "->", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "pcaops"}], "]"}], "&"}], ")"}]}], ",",
             " ", 
            RowBox[{"o_", ":>", "  ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "o", ",", " ", "pcaops"}], "]"}], 
               "&"}], ")"}]}]}], "}"}]}], "]"}]}], "]"}]}], ";", "\n", 
     RowBox[{"initobject", " ", "=", " ", 
      RowBox[{"getinitobject", "[", 
       RowBox[{
       "initrule", ",", " ", "pertfunc", ",", "nperts", ",", " ", "allops"}], 
       "]"}]}], ";", "\n", 
     RowBox[{"evofunc", " ", "=", " ", 
      RowBox[{"getevofunc", "[", 
       RowBox[{"pertfunc", ",", " ", "nperts", ",", " ", "allops"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Nest", "[", 
      RowBox[{"evofunc", ",", " ", "initobject", ",", " ", "iterations"}], 
      "]"}]}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.945266347298204*^9, 3.945266510611971*^9}, {
   3.945266548825857*^9, 3.945266550410791*^9}, {3.945268016078183*^9, 
   3.945268032142717*^9}, {3.945269107272526*^9, 3.94526911449774*^9}, {
   3.945269279580195*^9, 3.9452692938640947`*^9}, {3.945271810557001*^9, 
   3.945272218099633*^9}, {3.945273385911368*^9, 3.945273436835957*^9}, {
   3.945273506952347*^9, 3.945273560819565*^9}, {3.9452735910394588`*^9, 
   3.945274203127338*^9}, {3.945274237522272*^9, 3.945274343950425*^9}, {
   3.945274506234223*^9, 3.945274562658798*^9}, {3.945274616503378*^9, 
   3.9452746603173656`*^9}, {3.945274698429175*^9, 3.945274783319426*^9}, {
   3.945274848605851*^9, 3.9452749606025352`*^9}, {3.945275029070685*^9, 
   3.945275135733245*^9}, {3.945275182863851*^9, 3.945275221946412*^9}, {
   3.945275262417237*^9, 3.945275596744805*^9}, {3.945275738704367*^9, 
   3.945276013867606*^9}, 3.945276058551349*^9, 3.945276651635416*^9, {
   3.945276699749899*^9, 3.945276711552902*^9}, {3.945276792387329*^9, 
   3.9452768229580507`*^9}, {3.945277094229609*^9, 3.945277103309697*^9}, 
   3.945278579486566*^9, {3.945278684328342*^9, 3.945278777648252*^9}, {
   3.945283207433051*^9, 3.94528322304812*^9}, {3.945286751130001*^9, 
   3.945286967127088*^9}, {3.94528703938305*^9, 3.9452871136798*^9}, {
   3.945287144861001*^9, 3.945287157454178*^9}, {3.945287343138464*^9, 
   3.945287405517154*^9}, {3.945287451123786*^9, 3.94528751497371*^9}, {
   3.94528876852215*^9, 3.945288773503803*^9}, {3.94528926679877*^9, 
   3.945289335808309*^9}, {3.945289406537052*^9, 3.945289407270677*^9}, {
   3.94528950551687*^9, 3.945289510055008*^9}, {3.945291265390485*^9, 
   3.945291266776462*^9}, {3.945297202206361*^9, 3.945297251261252*^9}, {
   3.945299500736367*^9, 3.9452995337161303`*^9}, {3.945304908454424*^9, 
   3.945304913598891*^9}, {3.9453051411135817`*^9, 3.945305152655653*^9}, {
   3.945305457248176*^9, 3.945305457646864*^9}, 3.9453059174390373`*^9, 
   3.945352393400782*^9, {3.9453525156122513`*^9, 3.945352549273878*^9}, {
   3.94535285315694*^9, 3.945352856079548*^9}, {3.945353982277117*^9, 
   3.945353990091741*^9}, {3.945362901544997*^9, 3.94536291249011*^9}, 
   3.945363008943507*^9, {3.945363352880908*^9, 3.945363375695158*^9}, {
   3.945446735263548*^9, 3.94544673911515*^9}, {3.9454468264216337`*^9, 
   3.945446826670126*^9}, 3.945446923977113*^9, {3.94544708592466*^9, 
   3.945447102909171*^9}, {3.945447139870059*^9, 3.945447199327375*^9}, {
   3.945447772503014*^9, 3.945447832502127*^9}, {3.945447884839051*^9, 
   3.945447890618701*^9}, {3.9454479862228947`*^9, 3.9454480110229683`*^9}, {
   3.945448064874631*^9, 3.945448112337237*^9}, {3.945449561694101*^9, 
   3.945449569219738*^9}, {3.945449620409198*^9, 3.945449642254697*^9}, 
   3.945460073247253*^9, {3.945467669607753*^9, 3.945467731035282*^9}, 
   3.945468163650099*^9},
 CellLabel->
  "In[115]:=",ExpressionUUID->"452c74e1-e15e-41c7-9a5a-7db5449f4f64"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AdaptCA", "[", 
   RowBox[{"initobject_Association", ",", " ", 
    RowBox[{"iterations_", ":", "100"}], ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", "\n", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "allops", ",", " ", "evofunc", ",", " ", "nperts", ",", " ", "pertfunc", 
      ",", " ", "pcaops"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "AdaptCA", "]"}], ",", " ", "ops"}], "}"}], 
        ",", " ", "Last"}], "]"}]}], ";", "\n", 
     RowBox[{"nperts", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], "===", 
          "None"}], " ", "&&", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], " ", "===",
           " ", "None"}]}], ",", " ", "0", ",", " ", 
        RowBox[{"allops", "[", "\"\<NPerturbations\>\"", "]"}]}], "]"}]}], ";",
      "\n", 
     RowBox[{"pcaops", " ", "=", " ", 
      RowBox[{"Sequence", "@@", 
       RowBox[{"FilterRules", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "allops", "]"}], ",", " ", 
         RowBox[{"Options", "[", "PerturbCA", "]"}]}], "]"}]}]}], ";", "\n", 
     RowBox[{"pertfunc", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], "=!=", 
         " ", "None"}], ",", " ", "\n", 
        RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], ",", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"None", "->", " ", 
             RowBox[{"(", 
              RowBox[{"#", "&"}], ")"}]}], ",", "\n", 
            RowBox[{"True", "->", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "pcaops"}], "]"}], "&"}], ")"}]}], ",",
             " ", 
            RowBox[{"o_", ":>", "  ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "o", ",", " ", "pcaops"}], "]"}], 
               "&"}], ")"}]}]}], "}"}]}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"evofunc", " ", "=", " ", 
      RowBox[{"getevofunc", "[", 
       RowBox[{"pertfunc", ",", " ", "nperts", ",", " ", "allops"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"NestList", "[", 
      RowBox[{"evofunc", ",", " ", "initobject", ",", " ", "iterations"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Code",
 CellChangeTimes->{{3.945447206415959*^9, 3.945447208397376*^9}, {
   3.945448135312339*^9, 3.945448154772767*^9}, {3.945448186726029*^9, 
   3.94544827118985*^9}, {3.945448393194347*^9, 3.945448426825012*^9}, {
   3.945460076503439*^9, 3.9454600895467997`*^9}, 3.945462408334048*^9, 
   3.945462478536715*^9, {3.945462693207561*^9, 3.945462694348099*^9}, {
   3.94546273901925*^9, 3.945462743256021*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"6a539ecd-6a54-48de-b819-7f6e48e40efb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AdaptCAFinal", "[", 
   RowBox[{"initobject_Association", ",", " ", 
    RowBox[{"iterations_", ":", "100"}], ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", "\n", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "AdaptCA", "]"}], ",", " ", "ops"}], "}"}], 
        ",", " ", "Last"}], "]"}]}], ";", "\n", 
     RowBox[{"nperts", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], "===", 
          "None"}], " ", "&&", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], " ", "===",
           " ", "None"}]}], ",", " ", "0", ",", " ", 
        RowBox[{"allops", "[", "\"\<NPerturbations\>\"", "]"}]}], "]"}]}], ";",
      "\n", 
     RowBox[{"pcaops", " ", "=", " ", 
      RowBox[{"Sequence", "@@", 
       RowBox[{"FilterRules", "[", 
        RowBox[{
         RowBox[{"Normal", "[", "allops", "]"}], ",", " ", 
         RowBox[{"Options", "[", "PerturbCA", "]"}]}], "]"}]}]}], ";", "\n", 
     RowBox[{"pertfunc", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], "=!=", 
         " ", "None"}], ",", " ", "\n", 
        RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], ",", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"None", "->", " ", 
             RowBox[{"(", 
              RowBox[{"#", "&"}], ")"}]}], ",", "\n", 
            RowBox[{"True", "->", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "pcaops"}], "]"}], "&"}], ")"}]}], ",",
             " ", 
            RowBox[{"o_", ":>", "  ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "o", ",", " ", "pcaops"}], "]"}], 
               "&"}], ")"}]}]}], "}"}]}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"evofunc", " ", "=", " ", 
      RowBox[{"getevofunc", "[", 
       RowBox[{"pertfunc", ",", " ", "nperts", ",", " ", "allops"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Nest", "[", 
      RowBox[{"evofunc", ",", " ", "initobject", ",", " ", "iterations"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.945447206415959*^9, 3.945447208397376*^9}, {
   3.945448135312339*^9, 3.945448154772767*^9}, {3.945448186726029*^9, 
   3.94544827118985*^9}, {3.945448393194347*^9, 3.945448426825012*^9}, {
   3.945460076503439*^9, 3.9454600895467997`*^9}, 3.9454624083340483`*^9, 
   3.945462478536715*^9, {3.945462693207561*^9, 3.945462712919696*^9}, {
   3.945463928873149*^9, 3.94546394171272*^9}, {3.945464009114686*^9, 
   3.9454640096940613`*^9}},
 CellLabel->
  "In[366]:=",ExpressionUUID->"1020a0f8-44ff-4d16-85ea-44b991670cc8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AdaptCAWhile", "[", 
   RowBox[{"initrule_List", ",", " ", "test_", ",", 
    RowBox[{"iterations_", ":", "100"}], ",", " ", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", "\n", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "allops", ",", " ", "ca", ",", " ", "pcaops", ",", " ", "pertfunc", ",", 
      " ", "initcas", ",", " ", "initfits", ",", " ", "initobject", ",", " ", 
      "nperts", ",", " ", "evofunc", ",", " ", "ncas", ",", " ", "nfits", ",",
       " ", "nobject"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allops", " ", "=", " ", 
      RowBox[{"Merge", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Options", "[", "AdaptCA", "]"}], ",", " ", "ops"}], "}"}], 
        ",", " ", "Last"}], "]"}]}], ";", 
     RowBox[{"nperts", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], "===", 
          "None"}], " ", "&&", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], " ", "===",
           " ", "None"}]}], ",", " ", "0", ",", " ", 
        RowBox[{"allops", "[", "\"\<NPerturbations\>\"", "]"}]}], "]"}]}], ";", 
     RowBox[{"pertfunc", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], "=!=", 
         " ", "None"}], ",", " ", 
        RowBox[{"allops", "[", "\"\<PerturbationFunction\>\"", "]"}], ",", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"allops", "[", "\"\<Perturbation\>\"", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"None", "->", " ", 
             RowBox[{"(", 
              RowBox[{"#", "&"}], ")"}]}], ",", 
            RowBox[{"True", "->", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "pcaops"}], "]"}], "&"}], ")"}]}], ",",
             " ", 
            RowBox[{"o_", ":>", "  ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"PerturbCA", "[", 
                RowBox[{"#", ",", " ", "o", ",", " ", "pcaops"}], "]"}], 
               "&"}], ")"}]}]}], "}"}]}], "]"}]}], "]"}]}], ";", 
     RowBox[{"initobject", " ", "=", " ", 
      RowBox[{"getinitobject", "[", 
       RowBox[{
       "initrule", ",", " ", "pertfunc", ",", "nperts", ",", " ", "allops"}], 
       "]"}]}], ";", 
     RowBox[{"evofunc", " ", "=", " ", 
      RowBox[{"getevofunc", "[", 
       RowBox[{"pertfunc", ",", " ", "nperts", ",", " ", "allops"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"NestWhile", "[", 
      RowBox[{
      "evofunc", ",", " ", "initobject", ",", " ", "test", ",", "1", ",", 
       "iterations"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9454681376442204`*^9, 3.945468145819975*^9}, {
  3.9454683079780083`*^9, 3.945468376077805*^9}, {3.945468413874609*^9, 
  3.9454684304759502`*^9}, {3.945468574306836*^9, 3.945468601621319*^9}, {
  3.945468672811108*^9, 3.9454686745867*^9}, {3.945468774495246*^9, 
  3.945468778323133*^9}},
 CellLabel->
  "In[367]:=",ExpressionUUID->"6906d128-2101-4dd5-885c-7ccc0b5a72aa"]
}, Closed]]
},
WindowSize->{1082, 773},
WindowMargins->{{Automatic, 119}, {Automatic, 7}},
Magnification->1.25,
FrontEndVersion->"14.2 for Mac OS X x86 (64-bit) (December 26, 2024)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"940e5b96-e9b5-4073-9edc-482c7856034a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 152, 3, 82, "Section",ExpressionUUID->"d4dfd321-d1da-46f2-945d-01c197224088"],
Cell[735, 27, 1000, 24, 63, "Code",ExpressionUUID->"1c5640c8-bf97-408b-93c0-7bdc8d41518e"],
Cell[1738, 53, 1061, 22, 63, "Code",ExpressionUUID->"66586bd6-1558-4922-8781-dbbf32d27029"],
Cell[2802, 77, 672, 18, 63, "Code",ExpressionUUID->"f2ed4b2f-28b1-4d2d-ad0d-5329f8a7f701"],
Cell[3477, 97, 1323, 34, 158, "Code",ExpressionUUID->"bb525146-aa8f-419c-b339-76ae1d0a2ebf"],
Cell[4803, 133, 786, 14, 63, "Code",ExpressionUUID->"7824730d-64c5-443c-ad56-0f01495e77b5"],
Cell[5592, 149, 1009, 24, 63, "Code",ExpressionUUID->"efc2a93a-0cc6-424f-badf-dd4c458a951e"],
Cell[6604, 175, 2290, 56, 134, "Code",ExpressionUUID->"7d0fbefc-1a71-4802-a737-9e7311b37685"],
Cell[8897, 233, 1581, 40, 134, "Code",ExpressionUUID->"9985e728-9e9f-4f3a-aaa3-0a9164867c31"],
Cell[10481, 275, 287047, 4722, 184, "Code",ExpressionUUID->"fa7b4e01-4c18-4917-a999-1bda8b185149"],
Cell[297531, 4999, 318, 8, 63, "Code",ExpressionUUID->"de12be9f-307b-4708-9976-4bee3746cc52"],
Cell[297852, 5009, 627, 12, 87, "Code",ExpressionUUID->"f7a36137-a1fb-499c-9888-f233a7dc896a"],
Cell[298482, 5023, 367, 8, 63, "Code",ExpressionUUID->"0cbe98b9-5d15-4e25-aea5-9f81b98a8f78"],
Cell[298852, 5033, 1005, 24, 63, "Code",ExpressionUUID->"5a97706c-555b-42d3-b8c3-5f2eb8316a29"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299894, 5062, 210, 4, 82, "Section",ExpressionUUID->"cf0c77fd-76e4-44d5-911f-081db9d3cd97"],
Cell[300107, 5068, 1691, 41, 110, "Code",ExpressionUUID->"a4a97538-7d00-4ff9-a50b-d7344da05bab",
 CellID->1804130915],
Cell[301801, 5111, 4210, 102, 158, "Code",ExpressionUUID->"dc2050e0-8d63-4cc7-b717-093004985c57"],
Cell[306014, 5215, 1560, 28, 63, "Code",ExpressionUUID->"236f1f6b-ae32-4891-93eb-46abd3e368cb"],
Cell[307577, 5245, 1787, 34, 63, "Code",ExpressionUUID->"a1ac0263-c9ed-44b1-89a4-a9f6a28dbc40"],
Cell[309367, 5281, 1336, 30, 87, "Code",ExpressionUUID->"bc482545-8a99-4e13-a439-ea9bdf712480"],
Cell[310706, 5313, 11470, 230, 464, "Code",ExpressionUUID->"0a278221-ec8e-4818-a10d-902b323e33f0"],
Cell[322179, 5545, 3707, 78, 181, "Code",ExpressionUUID->"9b014647-0901-4c26-91a1-98130b47cbf3"],
Cell[325889, 5625, 1256, 34, 110, "Code",ExpressionUUID->"1215da87-9b66-4944-8205-67d788d9054a"],
Cell[327148, 5661, 1251, 27, 87, "Code",ExpressionUUID->"00820d1f-bba9-49cf-9118-7a39c77588ec"],
Cell[328402, 5690, 217, 4, 36, "Input",ExpressionUUID->"b57fed20-e5c0-4c2a-bf2e-02cb78802afd"],
Cell[328622, 5696, 7556, 166, 511, "Code",ExpressionUUID->"490e47d5-e5d0-4a8c-a100-0a62ff6c7f65"],
Cell[336181, 5864, 6648, 145, 370, "Code",ExpressionUUID->"e5721ff3-e4b7-47dc-bde0-27b33fda6738"],
Cell[342832, 6011, 228, 4, 36, "Input",ExpressionUUID->"ecfee036-990d-4b7f-90fe-c7bb776881aa"],
Cell[343063, 6017, 4415, 83, 158, "Code",ExpressionUUID->"1aad2baa-0495-436d-95f2-af44da44fb73"],
Cell[347481, 6102, 2963, 70, 228, "Code",ExpressionUUID->"3e4c1673-a209-481f-8807-8508bf6ca7d8"],
Cell[350447, 6174, 3090, 74, 134, "Code",ExpressionUUID->"3400f618-dcf3-4b13-a393-083977ae1616"],
Cell[353540, 6250, 3738, 86, 181, "Code",ExpressionUUID->"8b456d75-7800-4707-8a81-af938e4ed276"],
Cell[357281, 6338, 2707, 68, 158, "Code",ExpressionUUID->"eabae733-cad1-49bd-b660-550d5daa91cb"],
Cell[359991, 6408, 5049, 114, 205, "Code",ExpressionUUID->"96cb2af5-052b-4986-a402-473a39d13c58"]
}, Open  ]],
Cell[CellGroupData[{
Cell[365077, 6527, 215, 4, 82, "Section",ExpressionUUID->"0d54c013-5695-4af7-a5d8-526052a920b4"],
Cell[CellGroupData[{
Cell[365317, 6535, 160, 3, 54, "Subsubsection",ExpressionUUID->"f9337781-00ed-4cf6-b7d6-15b108cb404b"],
Cell[365480, 6540, 1430, 33, 63, "Code",ExpressionUUID->"28df7aef-fff4-4559-b797-414e7dee1c93",
 CellID->2093550075],
Cell[366913, 6575, 1667, 41, 158, "Code",ExpressionUUID->"347745f7-cee9-499d-91cd-b4ed01243b3d",
 CellID->1726971227],
Cell[368583, 6618, 1815, 48, 205, "Code",ExpressionUUID->"219a2aa2-cb6c-4c3b-98d2-da08394390d9",
 CellID->651132542],
Cell[370401, 6668, 826, 19, 63, "Code",ExpressionUUID->"6f4da41a-65fe-42e4-b976-64947aa0fa7a",
 CellID->201266207],
Cell[371230, 6689, 2027, 40, 110, "Code",ExpressionUUID->"bb80d0b7-babf-4b33-a1bc-62c0cb2ef33a",
 CellID->1596562746],
Cell[373260, 6731, 2572, 61, 228, "Code",ExpressionUUID->"7eca9cad-21b4-45d0-83f5-1e145ae13584",
 CellID->829937698],
Cell[375835, 6794, 219, 4, 36, "Input",ExpressionUUID->"e5123221-7716-4d07-9b4f-77a5f655e1f3"],
Cell[376057, 6800, 2336, 54, 181, "Code",ExpressionUUID->"83501654-c1f4-4a8a-b177-b98d15f5c419",
 CellID->749686386],
Cell[378396, 6856, 1135, 26, 63, "Code",ExpressionUUID->"60d5bb48-9a1e-4a70-a84b-cd7a129709a9",
 CellID->1409920688],
Cell[379534, 6884, 499, 15, 63, "Code",ExpressionUUID->"aa52e2ef-57c4-4450-aded-a5a2b68db2c1",
 CellID->692532553],
Cell[380036, 6901, 4614, 106, 275, "Code",ExpressionUUID->"4a4cc2a1-e847-4463-8f8c-c33185acd6d8",
 CellID->512733297]
}, Open  ]],
Cell[CellGroupData[{
Cell[384687, 7012, 209, 4, 54, "Subsubsection",ExpressionUUID->"1bd5b1e8-f0cc-4125-9b09-7d63843f5002"],
Cell[384899, 7018, 3375, 88, 205, "Code",ExpressionUUID->"d58fdab0-ea42-4924-a385-218028c56fa3"],
Cell[388277, 7108, 433, 9, 63, "Code",ExpressionUUID->"025156d3-4e73-4d0a-a1fe-e6b1332d08e6"],
Cell[388713, 7119, 3719, 84, 275, "Code",ExpressionUUID->"bbaa5d85-f19b-4a78-9106-d91216c142e3",
 CellID->171383505],
Cell[392435, 7205, 19641, 371, 535, "Code",ExpressionUUID->"a8e0db7b-b97f-448c-b184-05bde6a0546b",
 CellID->1222021125]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[412125, 7582, 163, 3, 82, "Section",ExpressionUUID->"c0def580-a913-4d5e-a53d-54a25ec47976"],
Cell[CellGroupData[{
Cell[412313, 7589, 270, 4, 66, "Subsection",ExpressionUUID->"50d9c160-8288-4bb0-9e5b-2b84d07f431b"],
Cell[412586, 7595, 1056, 18, 63, "Code",ExpressionUUID->"0b23d3e2-0338-4e49-8bb1-477458e606df"],
Cell[413645, 7615, 426, 11, 63, "Code",ExpressionUUID->"9bd0d211-f111-4848-bb4f-5dc8732b5d6e"],
Cell[414074, 7628, 1047, 26, 63, "Code",ExpressionUUID->"b2510a1a-df91-45cd-904f-a22e4094597b"],
Cell[415124, 7656, 5084, 101, 252, "Code",ExpressionUUID->"ed8fa20c-135e-4bb7-9658-cc5b070ea7cb"],
Cell[420211, 7759, 328, 6, 36, "Input",ExpressionUUID->"d8bb5dd4-ea88-4998-8752-f08502cdf390"],
Cell[420542, 7767, 4828, 107, 370, "Code",ExpressionUUID->"3b50bac8-1bb5-436c-957e-bb81d052d4da"],
Cell[425373, 7876, 2946, 55, 134, "Code",ExpressionUUID->"96fd15f1-3639-4ccc-98ca-b22def45415c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[428356, 7936, 152, 3, 66, "Subsection",ExpressionUUID->"6e8e5439-3e8c-4912-85e9-1dca1a23c8a3"],
Cell[428511, 7941, 1222, 25, 87, "Code",ExpressionUUID->"914e413a-3638-490f-aca9-493735b3966c"],
Cell[429736, 7968, 618, 13, 63, "Code",ExpressionUUID->"fb87530d-1647-4eac-8404-f0e8157f5a49"],
Cell[430357, 7983, 1308, 31, 110, "Code",ExpressionUUID->"010986f6-6641-4c6a-9859-d5bc0c5ed0c0"],
Cell[431668, 8016, 1427, 30, 134, "Code",ExpressionUUID->"bd0ce26c-8793-41ce-9d99-a5fe0cc40a54"],
Cell[433098, 8048, 634, 16, 87, "Code",ExpressionUUID->"e9675c57-8c37-4554-b4d9-64de01f118e9"],
Cell[433735, 8066, 3018, 67, 134, "Code",ExpressionUUID->"57294f1b-a5b9-4720-99cf-4822c83dcf9b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[436802, 8139, 155, 3, 82, "Section",ExpressionUUID->"9833750c-2556-43b1-b3be-7cb6bb80404d"],
Cell[436960, 8144, 2856, 70, 158, "Code",ExpressionUUID->"87343c1c-81c4-4008-9ef2-649f897b7b84"],
Cell[439819, 8216, 1142, 25, 87, "Code",ExpressionUUID->"7133c0ef-2767-46cc-b759-35a901e7a5eb"],
Cell[440964, 8243, 2439, 66, 158, "Code",ExpressionUUID->"3f9495ca-95d8-4e4a-a37d-408683ffc6b3"],
Cell[443406, 8311, 2502, 52, 87, "Code",ExpressionUUID->"2c64da26-4ed6-479d-a657-a6c14a89bd13"],
Cell[445911, 8365, 1322, 25, 63, "Code",ExpressionUUID->"96687295-1def-49bb-8675-468fe0e90892"],
Cell[447236, 8392, 1865, 42, 87, "Code",ExpressionUUID->"5658bfaa-3608-4231-9ca2-7a7502e6aa61"]
}, Open  ]],
Cell[CellGroupData[{
Cell[449138, 8439, 249, 4, 82, "Section",ExpressionUUID->"bc7b5f81-b8b3-411d-99af-77f90d1a1f1c"],
Cell[449390, 8445, 3266, 66, 158, "Code",ExpressionUUID->"5abfbed9-f83e-4006-a93c-e32bc3f9495b"],
Cell[452659, 8513, 210, 4, 36, "Input",ExpressionUUID->"06e02745-5149-4a04-a119-5aac7162d61c"],
Cell[452872, 8519, 6535, 142, 228, "Code",ExpressionUUID->"55fa00ea-a9f3-404e-afc8-aa0fa7289c2c"],
Cell[459410, 8663, 6302, 152, 323, "Code",ExpressionUUID->"74eb1a10-64bd-4c9a-9e2f-fa0a6b524a4b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[465749, 8820, 151, 3, 82, "Section",ExpressionUUID->"d6852212-b3fa-464d-9fd5-2873ef55d3c9"],
Cell[465903, 8825, 537, 15, 90, "Code",ExpressionUUID->"7f2be1c5-0353-4225-917f-f2d50cea3add"],
Cell[466443, 8842, 1837, 50, 210, "Code",ExpressionUUID->"1167ac24-28bb-42eb-8554-f1fe6819b441"],
Cell[468283, 8894, 1497, 33, 113, "Code",ExpressionUUID->"bee9e125-9c08-4ab3-a081-a2ef8ee2c10c"],
Cell[469783, 8929, 432, 11, 65, "Code",ExpressionUUID->"09adc84a-a279-4018-bdd1-53ae96dc4b48"],
Cell[470218, 8942, 1267, 31, 65, "Code",ExpressionUUID->"61c09f1a-6996-44c1-abac-9ee339ea646e"],
Cell[471488, 8975, 910, 22, 65, "Code",ExpressionUUID->"0fddcb93-8a52-4500-9fa7-9dc78c741d04"],
Cell[472401, 8999, 748, 20, 65, "Code",ExpressionUUID->"2ec127b0-b6c5-4950-9519-4c65d04e32ab"],
Cell[473152, 9021, 2052, 50, 137, "Code",ExpressionUUID->"89b85e4d-4802-4b40-b6e5-d9d5f1138b38"],
Cell[475207, 9073, 1091, 23, 65, "Code",ExpressionUUID->"41e0f7db-104a-4846-bdc6-82e8613020dc"],
Cell[476301, 9098, 1773, 47, 137, "Code",ExpressionUUID->"70ee3023-4f28-426d-bd63-82fecb8f1e5c"],
Cell[478077, 9147, 342, 7, 65, "Code",ExpressionUUID->"98769222-0260-425b-9432-156479b78447"],
Cell[478422, 9156, 633, 13, 65, "Code",ExpressionUUID->"47522f53-f4f0-4f5a-a80d-879102e4a018"],
Cell[479058, 9171, 2245, 54, 210, "Code",ExpressionUUID->"11e9a943-ffa8-4d87-8acf-7ac334323613"],
Cell[481306, 9227, 3670, 84, 281, "Code",ExpressionUUID->"8ca4d791-001e-4ff9-92cb-df43c5aa6a93"],
Cell[484979, 9313, 4283, 104, 23, "Code",ExpressionUUID->"5776f0b4-ff49-4d9e-ad5d-921e615769e1",
 CellOpen->False],
Cell[489265, 9419, 616, 13, 65, "Code",ExpressionUUID->"cda64b35-4644-476c-b214-c3a22c1cc08f"],
Cell[489884, 9434, 320, 9, 65, "Code",ExpressionUUID->"5b91306a-5235-432f-8739-e5cdb7a6bcab"],
Cell[490207, 9445, 5842, 135, 257, "Code",ExpressionUUID->"f561a8ee-a541-4829-8d20-5d76e4cc776a"],
Cell[496052, 9582, 2692, 62, 137, "Code",ExpressionUUID->"4ef5c2fd-2540-4840-b4bc-d647e18d6feb"],
Cell[498747, 9646, 2567, 64, 137, "Code",ExpressionUUID->"5c2cfaa5-916d-44f1-9ae1-a17fffaa374f"],
Cell[501317, 9712, 1091, 23, 65, "Code",ExpressionUUID->"8954d162-4f8e-420b-9308-3ece81ecba04"],
Cell[502411, 9737, 2336, 57, 161, "Code",ExpressionUUID->"8993189a-b736-449c-a026-a7fc5825985f"],
Cell[504750, 9796, 1721, 40, 161, "Code",ExpressionUUID->"76d73aa6-a494-4450-9c21-505a85a21ed7"],
Cell[506474, 9838, 7418, 178, 473, "Code",ExpressionUUID->"9227b1b7-0d7b-48e5-ac25-014980542ee9"],
Cell[513895, 10018, 5317, 131, 305, "Code",ExpressionUUID->"687166cd-9349-4a64-af9d-54599751fe14"],
Cell[519215, 10151, 3535, 86, 281, "Code",ExpressionUUID->"cece8040-3c79-43f7-af08-d97ac1d642ee"]
}, Closed]],
Cell[CellGroupData[{
Cell[522787, 10242, 172, 3, 64, "Section",ExpressionUUID->"4fc1db56-03ee-46e3-b8fa-bf546a73f757"],
Cell[522962, 10247, 211, 4, 37, "Input",ExpressionUUID->"64c1bb36-84e9-41c7-962a-588dfa935683"],
Cell[523176, 10253, 1702, 48, 162, "Code",ExpressionUUID->"0a23268f-a11c-439d-a0e2-59a24b67a0a2"],
Cell[524881, 10303, 508, 14, 90, "Code",ExpressionUUID->"0b0e8d19-9312-4197-9836-619b59ac8dc8"],
Cell[525392, 10319, 784, 20, 138, "Code",ExpressionUUID->"26fc0ac2-e7a8-4c94-a4bd-abc4d2e33646"],
Cell[526179, 10341, 2681, 73, 426, "Code",ExpressionUUID->"1c06dd49-3956-4c69-9d3d-46b071ea723a"],
Cell[528863, 10416, 3478, 77, 306, "Code",ExpressionUUID->"9b036818-9af7-4239-b0e3-f9f4afcfa338"],
Cell[532344, 10495, 3410, 76, 306, "Code",ExpressionUUID->"a0edf564-a0b8-4bc1-8fea-113b64b18b8a"],
Cell[535757, 10573, 2185, 50, 186, "Code",ExpressionUUID->"52493db3-29ba-47cb-8cce-e9563a6a30b4"],
Cell[537945, 10625, 7052, 142, 306, "Code",ExpressionUUID->"a732ee15-b599-4761-a230-33dd80415b6f"],
Cell[545000, 10769, 7052, 142, 306, "Code",ExpressionUUID->"fa33823a-2844-4518-9881-509120d89bef"],
Cell[552055, 10913, 6018, 119, 258, "Code",ExpressionUUID->"452c74e1-e15e-41c7-9a5a-7db5449f4f64"],
Cell[558076, 11034, 3416, 81, 306, "Code",ExpressionUUID->"6a539ecd-6a54-48de-b819-7f6e48e40efb"],
Cell[561495, 11117, 3350, 79, 298, "Input",ExpressionUUID->"1020a0f8-44ff-4d16-85ea-44b991670cc8"],
Cell[564848, 11198, 3372, 80, 246, "Input",ExpressionUUID->"6906d128-2101-4dd5-885c-7ccc0b5a72aa"]
}, Closed]]
}
]
*)

