(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    230954,       4460]
NotebookOptionsPosition[    226016,       4366]
NotebookOutlinePosition[    226436,       4383]
CellTagsIndexPosition[    226393,       4380]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<DarkMode\>\"", "]"}], "[", "False", 
  "]"}]], "Input",
 CellChangeTimes->{{3.924388454907346*^9, 3.924388467413332*^9}, {
  3.924457130873047*^9, 3.9244571316117496`*^9}},
 CellLabel->
  "In[194]:=",ExpressionUUID->"9daaf388-20a9-4412-ab7e-fca277835eb6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"categories", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
   "\"\<Name\>\"", ",", " ", "\"\<Day\>\"", ",", " ", "\"\<Time\>\"", ",", 
    " ", "\"\<Age\>\"", ",", " ", "\"\<Grade\>\""}], "}"}]}]], "Code",
 CellLabel->
  "In[155]:=",ExpressionUUID->"c24eea7b-9f17-4ec9-8b2a-41e6ca3c81f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Name\"\>", ",", "\<\"Day\"\>", ",", "\<\"Time\"\>", 
   ",", "\<\"Age\"\>", ",", "\<\"Grade\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.9243886879950237`*^9},
 CellLabel->
  "Out[155]=",ExpressionUUID->"5ef5d298-2acb-4d77-bb03-f41d22cd34c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"examples", " ", "=", " ", 
  RowBox[{"{", "\n", 
   RowBox[{
    RowBox[{
    "\"\<[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)\>\"", "->", " ", 
     "\"\<BBall 101,Sunday,10:00am-10:50am,4-6,\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
    "\"\<[GAME-ON] Wed 4:55pm-5:55pm (Gr. 4th/5th)\>\"", "->", " ", 
     "\"\<GAME-ON,Wednesday,4:55pm-5:55pm,,4th-5th\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
    "\"\<[LEVEL-UP] Friday 3:50pm - 4:50pm (K - 2nd)\>\"", "->", 
     "\"\<LEVEL-UP,Friday,3:50pm-4:50pm,,K-2nd\>\""}]}], "\n", 
   "}"}]}]], "Code",
 CellLabel->
  "In[154]:=",ExpressionUUID->"191a676e-1724-490b-927b-bdc715a83fac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)\"\>", 
    "\[Rule]", "\<\"BBall 101,Sunday,10:00am-10:50am,4-6,\"\>"}], ",", 
   RowBox[{"\<\"[GAME-ON] Wed 4:55pm-5:55pm (Gr. 4th/5th)\"\>", 
    "\[Rule]", "\<\"GAME-ON,Wednesday,4:55pm-5:55pm,,4th-5th\"\>"}], ",", 
   RowBox[{"\<\"[LEVEL-UP] Friday 3:50pm - 4:50pm (K - 2nd)\"\>", 
    "\[Rule]", "\<\"LEVEL-UP,Friday,3:50pm-4:50pm,,K-2nd\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.924388686133012*^9},
 CellLabel->
  "Out[154]=",ExpressionUUID->"19e199c8-adab-4b98-bc69-c351eda5ef50"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tests", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
   "\"\<[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\>\"", ",", " ", 
    "\"\<[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)\>\""}], 
   "}"}]}]], "Code",
 CellChangeTimes->{{3.924388572062325*^9, 3.924388606286365*^9}},
 CellLabel->
  "In[152]:=",ExpressionUUID->"d2a81355-d39b-4c8b-8ad8-6ffb52656589"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", 
   ",", "\<\"[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.92438861077448*^9},
 CellLabel->
  "Out[152]=",ExpressionUUID->"018e18b8-9ad3-4a1a-bebc-27c981f6c1e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"toCSVRow", " ", "=", " ", 
  RowBox[{"LLMExampleFunction", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "\"\<Put this text into csv format with the following categories: \>\"", 
      " ", "<>", " ", 
      RowBox[{"StringRiffle", "[", 
       RowBox[{"categories", ",", " ", "\"\<,\>\""}], "]"}]}], ",", " ", 
     "examples"}], "}"}], "\[IndentingNewLine]", "]"}]}]], "Code",
 CellLabel->
  "In[153]:=",ExpressionUUID->"58990631-9817-4a22-99e3-18ddef709229"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LLMFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], "", 
            GridBox[{{
               RowBox[{
                 TagBox["\"Content: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    "\"Put this text into csv format with the following \
categories: Name,Day,Time,Age,Grade\\n\\n\"", 
                    "\"Input: [BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)\
\\nOutput: BBall 101,Sunday,10:00am-10:50am,4-6,\\n\\nInput: [GAME-ON] Wed \
4:55pm-5:55pm (Gr. 4th/5th)\\nOutput: \
GAME-ON,Wednesday,4:55pm-5:55pm,,4th-5th\\n\\nInput: [LEVEL-UP] Friday 3:50pm \
- 4:50pm (K - 2nd)\\nOutput: LEVEL-UP,Friday,3:50pm-4:50pm,,K-2nd\"", 
                    "\"\\n\\nInput: \"", 
                    
                    TemplateBox[{"1"}, "TemplateSlot", 
                    DisplayFunction -> (
                    FrameBox[#, Background -> RGBColor[0.945, 0.992, 1.], 
                    BaselinePosition -> Baseline, 
                    BaseStyle -> {ShowStringCharacters -> True}, 
                    FrameMargins -> {{2, 2}, {0, 0}}, FrameStyle -> 
                    RGBColor[0.698, 0.898, 0.9255], RoundingRadius -> 3]& ), 
                    Tooltip -> Automatic], "\"\\nOutput:\""}, "RowDefault"], 
                   Deploy, DefaultBaseStyle -> "Deploy"], "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    StyleBox[
                    "1", ShowStringCharacters -> True, StripOnInput -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], "", 
            GridBox[{{
               RowBox[{
                 TagBox["\"Content: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    "\"Put this text into csv format with the following \
categories: Name,Day,Time,Age,Grade\\n\\n\"", 
                    "\"Input: [BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)\
\\nOutput: BBall 101,Sunday,10:00am-10:50am,4-6,\\n\\nInput: [GAME-ON] Wed \
4:55pm-5:55pm (Gr. 4th/5th)\\nOutput: \
GAME-ON,Wednesday,4:55pm-5:55pm,,4th-5th\\n\\nInput: [LEVEL-UP] Friday 3:50pm \
- 4:50pm (K - 2nd)\\nOutput: LEVEL-UP,Friday,3:50pm-4:50pm,,K-2nd\"", 
                    "\"\\n\\nInput: \"", 
                    
                    TemplateBox[{"1"}, "TemplateSlot", 
                    DisplayFunction -> (
                    FrameBox[#, Background -> RGBColor[0.945, 0.992, 1.], 
                    BaselinePosition -> Baseline, 
                    BaseStyle -> {ShowStringCharacters -> True}, 
                    FrameMargins -> {{2, 2}, {0, 0}}, FrameStyle -> 
                    RGBColor[0.698, 0.898, 0.9255], RoundingRadius -> 3]& ), 
                    Tooltip -> Automatic], "\"\\nOutput:\""}, "RowDefault"], 
                   Deploy, DefaultBaseStyle -> "Deploy"], "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    StyleBox[
                    "1", ShowStringCharacters -> True, StripOnInput -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"CombinerFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["StringJoin", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"InsertionFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["TextString", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  LLMFunction[
   TemplateObject[{
    "Put this text into csv format with the following categories: \
Name,Day,Time,Age,Grade\n\n", 
     "Input: [BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)\nOutput: BBall \
101,Sunday,10:00am-10:50am,4-6,\n\nInput: [GAME-ON] Wed 4:55pm-5:55pm (Gr. \
4th/5th)\nOutput: GAME-ON,Wednesday,4:55pm-5:55pm,,4th-5th\n\nInput: \
[LEVEL-UP] Friday 3:50pm - 4:50pm (K - 2nd)\nOutput: \
LEVEL-UP,Friday,3:50pm-4:50pm,,K-2nd", "\n\nInput: ", 
     TemplateSlot[1], "\nOutput:"}, {{}, CombinerFunction -> StringJoin, 
     InsertionFunction -> TextString}], "String", {}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.924388683925604*^9},
 CellLabel->
  "Out[153]=",ExpressionUUID->"caa9ddbc-209c-450c-baae-b956515af176"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rows", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{"toCSVRow", ",", " ", "tests"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.92438864194645*^9, 3.924388678821735*^9}},
 CellLabel->
  "In[156]:=",ExpressionUUID->"e3461468-aab3-4642-b52a-698e1fcb67f6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"BBall 101,Saturday,9:00am-9:50am,4-6,\"\>", 
   ",", "\<\"BBall 101,Sunday,10:00am-10:50am,4-6,\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.9243886982137623`*^9},
 CellLabel->
  "Out[156]=",ExpressionUUID->"c0a189fa-1cf2-4e04-a9dc-56a7be986a58"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"valsList", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"StringSplit", "[", 
      RowBox[{"#", ",", " ", "\"\<,\>\"", ",", " ", "All"}], "]"}], "&"}], 
    ",", " ", "rows"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9243887555985947`*^9, 3.9243888108352413`*^9}, {
  3.924388952885936*^9, 3.92438895344792*^9}},
 CellLabel->
  "In[160]:=",ExpressionUUID->"d7e5f033-85a6-4679-a25e-b7b80a0b263d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"BBall 101\"\>", ",", "\<\"Saturday\"\>", 
     ",", "\<\"9:00am-9:50am\"\>", ",", "\<\"4-6\"\>", ",", "\<\"\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"BBall 101\"\>", ",", "\<\"Sunday\"\>", 
     ",", "\<\"10:00am-10:50am\"\>", ",", "\<\"4-6\"\>", ",", "\<\"\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.92438880417236*^9, 3.9243888111287127`*^9}, 
   3.924388955777073*^9},
 CellLabel->
  "Out[160]=",ExpressionUUID->"0e349774-2667-4935-bd82-b2757cdbab9f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"catsAI", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "<>", "\"\<AI\>\""}], "&"}], ",", " ", "categories"}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.924388897015126*^9, 3.924388907839864*^9}},
 CellLabel->
  "In[159]:=",ExpressionUUID->"3c39d359-84e5-46c3-b44d-17222dffacaa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"NameAI\"\>", ",", "\<\"DayAI\"\>", ",", "\<\"TimeAI\"\>", 
   ",", "\<\"AgeAI\"\>", ",", "\<\"GradeAI\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.9243889102833776`*^9},
 CellLabel->
  "Out[159]=",ExpressionUUID->"a8ea4b26-87c2-474a-b531-a98bd96ff6b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dicts", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AssociationThread", "[", 
      RowBox[{"catsAI", ",", " ", "#"}], "]"}], "&"}], ",", " ", "valsList"}],
    "]"}]}]], "Code",
 CellChangeTimes->{{3.924388741131033*^9, 3.924388745878024*^9}, 
   3.92438883709888*^9, {3.924388917761231*^9, 3.92438895888776*^9}},
 CellLabel->
  "In[161]:=",ExpressionUUID->"4c98818b-3acf-4ec9-81a8-a9f4823c56d4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"NameAI\"\>", "\[Rule]", "\<\"BBall 101\"\>"}], ",", 
     RowBox[{"\<\"DayAI\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
     RowBox[{"\<\"TimeAI\"\>", "\[Rule]", "\<\"9:00am-9:50am\"\>"}], ",", 
     RowBox[{"\<\"AgeAI\"\>", "\[Rule]", "\<\"4-6\"\>"}], ",", 
     RowBox[{"\<\"GradeAI\"\>", "\[Rule]", "\<\"\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"NameAI\"\>", "\[Rule]", "\<\"BBall 101\"\>"}], ",", 
     RowBox[{"\<\"DayAI\"\>", "\[Rule]", "\<\"Sunday\"\>"}], ",", 
     RowBox[{"\<\"TimeAI\"\>", "\[Rule]", "\<\"10:00am-10:50am\"\>"}], ",", 
     RowBox[{"\<\"AgeAI\"\>", "\[Rule]", "\<\"4-6\"\>"}], ",", 
     RowBox[{"\<\"GradeAI\"\>", "\[Rule]", "\<\"\"\>"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.92438895915451*^9},
 CellLabel->
  "Out[161]=",ExpressionUUID->"ec68bf11-eb44-404b-9d57-b37594efe7eb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"allP", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<Projects/Wolfram/SPBballClasses.csv\>\"", ",", " ", 
     "\"\<Dataset\>\"", ",", " ", 
     RowBox[{"\"\<HeaderLines\>\"", "->", " ", "1"}]}], "]"}]}], " ", 
  ";"}]], "Code",
 CellChangeTimes->{{3.924388885112461*^9, 3.9243888867069387`*^9}, {
  3.924388968297563*^9, 3.924389017642202*^9}},
 CellLabel->
  "In[163]:=",ExpressionUUID->"6cbfd403-6677-482a-b9eb-c745fa06626e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"progs", " ", "=", " ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", "pName", "}"}], ",", " ", 
      RowBox[{"allP", "[", 
       RowBox[{"SelectFirst", "[", 
        RowBox[{
         RowBox[{"#Name", " ", "==", " ", "pName"}], " ", "&"}], "]"}], 
       "]"}]}], "]"}], ",", " ", "tests"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.924389023358099*^9, 3.924389078663308*^9}, {
  3.924389236280992*^9, 3.924389345521544*^9}, {3.924389399723572*^9, 
  3.924389456652423*^9}},
 CellLabel->
  "In[164]:=",ExpressionUUID->"5511639e-5dd0-4717-b5f4-84a5ff41aafb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "ID" -> 6308, "Name" -> 
         "[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)", "Flags" -> "", 
         "Time of dayTime of day" -> "09:00am", 
         "Day of the WeekDay of the Week" -> "Sa", 
         "Size / CapacitySize / Capacity" -> "19            of 20", 
         "Age Restrictions" -> "3y 10m - 7y 3m", "Age Group" -> "U-7", "Wait" -> 
         0, "Start Date" -> "Sat 03/30/2024", "Season" -> 
         "24-SP Basketball Classes (Pre K - 6th)", "Level" -> 
         "101 Intro to Bball", "Time of Year" -> "Spring"|>, "AllowEmbedding" -> 
       True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"ID"} -> 
          TypeSystem`PackageScope`AtomShape[34], {"Name"} -> 
          TypeSystem`PackageScope`AtomShape[504.00000000000006`], {"Flags"} -> 
          TypeSystem`PackageScope`AtomShape[33.6], {"Time of dayTime of day"} -> 
          TypeSystem`PackageScope`AtomShape[78.4], {
           "Day of the WeekDay of the Week"} -> 
          TypeSystem`PackageScope`AtomShape[33.6], {
           "Size / CapacitySize / Capacity"} -> 
          TypeSystem`PackageScope`AtomShape[212.8], {"Age Restrictions"} -> 
          TypeSystem`PackageScope`AtomShape[156.8], {"Age Group"} -> 
          TypeSystem`PackageScope`AtomShape[33.6], {"Wait"} -> 
          TypeSystem`PackageScope`AtomShape[34], {"Start Date"} -> 
          TypeSystem`PackageScope`AtomShape[156.8], {"Season"} -> 
          TypeSystem`PackageScope`AtomShape[425.6], {"Level"} -> 
          TypeSystem`PackageScope`AtomShape[201.60000000000002`], {
           "Time of Year"} -> TypeSystem`PackageScope`AtomShape[67.2]|>, 1], 
       "InitialType" -> 
       TypeSystem`Struct[{
         "ID", "Name", "Flags", "Time of dayTime of day", 
          "Day of the WeekDay of the Week", "Size / CapacitySize / Capacity", 
          "Age Restrictions", "Age Group", "Wait", "Start Date", "Season", 
          "Level", "Time of Year"}, {
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"ID"} -> 
          TypeSystem`PackageScope`AtomShape[34], {"Name"} -> 
          TypeSystem`PackageScope`AtomShape[504.00000000000006`], {"Flags"} -> 
          TypeSystem`PackageScope`AtomShape[33.6], {"Time of dayTime of day"} -> 
          TypeSystem`PackageScope`AtomShape[78.4], {
           "Day of the WeekDay of the Week"} -> 
          TypeSystem`PackageScope`AtomShape[33.6], {
           "Size / CapacitySize / Capacity"} -> 
          TypeSystem`PackageScope`AtomShape[212.8], {"Age Restrictions"} -> 
          TypeSystem`PackageScope`AtomShape[156.8], {"Age Group"} -> 
          TypeSystem`PackageScope`AtomShape[33.6], {"Wait"} -> 
          TypeSystem`PackageScope`AtomShape[34], {"Start Date"} -> 
          TypeSystem`PackageScope`AtomShape[156.8], {"Season"} -> 
          TypeSystem`PackageScope`AtomShape[425.6], {"Level"} -> 
          TypeSystem`PackageScope`AtomShape[201.60000000000002`], {
           "Time of Year"} -> TypeSystem`PackageScope`AtomShape[67.2]|>, 1], 
       "Type" -> TypeSystem`Struct[{
         "ID", "Name", "Flags", "Time of dayTime of day", 
          "Day of the WeekDay of the Week", "Size / CapacitySize / Capacity", 
          "Age Restrictions", "Age Group", "Wait", "Start Date", "Season", 
          "Level", "Time of Year"}, {
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 13, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["ID", 
                    Style[
                    "ID", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ID"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["ID"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["6308"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["ID"]}, "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{504.00000000000006`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Flags", 
                    Style[
                    "Flags", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Flags"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Flags"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Flags"]}, "Item", False], "Mouse"], 
                ImageSize -> {{33.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Time of dayTime of day", 
                    Style[
                    "Time of dayTime of day", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Time of dayTime of day"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Time of dayTime of day"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["09:00am", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Time of dayTime of day"]}, "Item", False], "Mouse"], 
                ImageSize -> {{78.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Day of the WeekDay of the Week", 
                    Style[
                    "Day of the WeekDay of the Week", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Day of the WeekDay of the Week"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Day of the WeekDay of the Week"]}, "RowHeader", 
                  False], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["Sa", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Day of the WeekDay of the Week"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{33.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Size / CapacitySize / Capacity", 
                    Style[
                    "Size / CapacitySize / Capacity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Size / CapacitySize / Capacity"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Size / CapacitySize / Capacity"]}, "RowHeader", 
                  False], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["19            of 20", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Size / CapacitySize / Capacity"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{212.8, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Age Restrictions", 
                    Style[
                    "Age Restrictions", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Age Restrictions"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Age Restrictions"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["3y 10m - 7y 3m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Age Restrictions"]}, "Item", False], "Mouse"], 
                ImageSize -> {{156.8, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Age Group", 
                    Style[
                    "Age Group", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Age Group"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Age Group"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["U-7", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Age Group"]}, "Item", False], "Mouse"], 
                ImageSize -> {{33.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Wait", 
                    Style[
                    "Wait", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Wait"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Wait"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["0"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Wait"]}, "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Start Date", 
                    Style[
                    "Start Date", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Start Date"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Start Date"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["Sat 03/30/2024", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Start Date"]}, "Item", False], "Mouse"], 
                ImageSize -> {{156.8, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Season", 
                    Style[
                    "Season", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Season"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Season"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["24-SP Basketball Classes (Pre K - 6th)", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Season"]}, "Item", False], "Mouse"], 
                ImageSize -> {{425.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Level", 
                    Style[
                    "Level", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Level"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Level"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["101 Intro to Bball", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Level"]}, "Item", False], "Mouse"], 
                ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Time of Year", 
                    Style[
                    "Time of Year", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Time of Year"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Time of Year"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["Spring", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Time of Year"]}, "Item", False], "Mouse"], 
                ImageSize -> {{67.2, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{812., {275.7010498046875, 284.2989501953125}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{812., {275.7010498046875, 284.2989501953125}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "ID" -> 6309, "Name" -> 
         "[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)", "Flags" -> "Full",
          "Time of dayTime of day" -> "10:00am", 
         "Day of the WeekDay of the Week" -> "S", 
         "Size / CapacitySize / Capacity" -> "20            of 20", 
         "Age Restrictions" -> "3y 10m - 7y 3m", "Age Group" -> "U-7", "Wait" -> 
         2, "Start Date" -> "Sun 03/31/2024", "Season" -> 
         "24-SP Basketball Classes (Pre K - 6th)", "Level" -> 
         "101 Intro to Bball", "Time of Year" -> "Spring"|>, "AllowEmbedding" -> 
       True, "InitialShape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"ID"} -> 
          TypeSystem`PackageScope`AtomShape[34], {"Name"} -> 
          TypeSystem`PackageScope`AtomShape[526.4000000000001], {"Flags"} -> 
          TypeSystem`PackageScope`AtomShape[44.800000000000004`], {
           "Time of dayTime of day"} -> 
          TypeSystem`PackageScope`AtomShape[78.4], {
           "Day of the WeekDay of the Week"} -> 
          TypeSystem`PackageScope`AtomShape[33.6], {
           "Size / CapacitySize / Capacity"} -> 
          TypeSystem`PackageScope`AtomShape[212.8], {"Age Restrictions"} -> 
          TypeSystem`PackageScope`AtomShape[156.8], {"Age Group"} -> 
          TypeSystem`PackageScope`AtomShape[33.6], {"Wait"} -> 
          TypeSystem`PackageScope`AtomShape[34], {"Start Date"} -> 
          TypeSystem`PackageScope`AtomShape[156.8], {"Season"} -> 
          TypeSystem`PackageScope`AtomShape[425.6], {"Level"} -> 
          TypeSystem`PackageScope`AtomShape[201.60000000000002`], {
           "Time of Year"} -> TypeSystem`PackageScope`AtomShape[67.2]|>, 1], 
       "InitialType" -> 
       TypeSystem`Struct[{
         "ID", "Name", "Flags", "Time of dayTime of day", 
          "Day of the WeekDay of the Week", "Size / CapacitySize / Capacity", 
          "Age Restrictions", "Age Group", "Wait", "Start Date", "Season", 
          "Level", "Time of Year"}, {
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String]}], "Meta" -> <||>, "RowTarget" -> 20, 
       "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`DocumentShape[<|{"ID"} -> 
          TypeSystem`PackageScope`AtomShape[34], {"Name"} -> 
          TypeSystem`PackageScope`AtomShape[526.4000000000001], {"Flags"} -> 
          TypeSystem`PackageScope`AtomShape[44.800000000000004`], {
           "Time of dayTime of day"} -> 
          TypeSystem`PackageScope`AtomShape[78.4], {
           "Day of the WeekDay of the Week"} -> 
          TypeSystem`PackageScope`AtomShape[33.6], {
           "Size / CapacitySize / Capacity"} -> 
          TypeSystem`PackageScope`AtomShape[212.8], {"Age Restrictions"} -> 
          TypeSystem`PackageScope`AtomShape[156.8], {"Age Group"} -> 
          TypeSystem`PackageScope`AtomShape[33.6], {"Wait"} -> 
          TypeSystem`PackageScope`AtomShape[34], {"Start Date"} -> 
          TypeSystem`PackageScope`AtomShape[156.8], {"Season"} -> 
          TypeSystem`PackageScope`AtomShape[425.6], {"Level"} -> 
          TypeSystem`PackageScope`AtomShape[201.60000000000002`], {
           "Time of Year"} -> TypeSystem`PackageScope`AtomShape[67.2]|>, 1], 
       "Type" -> TypeSystem`Struct[{
         "ID", "Name", "Flags", "Time of dayTime of day", 
          "Day of the WeekDay of the Week", "Size / CapacitySize / Capacity", 
          "Age Restrictions", "Age Group", "Wait", "Start Date", "Season", 
          "Level", "Time of Year"}, {
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
       "DisplayedColumnCount" -> 10, "DataRowCount" -> 13, "DataColumnCount" -> 
       1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null,
        "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$,
       TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["ID", 
                    Style[
                    "ID", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["ID"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["ID"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["6309"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["ID"]}, "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Name", 
                    Style[
                    "Name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Name"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                "[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{526.4000000000001, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Flags", 
                    Style[
                    "Flags", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Flags"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Flags"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["Full", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Flags"]}, "Item", False], "Mouse"], 
                ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Time of dayTime of day", 
                    Style[
                    "Time of dayTime of day", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Time of dayTime of day"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Time of dayTime of day"]}, "RowHeader", False], 
                 "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["10:00am", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Time of dayTime of day"]}, "Item", False], "Mouse"], 
                ImageSize -> {{78.4, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Day of the WeekDay of the Week", 
                    Style[
                    "Day of the WeekDay of the Week", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Day of the WeekDay of the Week"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Day of the WeekDay of the Week"]}, "RowHeader", 
                  False], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["S", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Day of the WeekDay of the Week"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{33.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Size / CapacitySize / Capacity", 
                    Style[
                    "Size / CapacitySize / Capacity", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Size / CapacitySize / Capacity"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Size / CapacitySize / Capacity"]}, "RowHeader", 
                  False], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["20            of 20", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Size / CapacitySize / Capacity"]}, "Item", False], 
                 "Mouse"], ImageSize -> {{212.8, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Age Restrictions", 
                    Style[
                    "Age Restrictions", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Age Restrictions"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Age Restrictions"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["3y 10m - 7y 3m", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Age Restrictions"]}, "Item", False], "Mouse"], 
                ImageSize -> {{156.8, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Age Group", 
                    Style[
                    "Age Group", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Age Group"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Age Group"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["U-7", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Age Group"]}, "Item", False], "Mouse"], 
                ImageSize -> {{33.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Wait", 
                    Style[
                    "Wait", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Wait"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Wait"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["2"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Wait"]}, "Item", False], "Mouse"], 
                ImageSize -> {{34, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Start Date", 
                    Style[
                    "Start Date", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Start Date"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Start Date"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["Sun 03/31/2024", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Start Date"]}, "Item", False], "Mouse"], 
                ImageSize -> {{156.8, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Season", 
                    Style[
                    "Season", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Season"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Season"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["24-SP Basketball Classes (Pre K - 6th)", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Season"]}, "Item", False], "Mouse"], 
                ImageSize -> {{425.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Level", 
                    Style[
                    "Level", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Level"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Level"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["101 Intro to Bball", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Level"]}, "Item", False], "Mouse"], 
                ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Time of Year", 
                    Style[
                    "Time of Year", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Time of Year"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Time of Year"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["Spring", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["Time of Year"]}, "Item", False], "Mouse"], 
                ImageSize -> {{67.2, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{835., {275.7010498046875, 284.2989501953125}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{835., {275.7010498046875, 284.2989501953125}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.9243894573862123`*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"9a03a735-ae1e-44b8-8e3f-7e2840494a82"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"progsJoined", " ", "=", " ", 
  RowBox[{"MapThread", "[", 
   RowBox[{"Join", ",", " ", 
    RowBox[{"{", 
     RowBox[{"progs", ",", " ", "dicts"}], "}"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.92438948124611*^9, 3.924389593885264*^9}, {
  3.924389842586341*^9, 3.9243898460724688`*^9}},
 CellLabel->
  "In[173]:=",ExpressionUUID->"42291696-a3a0-4d81-b630-2acd5b38b700"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"ID\"\>", "\[Rule]", "6308"}], ",", 
     RowBox[{"\<\"Name\"\>", 
      "\[Rule]", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>"}], 
     ",", 
     RowBox[{"\<\"Flags\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
     RowBox[{"\<\"Time of dayTime of day\"\>", "\[Rule]", "\<\"09:00am\"\>"}],
      ",", 
     RowBox[{"\<\"Day of the WeekDay of the Week\"\>", 
      "\[Rule]", "\<\"Sa\"\>"}], ",", 
     RowBox[{"\<\"Size / CapacitySize / Capacity\"\>", 
      "\[Rule]", "\<\"19            of 20\"\>"}], ",", 
     RowBox[{"\<\"Age Restrictions\"\>", 
      "\[Rule]", "\<\"3y 10m - 7y 3m\"\>"}], ",", 
     RowBox[{"\<\"Age Group\"\>", "\[Rule]", "\<\"U-7\"\>"}], ",", 
     RowBox[{"\<\"Wait\"\>", "\[Rule]", "0"}], ",", 
     RowBox[{"\<\"Start Date\"\>", "\[Rule]", "\<\"Sat 03/30/2024\"\>"}], ",", 
     RowBox[{"\<\"Season\"\>", 
      "\[Rule]", "\<\"24-SP Basketball Classes (Pre K - 6th)\"\>"}], ",", 
     RowBox[{"\<\"Level\"\>", "\[Rule]", "\<\"101 Intro to Bball\"\>"}], ",", 
     
     RowBox[{"\<\"Time of Year\"\>", "\[Rule]", "\<\"Spring\"\>"}], ",", 
     RowBox[{"\<\"NameAI\"\>", "\[Rule]", "\<\"BBall 101\"\>"}], ",", 
     RowBox[{"\<\"DayAI\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
     RowBox[{"\<\"TimeAI\"\>", "\[Rule]", "\<\"9:00am-9:50am\"\>"}], ",", 
     RowBox[{"\<\"AgeAI\"\>", "\[Rule]", "\<\"4-6\"\>"}], ",", 
     RowBox[{"\<\"GradeAI\"\>", "\[Rule]", "\<\"\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"ID\"\>", "\[Rule]", "6309"}], ",", 
     RowBox[{"\<\"Name\"\>", 
      "\[Rule]", "\<\"[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)\"\>"}], 
     ",", 
     RowBox[{"\<\"Flags\"\>", "\[Rule]", "\<\"Full\"\>"}], ",", 
     RowBox[{"\<\"Time of dayTime of day\"\>", "\[Rule]", "\<\"10:00am\"\>"}],
      ",", 
     RowBox[{"\<\"Day of the WeekDay of the Week\"\>", 
      "\[Rule]", "\<\"S\"\>"}], ",", 
     RowBox[{"\<\"Size / CapacitySize / Capacity\"\>", 
      "\[Rule]", "\<\"20            of 20\"\>"}], ",", 
     RowBox[{"\<\"Age Restrictions\"\>", 
      "\[Rule]", "\<\"3y 10m - 7y 3m\"\>"}], ",", 
     RowBox[{"\<\"Age Group\"\>", "\[Rule]", "\<\"U-7\"\>"}], ",", 
     RowBox[{"\<\"Wait\"\>", "\[Rule]", "2"}], ",", 
     RowBox[{"\<\"Start Date\"\>", "\[Rule]", "\<\"Sun 03/31/2024\"\>"}], ",", 
     RowBox[{"\<\"Season\"\>", 
      "\[Rule]", "\<\"24-SP Basketball Classes (Pre K - 6th)\"\>"}], ",", 
     RowBox[{"\<\"Level\"\>", "\[Rule]", "\<\"101 Intro to Bball\"\>"}], ",", 
     
     RowBox[{"\<\"Time of Year\"\>", "\[Rule]", "\<\"Spring\"\>"}], ",", 
     RowBox[{"\<\"NameAI\"\>", "\[Rule]", "\<\"BBall 101\"\>"}], ",", 
     RowBox[{"\<\"DayAI\"\>", "\[Rule]", "\<\"Sunday\"\>"}], ",", 
     RowBox[{"\<\"TimeAI\"\>", "\[Rule]", "\<\"10:00am-10:50am\"\>"}], ",", 
     RowBox[{"\<\"AgeAI\"\>", "\[Rule]", "\<\"4-6\"\>"}], ",", 
     RowBox[{"\<\"GradeAI\"\>", "\[Rule]", "\<\"\"\>"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.924389510282461*^9, {3.924389548614943*^9, 3.924389594200467*^9}, 
   3.92438984638058*^9},
 CellLabel->
  "Out[173]=",ExpressionUUID->"5c5860cd-edd4-4bcf-b8eb-7ce4c30b1837"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"progsJoined", "[", 
  RowBox[{"GroupBy", "[", "\"\<NameAI\>\"", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.9243895991498747`*^9, 3.9243896427556*^9}},
 CellLabel->
  "In[172]:=",ExpressionUUID->"1117c38f-9be7-4742-a70d-c9ad342b73bf"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "BBall 101" -> {<|
         "ID" -> 6308, "Name" -> 
          "[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)", "Flags" -> "", 
          "Time of dayTime of day" -> "09:00am", 
          "Day of the WeekDay of the Week" -> "Sa", 
          "Size / CapacitySize / Capacity" -> "19            of 20", 
          "Age Restrictions" -> "3y 10m - 7y 3m", "Age Group" -> "U-7", 
          "Wait" -> 0, "Start Date" -> "Sat 03/30/2024", "Season" -> 
          "24-SP Basketball Classes (Pre K - 6th)", "Level" -> 
          "101 Intro to Bball", "Time of Year" -> "Spring", "NameAI" -> 
          "BBall 101", "DayAI" -> "Saturday", "TimeAI" -> "9:00am-9:50am", 
          "AgeAI" -> "4-6", "GradeAI" -> ""|>, <|
         "ID" -> 6309, "Name" -> 
          "[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)", "Flags" -> 
          "Full", "Time of dayTime of day" -> "10:00am", 
          "Day of the WeekDay of the Week" -> "S", 
          "Size / CapacitySize / Capacity" -> "20            of 20", 
          "Age Restrictions" -> "3y 10m - 7y 3m", "Age Group" -> "U-7", 
          "Wait" -> 2, "Start Date" -> "Sun 03/31/2024", "Season" -> 
          "24-SP Basketball Classes (Pre K - 6th)", "Level" -> 
          "101 Intro to Bball", "Time of Year" -> "Spring", "NameAI" -> 
          "BBall 101", "DayAI" -> "Sunday", "TimeAI" -> "10:00am-10:50am", 
          "AgeAI" -> "4-6", "GradeAI" -> ""|>}|>, "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, All, 
          TypeSystem`PackageScope`KeyDummy[3]} -> 1, {All, All, "ID"} -> 
        1, {All, All, "Name"} -> 1, {All, All, "Flags"} -> 
        1, {All, All, "Time of dayTime of day"} -> 
        1, {All, All, "Day of the WeekDay of the Week"} -> 
        1, {All, All, "Size / CapacitySize / Capacity"} -> 
        1, {All, All, "Age Restrictions"} -> 1, {All, All, "Age Group"} -> 
        1, {All, All, "Wait"} -> 1, {All, All, "Start Date"} -> 
        1, {All, All, "Season"} -> 1, {All, All, "Level"} -> 
        1, {All, All, "Time of Year"} -> 1, {All, All, "NameAI"} -> 
        1, {All, All, "DayAI"} -> 1, {All, All, "TimeAI"} -> 
        1, {All, All, "AgeAI"} -> 1, {All, All, "GradeAI"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[100.80000000000001`], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`Limited[
             
             TypeSystem`PackageScope`RowShape[<|
              "ID" -> TypeSystem`PackageScope`AtomShape[34], "Name" -> 
               TypeSystem`PackageScope`AtomShape[526.4000000000001], "Flags" -> 
               TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
               "Time of dayTime of day" -> 
               TypeSystem`PackageScope`AtomShape[78.4], 
               "Day of the WeekDay of the Week" -> 
               TypeSystem`PackageScope`AtomShape[33.6], 
               "Size / CapacitySize / Capacity" -> 
               TypeSystem`PackageScope`AtomShape[212.8], "Age Restrictions" -> 
               TypeSystem`PackageScope`AtomShape[156.8], "Age Group" -> 
               TypeSystem`PackageScope`AtomShape[33.6], "Wait" -> 
               TypeSystem`PackageScope`AtomShape[34], "Start Date" -> 
               TypeSystem`PackageScope`AtomShape[156.8], "Season" -> 
               TypeSystem`PackageScope`AtomShape[425.6], "Level" -> 
               TypeSystem`PackageScope`AtomShape[201.60000000000002`], 
               "Time of Year" -> TypeSystem`PackageScope`AtomShape[67.2], 
               "NameAI" -> 
               TypeSystem`PackageScope`AtomShape[100.80000000000001`], 
               "DayAI" -> 
               TypeSystem`PackageScope`AtomShape[89.60000000000001], "TimeAI" -> 
               TypeSystem`PackageScope`AtomShape[168.00000000000003`], 
               "AgeAI" -> TypeSystem`PackageScope`AtomShape[33.6], "GradeAI" -> 
               TypeSystem`PackageScope`AtomShape[33.6]|>], 
             DirectedInfinity[1], 10, {All, All}]], 2, 
           DirectedInfinity[1], {All}]]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Vector[
        TypeSystem`Struct[{
         "ID", "Name", "Flags", "Time of dayTime of day", 
          "Day of the WeekDay of the Week", "Size / CapacitySize / Capacity", 
          "Age Restrictions", "Age Group", "Wait", "Start Date", "Season", 
          "Level", "Time of Year", "NameAI", "DayAI", "TimeAI", "AgeAI", 
          "GradeAI"}, {
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String]}], 2], 1], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, All, 
          TypeSystem`PackageScope`KeyDummy[3]} -> 1, {All, All, "ID"} -> 
        1, {All, All, "Name"} -> 1, {All, All, "Flags"} -> 
        1, {All, All, "Time of dayTime of day"} -> 
        1, {All, All, "Day of the WeekDay of the Week"} -> 
        1, {All, All, "Size / CapacitySize / Capacity"} -> 
        1, {All, All, "Age Restrictions"} -> 1, {All, All, "Age Group"} -> 
        1, {All, All, "Wait"} -> 1, {All, All, "Start Date"} -> 
        1, {All, All, "Season"} -> 1, {All, All, "Level"} -> 
        1, {All, All, "Time of Year"} -> 1, {All, All, "NameAI"} -> 
        1, {All, All, "DayAI"} -> 1, {All, All, "TimeAI"} -> 
        1, {All, All, "AgeAI"} -> 1, {All, All, "GradeAI"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[100.80000000000001`], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`ColumnShape[
            TypeSystem`PackageScope`Limited[
             
             TypeSystem`PackageScope`RowShape[<|
              "ID" -> TypeSystem`PackageScope`AtomShape[34], "Name" -> 
               TypeSystem`PackageScope`AtomShape[526.4000000000001], "Flags" -> 
               TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
               "Time of dayTime of day" -> 
               TypeSystem`PackageScope`AtomShape[78.4], 
               "Day of the WeekDay of the Week" -> 
               TypeSystem`PackageScope`AtomShape[33.6], 
               "Size / CapacitySize / Capacity" -> 
               TypeSystem`PackageScope`AtomShape[212.8], "Age Restrictions" -> 
               TypeSystem`PackageScope`AtomShape[156.8], "Age Group" -> 
               TypeSystem`PackageScope`AtomShape[33.6], "Wait" -> 
               TypeSystem`PackageScope`AtomShape[34], "Start Date" -> 
               TypeSystem`PackageScope`AtomShape[156.8], "Season" -> 
               TypeSystem`PackageScope`AtomShape[425.6], "Level" -> 
               TypeSystem`PackageScope`AtomShape[201.60000000000002`], 
               "Time of Year" -> TypeSystem`PackageScope`AtomShape[67.2], 
               "NameAI" -> 
               TypeSystem`PackageScope`AtomShape[100.80000000000001`], 
               "DayAI" -> 
               TypeSystem`PackageScope`AtomShape[89.60000000000001], "TimeAI" -> 
               TypeSystem`PackageScope`AtomShape[168.00000000000003`], 
               "AgeAI" -> TypeSystem`PackageScope`AtomShape[33.6], "GradeAI" -> 
               TypeSystem`PackageScope`AtomShape[33.6]|>], 
             DirectedInfinity[1], 10, {All, All}]], 2, 
           DirectedInfinity[1], {All}]]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Vector[
        TypeSystem`Struct[{
         "ID", "Name", "Flags", "Time of dayTime of day", 
          "Day of the WeekDay of the Week", "Size / CapacitySize / Capacity", 
          "Age Restrictions", "Age Group", "Wait", "Start Date", "Season", 
          "Level", "Time of Year", "NameAI", "DayAI", "TimeAI", "AgeAI", 
          "GradeAI"}, {
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String], 
          TypeSystem`Atom[String]}], 2], 1], "Path" -> {}, 
     "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 10, "DataRowCount" -> 
     1, "DataColumnCount" -> 18, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ID", 
                  Style[
                  "ID", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, "ID"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, "ID"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, "Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, "Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Flags", 
                  Style[
                  "Flags", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, "Flags"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, "Flags"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Time of dayTime of day", 
                  Style[
                  "Time of dayTime of day", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, "Time of dayTime of day"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, "Time of dayTime of day"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Day of the WeekDay of the Week", 
                  Style[
                  "Day of the WeekDay of the Week", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, "Day of the WeekDay of the Week"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, "Day of the WeekDay of the Week"}, "ColumnHeader", 
                True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Size / CapacitySize / Capacity", 
                  Style[
                  "Size / CapacitySize / Capacity", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, "Size / CapacitySize / Capacity"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, "Size / CapacitySize / Capacity"}, "ColumnHeader", 
                True], "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Age Restrictions", 
                  Style[
                  "Age Restrictions", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, "Age Restrictions"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, "Age Restrictions"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Age Group", 
                  Style[
                  "Age Group", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, "Age Group"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, "Age Group"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Wait", 
                  Style[
                  "Wait", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, "Wait"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, "Wait"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Start Date", 
                  Style[
                  "Start Date", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, All, "Start Date"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, All, "Start Date"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["BBall 101", 
                  Style[
                  "BBall 101", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["BBall 101"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{100.80000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6308"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 1, 
                 Key["ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 1, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{526.4000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 1, 
                 Key["Flags"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["09:00am", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 1, 
                 Key["Time of dayTime of day"]}, "Item", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Sa", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 1, 
                 Key["Day of the WeekDay of the Week"]}, "Item", False], 
               "Mouse"], ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["19            of 20", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 1, 
                 Key["Size / CapacitySize / Capacity"]}, "Item", False], 
               "Mouse"], ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["3y 10m - 7y 3m", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 1, 
                 Key["Age Restrictions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["U-7", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 1, 
                 Key["Age Group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 1, 
                 Key["Wait"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Sat 03/30/2024", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 1, 
                 Key["Start Date"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               RawBoxes["6309"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 2, 
                 Key["ID"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 2, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{526.4000000000001, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Full", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 2, 
                 Key["Flags"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["10:00am", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 2, 
                 Key["Time of dayTime of day"]}, "Item", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["S", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 2, 
                 Key["Day of the WeekDay of the Week"]}, "Item", False], 
               "Mouse"], ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["20            of 20", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 2, 
                 Key["Size / CapacitySize / Capacity"]}, "Item", False], 
               "Mouse"], ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["3y 10m - 7y 3m", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 2, 
                 Key["Age Restrictions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["U-7", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 2, 
                 Key["Age Group"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 2, 
                 Key["Wait"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Sun 03/31/2024", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["BBall 101"], 2, 
                 Key["Start Date"]}, "Item", False], "Mouse"], 
              ImageSize -> {{156.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 90 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[True, 18, 1], {1, 18 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 90 Degree, {9,
                     9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + (-10) 
                    If[False, 18, 1], {1, 18 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[18, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"columns ", 1, "\[Dash]", 10, " of ", 
                    Style[18, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 2 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 2, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 5 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 5, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Columns", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Columns", 100000000, {}]], MenuEvaluator -> Automatic]}],
                     " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], (-90) 
                    Degree, {9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[False, 18, 1], {1, 18 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{2, 0}, {16, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], (-90) Degree, {9, 
                    9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$hPos$$ + 
                    10 If[True, 18, 1], {1, 18 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{2039., {102.2010498046875, 110.7989501953125}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{2039., {102.2010498046875, 110.7989501953125}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.924389607639393*^9, 3.924389643126937*^9}},
 CellLabel->
  "Out[172]=",ExpressionUUID->"07f8df5b-bb4e-4f3f-a089-743abce53ce1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"grouped", " ", "=", " ", 
  RowBox[{"GroupBy", "[", 
   RowBox[{"progsJoined", ",", " ", 
    RowBox[{
     RowBox[{"#", "[", "\"\<NameAI\>\"", "]"}], "&"}]}], "]"}]}]], "Code",
 CellChangeTimes->{{3.924389944981896*^9, 3.924389996287677*^9}, {
  3.924390078213407*^9, 3.924390079629726*^9}},
 CellLabel->
  "In[180]:=",ExpressionUUID->"e643c696-897f-4868-aef0-a9f07c5b26f4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"BBall 101\"\>", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"ID\"\>", "\[Rule]", "6308"}], ",", 
       RowBox[{"\<\"Name\"\>", 
        "\[Rule]", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>"}], 
       ",", 
       RowBox[{"\<\"Flags\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
       RowBox[{"\<\"Time of dayTime of day\"\>", 
        "\[Rule]", "\<\"09:00am\"\>"}], ",", 
       RowBox[{"\<\"Day of the WeekDay of the Week\"\>", 
        "\[Rule]", "\<\"Sa\"\>"}], ",", 
       RowBox[{"\<\"Size / CapacitySize / Capacity\"\>", 
        "\[Rule]", "\<\"19            of 20\"\>"}], ",", 
       RowBox[{"\<\"Age Restrictions\"\>", 
        "\[Rule]", "\<\"3y 10m - 7y 3m\"\>"}], ",", 
       RowBox[{"\<\"Age Group\"\>", "\[Rule]", "\<\"U-7\"\>"}], ",", 
       RowBox[{"\<\"Wait\"\>", "\[Rule]", "0"}], ",", 
       RowBox[{"\<\"Start Date\"\>", "\[Rule]", "\<\"Sat 03/30/2024\"\>"}], 
       ",", 
       RowBox[{"\<\"Season\"\>", 
        "\[Rule]", "\<\"24-SP Basketball Classes (Pre K - 6th)\"\>"}], ",", 
       RowBox[{"\<\"Level\"\>", "\[Rule]", "\<\"101 Intro to Bball\"\>"}], 
       ",", 
       RowBox[{"\<\"Time of Year\"\>", "\[Rule]", "\<\"Spring\"\>"}], ",", 
       RowBox[{"\<\"NameAI\"\>", "\[Rule]", "\<\"BBall 101\"\>"}], ",", 
       RowBox[{"\<\"DayAI\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
       RowBox[{"\<\"TimeAI\"\>", "\[Rule]", "\<\"9:00am-9:50am\"\>"}], ",", 
       RowBox[{"\<\"AgeAI\"\>", "\[Rule]", "\<\"4-6\"\>"}], ",", 
       RowBox[{"\<\"GradeAI\"\>", "\[Rule]", "\<\"\"\>"}]}], 
      "\[RightAssociation]"}], ",", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"ID\"\>", "\[Rule]", "6309"}], ",", 
       RowBox[{"\<\"Name\"\>", 
        "\[Rule]", "\<\"[BBall 101] Sunday 10:00am - 10:50am (Ages \
4-6)\"\>"}], ",", 
       RowBox[{"\<\"Flags\"\>", "\[Rule]", "\<\"Full\"\>"}], ",", 
       RowBox[{"\<\"Time of dayTime of day\"\>", 
        "\[Rule]", "\<\"10:00am\"\>"}], ",", 
       RowBox[{"\<\"Day of the WeekDay of the Week\"\>", 
        "\[Rule]", "\<\"S\"\>"}], ",", 
       RowBox[{"\<\"Size / CapacitySize / Capacity\"\>", 
        "\[Rule]", "\<\"20            of 20\"\>"}], ",", 
       RowBox[{"\<\"Age Restrictions\"\>", 
        "\[Rule]", "\<\"3y 10m - 7y 3m\"\>"}], ",", 
       RowBox[{"\<\"Age Group\"\>", "\[Rule]", "\<\"U-7\"\>"}], ",", 
       RowBox[{"\<\"Wait\"\>", "\[Rule]", "2"}], ",", 
       RowBox[{"\<\"Start Date\"\>", "\[Rule]", "\<\"Sun 03/31/2024\"\>"}], 
       ",", 
       RowBox[{"\<\"Season\"\>", 
        "\[Rule]", "\<\"24-SP Basketball Classes (Pre K - 6th)\"\>"}], ",", 
       RowBox[{"\<\"Level\"\>", "\[Rule]", "\<\"101 Intro to Bball\"\>"}], 
       ",", 
       RowBox[{"\<\"Time of Year\"\>", "\[Rule]", "\<\"Spring\"\>"}], ",", 
       RowBox[{"\<\"NameAI\"\>", "\[Rule]", "\<\"BBall 101\"\>"}], ",", 
       RowBox[{"\<\"DayAI\"\>", "\[Rule]", "\<\"Sunday\"\>"}], ",", 
       RowBox[{"\<\"TimeAI\"\>", "\[Rule]", "\<\"10:00am-10:50am\"\>"}], ",", 
       
       RowBox[{"\<\"AgeAI\"\>", "\[Rule]", "\<\"4-6\"\>"}], ",", 
       RowBox[{"\<\"GradeAI\"\>", "\[Rule]", "\<\"\"\>"}]}], 
      "\[RightAssociation]"}]}], "}"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.92438997794129*^9, 3.92438999688323*^9}, 
   3.924390079962076*^9, 3.9243901113373137`*^9},
 CellLabel->
  "Out[180]=",ExpressionUUID->"723d6b22-42ee-4c21-98d1-6032ccc6cf6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"grouped", "[", "\"\<BBall 101\>\"", "]"}]], "Code",
 CellChangeTimes->{{3.9243901269267273`*^9, 3.924390134624526*^9}},
 CellLabel->
  "In[182]:=",ExpressionUUID->"22b0dd33-a872-4ec7-b4b8-5333818041a9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"ID\"\>", "\[Rule]", "6308"}], ",", 
     RowBox[{"\<\"Name\"\>", 
      "\[Rule]", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>"}], 
     ",", 
     RowBox[{"\<\"Flags\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
     RowBox[{"\<\"Time of dayTime of day\"\>", "\[Rule]", "\<\"09:00am\"\>"}],
      ",", 
     RowBox[{"\<\"Day of the WeekDay of the Week\"\>", 
      "\[Rule]", "\<\"Sa\"\>"}], ",", 
     RowBox[{"\<\"Size / CapacitySize / Capacity\"\>", 
      "\[Rule]", "\<\"19            of 20\"\>"}], ",", 
     RowBox[{"\<\"Age Restrictions\"\>", 
      "\[Rule]", "\<\"3y 10m - 7y 3m\"\>"}], ",", 
     RowBox[{"\<\"Age Group\"\>", "\[Rule]", "\<\"U-7\"\>"}], ",", 
     RowBox[{"\<\"Wait\"\>", "\[Rule]", "0"}], ",", 
     RowBox[{"\<\"Start Date\"\>", "\[Rule]", "\<\"Sat 03/30/2024\"\>"}], ",", 
     RowBox[{"\<\"Season\"\>", 
      "\[Rule]", "\<\"24-SP Basketball Classes (Pre K - 6th)\"\>"}], ",", 
     RowBox[{"\<\"Level\"\>", "\[Rule]", "\<\"101 Intro to Bball\"\>"}], ",", 
     
     RowBox[{"\<\"Time of Year\"\>", "\[Rule]", "\<\"Spring\"\>"}], ",", 
     RowBox[{"\<\"NameAI\"\>", "\[Rule]", "\<\"BBall 101\"\>"}], ",", 
     RowBox[{"\<\"DayAI\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
     RowBox[{"\<\"TimeAI\"\>", "\[Rule]", "\<\"9:00am-9:50am\"\>"}], ",", 
     RowBox[{"\<\"AgeAI\"\>", "\[Rule]", "\<\"4-6\"\>"}], ",", 
     RowBox[{"\<\"GradeAI\"\>", "\[Rule]", "\<\"\"\>"}]}], 
    "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"ID\"\>", "\[Rule]", "6309"}], ",", 
     RowBox[{"\<\"Name\"\>", 
      "\[Rule]", "\<\"[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)\"\>"}], 
     ",", 
     RowBox[{"\<\"Flags\"\>", "\[Rule]", "\<\"Full\"\>"}], ",", 
     RowBox[{"\<\"Time of dayTime of day\"\>", "\[Rule]", "\<\"10:00am\"\>"}],
      ",", 
     RowBox[{"\<\"Day of the WeekDay of the Week\"\>", 
      "\[Rule]", "\<\"S\"\>"}], ",", 
     RowBox[{"\<\"Size / CapacitySize / Capacity\"\>", 
      "\[Rule]", "\<\"20            of 20\"\>"}], ",", 
     RowBox[{"\<\"Age Restrictions\"\>", 
      "\[Rule]", "\<\"3y 10m - 7y 3m\"\>"}], ",", 
     RowBox[{"\<\"Age Group\"\>", "\[Rule]", "\<\"U-7\"\>"}], ",", 
     RowBox[{"\<\"Wait\"\>", "\[Rule]", "2"}], ",", 
     RowBox[{"\<\"Start Date\"\>", "\[Rule]", "\<\"Sun 03/31/2024\"\>"}], ",", 
     RowBox[{"\<\"Season\"\>", 
      "\[Rule]", "\<\"24-SP Basketball Classes (Pre K - 6th)\"\>"}], ",", 
     RowBox[{"\<\"Level\"\>", "\[Rule]", "\<\"101 Intro to Bball\"\>"}], ",", 
     
     RowBox[{"\<\"Time of Year\"\>", "\[Rule]", "\<\"Spring\"\>"}], ",", 
     RowBox[{"\<\"NameAI\"\>", "\[Rule]", "\<\"BBall 101\"\>"}], ",", 
     RowBox[{"\<\"DayAI\"\>", "\[Rule]", "\<\"Sunday\"\>"}], ",", 
     RowBox[{"\<\"TimeAI\"\>", "\[Rule]", "\<\"10:00am-10:50am\"\>"}], ",", 
     RowBox[{"\<\"AgeAI\"\>", "\[Rule]", "\<\"4-6\"\>"}], ",", 
     RowBox[{"\<\"GradeAI\"\>", "\[Rule]", "\<\"\"\>"}]}], 
    "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.92439013553732*^9},
 CellLabel->
  "Out[182]=",ExpressionUUID->"93744bb8-d097-43e3-951c-0258353c51d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"merged", " ", "=", " ", 
  RowBox[{"Merge", "[", 
   RowBox[{
    RowBox[{"grouped", "[", "\"\<BBall 101\>\"", "]"}], ",", " ", "Union"}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.9243900816331797`*^9, 3.924390107913265*^9}, {
  3.924390149946457*^9, 3.9243901751201363`*^9}, {3.924390293094842*^9, 
  3.924390293791771*^9}, {3.92439059923484*^9, 3.924390600384178*^9}},
 CellLabel->
  "In[188]:=",ExpressionUUID->"908fff0c-0a86-433d-b66d-d721cc965705"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"ID\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"6308", ",", "6309"}], "}"}]}], ",", 
   RowBox[{"\<\"Name\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", 
      ",", "\<\"[BBall 101] Sunday 10:00am - 10:50am (Ages 4-6)\"\>"}], 
     "}"}]}], ",", 
   RowBox[{"\<\"Flags\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"\"\>", ",", "\<\"Full\"\>"}], "}"}]}], ",", 
   RowBox[{"\<\"Time of dayTime of day\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"09:00am\"\>", ",", "\<\"10:00am\"\>"}], "}"}]}], ",", 
   RowBox[{"\<\"Day of the WeekDay of the Week\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"S\"\>", ",", "\<\"Sa\"\>"}], "}"}]}], ",", 
   RowBox[{"\<\"Size / CapacitySize / Capacity\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"19            of 20\"\>", 
      ",", "\<\"20            of 20\"\>"}], "}"}]}], ",", 
   RowBox[{"\<\"Age Restrictions\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"3y 10m - 7y 3m\"\>", "}"}]}], ",", 
   RowBox[{"\<\"Age Group\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"U-7\"\>", "}"}]}], ",", 
   RowBox[{"\<\"Wait\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2"}], "}"}]}], ",", 
   RowBox[{"\<\"Start Date\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"Sat 03/30/2024\"\>", ",", "\<\"Sun 03/31/2024\"\>"}], 
     "}"}]}], ",", 
   RowBox[{"\<\"Season\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"24-SP Basketball Classes (Pre K - 6th)\"\>", "}"}]}], 
   ",", 
   RowBox[{"\<\"Level\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"101 Intro to Bball\"\>", "}"}]}], ",", 
   RowBox[{"\<\"Time of Year\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"Spring\"\>", "}"}]}], ",", 
   RowBox[{"\<\"NameAI\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"BBall 101\"\>", "}"}]}], ",", 
   RowBox[{"\<\"DayAI\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"Saturday\"\>", ",", "\<\"Sunday\"\>"}], "}"}]}], ",", 
   RowBox[{"\<\"TimeAI\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"10:00am-10:50am\"\>", ",", "\<\"9:00am-9:50am\"\>"}], 
     "}"}]}], ",", 
   RowBox[{"\<\"AgeAI\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"4-6\"\>", "}"}]}], ",", 
   RowBox[{"\<\"GradeAI\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"\"\>", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.9243900879223833`*^9, 3.924390113384015*^9}, {
   3.924390151420182*^9, 3.92439017067295*^9}, 3.924390294270887*^9, 
   3.924390600815773*^9},
 CellLabel->
  "Out[188]=",ExpressionUUID->"14ab286e-3aa5-44ec-8218-18e1f62b406a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"use", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
   "\"\<NameAI\>\"", ",", " ", "\"\<DayAI\>\"", ",", " ", "\"\<TimeAI\>\"", 
    ",", " ", "\"\<AgeAI\>\"", ",", " ", "\"\<GradeAI\>\"", ",", " ", 
    "\"\<Start Date\>\""}], "}"}]}]], "Input",
 CellChangeTimes->{{3.9244661592026854`*^9, 3.924466224318677*^9}, {
  3.92446626646423*^9, 3.924466285341696*^9}},
 CellLabel->
  "In[198]:=",ExpressionUUID->"cc6298a9-3e1d-4812-ad1a-4ecab3681f12"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"NameAI\"\>", ",", "\<\"DayAI\"\>", ",", "\<\"TimeAI\"\>", 
   ",", "\<\"AgeAI\"\>", ",", "\<\"GradeAI\"\>", ",", "\<\"Start Date\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.924466177670409*^9, {3.924466271295417*^9, 3.924466285809917*^9}},
 CellLabel->
  "Out[198]=",ExpressionUUID->"80bb526f-414f-41a6-ab63-178f96d4abeb"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"mergedUse", " ", "=", " ", 
  RowBox[{"KeyMap", "[", 
   RowBox[{"merged", ",", " ", 
    RowBox[{"MemberQ", "[", 
     RowBox[{"#", ",", " ", "merged"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9244662882875137`*^9, 3.924466352324494*^9}, {
  3.9244663863872137`*^9, 
  3.924466409365321*^9}},ExpressionUUID->"7e23d728-c070-415e-b89b-\
0dfb5e43bb8c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mergedSingle", " ", "=", " ", 
  RowBox[{"Select", "[", 
   RowBox[{"merged", ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "#", "]"}], "==", "1"}], "&"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.9244660664719467`*^9, 3.924466148808899*^9}},
 CellLabel->
  "In[195]:=",ExpressionUUID->"98215f49-b7b4-4b62-b4d0-9c329cdec580"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Age Restrictions\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"3y 10m - 7y 3m\"\>", "}"}]}], ",", 
   RowBox[{"\<\"Age Group\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"U-7\"\>", "}"}]}], ",", 
   RowBox[{"\<\"Season\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"24-SP Basketball Classes (Pre K - 6th)\"\>", "}"}]}], 
   ",", 
   RowBox[{"\<\"Level\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"101 Intro to Bball\"\>", "}"}]}], ",", 
   RowBox[{"\<\"Time of Year\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"Spring\"\>", "}"}]}], ",", 
   RowBox[{"\<\"NameAI\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"BBall 101\"\>", "}"}]}], ",", 
   RowBox[{"\<\"AgeAI\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"4-6\"\>", "}"}]}], ",", 
   RowBox[{"\<\"GradeAI\"\>", "\[Rule]", 
    RowBox[{"{", "\<\"\"\>", "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.9244661501086683`*^9},
 CellLabel->
  "Out[195]=",ExpressionUUID->"e9b2793d-2e99-4b19-8d3e-94542b8813a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mergedStrings", " ", "=", "  ", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"StringRiffle", "[", 
      RowBox[{"#", ",", " ", "\"\<, \>\""}], "]"}], "&"}], ",", " ", 
    "merged"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.9243905633276987`*^9, 3.924390660999652*^9}},
 CellLabel->
  "In[191]:=",ExpressionUUID->"fc3e0402-01b7-423c-90bf-4aaf158a8a0e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"ID\"\>", "\[Rule]", "\<\"6308, 6309\"\>"}], ",", 
   RowBox[{"\<\"Name\"\>", 
    "\[Rule]", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6), [BBall \
101] Sunday 10:00am - 10:50am (Ages 4-6)\"\>"}], ",", 
   RowBox[{"\<\"Flags\"\>", "\[Rule]", "\<\", Full\"\>"}], ",", 
   RowBox[{"\<\"Time of dayTime of day\"\>", 
    "\[Rule]", "\<\"09:00am, 10:00am\"\>"}], ",", 
   RowBox[{"\<\"Day of the WeekDay of the Week\"\>", 
    "\[Rule]", "\<\"S, Sa\"\>"}], ",", 
   RowBox[{"\<\"Size / CapacitySize / Capacity\"\>", 
    "\[Rule]", "\<\"19            of 20, 20            of 20\"\>"}], ",", 
   RowBox[{"\<\"Age Restrictions\"\>", "\[Rule]", "\<\"3y 10m - 7y 3m\"\>"}], 
   ",", 
   RowBox[{"\<\"Age Group\"\>", "\[Rule]", "\<\"U-7\"\>"}], ",", 
   RowBox[{"\<\"Wait\"\>", "\[Rule]", "\<\"0, 2\"\>"}], ",", 
   RowBox[{"\<\"Start Date\"\>", 
    "\[Rule]", "\<\"Sat 03/30/2024, Sun 03/31/2024\"\>"}], ",", 
   RowBox[{"\<\"Season\"\>", 
    "\[Rule]", "\<\"24-SP Basketball Classes (Pre K - 6th)\"\>"}], ",", 
   RowBox[{"\<\"Level\"\>", "\[Rule]", "\<\"101 Intro to Bball\"\>"}], ",", 
   RowBox[{"\<\"Time of Year\"\>", "\[Rule]", "\<\"Spring\"\>"}], ",", 
   RowBox[{"\<\"NameAI\"\>", "\[Rule]", "\<\"BBall 101\"\>"}], ",", 
   RowBox[{"\<\"DayAI\"\>", "\[Rule]", "\<\"Saturday, Sunday\"\>"}], ",", 
   RowBox[{"\<\"TimeAI\"\>", 
    "\[Rule]", "\<\"10:00am-10:50am, 9:00am-9:50am\"\>"}], ",", 
   RowBox[{"\<\"AgeAI\"\>", "\[Rule]", "\<\"4-6\"\>"}], ",", 
   RowBox[{"\<\"GradeAI\"\>", "\[Rule]", "\<\"\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.924390578777131*^9, 3.924390594399809*^9}, {
  3.924390629498176*^9, 3.924390661521308*^9}},
 CellLabel->
  "Out[191]=",ExpressionUUID->"5632df8f-6757-4c55-8463-812510c997c9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"valToString", "[", "val_", "]"}], ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{"Length", "[", "val", "]"}], "]"}]}]], "Code",
 CellChangeTimes->{{3.924390531421826*^9, 
  3.924390550527437*^9}},ExpressionUUID->"c38a07ee-fbb6-49e2-9e9a-\
6449299a4c68"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"htmlTemp", " ", "=", " ", 
  RowBox[{
  "StringTemplate", "[", "\n", 
   "\"\<\n<b>`NameAI`</b><br>\n<l>Days: `DayAI`</l><br>\n<l>Times: \
`TimeAI`</l><br>\n<l>Ages: `AgeAI`</l>\n\>\"", "\n", "]"}]}]], "Code",
 CellChangeTimes->{{3.924390355758569*^9, 3.924390367795944*^9}, 
   3.9243903995030203`*^9, {3.924390701818697*^9, 3.9243908103395853`*^9}},
 CellLabel->
  "In[192]:=",ExpressionUUID->"49768024-6167-4277-8f39-68af08f72552"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["TemplateObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], "", 
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    StyleBox[
                    "\"AgeAI\"", ShowStringCharacters -> True, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"DayAI\"", ShowStringCharacters -> True, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"NameAI\"", ShowStringCharacters -> True, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"TimeAI\"", ShowStringCharacters -> True, StripOnInput -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], "", 
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    StyleBox[
                    "\"AgeAI\"", ShowStringCharacters -> True, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"DayAI\"", ShowStringCharacters -> True, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"NameAI\"", ShowStringCharacters -> True, StripOnInput -> 
                    False], 
                    StyleBox[
                    "\"TimeAI\"", ShowStringCharacters -> True, StripOnInput -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"CombinerFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["StringJoin", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"InsertionFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["TextString", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Content: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"\\n<b>\"", 
                    
                    TemplateBox[{"\"NameAI\""}, "TemplateSlot", 
                    DisplayFunction -> (
                    FrameBox[#, Background -> RGBColor[0.945, 0.992, 1.], 
                    BaselinePosition -> Baseline, 
                    BaseStyle -> {ShowStringCharacters -> True}, 
                    FrameMargins -> {{2, 2}, {0, 0}}, FrameStyle -> 
                    RGBColor[0.698, 0.898, 0.9255], RoundingRadius -> 3]& ), 
                    Tooltip -> Automatic], "\"</b><br>\\n<l>Days: \"", 
                    TemplateBox[{"\"DayAI\""}, "TemplateSlot", 
                    DisplayFunction -> (
                    FrameBox[#, Background -> RGBColor[0.945, 0.992, 1.], 
                    BaselinePosition -> Baseline, 
                    BaseStyle -> {ShowStringCharacters -> True}, 
                    FrameMargins -> {{2, 2}, {0, 0}}, FrameStyle -> 
                    RGBColor[0.698, 0.898, 0.9255], RoundingRadius -> 3]& ), 
                    Tooltip -> Automatic], "\"</l><br>\\n<l>Times: \"", 
                    
                    TemplateBox[{"\"TimeAI\""}, "TemplateSlot", 
                    DisplayFunction -> (
                    FrameBox[#, Background -> RGBColor[0.945, 0.992, 1.], 
                    BaselinePosition -> Baseline, 
                    BaseStyle -> {ShowStringCharacters -> True}, 
                    FrameMargins -> {{2, 2}, {0, 0}}, FrameStyle -> 
                    RGBColor[0.698, 0.898, 0.9255], RoundingRadius -> 3]& ), 
                    Tooltip -> Automatic], "\"</l><br>\\n<l>Ages: \"", 
                    
                    TemplateBox[{"\"AgeAI\""}, "TemplateSlot", 
                    DisplayFunction -> (
                    FrameBox[#, Background -> RGBColor[0.945, 0.992, 1.], 
                    BaselinePosition -> Baseline, 
                    BaseStyle -> {ShowStringCharacters -> True}, 
                    FrameMargins -> {{2, 2}, {0, 0}}, FrameStyle -> 
                    RGBColor[0.698, 0.898, 0.9255], RoundingRadius -> 3]& ), 
                    Tooltip -> Automatic], "\"</l>\\n\""}, "RowDefault"], 
                   Deploy, DefaultBaseStyle -> "Deploy"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  TemplateObject[{"\n<b>", 
    TemplateSlot["NameAI"], "</b><br>\n<l>Days: ", 
    TemplateSlot["DayAI"], "</l><br>\n<l>Times: ", 
    TemplateSlot["TimeAI"], "</l><br>\n<l>Ages: ", 
    TemplateSlot["AgeAI"], "</l>\n"}, CombinerFunction -> StringJoin, 
   InsertionFunction -> TextString, MetaInformation -> <||>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.924390836261628*^9},
 CellLabel->
  "Out[192]=",ExpressionUUID->"6386e7f6-981d-4b16-954c-acf0db0117c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EmbeddedHTML", "[", 
  RowBox[{"htmlTemp", "[", "mergedStrings", "]"}], "]"}]], "Code",
 CellChangeTimes->{{3.9243908432553883`*^9, 3.924390861844078*^9}},
 CellLabel->
  "In[193]:=",ExpressionUUID->"ad2c5efd-489c-4102-9a91-1e9ce6439b6f"],

Cell[BoxData[
 TemplateBox[{
   InterpretationBox[Null, 
    EmbeddedHTML[
    "\n<b>BBall 101</b><br>\n<l>Days: Saturday, Sunday</l><br>\n<l>Times: \
10:00am-10:50am, 9:00am-9:50am</l><br>\n<l>Ages: 4-6</l>\n"]], 
   TagBox[
    RowBox[{
     "\"\\n<b>BBall 101</b><br>\\n<l>Days: Saturday, Sunday<\"", 
      "\[Ellipsis]", 
      "\"10:50am, 9:00am-9:50am</l><br>\\n<l>Ages: 4-6</l>\\n\""}], Short], 
   Defer["\n<b>BBall 101</b><br>\n<l>Days: Saturday, Sunday</l><br>\n\
<l>Times: 10:00am-10:50am, 9:00am-9:50am</l><br>\n<l>Ages: 4-6</l>\n"], {
   "DataForm" -> "HTML"}},
  "EmbeddedHTML"]], "Output",
 CellChangeTimes->{3.9243908630326557`*^9},
 CellLabel->
  "Out[193]=",ExpressionUUID->"6d5fa3f1-a378-40d3-9ab6-ba20f8d2e836"]
}, Open  ]]
},
WindowSize->{808, 911},
WindowMargins->{{457, Automatic}, {Automatic, -140}},
Magnification->1.5,
FrontEndVersion->"14.0 for Mac OS X x86 (64-bit) (December 12, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"851b22dd-72a8-46aa-9c12-0d45c6833ac8"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 319, 7, 73, "Input",ExpressionUUID->"9daaf388-20a9-4412-ab7e-fca277835eb6"],
Cell[CellGroupData[{
Cell[902, 31, 310, 7, 78, "Code",ExpressionUUID->"c24eea7b-9f17-4ec9-8b2a-41e6ca3c81f0"],
Cell[1215, 40, 288, 6, 52, "Output",ExpressionUUID->"5ef5d298-2acb-4d77-bb03-f41d22cd34c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1540, 51, 684, 17, 195, "Code",ExpressionUUID->"191a676e-1724-490b-927b-bdc715a83fac"],
Cell[2227, 70, 602, 12, 115, "Output",ExpressionUUID->"19e199c8-adab-4b98-bc69-c351eda5ef50"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2866, 87, 382, 9, 78, "Code",ExpressionUUID->"d2a81355-d39b-4c8b-8ad8-6ffb52656589"],
Cell[3251, 98, 310, 7, 52, "Output",ExpressionUUID->"018e18b8-9ad3-4a1a-bebc-27c981f6c1e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3598, 110, 494, 12, 108, "Code",ExpressionUUID->"58990631-9817-4a22-99e3-18ddef709229"],
Cell[4095, 124, 7618, 154, 376, "Output",ExpressionUUID->"caa9ddbc-209c-450c-baae-b956515af176"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11750, 283, 279, 6, 78, "Code",ExpressionUUID->"e3461468-aab3-4642-b52a-698e1fcb67f6"],
Cell[12032, 291, 292, 6, 52, "Output",ExpressionUUID->"c0a189fa-1cf2-4e04-a9dc-56a7be986a58"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12361, 302, 451, 11, 78, "Code",ExpressionUUID->"d7e5f033-85a6-4679-a25e-b7b80a0b263d"],
Cell[12815, 315, 565, 14, 52, "Output",ExpressionUUID->"0e349774-2667-4935-bd82-b2757cdbab9f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13417, 334, 340, 9, 78, "Code",ExpressionUUID->"3c39d359-84e5-46c3-b44d-17222dffacaa"],
Cell[13760, 345, 298, 6, 52, "Output",ExpressionUUID->"a8ea4b26-87c2-474a-b531-a98bd96ff6b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14095, 356, 455, 11, 78, "Code",ExpressionUUID->"4c98818b-3acf-4ec9-81a8-a9f4823c56d4"],
Cell[14553, 369, 1019, 21, 84, "Output",ExpressionUUID->"ec68bf11-eb44-404b-9d57-b37594efe7eb"]
}, Open  ]],
Cell[15587, 393, 483, 12, 78, "Code",ExpressionUUID->"6cbfd403-6677-482a-b9eb-c745fa06626e"],
Cell[CellGroupData[{
Cell[16095, 409, 635, 16, 78, "Code",ExpressionUUID->"5511639e-5dd0-4717-b5f4-84a5ff41aafb"],
Cell[16733, 427, 105511, 1891, 589, "Output",ExpressionUUID->"9a03a735-ae1e-44b8-8e3f-7e2840494a82"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122281, 2323, 399, 9, 78, "Code",ExpressionUUID->"42291696-a3a0-4d81-b630-2acd5b38b700"],
Cell[122683, 2334, 3281, 65, 270, "Output",ExpressionUUID->"5c5860cd-edd4-4bcf-b8eb-7ce4c30b1837"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126001, 2404, 259, 5, 78, "Code",ExpressionUUID->"1117c38f-9be7-4742-a70d-c9ad342b73bf"],
Cell[126263, 2411, 74524, 1380, 241, "Output",ExpressionUUID->"07f8df5b-bb4e-4f3f-a089-743abce53ce1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[200824, 3796, 399, 9, 78, "Code",ExpressionUUID->"e643c696-897f-4868-aef0-a9f07c5b26f4"],
Cell[201226, 3807, 3521, 69, 301, "Output",ExpressionUUID->"723d6b22-42ee-4c21-98d1-6032ccc6cf6b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[204784, 3881, 226, 4, 78, "Code",ExpressionUUID->"22b0dd33-a872-4ec7-b4b8-5333818041a9"],
Cell[205013, 3887, 3206, 63, 270, "Output",ExpressionUUID->"93744bb8-d097-43e3-951c-0258353c51d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208256, 3955, 480, 10, 78, "Code",ExpressionUUID->"908fff0c-0a86-433d-b66d-d721cc965705"],
Cell[208739, 3967, 2598, 59, 518, "Output",ExpressionUUID->"14ab286e-3aa5-44ec-8218-18e1f62b406a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[211374, 4031, 467, 10, 78, "Input",ExpressionUUID->"cc6298a9-3e1d-4812-ad1a-4ecab3681f12"],
Cell[211844, 4043, 375, 8, 52, "Output",ExpressionUUID->"80bb526f-414f-41a6-ab63-178f96d4abeb"]
}, Open  ]],
Cell[212234, 4054, 385, 9, 46, "Input",ExpressionUUID->"7e23d728-c070-415e-b89b-0dfb5e43bb8c"],
Cell[CellGroupData[{
Cell[212644, 4067, 376, 10, 46, "Input",ExpressionUUID->"98215f49-b7b4-4b62-b4d0-9c329cdec580"],
Cell[213023, 4079, 1008, 22, 146, "Output",ExpressionUUID->"e9b2793d-2e99-4b19-8d3e-94542b8813a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214068, 4106, 394, 10, 78, "Code",ExpressionUUID->"fc3e0402-01b7-423c-90bf-4aaf158a8a0e"],
Cell[214465, 4118, 1828, 34, 177, "Output",ExpressionUUID->"5632df8f-6757-4c55-8463-812510c997c9"]
}, Open  ]],
Cell[216308, 4155, 286, 7, 78, "Code",ExpressionUUID->"c38a07ee-fbb6-49e2-9e9a-6449299a4c68"],
Cell[CellGroupData[{
Cell[216619, 4166, 458, 9, 282, "Code",ExpressionUUID->"49768024-6167-4277-8f39-68af08f72552"],
Cell[217080, 4177, 7886, 157, 91, "Output",ExpressionUUID->"6386e7f6-981d-4b16-954c-acf0db0117c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[225003, 4339, 262, 5, 78, "Code",ExpressionUUID->"ad2c5efd-489c-4102-9a91-1e9ce6439b6f"],
Cell[225268, 4346, 732, 17, 181, "Output",ExpressionUUID->"6d5fa3f1-a378-40d3-9ab6-ba20f8d2e836"]
}, Open  ]]
}
]
*)

