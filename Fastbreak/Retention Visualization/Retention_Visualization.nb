(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    286328,       5517]
NotebookOptionsPosition[    278561,       5386]
NotebookOutlinePosition[    279033,       5403]
CellTagsIndexPosition[    278990,       5400]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  "\"\<Projects/Wolfram/Retention_Visualization/\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.9208455462039623`*^9, 3.9208455568061953`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"1752cafd-9886-41c1-84ab-f19eea4e6c31"],

Cell[CellGroupData[{

Cell[BoxData["\"\</Users/erichegonzales/Projects/Wolfram/Retention_\
Visualization\>\""], "Input",
 CellChangeTimes->{3.921193957511333*^9},
 CellLabel->
  "In[139]:=",ExpressionUUID->"6f68bfa0-8f66-472d-b452-1d8a922c286b"],

Cell[BoxData["\<\"/Users/erichegonzales/Projects/Wolfram/Retention_\
Visualization\"\>"], "Output",
 CellChangeTimes->{3.921193957570245*^9},
 CellLabel->
  "Out[139]=",ExpressionUUID->"5b81cb48-30a6-4a2c-8774-3d94010d30b9"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"springSaturday", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<Spring_Bball101/Spring_Saturday.csv\>\"", ",", " ", "\"\<CSV\>\""}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"springSunday", "=", 
   RowBox[{"Import", "[", 
    RowBox[{"\"\<Spring_Bball101/Spring_Sunday.csv\>\"", ",", "\"\<CSV\>\""}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"springTuesday", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<Spring_Bball101/Spring_Tuesday.csv\>\"", ",", "\"\<CSV\>\""}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"springThursday", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<Spring_Bball101/Spring_Thursday.csv\>\"", ",", "\"\<CSV\>\""}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.920833036721285*^9, 3.920833072220001*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"ffd9a4c8-6977-4d25-a5b2-560db33b144b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"winterSaturday", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<Winter_Bball101/Winter_Saturday.csv\>\"", ",", "\"\<CSV\>\""}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterSunday", "=", 
   RowBox[{"Import", "[", 
    RowBox[{"\"\<Winter_Bball101/Winter_Sunday.csv\>\"", ",", "\"\<CSV\>\""}],
     "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterTuesday", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<Winter_Bball101/Winter_Tuesday.csv\>\"", ",", "\"\<CSV\>\""}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterThursday", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\<Winter_Bball101/Winter_Thursday.csv\>\"", ",", "\"\<CSV\>\""}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.920832256314207*^9, 3.920832257658164*^9}, {
  3.920833007507243*^9, 3.920833009516296*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"22927090-1f40-41d0-8f81-84b32927ad21"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"winterSaturday", " ", "=", " ", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"winterSaturday", ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterSunday", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"winterSunday", ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterTuesday", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"winterTuesday", ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterThursday", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"winterThursday", ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[148]:=",ExpressionUUID->"df80b77d-45d9-4b1e-a71b-cb6e7bc9e132"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"springSaturday", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"springSaturday", ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"springSunday", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"springSunday", ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"springTuesday", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"springTuesday", ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"springThursday", "=", 
   RowBox[{"DeleteCases", "[", 
    RowBox[{"springThursday", ",", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.920833569416703*^9, 3.920833572460349*^9}},
 CellLabel->
  "In[152]:=",ExpressionUUID->"f78b4db5-db5f-4117-909e-449d744afc78"],

Cell[CellGroupData[{

Cell[BoxData["winterSaturday"], "Input",
 CellChangeTimes->{{3.921193970947134*^9, 3.9211939721269484`*^9}},
 CellLabel->
  "In[156]:=",ExpressionUUID->"0e5d9517-0261-42b8-86b5-6ac0070f0b4e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"teamid\"\>", ",", "\<\"teamname\"\>", 
     ",", "\<\"customerid\"\>", ",", "\<\"firstname\"\>", 
     ",", "\<\"lastname\"\>", ",", "\<\"email\"\>", ",", "\<\"phone\"\>", 
     ",", "\<\"what school does your child attend?\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "59704", ",", "\<\"Benjamin\"\>", ",", "\<\"Babazadeh\"\>", 
     ",", "\<\"jchudow@gmail.com\"\>", ",", "9144439712", ",", "\<\"\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "67886", ",", "\<\"Ryan\"\>", ",", "\<\"Doolan\"\>", 
     ",", "\<\"CDoolan1234@gmail.com\"\>", ",", "9174941563", 
     ",", "\<\"PS 527\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "67948", ",", "\<\"Filip\"\>", ",", "\<\"Florea\"\>", 
     ",", "\<\"mugur.florea@gmail.com\"\>", ",", "2016184049", 
     ",", "\<\"Collegiate\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "67949", ",", "\<\"Luca\"\>", ",", "\<\"Florea\"\>", 
     ",", "\<\"mugur.florea@gmail.com\"\>", ",", "2016184049", 
     ",", "\<\"West Side Montessori School\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "53391", ",", "\<\"Max\"\>", ",", "\<\"Friedman\"\>", 
     ",", "\<\"rebecca.kaden@gmail.com\"\>", ",", "9175970557", 
     ",", "\<\"92Y\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "61230", ",", "\<\"Mia\"\>", ",", "\<\"Itskowitch\"\>", 
     ",", "\<\"kchessler@hotmail.com\"\>", ",", "2012806727", 
     ",", "\<\"towns\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "60156", ",", "\<\"Kiyaan\"\>", ",", "\<\"Joshi\"\>", 
     ",", "\<\"sanoushirvani@gmail.com\"\>", ",", "9176018020", 
     ",", "\<\"St Davids\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "67790", ",", "\<\"Giovanni\"\>", ",", "\<\"Larrea\"\>", 
     ",", "\<\"christopher.larrea@yahoo.com\"\>", ",", "6469192132", 
     ",", "\<\"district 2 pre k center\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "67514", ",", "\<\"Samuel (Sam)\"\>", ",", "\<\"Millette\"\>", 
     ",", "\<\"millette.amy@gmail.com\"\>", ",", "\<\"\"\>", 
     ",", "\<\"St David\[CloseCurlyQuote]s\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "65688", ",", "\<\"Grayson\"\>", ",", "\<\"Moskowitz\"\>", 
     ",", "\<\"ddudick@gmail.com\"\>", ",", "7625981863", 
     ",", "\<\"n/a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "64325", ",", "\<\"Ava\"\>", ",", "\<\"Nejat\"\>", 
     ",", "\<\"edwardnejat@gmail.com\"\>", ",", "9173011178", 
     ",", "\<\"towns\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "65499", ",", "\<\"Tristan\"\>", ",", "\<\"Peake\"\>", 
     ",", "\<\"kjpctp@gmail.com\"\>", ",", "9174029484", 
     ",", "\<\"Playhouse\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "65501", ",", "\<\"Damian\"\>", ",", "\<\"Piuzzi Arvizo\"\>", 
     ",", "\<\"Bpiuzzi@gmail.com\"\>", ",", "2162551703", 
     ",", "\<\"District 30 pre-k center\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "67193", ",", "\<\"Joey Jr.\"\>", ",", "\<\"Rallo\"\>", 
     ",", "\<\"bsmokler@efhutton.com\"\>", ",", "9178555924", 
     ",", "\<\"st davids\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "67270", ",", "\<\"Ben\"\>", ",", "\<\"Reiss\"\>", 
     ",", "\<\"Elizabeth.right@gmail.com\"\>", ",", "3039183140", 
     ",", "\<\"Trinity\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "67271", ",", "\<\"Jake\"\>", ",", "\<\"Reiss\"\>", 
     ",", "\<\"Elizabeth.right@gmail.com\"\>", ",", "3039183140", 
     ",", "\<\"Trinity\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "53366", ",", "\<\"Sam\"\>", ",", "\<\"Tarkan\"\>", 
     ",", "\<\"erwashkowitz@mac.com\"\>", ",", "9173715200", 
     ",", "\<\"n/a\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "68405", ",", "\<\"Max\"\>", ",", "\<\"Teigman\"\>", 
     ",", "\<\"lauras104@gmail.com\"\>", ",", "5163171622", 
     ",", "\<\"N/A\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6036", ",", "\<\"[BBall 101] Saturday 9:00am-9:50am (Ages 4-6)\"\>", ",",
      "65250", ",", "\<\"Alexander\"\>", ",", "\<\"Vandooijeweert\"\>", 
     ",", "\<\"kaya.endo@gmail.com\"\>", ",", "9178085245", 
     ",", "\<\"n/a\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.92119397252024*^9},
 CellLabel->
  "Out[156]=",ExpressionUUID->"3d14a16e-b6d4-4f0b-8618-ccf18a0d2645"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Grid", "[", "%142", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[146]:=",ExpressionUUID->"ea4c11a5-9659-4c47-a739-54657b0323bc"],

Cell["remove column 1 from all tables", "ChatInput",
 CellDingbat->Cell[
   BoxData[
    TemplateBox[{}, "ChatInputCellDingbat"]], Background -> None],
 CellChangeTimes->{{3.9208336390907307`*^9, 3.920833648435652*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"47c8637c-7813-488d-a552-36a3f9188ea4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"springSaturday", "=", 
   RowBox[{"springSaturday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"2", ";;"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"springSunday", "=", 
   RowBox[{"springSunday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"2", ";;"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"springTuesday", "=", 
   RowBox[{"springTuesday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"2", ";;"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"springThursday", "=", 
    RowBox[{"springThursday", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", 
       RowBox[{"2", ";;"}]}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterSaturday", "=", 
   RowBox[{"winterSaturday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"2", ";;"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterSunday", "=", 
   RowBox[{"winterSunday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"2", ";;"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterTuesday", "=", 
   RowBox[{"winterTuesday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"2", ";;"}]}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterThursday", "=", 
   RowBox[{"winterThursday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", 
      RowBox[{"2", ";;"}]}], "]"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.920834010099055*^9, 3.920834023634293*^9}, {
  3.920834103190865*^9, 3.92083413451878*^9}},
 CellLabel->
  "In[157]:=",ExpressionUUID->"06562fb6-b2a1-4993-854c-cbf5afb9571b"],

Cell["remove all the first rows", "ChatInput",
 CellDingbat->Cell[
   BoxData[
    TemplateBox[{}, "ChatInputCellDingbat"]], Background -> None],
 CellChangeTimes->{{3.920834162287855*^9, 3.920834172003383*^9}},
 CellLabel->
  "In[156]:=",ExpressionUUID->"6bbc195e-bf26-45fc-a06d-7913111f8731"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"springSaturday", "=", 
   RowBox[{"springSaturday", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;"}], ",", "All"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"springSunday", "=", 
   RowBox[{"springSunday", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;"}], ",", "All"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"springTuesday", "=", 
   RowBox[{"springTuesday", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;"}], ",", "All"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"springThursday", "=", 
    RowBox[{"springThursday", "[", 
     RowBox[{"[", 
      RowBox[{
       RowBox[{"2", ";;"}], ",", "All"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterSaturday", "=", 
   RowBox[{"winterSaturday", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;"}], ",", "All"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterSunday", "=", 
   RowBox[{"winterSunday", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;"}], ",", "All"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterTuesday", "=", 
   RowBox[{"winterTuesday", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;"}], ",", "All"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterThursday", "=", 
   RowBox[{"winterThursday", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"2", ";;"}], ",", "All"}], "]"}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[165]:=",ExpressionUUID->"33a11239-4c61-4bed-b135-c5c3c57549fc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"satFullNames", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\< \>\"", ",", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ",", " ", 
     RowBox[{"springSaturday", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "4"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"springSaturday", " ", "=", " ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", " ", 
      RowBox[{"{", 
       RowBox[{"springSaturday", ",", " ", "satFullNames"}], "}"}]}], "]"}]}],
    ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"sunFullNames", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\< \>\"", ",", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ",", " ", 
     RowBox[{"springSunday", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "4"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"springSunday", " ", "=", " ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", " ", 
      RowBox[{"{", 
       RowBox[{"springSunday", ",", " ", "sunFullNames"}], "}"}]}], "]"}]}], 
   ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"tueFullNames", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\< \>\"", ",", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ",", " ", 
     RowBox[{"springTuesday", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "4"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"springTuesday", " ", "=", " ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", " ", 
      RowBox[{"{", 
       RowBox[{"springTuesday", ",", " ", "tueFullNames"}], "}"}]}], "]"}]}], 
   ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"thuFullNames", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\< \>\"", ",", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ",", " ", 
     RowBox[{"springThursday", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "4"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"springThursday", " ", "=", " ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", " ", 
      RowBox[{"{", 
       RowBox[{"springThursday", ",", " ", "thuFullNames"}], "}"}]}], "]"}]}],
    ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"satFullNames", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\< \>\"", ",", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ",", " ", 
     RowBox[{"winterSaturday", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "4"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"winterSaturday", " ", "=", " ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", " ", 
      RowBox[{"{", 
       RowBox[{"winterSaturday", ",", " ", "satFullNames"}], "}"}]}], "]"}]}],
    ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"sunFullNames", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\< \>\"", ",", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ",", " ", 
     RowBox[{"winterSunday", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "4"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"winterSunday", " ", "=", " ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", " ", 
      RowBox[{"{", 
       RowBox[{"winterSunday", ",", " ", "sunFullNames"}], "}"}]}], "]"}]}], 
   ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"tueFullNames", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\< \>\"", ",", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ",", " ", 
     RowBox[{"winterTuesday", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "4"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"winterTuesday", " ", "=", " ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", " ", 
      RowBox[{"{", 
       RowBox[{"winterTuesday", ",", " ", "tueFullNames"}], "}"}]}], "]"}]}], 
   ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"thuFullNames", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\< \>\"", ",", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ",", " ", 
     RowBox[{"winterThursday", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", 
        RowBox[{"{", 
         RowBox[{"3", ",", " ", "4"}], "}"}]}], "]"}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"winterThursday", " ", "=", " ", 
   RowBox[{"MapThread", "[", 
    RowBox[{"Append", ",", " ", 
     RowBox[{"{", 
      RowBox[{"winterThursday", ",", " ", "thuFullNames"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.920841835986326*^9, 3.920841835991456*^9}, {
  3.920842224388415*^9, 3.920842243055316*^9}},
 CellLabel->
  "In[173]:=",ExpressionUUID->"47d9e82e-e6b5-44ef-8b5b-3380289a1c92"],

Cell[BoxData[
 RowBox[{
  RowBox[{"findSpringDay", "[", "name_", "]"}], ":=", 
  RowBox[{"Which", "[", "\[IndentingNewLine]", "  ", 
   RowBox[{
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"springSaturday", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "8"}], "]"}], "]"}], ",", "name"}], "]"}], ",", 
    "\"\<Saturday\>\"", ",", "\[IndentingNewLine]", "  ", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"springSunday", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "8"}], "]"}], "]"}], ",", "name"}], "]"}], ",", 
    "\"\<Sunday\>\"", ",", "\[IndentingNewLine]", "  ", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"springTuesday", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "8"}], "]"}], "]"}], ",", "name"}], "]"}], ",", 
    "\"\<Tuesday\>\"", ",", "\[IndentingNewLine]", "  ", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"springThursday", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "8"}], "]"}], "]"}], ",", "name"}], "]"}], ",", 
    "\"\<Thursday\>\"", ",", "\[IndentingNewLine]", "  ", "True", ",", 
    "\"\<\>\""}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{3.920849109435355*^9},
 CellLabel->
  "In[189]:=",ExpressionUUID->"d10432f9-9240-43ca-b146-cc045dc79b11"],

Cell[CellGroupData[{

Cell[BoxData["winterThursday"], "Input",
 CellChangeTimes->{{3.9211940184768667`*^9, 3.921194021867467*^9}},
 CellLabel->
  "In[190]:=",ExpressionUUID->"844474a0-88b9-4b0e-9221-6b4c9f4a63fd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "67480", ",", "\<\"Sebastian\"\>", ",", "\<\"Bartnett\"\>", 
     ",", "\<\"Sasha.edell@gmail.com\"\>", ",", "5032609624", 
     ",", "\<\"Marymount\"\>", ",", "\<\"Sebastian Bartnett\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "17989", ",", "\<\"Maverick\"\>", ",", "\<\"Cohen\"\>", 
     ",", "\<\"stalcohen@gmail.com\"\>", ",", "9178472808", 
     ",", "\<\"n/a\"\>", ",", "\<\"Maverick Cohen\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "67554", ",", "\<\"Denny\"\>", ",", "\<\"Escano\"\>", 
     ",", "\<\"ccjan23@gmail.com\"\>", ",", "6175014507", 
     ",", "\<\"marymouth\"\>", ",", "\<\"Denny Escano\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "58191", ",", "\<\"Kavi\"\>", ",", "\<\"Henninger\"\>", 
     ",", "\<\"nadia.arumugam@gmail.com\"\>", ",", "9175450351", 
     ",", "\<\"rred\"\>", ",", "\<\"Kavi Henninger\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "66904", ",", "\<\"Ren\"\>", ",", "\<\"Hirayama\"\>", 
     ",", "\<\"riru03040421@gmail.com\"\>", ",", "9176400265", 
     ",", "\<\"PS198\"\>", ",", "\<\"Ren Hirayama\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "67561", ",", "\<\"Woosung\"\>", ",", "\<\"Kwak\"\>", 
     ",", "\<\"jisung.usa@gmail.com\"\>", ",", "9178532544", 
     ",", "\<\"marymou\"\>", ",", "\<\"Woosung Kwak\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "63252", ",", "\<\"Hayes\"\>", ",", "\<\"London\"\>", 
     ",", "\<\"brooke.a.bauer@jpmorgan.com\"\>", ",", "2158406336", 
     ",", "\<\"n/A\"\>", ",", "\<\"Hayes London\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "65964", ",", "\<\"Jacob\"\>", ",", "\<\"Quimby\"\>", 
     ",", "\<\"albano.megan@gmail.com\"\>", ",", "9176480346", 
     ",", "\<\"n/a\"\>", ",", "\<\"Jacob Quimby\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "67621", ",", "\<\"Jack\"\>", ",", "\<\"Roszkowski\"\>", 
     ",", "\<\"caroline.a.quinn@gmail.com\"\>", ",", "9145571954", 
     ",", "\<\"Madison Ave Presbreterian\"\>", 
     ",", "\<\"Jack Roszkowski\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "58488", ",", "\<\"Charlie\"\>", ",", "\<\"Sassower\"\>", 
     ",", "\<\"Asassower@gmail.com\"\>", ",", "9179756662", 
     ",", "\<\"park avr s\"\>", ",", "\<\"Charlie Sassower\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "65128", ",", "\<\"Jack\"\>", ",", "\<\"Schroeder\"\>", 
     ",", "\<\"halsey.schroeder@gmail.com\"\>", ",", "6464003649", 
     ",", "\<\"The Brick Church School\"\>", ",", "\<\"Jack Schroeder\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "66298", ",", "\<\"Charlie\"\>", ",", "\<\"Silverman\"\>", 
     ",", "\<\"courtneysilverman.921@gmail.com\"\>", ",", "9172977893", 
     ",", "\<\"PS.6\"\>", ",", "\<\"Charlie Silverman\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "68545", ",", "\<\"Auguste\"\>", ",", "\<\"Soccal\"\>", 
     ",", "\<\"bsoccal@gmail.com\"\>", ",", "7327138600", 
     ",", "\<\"ST STEVEN OF HUN\"\>", ",", "\<\"Auguste Soccal\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[BBall 101] Thursday 3:00pm - 3:45pm (Ages 4-6)\"\>", ",", 
     "66972", ",", "\<\"Benjamin\"\>", ",", "\<\"Wright\"\>", 
     ",", "\<\"jason.wright@apax.com\"\>", ",", "9179915054", 
     ",", "\<\"reds\"\>", ",", "\<\"Benjamin Wright\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.921194022281443*^9},
 CellLabel->
  "Out[190]=",ExpressionUUID->"7c26e275-9a5c-4522-bfb9-0f66493ac856"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"findSpringDay", "[", "\"\<Sebasti Bartnett\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.920845206938463*^9, 3.920845222458328*^9}, {
  3.920845671274742*^9, 3.920845671832118*^9}, {3.92084668805824*^9, 
  3.920846688200569*^9}, {3.920849167751029*^9, 3.920849167886359*^9}},
 CellLabel->
  "In[235]:=",ExpressionUUID->"14f1e675-7407-4989-b3b3-a26c28fb4326"],

Cell[BoxData["\<\"\"\>"], "Output",
 CellChangeTimes->{{3.920846686136573*^9, 3.920846688617824*^9}, {
   3.920849164844925*^9, 3.920849168807465*^9}, 3.9208492363625393`*^9},
 CellLabel->
  "Out[235]=",ExpressionUUID->"eae61600-4d74-4312-ae7d-80e579feb3ba"]
}, Open  ]],

Cell["\<\
Give me a list of the results of plugging each name from winterSaturday into \
findSpringDay function\
\>", "ChatInput",
 CellDingbat->Cell[
   BoxData[
    TemplateBox[{}, "ChatInputCellDingbat"]], Background -> None],
 CellChangeTimes->{{3.920845686663962*^9, 3.92084579076888*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"c5490ac3-893a-4347-854c-968d3736dd7b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"names", " ", "=", " ", 
   RowBox[{"winterSaturday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "8"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"springDays", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"findSpringDay", ",", " ", "names"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"winterSaturday", " ", "=", " ", 
   RowBox[{"MapThread", "[", 
    RowBox[{"Append", ",", " ", 
     RowBox[{"{", 
      RowBox[{"winterSaturday", ",", " ", "springDays"}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.920845808322047*^9, 3.920845808327766*^9}, {
  3.920845974905233*^9, 3.920846006957181*^9}},
 CellLabel->
  "In[236]:=",ExpressionUUID->"26066b3b-fe1a-4a52-b633-039eeb05ecaa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"namesSunday", " ", "=", " ", 
   RowBox[{"winterSunday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "8"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"springDaysSunday", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"findSpringDay", ",", " ", "namesSunday"}], "]"}]}], ";"}], "\n", 

 RowBox[{
  RowBox[{
   RowBox[{"winterSunday", " ", "=", " ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", " ", 
      RowBox[{"{", 
       RowBox[{"winterSunday", ",", " ", "springDaysSunday"}], "}"}]}], 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"namesTuesday", " ", "=", " ", 
   RowBox[{"winterTuesday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "8"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"springDaysTuesday", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"findSpringDay", ",", " ", "namesTuesday"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"winterTuesday", " ", "=", " ", 
    RowBox[{"MapThread", "[", 
     RowBox[{"Append", ",", " ", 
      RowBox[{"{", 
       RowBox[{"winterTuesday", ",", " ", "springDaysTuesday"}], "}"}]}], 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"namesThursday", " ", "=", " ", 
   RowBox[{"winterThursday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "8"}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"springDaysThursday", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"findSpringDay", ",", " ", "namesThursday"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"winterThursday", " ", "=", " ", 
   RowBox[{"MapThread", "[", 
    RowBox[{"Append", ",", " ", 
     RowBox[{"{", 
      RowBox[{"winterThursday", ",", " ", "springDaysThursday"}], "}"}]}], 
    "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.920846043139736*^9, 3.920846070065692*^9}},
 CellLabel->
  "In[239]:=",ExpressionUUID->"9f0b210b-e72b-4f64-88d3-334f3e4f4b06"],

Cell[CellGroupData[{

Cell["\<\
Let's make a graph for winter Saturday. For now just put all the names as \
nodes and don't draw any edges\
\>", "ChatInput",
 CellDingbat->Cell[
   BoxData[
    TemplateBox[{}, "ChatInputCellDingbat"]], Background -> None],
 CellChangeTimes->{{3.920846564317761*^9, 3.9208466347808847`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"774b8b1d-954f-48f4-bf38-d1c365266738"],

Cell[TextData[Cell[BoxData[
 TemplateBox[{
   Cell["Graph[winterSaturday[[All, 8]], VertexLabels -> \"Name\", VertexSize \
-> Medium, ImageSize -> Large]", "ChatPreformatted", Background -> 
    GrayLevel[1], 
    TaggingRules -> <|
     "CellToStringType" -> "InlineCodeCell", "CodeLanguage" -> ""|>]},
  "ChatCodeBlockTemplate"]], "ChatCodeBlock",
 Background->
  None,ExpressionUUID->"01d8e3d1-c679-420c-8ecb-c2b0b0c4431d"]], "ChatOutput",\

 CellDingbat->Cell[
   BoxData[
    PaneBox[
     TemplateBox[{}, "ChatIconCodeWriter"], ContentPadding -> False, 
     FrameMargins -> 0, ImageSize -> {35, 35}, ImageSizeAction -> 
     "ShrinkToFit", Alignment -> {Center, Center}]], Background -> None],
 TaggingRules-><|
  "CellToStringData" -> 
   "```\nGraph[winterSaturday[[All, 8]], VertexLabels -> \"Name\", VertexSize \
-> Medium, ImageSize -> Large]\n```", "MessageTag" -> Inherited, "ChatData" -> 
   "OEM6eJytWV93G0cVP1CX1qKlhL8tD5ypGigJloydNDQOpcexk9RUSkxWxPQobj3avZI23p1ZZm\
YtKz35IPBN+CI88MQTn4N7Z2ZXWmklQmhe4p2Ze+/v/u6fubva/\
3kraOxrHWvDRQh6o6dyoKXcyPtSpdyUS3e5hmMl08zoTdrGvThsBT8+\
gCTpyS5ozUdwPxehiaXQzROZDBVPzw7G3AykPD9z5+jRn20FP6KnAykMXJpjBdmy9h/\
QiUMVX4B4KA2QIv36fZ5olP4J7TmQJhaj0vT7S6bdIXp8lJssN63gCj18hl5LNe2AGJnxwXu4ejgVP\
I3DOe/nwfz0nuCDBEj0gZJ5FoA1rEtEV9yBTqcbgLqIkc+K/PfvK/hLDiKcHoPgiZmqv/2V/\
v39U9z7jIsoAVV6sf/tveBNMnUstdE/W/LparG3F7xh/1Sg31txShHXiwY+\
h2kV3veORJjkEXhaKnubXX7Zk+cgqiJvd0GNwMdTF6nyeldGkARXRplp3Wh/\
1DK5GsjWzq3zVvAOwUQGYJmBt4OxnHRjEafxc4iqORYYBRgYMXLx64IZy+qR7/YgzUBxtAVqaP/9+\
1NaljJ5lHlGW8G7nqEOF6McMd+74EnO0d3911vBD/\
eTRE4guncJYW7gmJvxQgD9gcfAI7f7Gq5g3P36iYrrxN71VhBEL04BE14bxWNhDn6HGX6Mbi0sU1Ge\
wOA+mHAMav9baBn5t4UijEvXZ/\
9qI9HkXdXWW3bJ5WFUJuZGT2bHB6jnnSOBGmNb7D3QZXVvHHLDydCbRTCHr+\
mNDmYCsbbxWCYQfCeYagNpC/PNIQn+\
eWVfM87GkGTDPGGeW1aQy0LMAzYhUtQWm8pcsWdywGLNjGSYB5kUEZvEZsx4hrWfqZgbWKElFl5CA0\
nnGhRLPdQ2OxmDgAtcyiT2MnTdmmN6LPMkqpp6lmvjVGI9MCHNGPlngDS12aGkBcajCDen9H9MQeMJ\
y4UAKmeupoy6FZMKlaQpsmCXpHOvgKhZPLQIQk64s2TqjJPddqPxAXuAeBXqPaKY564gG40vUIIrch\
YZ4yE1F8+Pc9iMse2M6LEgqWiKTmTIQ/SiN4aSGgtCIXTsoGyI/\
RV1gFM25rg0ABCISiB3BiLyI0swBZ2P9rwoLIQu6G0WYIUmXCVTH9PSFkHnRSryBJ2eaba65nQPYCg\
V2Scfo1jj1tQBKAC2GbZgfHLpMpGKICj0xXjLLKVQ8ggTGgrBoaRKJJ2jPMYmFAvQe43G9VmGVOJkn\
UJMlMWDRIbnTA5tkLaYzhWSjSkSGxcDJB8QMA/\
P0btzbdMndh3Tmk6KfJ2gKcroBEnAVNxrnJ2dFZsNUk4LHpKtDoJbJHkF3haTAlkcUfAcLaTQnr3DH\
t57cu9xiaB5JPrtdvt075Mm5WYTG6V9xseEDzC9mSWzqMk4SWyqD0qlg2nJPGLb75zsfxHMkSCIykI\
Y2YhkbqVKOjAA/ELGWDnpIEbyTZny9npneLFiKNjZWXfqb3z8q7iM+\
penjhLqFQzzZ8zgMkMaNBUGgiKKOrwHf7a0l7AQcVrgSTAnmY5HAq1cvfxyl/2aTb/\
cvYpaj7rHjx739h/23q+kgetMGPmEGhQWY+EMUTWnj/mc3SpYAR3yDMrE4FZQJ1yP2+\
zeJU8zDDo7oi6DDRbLgz29evt2+/\
ZHjCwjzdjsrX2sgBEYYs5rfHpGpp9eZdQNASvsfUTficU5VohLfDq81CAjGea2ExGVFEjHV7Ue9BQP\
XO6xvk2H019lPEzA7OUqvuYqDTzyxuZ11u9RTpSHFAy37co1u1kafnRBYw5MyoO26LaL/\
WLbSR0JvLlZYGGUAgbbBbb9ZNvuus1rRW2gWSxtERL8Jaf1NB3gTTcLjoumzQhO9VxlBdP3vM0eUTl\
F0nWVUpIKwXXm6yywCYAsD/I4MS08o+2tx4Y+\
VTlmy7TN9m2uoxfntvXlIsFkZTqDMB765meHPZSNbMdfciAwUyygB2Wboi71OUDmikzHFAzXS4pLDQ\
/8CXvWDAnlyQiV0mSE7qAtHlEHw+UQohxzGkWKS03bXB4lcoCCFxxZR5XaWYjNh9qeKm85FDy2/\
LMU4SixOgBUkKkbyFCoSxengEm5Pbtm8Dp1Hf6kg+\
7hAOKa3bmQE5xV6KLHZBgOWYRTAPZfyXD4wVhU44ihFQCoqEiSECdD20GzRBq9ZS9v6QY+\
7BPhmCR8BySkCYxARLZdpfzc5wtwHdP1inOFQGfpXSiazT0bSLqam3r+8QH1b+\
y3O9htGb4EHNrixJG538QXpGf4t972dG0/BpJBNF89iXWOyfPc+\
rHdPG2Qil1SoXHyEaOAZteIT9kn7CjNpDL9ZmA3vrqLEUt2frOz7Z+Lk+\
1QXzS3WPMgeNI8ZXdYo7HZ8LrQj5fSZM+t1tPDBH4pRf7gGk3jXL2kKn9yQZela+\
cm8TWxw04NXyd2Y6bRP6/jy+\
ta5GuVppV8OT3LfK1QtIYvr2mZr1Wq1vH1cS1fh4C9Fw7whV73q5tb7OsXK6ipEbJbyyIzFpZl/\
F6N0MzhGim/6cVc6dTXzrxwdXPe5kKZ1Agt+bZYEcsyNb4tJX+NVI1vOzdvkXMPVBz1f7Fzc/\
fUjowNBam8oCksyVPBdtxQjdnAjO3ljYZvTLu3aqmpLvT7+\
Na6xXbZnTvsdAUv849rzs9IqTyvk5gxUl1Yltmcy8WZL9WFWksL+Tv/uOb8zJfK8zqJmS/\
VhUWZShBt2GhCi/G+YUpOZuG7cfOlwmf14lCaJC8XvpXnV4ZvtcTq8C3KvFz4aiytDd/\
K8yvDt1pidfiqMrYyb7quw839PEke0jsNynV51g8M8fAHGYv+B30cDU6xFTPsx/iwe4riv9yqr7+\
vb2yxmy9OPajGUtRRdw/fPHnU388yHF1QYrGtzaPxnQcV5eLVIc4XST3AIiyr4fkGOo+\
jBGdyeGVw1YKsRTdLgpXwyl49D2WGb5y/\
Or5q9dcDnOXcaoTlvTCPZhbfV0rB2ra5AHGpWGsgLk4N32AK1vTpeoBrUrA6n3yDKVh3J9SiW5uCC6\
PQN5iCtRdQPcC1Kbg4di2moO2FH92mXjiMReRG90O0SJ95vjpluH4yjsNxv7HJWBfSAag/\
9mv738fkBkmRN8UeOlUjOJ8SVTG7UytUDVVFym/\
Vi1UZrMr5PS9IH9Bx9aEU0Gxsute6WzvLzDQDGHBtYnaXKyPAmKaf6h7Q573UfYjCUQDf32kuUKDzx\
Gj7Op/ko5H9Ss3xfZZguMlvoVDxSVZtlp8K3GghfC7VNoGPqx0KpYu0q6h0NOiFS/p/\
6xWlgTKTfnuD+LKa181rNRjnu0AtUnfgVTvHgp2yOq3q9aNiDdhKU6hF60+8citZsrWA+L+\
MqnWYK32iHrQ/8n/0l2V7L8qBuQP0dcp+reFspHg2pi+\
n3gFWvtzbj5hCTtwvPPStsRixXd7TlyMZgfsMFEnxoWGR4hP7Sw99frK/D24o+uKzyf0v4qYVvOF/\
9whiAvOAzPdXFdAWe0K/dlx23Pem1u+xLaDtZrEexM+BVrsQxXm6hW/\
2fATFYoerEdiW0Are6nS65U+TQeMAcdtP46oVNPwPdD0+0pv+1zyI/gPvyu9+"|>,
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"a467b38f-9169-4334-82b2-e321c67990cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Graph", "[", 
    RowBox[{"winterSaturday", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", " ", "8"}], "]"}], "]"}], "]"}], ",", " ", 
   RowBox[{"VertexLabels", " ", "->", " ", "\"\<Name\>\""}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.920846857558463*^9, 3.9208468922848663`*^9}},
 EmphasizeSyntaxErrors->True,
 CellLabel->"In[68]:=",ExpressionUUID->"12d876b9-c89c-4d9b-b77f-a345e92814cc"],

Cell[TextData[{
 "There is a syntax error in your code. Remove the extra closing bracket \
after \"Name\". Here is the corrected code: \n",
 Cell[BoxData[
  TemplateBox[{
    Cell["Graph[winterSaturday[[All, 8]], VertexLabels -> \"Name\"]", 
     "ChatPreformatted", Background -> GrayLevel[1], 
     TaggingRules -> <|
      "CellToStringType" -> "InlineCodeCell", "CodeLanguage" -> ""|>]},
   "ChatCodeBlockTemplate"]], "ChatCodeBlock",
  Background->None,ExpressionUUID->"f92edee5-4f5d-4e5e-b2de-8e9cbb55a68e"]
}], "AssistantOutputError",
 CellDingbat->Cell[
   BoxData[
    PaneBox[
     TemplateBox[{}, "ChatIconCodeWriter"], ContentPadding -> False, 
     FrameMargins -> 0, ImageSize -> {35, 35}, ImageSizeAction -> 
     "ShrinkToFit", Alignment -> {Center, Center}]], Background -> None],
 TaggingRules-><|
  "CellToStringData" -> 
   "There is a syntax error in your code. Remove the extra closing bracket \
after \"Name\". Here is the corrected code:\n\n```\n\
Graph[winterSaturday[[All, 8]], VertexLabels -> \"Name\"]\n```", "MessageTag" -> 
   "[ERROR]", "ChatData" -> 
   "OEM6eJytWm13G0cVPoWE1qKlFAq0fOBM1ZTSYsnYSdrGIfSofqupZBuviOlR1XqkvZI22p1ZZm\
YtKz39IeVf8JFP/BU+8Tu4d2Z3pZVWwpjmQ6J5uW/\
PfZk7s2n8quZVGloH2nDRB32nrRKgqcTIQ6kibvKpT7iGMyWj2OgNWsa1oF/zfrYHYdiWLdCaD+\
EwEX0TSKGrFzIcKB5d7o246Uk5vnT7aJjurXmv02hPCgPX5kxBvMz9J7RjXwVXIE6kAWKk7x7yUCP1\
z2nNKWkCMcxFv7Uk2m2i4Wli4sTUvNdo8ClaLdW0CWJoRntv4uz+VPAo6M9ZP6/\
MLw4E74VApEdKJrEHVrDONXrNbWg2Wx6oqwDxLND/+FDBXxMQ/ekZCB6aqfrbt/TnHx/j2qdc+\
CGo3IrG93a9l0jUmdRG/3LJpnvZ2q73ov2pQL+5YpcirBcFfAbTono/\
Ohb9MPEhhaWwttHi1205BlEkeaUFagipP3UWKndb0ofQe20Ym9r9+sOaSVRP1rY/\
GNe8V0lNRACWEXjFG8lJKxBBFDwHvxhjnlGAjhFD578WmJEsbvlhG6IYFEdZoAb2z78/\
pmkpw9M4RbTmvZEi1ORimKDOB1c8TDia27hb837aCEM5Af/gGvqJgTNuRgsOTDecA/\
fd6vdxBv2ezl+ooIzsjVQKKtEOIsCA10bxQJi932OEn6FZC9OUlBfQOwTTH4FqvICSEX+\
bKMK4cH32rzoCTdYVZb1sp1wc+nlg3mnL+GwP+\
bx6LJBjYJO9DTrP7jv73HAS9FLmzMFdfaeJkUCo3TmXIXg/8KbaQFTDeHOaeN++\
3tCMsxGE8SAJWYoty8BlfYwDNiFQ1CabykSxZ7LHAs2MZBgHsRQ+mwRmxHiMuR+\
rgBtYwSUQKYUGok40KBalqtbZxQgEXOFULLGWoelWHNMjmYR+\
UdSzRBvHEvOBCWlGiD8DhKnO9iVNMO77uDilfwNyGg9ZIgRQOnM1ZVStmFTIJIoQBTslnXmZipoFA6\
tBn5PecTh1wkluvVJ5mx2hvgr5HpPPE5eQlcrnSMEVGYuI8T4VlxQfZ7AZYdkZ0jADKSuKjmTA+\
2hFewQ5NFYJhapjBWUDrK/IAxyzEcepHoBArQRiZ8AnO+\
IQQ9DZaPeLTELfOb3OPMzQkKtwmvo0l0Wq8ywUeYhGzzhbXnO8ezCQiuSTjX6gcWnqFMgUrDMswThy\
4TKRilRQaItJJbOIXMl9DGjICAeSMpF4DpMAi1AgQO9WKu+zRvOi8bmH8oaoQcFXDmEpgMnBAg/\
Dh1Z4IHw0CGOTls00tlsz+l3WOT45PO1uss5F4/zk+OQIf6LmnYPz89PzbmXj/exngRUGBiiF+\
wiR1OR3MW4E1jdLkzFbUICbeRdqFgZjQKQjThHNIjrIxxj+\
vcTtcykYhCHThv5WibAGS1y38rUVZi1AyxVDvzFMCpgLZoQvT7AidBQT6FIqAr1Q9seEC0ncZDpB5g\
lmWGAcwBi7gP7m/\
TEGx1jb7AvcgWMVDbN0n6AoKgghWoyZvFu5vLzMFivEnCZSlWxxIU9lNaKgHrpBIDRDin2HGTG0ex+\
zk4OnB+e5BtVj0anX693dJ1XyXRXPGTvGYch7WB2YjcV5PKlS9HKmvWnullm0zUAQFIkZMaLhy8RS5\
XCgk/mVDLDwRL0AY9fkFcN2Rwz7EoxkdnnZmqYNE/\
7KzvLOdddBQqUWQwHp4DpGGDTVFVSKIGryNvzFwp6rhRpHmT4hpjTTwVCglHvXX+\
6w37Lplzv3kOtx6+z0vN04ab9VCANX2NHzIdV3rGWZMQTVHD+\
WpvxmhgroPscUygKDW0Idcj2qs4NrHsXodHZMRRrPJ6wu7It7jx7VHz1kJBlhxrPSysdoHYIh5FKOX\
1yS6C/uMTpMAAvUW6h9MxBjLDCubtDmpfPFl/3EFnKCkhzp8CqWAj3FDdeY6zYcur+\
JeT8Es5uo4D1XqCDV3KZTm2Ii36RgsGVn3rOLueDTK+\
oSYZJvtDVrK1vPlh3VMRUG5lk1cgKD1RZPzXDLrrrF97LcQLFYGUWf1F8yWk+jHjYKM+\
c4b9qI4JTPRVQwfMd1dkrp5EtXlHNKSgR3sL3PPBsAiHIvCUJTwz3aNg1skIYqx2iZ1lnDxjpaMbYn\
RyJCDFamY+gHg/TssL0y0vr2wFwywDNTTKCjvMpTkf8MIHZJpgNyhqslWU+AG/\
6MNWumCcXJEJlSY4nmoCzuUwXD6T74CcY0kmQ9gbaxPAxlDwmvOKKOLLWTEBis3LQrbxKQ8MzizyJU\
R4nVDqCEjFw/i0Qt6jsETPLl2SmN3Yg7IC+aaB72b67YjYWcYKtHfRIGw2DAfDwnsP5Khr0j+\
qLoR3StAEBGWZD0sbG2FTQOpdGbtveRrl/\
GOtEfEUVaAUnTEIYgfFuuIjxnXLwA1wF1J9iWCTSWrpL+rG28g6Cruabxn/eofmO93cFqy/AOtW+\
TE28cnSreL5/hb72VwrV1DkSD2nz1NNAJBs9za8dWtVupUI3e6T5h1S2SoLewr0WTh1I85+\
iZrZvyqlZImfukjMYWVAw9ukT4fMqesOMolsp0qp5d+OoT9H24/\
bvtrXSc7az39VV1k1X3vKfVLnvMKpWNSsoLEbkRJ7tvNZ82psKNGKUb13AaJeqGrNKdC7wsXB8SXBP\
bdJbAdWEXZgzT8Tq4Ul6LcK3itBIux2cZrhWM1sCVclqGaxWrNXBtb5fitQ9YxGGPY4/VKS5usq+/\
WQFNCZFdWiaZobBMk66VEM0MLqFKF1MyZ9vD0tSZJy4uzstcyJISoiXbFhNimabEtqXYL6Eqs+\
3BB2TckQr8zjvbD3a6tvesKIjkFbVzYRIJtu0uN9Q4G3soVCpphdt+VApNcaLTaYThJtthjx+\
z7gpc5odr9s9AKYzXUcwQKU4s02zMxeLMluJEqaSF+J0frtk/\
s6UwXkcxs6U4sUhTcKJ1G7V6AR5cTMnJzH07H97IfZYvdrdheDP3rdy/\
0n2rKVa7b5HmZu4rkbTWfSv3r3TfaorV7ivSuPPaVR1uDpMwPKHLEdK1eNzxDOHwRxmIztudznYXL+\
NVhvUYBztdJP/1Znn+fX1/kz34ppsqVVnyOvJu4xWW+51GHGMPhBSLZW1em7TyIKNE3F7F+\
SQpVzBzy2r10gI6r0eunEng1soVE7JUu1kQrFQvr9Xzqsz0GyW316+Y/eUKzmJutYb5uTCvzcy/\
twrB0rK5oOJSspaouNg1fIchWFKnyxVcE4LF/\
uQ7DMGyM6FUu7UhuNAKfYchWHoAlSu4NgQX267FELS18KHtLgeB8F3nvo8S6b3oqy7D+\
YsRXos6lQ3GWhD1QP2pU1r/PiIziIqsydbQqBLC+\
ZAoktmVUqKiqwpU6VI5WRHBIl26lhLShwycPZECqpWNrkPm/jIyVQ96XJuAC/YJV0aAMdltErc/\
mePr+oQjej6M3EMXdgjpI7ECnYRG2+eCMBkO7UcEjvdl0s41hAv5iyNZVCV/isg7jocPSF+\
RxlppkfioWMGQTRaWBd4OJr1wiP9vtSQXMIu0D3P91vVzJTrOV4lSTd2G21aWBTl59lrW61vJEmULR\
aNU23THrUvNkqwFjf9LK1umc6GOlCudbvk/6s+yvG/yhroJ9Axmn4U4Gyoej+wHBceC5Zd/+\
1oq5MR9iaNHzawFd3FPT1TSB/fe5EvxrmG+4hP7RY7eufTsaWkj+\
58LZu59KSBljkh8Z1UCbbKn9FXquuketmp/wLKBsqvZvBc8B5ptgR8k0Sbe/\
PkQsskmV0OwF8HVb1zHaT5/8JG7Pq5TZqU2MxnKGsvnjE0/xnl/f6FtP38F9GTr3qhnn5Xs+\
6B9mWXn7rJDKMO1UZz1Q2lfuXuK98eAPhiQk5zgOvs05em+\
eNiPbuBbVruuVt0OX2tRzXu52WzlH969yh6ytV8uEMFK+vm5zYfei+lns/8AaInoIg=="|>,
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"bbff0479-bf76-4ee5-87c9-956c0c0e78a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[Cell["Graph[winterSaturday[[All, 8]], VertexLabels -> \"Name\"]",
   "ChatPreformatted",
  TaggingRules-><|
   "CellToStringType" -> "InlineCodeCell", "CodeLanguage" -> ""|>,
  Background->GrayLevel[1],ExpressionUUID->
  "e0f61275-d3d6-47f3-9e79-e31a0b40af67"]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"7d31c866-2e15-403d-bd1f-a4ac61aecb19"],

Cell[BoxData[
 InterpretationBox[Cell[
  "Graph[winterSaturday[[All, 8]], VertexLabels -> \"Name\"]", 
   "ChatPreformatted",
   TaggingRules-><|
    "CellToStringType" -> "InlineCodeCell", "CodeLanguage" -> ""|>,
   Background->GrayLevel[1],ExpressionUUID->
   "409676f4-e085-45f1-8639-6a92ce901403"],
  TextCell[
  "Graph[winterSaturday[[All, 8]], VertexLabels -> \"Name\"]", 
   "ChatPreformatted", 
   TaggingRules -> <|
    "CellToStringType" -> "InlineCodeCell", "CodeLanguage" -> ""|>, 
   Background -> GrayLevel[1]]]], "Output",
 CellChangeTimes->{3.920846909597745*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"8281b586-9a07-4dfa-8c85-cd4fe4ab4f43"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"winterSaturday", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", "8"}], "]"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Saturday\>\"", ",", " ", "\"\<Sunday\>\"", ",", " ", 
       "\"\<Tuesday\>\"", ",", " ", "\"\<Thursday\>\""}], "}"}]}], "]"}], ",",
    " ", 
   RowBox[{"{", "}"}], ",", " ", 
   RowBox[{"VertexLabels", " ", "->", " ", "\"\<Name\>\""}], ",", " ", 
   RowBox[{"VertexCoordinates", "->"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9208469239154263`*^9, 3.920846929449304*^9}, {
  3.920846991527619*^9, 3.9208469919766273`*^9}, {3.920847449253734*^9, 
  3.9208474685563107`*^9}},ExpressionUUID->"e5fbbad9-717c-4696-97f6-\
4da1f52177b4"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Benjamin Babazadeh", "Ryan Doolan", "Filip Florea", "Luca Florea", 
       "Max Friedman", "Mia Itskowitch", "Kiyaan Joshi", "Giovanni Larrea", 
       "Samuel (Sam) Millette", "Grayson Moskowitz", "Ava Nejat", 
       "Tristan Peake", "Damian Piuzzi Arvizo", "Joey Jr. Rallo", "Ben Reiss",
        "Jake Reiss", "Sam Tarkan", "Max Teigman", "Alexander Vandooijeweert",
        "Saturday", "Sunday", "Tuesday", "Thursday"}, {}, {
      VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{{}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0.00009, -0.00007666666666666667}, 1.0184*^-6], 
         InsetBox["\<\"Benjamin Babazadeh\"\>", 
          Offset[{2, 2}, {0.0000910184, -0.00007564826666666667}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.00001, -0.000030000000000000004`}, 1.0184*^-6], 
         InsetBox["\<\"Ryan Doolan\"\>", 
          Offset[{2, 2}, {0.000011018400000000001, -0.000028981600000000004}],
           ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.000030000000000000004`, -0.00001}, 1.0184*^-6], 
         InsetBox["\<\"Filip Florea\"\>", 
          Offset[{2, 2}, {0.0000310184, -8.9816*^-6}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.000030000000000000004`, -0.000030000000000000004`}, 
          1.0184*^-6], 
         InsetBox["\<\"Luca Florea\"\>", 
          Offset[{2, 2}, {0.0000310184, -0.000028981600000000004}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.00001, -0.00005}, 1.0184*^-6], 
         InsetBox["\<\"Max Friedman\"\>", 
          Offset[{2, 2}, {0.000011018400000000001, -0.000048981600000000006}],
           ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.000030000000000000004`, -0.00005}, 1.0184*^-6], 
         InsetBox["\<\"Mia Itskowitch\"\>", 
          Offset[{2, 2}, {0.0000310184, -0.000048981600000000006}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.00005, -0.00001}, 1.0184*^-6], 
         InsetBox["\<\"Kiyaan Joshi\"\>", 
          Offset[{2, 2}, {0.0000510184, -8.9816*^-6}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.00005, -0.000030000000000000004`}, 1.0184*^-6], 
         InsetBox["\<\"Giovanni Larrea\"\>", 
          Offset[{2, 2}, {0.0000510184, -0.000028981600000000004}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.00005, -0.00005}, 1.0184*^-6], 
         InsetBox["\<\"Samuel (Sam) Millette\"\>", 
          Offset[{2, 2}, {0.0000510184, -0.000048981600000000006}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.00001, -0.00007000000000000001}, 1.0184*^-6], 
         InsetBox["\<\"Grayson Moskowitz\"\>", 
          Offset[{2, 2}, {0.000011018400000000001, -0.00006898160000000001}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.000030000000000000004`, -0.00007000000000000001}, 
          1.0184*^-6], 
         InsetBox["\<\"Ava Nejat\"\>", 
          Offset[{2, 2}, {0.0000310184, -0.00006898160000000001}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.00005, -0.00007000000000000001}, 1.0184*^-6], 
         InsetBox["\<\"Tristan Peake\"\>", 
          Offset[{2, 2}, {0.0000510184, -0.00006898160000000001}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.00007000000000000001, -0.00001}, 1.0184*^-6], 
         InsetBox["\<\"Damian Piuzzi Arvizo\"\>", 
          Offset[{2, 2}, {0.0000710184, -8.9816*^-6}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.00007000000000000001, -0.000030000000000000004`}, 
          1.0184*^-6], 
         InsetBox["\<\"Joey Jr. Rallo\"\>", 
          Offset[{2, 2}, {0.0000710184, -0.000028981600000000004}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.00007000000000000001, -0.00005}, 1.0184*^-6], 
         InsetBox["\<\"Ben Reiss\"\>", 
          Offset[{2, 2}, {0.0000710184, -0.000048981600000000006}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.00007000000000000001, -0.00007000000000000001}, 
          1.0184*^-6], 
         InsetBox["\<\"Jake Reiss\"\>", Offset[{2, 2}, 
          {0.0000710184, -0.00006898160000000001}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.00001, -0.00009}, 1.0184*^-6], 
         InsetBox["\<\"Sam Tarkan\"\>", 
          Offset[{2, 2}, {0.000011018400000000001, -0.00008898160000000001}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.000030000000000000004`, -0.00009}, 1.0184*^-6], 
         InsetBox["\<\"Max Teigman\"\>", 
          Offset[{2, 2}, {0.0000310184, -0.00008898160000000001}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.00005, -0.00009}, 1.0184*^-6], 
         InsetBox["\<\"Alexander Vandooijeweert\"\>", 
          Offset[{2, 2}, {0.0000510184, -0.00008898160000000001}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.00007000000000000001, -0.00009}, 1.0184*^-6], 
         InsetBox["\<\"Saturday\"\>", 
          Offset[{2, 2}, {0.0000710184, -0.00008898160000000001}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.00009, -0.00001}, 1.0184*^-6], 
         InsetBox["\<\"Sunday\"\>", 
          Offset[{2, 2}, {0.0000910184, -8.9816*^-6}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{0.00009, -0.000043333333333333334`}, 1.0184*^-6], 
         InsetBox["\<\"Tuesday\"\>", 
          Offset[{2, 2}, {0.0000910184, -0.00004231493333333334}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0.00001, -0.00001}, 1.0184*^-6], 
         InsetBox["\<\"Thursday\"\>", 
          Offset[{2, 2}, {0.000011018400000000001, -8.9816*^-6}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->"NetworkGraphics",
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.920846930130784*^9, 3.920846993324173*^9, 
  3.920847453343211*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"9ab2b1f9-724e-4240-a910-3481d6b1efba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["winterSaturday"], "Input",
 CellChangeTimes->{{3.921193937603327*^9, 3.921193940822551*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"f175b77c-530c-4a8d-b879-e238d7a962a6"],

Cell[BoxData["winterSaturday"], "Output",
 CellChangeTimes->{3.9211939417327757`*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"eda3d19a-09dd-4c04-a8b4-33df37f7551a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Okay use the vertexcoordinates option to put the saturday sunday tuesday and \
thursday options to the right\
\>", "ChatInput",
 CellDingbat->Cell[
   BoxData[
    TemplateBox[{}, "ChatInputCellDingbat"]], Background -> None],
 CellChangeTimes->{{3.9208475602968893`*^9, 3.9208475890351973`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"ed9d039c-276b-4a96-a269-697c526a9739"],

Cell[TextData[{
 "Sure, here is the corrected code that includes the ",
 Cell[BoxData[
  TemplateBox[{"VertexCoordinates", "paclet:ref/VertexCoordinates"},
   "TextRefLink"]],ExpressionUUID->"00fff562-10d7-4a80-a817-79f54345e0af"],
 " option to position the \"Saturday\", \"Sunday\", \"Tuesday\", and \
\"Thursday\" nodes to the right: \n",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     BoxData[
      DynamicModuleBox[{$CellContext`attached$$, $CellContext`cell$$}, 
       TagBox[
        Cell[
         BoxData[
          RowBox[{"Graph", "[", 
            RowBox[{
              RowBox[{"Join", "[", 
                RowBox[{
                  RowBox[{"winterSaturday", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "8"}], "]"}], "]"}], ",", 
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Saturday\"", ",", "\"Sunday\"", ",", "\"Tuesday\"", 
                    ",", "\"Thursday\""}], "}"}]}], "]"}], ",", 
              RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", "    ", 
              RowBox[{"VertexLabels", "->", "\"Name\""}], ",", 
              RowBox[{"VertexCoordinates", "->", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "0"}], "}"}], ",", 
                    "\[IndentingNewLine]", "        ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ",", 
              RowBox[{"ImageSize", "->", "Large"}]}], "]"}]], "ChatCode", 
         "Input", Background -> GrayLevel[1]], 
        EventHandlerTag[{"MouseEntered" :> (Quiet[
             Needs["Wolfram`Chatbook`" -> None]]; 
           Symbol["Wolfram`Chatbook`ChatbookAction"]["AttachCodeButtons", 
             Dynamic[$CellContext`attached$$], $CellContext`cell$$, 
             "Graph[Join[winterSaturday[[All, 8]], {\"Saturday\", \"Sunday\", \
\"Tuesday\", \"Thursday\"}], {}, \n    VertexLabels -> \"Name\", \
VertexCoordinates -> {{0, 0}, {1, 1}, {1, 0}, {1, -1}, {2, 0}, \n        {3, \
1}, {3, 0}, {3, -1}}, ImageSize -> Large]", "Wolfram"]), Method -> 
          "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]], 
       Initialization :> {$CellContext`cell$$ = EvaluationCell[]}, 
       DynamicModuleValues :> {}, 
       TaggingRules -> <|
        "CellToStringType" -> "InlineInteractiveCodeCell", "CodeLanguage" -> 
         "Wolfram"|>, 
       UnsavedVariables :> {$CellContext`attached$$, $CellContext`cell$$}]]]},
   
   "ChatCodeBlockTemplate"]], "ChatCodeBlock",
  Background->None,ExpressionUUID->"079c5a03-92e5-4b32-8572-bf4cee40de6a"]
}], "ChatOutput",
 CellDingbat->Cell[
   BoxData[
    PaneBox[
     TemplateBox[{}, "ChatIconCodeWriter"], ContentPadding -> False, 
     FrameMargins -> 0, ImageSize -> {35, 35}, ImageSizeAction -> 
     "ShrinkToFit", Alignment -> {Center, Center}]], Background -> None],
 TaggingRules-><|
  "CellToStringData" -> 
   "Sure, here is the corrected code that includes the `VertexCoordinates` \
option to position the \"Saturday\", \"Sunday\", \"Tuesday\", and \
\"Thursday\" nodes to the right:\n```wolfram\nGraph[Join[winterSaturday[[All, \
8]], {\"Saturday\", \"Sunday\", \"Tuesday\", \"Thursday\"}], {}, \n    \
VertexLabels -> \"Name\", VertexCoordinates -> {{0, 0}, {1, 1}, {1, 0}, {1, \
-1}, {2, 0}, \n        {3, 1}, {3, 0}, {3, -1}}, ImageSize -> Large]\n```", 
   "MessageTag" -> Inherited, "ChatData" -> 
   "OEM6eJy1WltzG7cVnjROE7FJ0zS9JH3owIzbJC5JR75bjpORJctWTNqqlo2aoZgI3AVJWEtgC2\
BF0R79kHb6A/ravvWtP6VP+R09B8AuueSSdpxUL+ICOLfvXHAW2M3f1oPKptZcGypCpl/\
bobFmOJYauSPViBp9rq1SHLpLNdtTcpQYvYbTMMfDevDLLRbHbdliWtMB20lFaLgUunog476io6OtI\
TU9KY+P3Dp89GvrwS/waUsKw07NnmLJIvef44ptxU+YeCQNQ0a5kr/COaek4WKQiz6/\
INotwsfHqUlSUw/ewYcHYLZUkyYTAzPceh9GtyeCjng4Y/2sMr++\
J2gvZkh6X8k0CZgVrHON3nELms1WwNQJB0AL9D/bUewvKRPhZI8JGpuJ+ttf8e/\
fn8PcAyqimKncis0fbQRvoKg9qY3+zYJNF7K5jeB1+1Mx/\
f6SVQqxnhfwkE2K6v10V4RxGjEPS2FurUVP2/\
KYiSLJWy2mBsz7U2eh8lpLRiwO3hkkpn6lca1uUtWT9fXrx/\
XgbVQTEGCLCLwVDOW4xQUf8acsKsZYYBQDx4iB81+LmaEsLvlJm40SpijIYqpv/\
779HIeljB8nHtF68J5HqEnFIAWd753QOKVg7uZr9eDdzTiWYxbdO2VhatgeNcM5B/oF+\
4xGbvZVGAG/+/\
EDxcvI3vNSQIk2HzEIeG0U5cJsfQoRvgdmzQ1jVh6w3g4z4ZCpzVdAMuBvE0UYF65P/\
tsAoNG6oqw37ZCLwygPzHNtmextAZ+3dwVw5Dbb20zn2X1umxqKgt7InNl/\
XZ9rQiQgauf2ZcyCHwcTbdioDvHmNAn+8+\
6mJpQMWZz005h4bEkGLgkhDsgYQVE1MpGpIk9kj3BNjCQQB4kUERlzMyQ0gdxPFKeGLeHChafQDKlT\
zRQZeVUb5GDIBDuBoURCMQPTrTiihzKNo6KoJ6k2jiXkAxHSDAF/\
wgCmBtmWOEBoFMHkBP9zdBqNSSoEw3SmakKwWhGpgMloBCjYIenMy1TUhPetBiFFvZN44oSj3Eal8g\
G5D/oq4LuLPk9dQlYqXwEFVWgsIEZDLC4eH2ewGULZGeBjBlJWFB1Jn4ZgRXvIcmisEgpUhwpK+\
lBfgQdzzIYUhnqMCdBKAHaGRWhHEkMIOhvtepFJCJ3TGySADI2piifep7ksVJ1moUhjMHrK2fKa4d1\
jfalQPtoYcQ1TE6dApmCDQAmGJxcuY6lQBQW2GC+\
ZjNCVNIKAZhlhX2ImIs9ByqEIccH0RqVycRohBT9Zo0AnjOJeLMNjIvvWSTWiUwVgQ4hw43wA4DNQm\
IbHYN2xtuHDXcW0ouMsXscgCiM6BhAgFDcqR0dH2WQFmeOAV8lmB6qbBXlBvRqRAlAcoPMcLMjQrr1\
NHt378t5+rkF1V3QajUZ3404VY7MKhdI+\
w2NMexDexIKZ5SSPYxvqvZxpb5IjD7ptNg82vwpmQBAIZUYMaEQytVQ5HOAAeiI5ZM6oxwF8k4e83d\
4JbKzgCnJ01Jr4HR9+ZZtR57TrIMFaQSB+\
hoSdJgCDxsQApRCiJm2zP1vYc7VA41GmTwwxSTQfCJBy4fTry+QPZPL15QvAdbe193i/\
vfmofb4QBq4ygedjLFCQjJkxCNUMP+\
JjtpahwnRIE5YHBrWEOqZ62CD3TukoAaeTXawyUGAhPcjhhVu3GreuEZQMMEOxt/IhAwbMIHKe4+\
ERij68QLAaMsiw86B9k4tjyBAX+Lh4oUBGMkxtJUIo0ZEOr2I+6AksON0gHRsO3Y8SGsbMbKSKf+\
wyjXnNK2sXSaeNMZEvUqx/yY58bCdzwY9PsM1h43yhTbpL2Xw27ah2BezcJLBq5AQGygWU/\
fiSnXWTH2e5AWIhtUWI6i8YrSejHux0U+\
c4b9qIoJjPRVQgfI8b5DGmUyRdVckpMRFcZb64WDw1JH1ZqSwtjjUbnja7ZB8GML8i3rdm+\
Ho6hoZsWoSBu7aI7zMRwaqIDBRNhjzUjouZJL6UAifcSKDCZ3smbm+\
gioCBnjzFWdtbOYM3yOH5w48OL9737O7K086nn372WfcQ4Q1smEMs9VIemzogoe3eTvo+\
ISnkxKRBNm1Gg6+\
OLR6piAEaohMW8r7Xy7a0QBvZfW3BTYGZQJm4nxdjrMUPGUtcKdEcQ85VzGzrhgV/\
gso81QSzAVAZYf8HTgNZNMI6DcMARgqZCyTZ1q1txg5i2QPCEwqxBSy1k8DNh9quyvdyINyzUUZGoI\
4Sy8MM/TpybScQtbA9EGycT08jBJoGt48dNME8aLNcST8WcgwdGbYzEPL9Pomg14FdRhJo8cAXxWiF\
ABaMAaMsFULof+0+\
kcTS6JptUaRra6EahkOk8HUeNY3ZAOLJFuURPfZZwajm2ERA94Sxhq980bS7Owegq5ne7l8f4C4Fu8\
oV2FPA5QqkB9heR3RC7pDdUQLB16kGduKbuwB3vP7J+iX/\
nK1shPqkWiPVreDLapfcJpXKWsXzAiVeiJNdt5xPG6LvhRj5hSs4DVP1gqz8yjleFYTrBsI1tu1YCV\
wHdmLK0D+vgsvzmodrGaelcDk+\
i3AtYbQCLs9pEa5lrFbAtb5eitc2g92BbVFopTvFyRp5drYEmhIiO7VIMkVhkcbPlRBNDS6h8pOezN\
l2rTR1ZomLk7My57KkhGjBtvmEWKQpsW0h9kuoymy7eh2Nu6941Pnd+tXLXdvUVhQbyRPsE+\
N0JMi62/IobmS2Dlcqvqis3yqFpjjQ6cB7dY1cJrdvk+\
4SXGYfV6yfglJ4XkUxRaQ4sEizNhOLU1uKA6WS5uJ39nHF+\
qkthedVFFNbigPzNAUnWrdhD8lhryBKjqfuu3zjhdxn+ULbHMcv5r6l65e6bznFcvfN07yY+\
0okrXTf0vVL3becYrn7ijQ2M6+4qkPNThrHj/CtC+haNOkEBnH4QnLR+aDTWe92oRQTqMfwcLkL5L+\
vleffsys1cvWs65WqLHgdeLfh3ZhGnc0kgbYDKObL2qw2vvIAo1S8vIqzSVKuYOaW5er5AjqrR66cS\
dlLK1dMyFLtpkGwVL28Vs+\
qMtVvmL68fsXsL1dwGnPLNcz3hVltpv59qRAsLZtzKi4ka4mK813DDxiCJXW6XMEVIVjsT37AECzbE\
0q1WxmCc63QDxiCpRtQuYIrQ3C+\
7ZoPQVsLr9nuss9F5Dr3bZCIB1HfdAmMH8CL8bBTWSOkxUY9pv7YKa1/\
N9EMpEJrsjkwqoRwNiSKZHamlKjoqgKVnyonKyJYpPNznhCP+\
GH0kRSsWlnrOmSuLCJTDViPasOpIHepMoIZU4XVeJQIy+/\
M8HV9wn08lxy5EzToEOCVHNsFxXQaG23f0ON0MLDH6xReUVE7fwZSzF94kkVV8rf/\
vOO4dhX1FT7WSovEzWIFAzZZWBZ4O5j03Cb+3WpJLmAaaTdy/\
Vb1cyU6zlaJUk3dgpetLHNy8uy1rFe3kiXKFopGqbZ+xUuXmgVZcxo/p5Ut07lQR8qV9ku+R/\
1ZlHeWN9RNhidP9iSGugM+\
PPv1BpD85d8ewwo5dndUeFqateAu7vFUSEbMHfFEUnxoSKTo2N5V4dGSnp7mrGWX+\
mbmSIejMvZAsLMsgWrkSzzePG26s6T6Z1A2QHY1Gw/4U4ajLRbxdFSDN386YNlgk6oBsy+Cy4+\
Vdn0+X7/pXh9XKbNUmzkZpcb+\
85W2vRjieBbsDr8JUwoQzm5Z7JEv2XcvO4gyOzWKkjCW9vi8p2h4zMAHfXSSE9wgDzxPd5Vir6NYZF\
ltkMrL4/sc1P7xRgG27ynHlXRgdYe0wWb8MKNT/a78Di3Dw2rXnui4rwz67mMMFuHGQ9rUFv/\
9FA9ggQK8JENuDzg7Vfc1iOsX2pOEVa2Ou/aaaQvQxHnLGX5nh7FuTbWLzO+\
CcwbuEggGQflJk52wGHuOisfGtiHLDXo2u5dPN+iZTXe6353h+\
rPnJceWlCrighpnr986b9wAnBcP422jktCQ4UP1ETN4w5ktAJb+U5SWjAA/\
XFMhhDxDqDQzR66I3CEPZBxtSTxEN6zjzH5WvcvEE/xaAkDq0ac0YkM0Zn8C+/q2lDEV+\
LjDY56QnVhCWbPu8n/VZhrS6Xi1BXmzoziLRo6uxSnZNfpYjrkJLeOHfEKB9RdSDzk+3+\
fyhArBsR5AsjQaDVK/2bh1c/3i1/\
XrZ90ZWb58hDRmUefZJzXyCU7jh0bu2gARziHpnp3hbEummmEVpsp+xEAHi+\
h1vRD7WcZDpgSLdwWHxibmT90BO3C2n0bgym3Wp9CxFMUuOqRC3CdB6AJc0lY0+\
zwAJ2qAEri0bS9DYRq7Lbxscfl2TPFWzpUZe4F0Gs4EizvJt7fvqbsc0lk/ot1Ob/wOSu2lp9+\
XsgsAf/et+GDoPtdQtirSmaro76eCv78apAqaweHSMgZD1GTXym7B0UJ4H82qDOXS/\
Yalz80pNGCaV34/mzXAXpeP3TXM/y+RbQh+p2x+5uITyNdrZN3/z57rduCyG8jDG99q7MQVv/\
KKXXm2dNusB282m638m6SggtXP3onDZlDxX+ZAxOs1/xkPi/4Hz9mXYw=="|>,
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"dea09b41-f0e4-4a66-87dd-721e6aa4a853"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"testGraph", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"winterSaturday", "[", 
      RowBox[{"[", 
       RowBox[{"i", ",", " ", "8"}], "]"}], "]"}], "->", " ", 
     RowBox[{"winterSaturday", "[", 
      RowBox[{"[", 
       RowBox[{"i", ",", " ", "9"}], "]"}], "]"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"i", ",", " ", "1", ",", " ", "19"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"testCoords", " ", "=", " ", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"winterSaturday", "[", 
        RowBox[{"[", 
         RowBox[{"i", ",", " ", "8"}], "]"}], "]"}], "->", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", " ", 
         RowBox[{"i", "/", "4"}]}], "}"}]}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"i", ",", " ", "1", ",", " ", "19"}], "}"}]}], " ", "]"}], ",",
     " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<Saturday\>\"", "->", " ", 
       RowBox[{"{", 
        RowBox[{"4", ",", " ", "4"}], "}"}]}], ",", " ", 
      RowBox[{"\"\<Sunday\>\"", "->", " ", 
       RowBox[{"{", 
        RowBox[{"4", ",", "12"}], " ", "}"}]}], ",", " ", 
      RowBox[{"\"\<Tuesday\>\"", " ", "->", " ", 
       RowBox[{"{", 
        RowBox[{"4", ",", " ", "8"}], "}"}]}], ",", " ", 
      RowBox[{"\"\<Thursday\>\"", "->", " ", 
       RowBox[{"{", 
        RowBox[{"4", ",", " ", "4"}], "}"}]}]}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.920848476026919*^9, 3.920848534586051*^9}, {
  3.920848566545334*^9, 3.9208485994842024`*^9}, {3.920848670317927*^9, 
  3.920848913662421*^9}, {3.920848991496016*^9, 3.920848997092482*^9}, {
  3.920849425210451*^9, 3.920849447867528*^9}, {3.920849938956914*^9, 
  3.920849968140542*^9}},
 CellLabel->
  "In[270]:=",ExpressionUUID->"24852a25-f07e-44a1-91ff-8b8e0fdf26c3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Benjamin Babazadeh\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
   RowBox[{"\<\"Ryan Doolan\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
   RowBox[{"\<\"Filip Florea\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
   RowBox[{"\<\"Luca Florea\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
   RowBox[{"\<\"Max Friedman\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
   RowBox[{"\<\"Mia Itskowitch\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
   RowBox[{"\<\"Kiyaan Joshi\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
   RowBox[{"\<\"Giovanni Larrea\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
   RowBox[{"\<\"Samuel (Sam) Millette\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
   RowBox[{"\<\"Grayson Moskowitz\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
   
   RowBox[{"\<\"Ava Nejat\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
   RowBox[{"\<\"Tristan Peake\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
   RowBox[{"\<\"Damian Piuzzi Arvizo\"\>", "\[Rule]", "\<\"Saturday\"\>"}], 
   ",", 
   RowBox[{"\<\"Joey Jr. Rallo\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
   RowBox[{"\<\"Ben Reiss\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
   RowBox[{"\<\"Jake Reiss\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
   RowBox[{"\<\"Sam Tarkan\"\>", "\[Rule]", "\<\"\"\>"}], ",", 
   RowBox[{"\<\"Max Teigman\"\>", "\[Rule]", "\<\"Saturday\"\>"}], ",", 
   RowBox[{"\<\"Alexander Vandooijeweert\"\>", "\[Rule]", "\<\"\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.9208489154694777`*^9, 3.920848997756735*^9, 3.92084925144517*^9, {
   3.920849429744018*^9, 3.920849448666551*^9}, {3.920849941275834*^9, 
   3.920849969302643*^9}},
 CellLabel->
  "Out[270]=",ExpressionUUID->"bd6c710d-a134-49fa-9044-13c8c4c2a23f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Benjamin Babazadeh\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["1", "4"]}], "}"}]}], ",", 
   RowBox[{"\<\"Ryan Doolan\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["1", "2"]}], "}"}]}], ",", 
   RowBox[{"\<\"Filip Florea\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["3", "4"]}], "}"}]}], ",", 
   RowBox[{"\<\"Luca Florea\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}], ",", 
   RowBox[{"\<\"Max Friedman\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["5", "4"]}], "}"}]}], ",", 
   RowBox[{"\<\"Mia Itskowitch\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["3", "2"]}], "}"}]}], ",", 
   RowBox[{"\<\"Kiyaan Joshi\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["7", "4"]}], "}"}]}], ",", 
   RowBox[{"\<\"Giovanni Larrea\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2"}], "}"}]}], ",", 
   RowBox[{"\<\"Samuel (Sam) Millette\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["9", "4"]}], "}"}]}], ",", 
   RowBox[{"\<\"Grayson Moskowitz\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["5", "2"]}], "}"}]}], ",", 
   RowBox[{"\<\"Ava Nejat\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["11", "4"]}], "}"}]}], ",", 
   RowBox[{"\<\"Tristan Peake\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "3"}], "}"}]}], ",", 
   RowBox[{"\<\"Damian Piuzzi Arvizo\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["13", "4"]}], "}"}]}], ",", 
   RowBox[{"\<\"Joey Jr. Rallo\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["7", "2"]}], "}"}]}], ",", 
   RowBox[{"\<\"Ben Reiss\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["15", "4"]}], "}"}]}], ",", 
   RowBox[{"\<\"Jake Reiss\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "4"}], "}"}]}], ",", 
   RowBox[{"\<\"Sam Tarkan\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["17", "4"]}], "}"}]}], ",", 
   RowBox[{"\<\"Max Teigman\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["9", "2"]}], "}"}]}], ",", 
   RowBox[{"\<\"Alexander Vandooijeweert\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      FractionBox["19", "4"]}], "}"}]}], ",", 
   RowBox[{"\<\"Saturday\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "4"}], "}"}]}], ",", 
   RowBox[{"\<\"Sunday\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "12"}], "}"}]}], ",", 
   RowBox[{"\<\"Tuesday\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "8"}], "}"}]}], ",", 
   RowBox[{"\<\"Thursday\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"4", ",", "4"}], "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.9208489154694777`*^9, 3.920848997756735*^9, 3.92084925144517*^9, {
   3.920849429744018*^9, 3.920849448666551*^9}, {3.920849941275834*^9, 
   3.920849969308716*^9}},
 CellLabel->
  "Out[271]=",ExpressionUUID->"f5535e90-de6a-4f82-b779-83f7c62f6303"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", " ", "=", " ", 
  RowBox[{"Graph", "[", 
   RowBox[{"testGraph", ",", " ", 
    RowBox[{"VertexLabels", "->", "\"\<Name\>\""}], ",", " ", 
    RowBox[{"ImageSize", "->", "Large"}], ",", " ", 
    RowBox[{"VertexCoordinates", "->", "testCoords"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.920848611798348*^9, 3.920848638289356*^9}, {
  3.920848926037836*^9, 3.920848930533957*^9}, {3.920849639740603*^9, 
  3.9208496400971603`*^9}},
 CellLabel->
  "In[272]:=",ExpressionUUID->"a68b6f40-3ed7-4a90-a6b3-34a4dc364d5f"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Benjamin Babazadeh", "", "Ryan Doolan", "Filip Florea", "Saturday", 
       "Luca Florea", "Max Friedman", "Mia Itskowitch", "Kiyaan Joshi", 
       "Giovanni Larrea", "Samuel (Sam) Millette", "Grayson Moskowitz", 
       "Ava Nejat", "Tristan Peake", "Damian Piuzzi Arvizo", "Joey Jr. Rallo",
        "Ben Reiss", "Jake Reiss", "Sam Tarkan", "Max Teigman", 
       "Alexander Vandooijeweert"}, {{{1, 2}, {3, 2}, {4, 5}, {6, 5}, {7, 
       2}, {8, 5}, {9, 5}, {10, 5}, {11, 2}, {12, 5}, {13, 5}, {14, 5}, {15, 
       5}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, {20, 5}, {21, 2}}, Null}, {
      ImageSize -> Large, VertexCoordinates -> {"Benjamin Babazadeh" -> {0, 
           Rational[1, 4]}, "Ryan Doolan" -> {0, 
           Rational[1, 2]}, "Filip Florea" -> {0, 
           Rational[3, 4]}, "Luca Florea" -> {0, 1}, "Max Friedman" -> {0, 
           Rational[5, 4]}, "Mia Itskowitch" -> {0, 
           Rational[3, 2]}, "Kiyaan Joshi" -> {0, 
           Rational[7, 4]}, "Giovanni Larrea" -> {0, 2}, 
         "Samuel (Sam) Millette" -> {0, 
           Rational[9, 4]}, "Grayson Moskowitz" -> {0, 
           Rational[5, 2]}, "Ava Nejat" -> {0, 
           Rational[11, 4]}, "Tristan Peake" -> {0, 3}, 
         "Damian Piuzzi Arvizo" -> {0, 
           Rational[13, 4]}, "Joey Jr. Rallo" -> {0, 
           Rational[7, 2]}, "Ben Reiss" -> {0, 
           Rational[15, 4]}, "Jake Reiss" -> {0, 4}, "Sam Tarkan" -> {0, 
           Rational[17, 4]}, "Max Teigman" -> {0, 
           Rational[9, 2]}, "Alexander Vandooijeweert" -> {0, 
           Rational[19, 4]}, "Saturday" -> {4, 4}, "Sunday" -> {4, 12}, 
         "Tuesday" -> {4, 8}, "Thursday" -> {4, 4}}, 
       VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.025068681318681316`], 
        ArrowBox[CompressedData["
1:eJxTTMoPSmVmYGAQBmImKEYFF+yZxTNkPsb8t2/KcVYV9GF1QJV/QED+hT2E
FnBApWHgAwH5LwTM/0FA/x8C8gwO+OWZHPDbz0JAPxsBeQ4C8lwE5HkIuI+P
gLwAAXlBAvJCBNwnjKEfANnWQdQ=
         "], 0.040109890109890106`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.25}, 0.040109890109890106], 
         InsetBox["\<\"Benjamin Babazadeh\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 0.2901098901098901}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.9601908788330895`, 2.6621420775605324`}, 
          0.040109890109890106], 
         InsetBox["\<\"\"\>", 
          Offset[{2, 2}, {2.0003007689429797, 2.7022519676704224}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.5}, 0.040109890109890106], 
         InsetBox["\<\"Ryan Doolan\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 0.5401098901098901}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.75}, 0.040109890109890106],
          InsetBox["\<\"Filip Florea\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 0.7901098901098901}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 4.}, 0.040109890109890106], 
         InsetBox["\<\"Saturday\"\>", 
          Offset[{2, 2}, {4.04010989010989, 4.04010989010989}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.040109890109890106], 
         InsetBox["\<\"Luca Florea\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 1.0401098901098902}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.25}, 0.040109890109890106],
          InsetBox["\<\"Max Friedman\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 1.2901098901098902}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.5}, 0.040109890109890106], 
         InsetBox["\<\"Mia Itskowitch\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 1.5401098901098902}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.75}, 0.040109890109890106],
          InsetBox["\<\"Kiyaan Joshi\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 1.7901098901098902}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.040109890109890106], 
         InsetBox["\<\"Giovanni Larrea\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 2.04010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.25}, 0.040109890109890106],
          InsetBox["\<\"Samuel (Sam) Millette\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 2.29010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.5}, 0.040109890109890106], 
         InsetBox["\<\"Grayson Moskowitz\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 2.54010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.75}, 0.040109890109890106],
          InsetBox["\<\"Ava Nejat\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 2.79010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.040109890109890106], 
         InsetBox["\<\"Tristan Peake\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 3.04010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.25}, 0.040109890109890106],
          InsetBox["\<\"Damian Piuzzi Arvizo\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 3.29010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.5}, 0.040109890109890106], 
         InsetBox["\<\"Joey Jr. Rallo\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 3.54010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.75}, 0.040109890109890106],
          InsetBox["\<\"Ben Reiss\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 3.79010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.040109890109890106], 
         InsetBox["\<\"Jake Reiss\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 4.04010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.25}, 0.040109890109890106],
          InsetBox["\<\"Sam Tarkan\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 4.29010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.5}, 0.040109890109890106], 
         InsetBox["\<\"Max Teigman\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 4.54010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.75}, 0.040109890109890106],
          InsetBox["\<\"Alexander Vandooijeweert\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 4.79010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->"NetworkGraphics",
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->Large]], "Output",
 CellChangeTimes->{{3.9208486159242983`*^9, 3.920848638632715*^9}, 
   3.92084893109723*^9, 3.920849002029716*^9, 3.920849264886649*^9, {
   3.9208494333589897`*^9, 3.9208494525258904`*^9}, 3.92084966155766*^9, 
   3.920849945277199*^9, 3.920849982793797*^9},
 CellLabel->"Out[272]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzsvXm8pUdZIFzec+65S+/d2ZNOn6ST7iyddPZ9OUlISGchECAhSOQFRJFR
UVHGFY4sLgyuqOPSehmUT5mPGZnoyMTROX6OxBVxFBQZ9Yq4IIILCuJ6v/ts
VU9VPVX1npsG5o85v99dTr31Vj17PVX11FP3v+DLX/LiL3rBl3/Bi14wfuqX
veBLXvIFL3r5+K6Xfdlm0eCznBtON39+ZeyGm/9vONf69Vrn/u+j//voxD86
E3+vnLL5647Nn5dt/hzf/PmZ5ZVtj/H/r9v8eaTUTEfNnI6/F0/hqvD6+84a
H/zIBRdf4QYbl19zs1v8+CWXXwvfofx4rcnPoSZPw99LpzAU8Bo0tHHrXQ9s
fOXrvmfjG77rx9zCxg//5K+50cZ3/8hPb7z0K1678bwXvxy6kS6s1h+l1k8N
AL9lZdt2bB1ahlaXsdVFbHWzDICG1k4pAfzZ1CQ+d8NTmGTwGry+HVsbbNz/
7BdIS+1WBsCMd59y+lnQgtsZmoCyIuWeS02cHAABRiDVNvGSVjb/hSJ41G4F
AUHqbHbudgdA/ujgoYvvKAHySNSEpwYQV5rYZCGUvaxfE8hNxsM3AfzZLCtS
NG7CkwJe3sNNCB1KTTyn3EQCxY/v2XfKPIhsvqabALHtiQiQDKoDCX0Tm3QB
cr6uXxPAOGAgKMy8TD0loQVwRIkWQFakxXOjJqBBUTy3A5sYitJB+SMFQLgV
UuEgXSCg21Qrm9+FqhV9U4YAUBKttQzBP19yxQ0/sW33SS1DQJZrWQxBZLnA
SkFzmw0voAwsoTFjWKHq+7edfN7j5972JUcuvHda6+UM/D1Mze0Qre0StAbc
BOMGVV536N7pY4fvmR7f/Km1qsaDRxh+GQ+Aq/A/yB8KyYAZwE3D3xq/DhPA
pxy8C6GQVyqidgG9AZR4jN+449Ddr6wo6oX5G/C/9cbD9MZFTMbz73mlvAEQ
Wm88RG9c3BNtrn6kZ/Vn6+pIJYEHYLPeeBa9cUl/nJ9Jb1ya4wxvnE2QzjZ/
rW/+rBkN4K/LqZWjMWIoWdTEcI2b2OBmrFYuo1YuM8hzAIoW1vu8mBHq7D7v
MgEmDB78/NRwedfCH207+fwFxHswdeozJCDHXHfm+0jqLeCvaXhDepiEp/Aa
ac6OKbe1zj/SVvRW+n0Qw9IF+Lb57/zpuM6YvxvvDKI6yzHUSIlFgx4Ew8o4
gX/GMEo/U481iUTHz2auQr6AGtageiOpN3WBTNDcMsEoWI/5seLQon7VY0pd
Lev6GoMpN09EGnUFRJkXE6f4Y9E1kcJ/TwBdGt7ekEdL+Hv7xMWfjp+LXk5d
ULCZAIL4KsHbcJoF+JTQ3jltNLfhYuGTlpTsiWqL7Mmr8hG1H/N3452BgIFd
KdlLqLGkqSHteAuF6rY55Ks+px7TZY3RzAW5ku8snWMXGyxqdCV9WyMmcuAW
ScyE2TPVjAZuXf1QryNdXfDBx4j2iianY7RSrnFdlFD5dIoMTOmIG72kkcAn
6ohx/plzbn7pNPQ55v7GCi74n6VEMJv6lvoKKCuutK/x5779s6iZT6N4qnpo
BqWubjN6n2AbTlS9zuOLOG2bJvjOVD2N61poz5tgX+5iKcS+RzHsM4VjJN1s
fzuX07RWT8GDBlUUSeig23ty8kidrGpnQVoSImmgFrFk6HWFP73t5EAwoXbw
91JU5j7DEkicXUqJEH1PSN55TDcnbI5H2VBvpCWpU32pcS21DwK6gLpoQJq8
ruXIgGIppVYkz1xn4mL3RtqeGlhjnbkFTc9V3n3y4Tt96y7QGN5bQWz6itVQ
Xp057UYsCY7yiRr5zEjWSqdhUDCtc9nEIxja7FRZBBv1PUw1iMzfkm8u6Uox
xIO4HkD0zcn71POSYC29R99JQkfrLqacNL1CvUXIPzmBYpGVSRpMNFJhImeF
jE6gTVuo2PJOXVBCwWPmgjVeMBr5zAiVp2FAxA06BTpLxFBQEKFSMiUWSqxW
qjtjxnwQWpJelTET4JRMIDF8awTIski7JopGjAeaVJzQfwwTEEFxGuDegjgR
rFh/+XsWV/dB2ccHo224XpSgSV1791M+PYQKny5gL4PO6UnV/wGypEjg6yF+
zIexC7O4qcAcJonO5VyP5IftcdqMaNKaek+6x7ZIvLfJe13yXmqJVDuZ6CDI
xD4/uk/5WedOhBwRTYJ8wwIIOPiyAia9dKETAZwEgcoEOfoWdzH19bRTNXZh
JUDsYqq+0sKaajXqfU7JUu+0Z51ElIHYjLHCVmCfGO11AdsNl9FsXbXiWzCw
03ZSqDJV9Wrvtvhi1ZM+xgGjJcFI+uk0bEPjvV4ChxRA38etapWIlv5cUJeJ
BxIVei0r9jhqKdHVctkTTKYGVRSHomnapFVs0XXRkkTxdCYufMYucW4TiVRU
G2iqCR8iDUgma4oG1PGaiz9Tl3tsluB0TpFtqdRJUpYYgzVVL2dSzOOZyzg2
U02OXVhKkdelXoE1WDUR0+8lHC13jazyksZbiynBTcZi6sKicCJaaFelfD2p
ty7VtBMnD2curFdqKU/kUB7RmvVIiqaqlTUP6e7OhY8lnvKKhlaL3EqRUANN
qNQhFYhM5MnpXU+q5tVifaBltdGaKpswIvAXvUF23caqXCMmEFG1bMHV4pqm
RcIvjaOGiPjlZ1G6hZS1c0gnDw/SIozWbgFk0w1gC2TsZOhFYg1EmOgt/O3X
RMZCBqq65oJIaGWdxa/jmCck4XdXfBf8Gbsww+2kDao7lLoTp3cDltImpJtx
AGc4c2EIDq/GGwmVuYeXIYWNQKewsSjh/eixi4gWda1M1DRuEoeEiaqKzaMI
ucW0HNscBP51cft+42LdBRkduyBdPC2aKsx0NWoFPWJRWyGCiVUim5WJLhmE
RYFFSI2zE5ZRmang5+5iG7Ht3kllEfuOhjIvoNupTGOWQv9DZejJII/x35lu
giUg3TLdF3qbCAT7Q7udlO2bp69POar4CEeLdLWB6kVbugg6ygTvD4uNGxuI
FVve8anCCaBYcyI4a/5t/xnGOKGXuZfKpvIefPaHnr3u7+vZB3IMB2Hezhbz
qnGacAtdGaebCeI+m/930Bu30Bt9Nv9vpzdu7f/GbfTGhOB/2eF7vr4aQsLV
6U874GGiq/cKCyHQGZFeYSFEHiZWL5yJBe4p9EafsJCb6I07Y7SLVOLqd/Wk
0o26ei/JuIHeeGp/nK+nN+7OcS69cR29cawnzlx9nmDTQz3pcy01PWcAqoRF
ufP60/Ua6mmLcalQR+JSz+vPmqup062Gqx7s39NV1NMcUayERtsuRC23I1vP
68n5K6nZOaJdFbNbpuYK3Xg7CNbgaMkkXR613IyNPb8/By+LWm6GzJKG9TJx
R6OWm5G0ie4WBaPSrBVde0FPwbjUpkMp4vaCIBUtE3BJ1HIzEHeOaMQjUcul
+FyQQZQ3I2qx1DKFK/YO203CFYu8i5vtE8p7SU/2EW7zhPde2p+DF+rGe0f9
/vGes47cceblz2KJ7cVREqv5goGX02Dgd63sOQDBwMe5ozn6p3DbUpgwKuwC
dOOWdJwwfCLes0PbNPLc3Tzxw5ZnboWDWt2RidG6q185Gopbhp7sq6iqFiHV
UB+7TkOAaKZuCGg3B+NozGYFi94AoeaG+ljtc6mhI3bXVvhupRWOMgbsK60U
+XUOtVKIPJ5DgcfUEJNBxDJpqA+ZD1BDHEasyQBg0AoSLkrPXFjfO9eG32qf
Zss83MdkpoVUH7iwETXe5gi3fIVB+lUqm0lVlzdbZNF+3WymUklIRBda7sW2
s6hxNWmfuWhpZZSqHhRCvQWoGO+ZyCNoeQ2+0IKRGY/cubASuea7w7m62qHz
wNDmhuc7/Lx3uLRj4SPLO08LK6mqql8cWMd28Xd1RXBWqmctt1KZGSgO7U0U
kkIUj4qKuJo5e6Pug/Sa4sqG9M574FqTQNnWdB2O5+lckOOxf9VHha0zgVQs
rMjnVFDUEQnyHnJrKS5DqNX60kQIxcuiAor0OXXmsn0Kmq627qvtjdTI2VHY
miAbCiKNhbXx3J8TvJQrnHjnGVc8LECM5TEpyUBoip8kKmstkCkK2Ju6OXkw
C417+xtHBg+FCEIIXt4fu/ijxUBvIXrOqt0GDw2Hd6W8iejPbJ64WDAFnBPD
F47cuO/UI/dA/A2UQzwONboofU9dEK0Un865SE1jWszFD2p5lG5SiqAkATvB
aDLDnAs7ZDOP28gDzh8hcrJVPA54LEVlrkdsz7wE9zvrQHQZgAX/NdVyp/7n
TXlNkqkAYIUGzM8Aqreq3c3UJGi0DQLL4y48FnTGXCWm/6K8IeiMAzpL6asR
AifCIHmzD71/1ZnXPkq7O4uyuzNWj4XGHgBVNnFKQYzAv6l7EuzQw9fbVved
ow2klhWmt/Q5dlV2TLgFqZ6odcCE7N7ohNsfbHYAkLnt8vaa6kS7kECCLqVl
4iKy7o4ZiKmL7RZSrBIeonEyucH+mXBDQqlFFASFLtSNAjo7l7Ei1S35Xo8A
FPpEAG+ZC/iInJEVUUH4aOoDXOsusjQ+qqRT0HRSpzgcJObWiq6xSE/b3svg
l4vnIGTvXCqKPmh63aiS+stKsbPRWFAah/eKFknp65YtEtZfhR6nLgmrcMQQ
8FCkPntUkTVSiCchlZOAZzXibIpYGtBx2fedcvExKPu1ld1npu2pPlB2hQ6d
yxR2orqWamvh9YwVnQZFKayvp7oVqZ7Exbrr/kxhydPtjhkmMcVAEqL29lQ6
BGxRrDUFx7rHBPVOF6fVsLkyU0ZCwfftOnCVzDoReyiksCpPecX0CKtZEbzY
yhJFzZihddUUxwxpaDV2umrKjT+mjixuEL7LkVAzmeEwgvgsyqysuVj2xwqA
cpQMh2aNnR2fslwGTRAFMyVLCc6FwdiKZlImaSrNVebWETvKoUzWu/4A88SV
4476K0c5iDJbgzzHeJ2PvnQuyAYMrlaAzT4D9QTOfyjDqcbTqeqMXcB0cXIc
t4AUokF3pN+eMBjwigXy3q2CjI/o0HC8PGDACyuZB4zX1eqCh4jFJ1qZO6k3
kLhWSQfVB51TCjPKoYL/EaqlUN9/rAVzFYG0VgeDAy3Stcs5Ek7sooY4/iJd
ey2sM1sNUYSThGWk3uocDVFYEUdrxPzh7abmxgU3kYRvIG377lht101kK6fc
ip4Zmq3Q3qkV6QGvGEQp7UTQIrAEgKQ7EXNQl9Z8JS4kVXZuqM9aOFl9DhfJ
cOi75cit3EOtpDsRffOskOV199rQX5wTraQNpL3uPnoj1QZj+6ZEHbKx7n56
I92JuLg/mck+uKcZ9OxLY26iEqnzzt179kWROlY+nL7MoDHYit6BTckQvUM7
lYModEdt2el+5uAgmfUTEdFT2D6cQwg+i2BJAn1qG9NRoI+RKgkkcg4A5gr9
MSIbQB9ZFJo2txkMJDEDpRCKHjmY/pU66hceBEItW7epYeG+avb7X3Rf7Wih
QvTGRTZRk77+OeqrGT/EEiCUqvRlCMY/RX01I4osI9PPfP1j1FEzwKjcUdXC
VXqx4o0uNYSsh+D9g020UviR2vvWImbEERhm7JNRX82ApKN5o6qvhjD8fdRX
M0TpsrxRQKBf5NInqK++QUtX5H2B5lzUFom4IzA53hwVwpiutImV9GUJxsep
r3Jg06IENkHMEeQBBEPK4ZOZWTKGHENA/k73WYt3WhI8gag/vX3v6RB25DFh
GFInp1+A298SDE8uLaKMdPogiUwYsGGWgXQy0Q/EjxGI7WCpQRQsxcdotAsi
HbCcxMLHQlIbHxmSeeKolmLMRRIqANSk9G8IAMO7h9pXGg1wo7UB8q+pUZoK
LWpmiJvLgTKZbSp4Gkn7f0XtX5rzw8uI0T7woZ98/CW1nwQLCaUvz9uA4gtz
EhpNf5SavjyvDOAZTQP6Fxq8tds1TCO8ZbQbtKUqHx+hdq8MpD6uWImkvsxG
vF+g7V9Q+1flrBTkpf3UGhk+sEHvD1P719j0ppM8UyerNJk9uaAXU/+cOqHD
CZHphvZwyQHXD88x+NiDt9w8HavI1Al5sM33YcV/9eDzh6iP620+YB+rSR/Z
XKwfx/+Mekpiw9bgG61A4LYURGDBKr00subiRAYTp2KhwoYxrT/OuC8omYaG
rc7ihlQqkKlqB2IP/JZBspA8xl5D+2uuubhs1RtKvTX+oWWdlnj/aUZMwVvj
DGW0D4Uj6RIQd0OBNeE60wAjHmbfSOgo9IC/ydK+7tJoDvc31p0dTAXkhZAC
HRMH5WOkAIEjber3NZvV/pVADtWMKDT4u60Xcf+kRdztUgZdSWNCXBzmEuIm
+4D4PNncw7JkC6tB3Pg8aRINBds9sreiCatiw4QvE1/sc4KsEQk8EmsufnWm
yvngY83dmY+ijqkIIZlQJtYuoyiq0GJMW/yMih0tRXR0ZsIwH90Eu8nQcSSY
1pY8hytAmx2326nnyW4/vsJHZWu22d7ns5QcW0x2hkXAX33S+belgrMuCLsA
XYTkHASMvjMBpS3Z5AMjlBJwynUmvm0K30AZnLjwkQ4QST41XfNCK8E0Pcgm
Q76EUXyqyNbx906RTUjy+N7zbgYYJH+cRTai1YaLBhevBCrCSgBc89SLRmrD
zf4jk4D4aDTB32MXPpqYRnAC6I/QEgICcs2V2hYFVaerutMSNac5MaEq2CYh
5jU7z7oqzXhDyj8VwJJAqc4ZASe0S9YaSj5A4JVDikaCgXMWKbdrUsLnoZW9
GFMBbonYRYELXrdy55Sjq6PeJ4qGLFPaIsuIPJNm+QMZxURoQbD41U4TK4nn
Q3KTHHThqe7f7aYuGw74HxIIlqoTaiQ6/JHnBUnVNADyyvqDhP0i1FZIjjVq
G91r/HpE+wQihVSi4GMA1ymfBNJNN2EFHieuh1M9dQogt4fKavORP6S35zOs
e0okhl6FvUBiGe3XXewlYvtb8Do3VN01F3uNY0UZ6YfoveHLBNZWkFCSs4jk
XXcGz/fG1LWGrfUydWlOgIGpnaKkdEKI4AxIV8FJ9AJK8uJbDtz0kjUXHy1J
mVYk6nxHWzBJOfQF9cE4AHN/fsfpF/Nj3cy6CydZ1Fwq7UVaww+RsjXb/AOq
bFGTXYhILmnYqcyxe5Bpdw4Y8JkvRGkMFL9vwouPcBxSgzzQdxLoXY/KrK1d
rjY6i7Dbk6MBoypj17DTv1fBDn8visbJM2VB6hmTOXQpXaxLZNvqKmpmb44e
6A+hV7WKjBtuuqxg21EKUq+RjEzn1JDqQpYprMOhQuly7IrRdvTevhx6+D+B
3rI6/5tao6gEe8mWFzjTnQlOLNDQw/dT+xSsYC/ZcvvpOt8hG6ek/d+l9p9O
lVMpuDAuPj5X0++jpp+R8ySsKMeSwfSuzYS50QdzCMIyuNlojYm/Q40+MxA5
W6y1sipwy7W51G9Ty8/K2eeXadWFTxqVfuLxXmr/IZvGRtNQ3I9976Gm6QKo
bHHWsMrQu5Etw2j6t6hpuo3KHjQMGAGEHjkzuPFHbJKXGg9iXZWU36TG6Rqw
TF0K2J/fi5X/i5p+Xt6GEodUyfvlPfkNavpRm95opM6PMToet9/g57up/c/J
Se75eb7BuB7M5JbnCbS6yeZNAgAytwfDf50A2FLo1Y058YB/5wVx0D33k5J3
ETwnIBjrxlx0AIzzcjAUdA1B+zWCbo7wLCAb1MHQghuCAGUG+GAOFxCzH1y/
SnDNEbp1YwAls9hGuiglYbXRK4KjHdZ1ky1ARv8AlyXhSf+/Qv3PEe3FufZS
838wLw7mojoi/rIGoR0ERv3bY8S5OXmg3JBgQ5F+KYKjGSB2iy0PGo7UNp/X
SzR/MYKjGTw2oUZT63ZuXCxm/TybQgkIT0QgNMPKJnmj0G+ygYrib1n9aueP
Cf6laLPbbXnAMSzZJkbp66EU78w4gNFhpUi0O3JJ8BI5DqKne+wnkb8QwQFS
h5FjpSi1O21JGOd9KRAawvg/IxCawWt35ZIASjDO+1LjXkMYf55A6BvTZkTd
A7oGCGCrzmvLY9x/LdTtT/efe+ErVvacfSwIRDZqHbDJnsBhSeX/R3CUw+BG
aRicIKngyYYuhie128bgagjoz2mQemUFk9H9FWff/BJZDsZoPfkYyTTh+QFb
VPrlaZxR008upZgPGXe0EGjF0t2dExMIzsCnw0Q/4P8HdTlviN2wwnOWB3MI
PTsWRFQIFs6aH8NQzhN+x6mi9CAJ/xeEtQVcTXN+loDjKDrNHY/2sZxF/lbc
pHHusObS/Ax1aITVJTzIxkxKJpVFNfdTx/9O3RphXoqw5kB5Vt6+6rYhoT9N
3V5eIe/dOSX8s7PyTgC3gzmBjL4fp76vaFM6Za3RLVQ/aIiY3acR2xvInBkw
o7tgA6rS+9+ou6ub5M3GPO4zte0q6KwiTO+gbq+pUFZxNRvnzsypo/puSNRP
Ud/X2RQ2hMmDdGbM7ONxtw1h+q/U7fVtSqfcPdOQmh6SxB2qWW6BxtmQ0qND
S5Z+kjq8qUpYc1w4PQiN7qCfLP0EdavS6c+cnMim31MXPmMXogMWYK/LDSHe
AbbDZy7alJeWsBPa2toxcfGnc/FOJfw/cUnON7UbCmVr8K0c1hid0pd24bvK
xiGQSvDE2MVpCOAvpL1CLpEvgVohIGx4jIZCmzX+KWyL9VOtx6it8s0G22eK
eJpwa+q7hOZBEi+Oq5gmVTV9Jtxcp+rQTmd0/zQ8PoHRkFA2DnUHUo5lxKpt
E5dDrd8XWYfANeYHxmJ1Lhzsn6m/squXrkr1Y85/ITJZN2xYCSCMdG0Ap8y4
PKWx2pKQaoM6sTK/ZRd1zccNK3zS15upehEn+sdP6mQ8GIVbiJ80th7Vkoh2
Y40UsG8n6lR4EGHOkU1CWLkJEIIEPHE5b86UsetcnETLyptTJnyveEuhxpjr
GAS34i3x7qmO3+n4OYR5Ca2sUCRjqxRGq2T1xxqNtkZqwQXCzqBVCUP7wj0H
ruLIoWrCuqnbGp2j70lY5oTrWHSO+tNhmSAjP3760Qdl+hgR4KScqsGRqVL1
x5tU7XKqLkeQuxCEJgZlKX51I+ARZZ2bzEdTaa5TNJ3qsgZNiZDwW4VzyAul
mE1e7E6dQVosbLky/5mAmo+6qyl15buYC3GziMrFhHIT1c1Yk+DJB3RqqLCZ
3gGdLzrj8mdDZjoQZ4nsQ3rw5ko6BWA6N4bC/0QgPUkpljqvGO04DXSFj22A
fepcrNqdi6x11UwQzem3tCHtCEgq4HMmz5lq8H1dvSZQd/hGjN2aAkm6x/ZC
tCdHqwlBozhrWprL5kPMg8Z86G0E3nw8iAd3dg69HXAUOiwulS6X9meeCFkS
NcuyPPm40LUAaHTFPBaPPWa6iYUAn7TShc5EXRUFcHIHMxgoh9g9NPqylqtn
cdauyaeKLzvkXTGRcqwA9BiglaFppupJ5Oa6Lusb+Zi47bpv3YeC0cNNUr/h
y5yvh2WLs6QdgjKGQcHvU2ECrnKsAgxDwhQcYnsMu/8vQdRwZuB7B9/UCZY1
F5lcMwccZPzjWSIuC7gwsbXyu30aAlHXXHCvKoGo8EqPQFQ8WGXtB7AflK47
9Bus/yO1YfHEWJ+C/3f3JByf0EyXZSSewExF1xry3lqGllby7CWpnTHI2FQx
6JTi4ewlnpNzKIEk/caKHysDT2va9vLWDgt40mfR8Qj+i+y2SvBDH9ZZ4Srw
Y6f09AA1msoJwl0LIOU8AOmqswFjGI+r9uVHqRMKnrQlwdh9hZa4z3QZeEzF
DRX6f6jbBys8pG7tjYWTcpBU3w2FeAv1/SybBXflIHlKnJS/0r/bH6Fun92m
dMrdk2I2oqidE4NSWHX4YerzoSaZs6Xncp9VceIOn1OjbbahcJLRbo++3kx9
PVIh6J0B8WwrQZ1P0Hti41Bckd//QH0/t0LYOyvPjLMRhWgCQ5DeRH0/r0rj
lJ+FxatxXtvokW3mo01KZyNXIVx/bEiX3acR65lS2Bx1jGMQQVWrYsWXv3Y2
eQtc1X2mFvFAL4n6Qer2BW0ap+ZhTw6p6rYhTMep2xc2yZzZ/z0xNMfjbhsS
9QPU7edWiWya/t2G6PQQJ+7QCPCF2AYzwPe2CiuektPLP+sBoSV3308Q1iKA
h3h16lBiRyQqY9JmXiozuw14+snp9xGYJyAw+LYa8zMDtiuHTgXBNKT8ewno
rcYLT5qSkI1pBrgq4KgBLl/oPkcY8W0VEVCymg2CO3N4gPCJe1rwLr5Hg9mO
Mr7d5rehSh50AzyVKLqmTQzbHBHId7SZbKYnKmSMroP33Rq8dnSyEQuasDcb
eXfmIANsZ+dyaSj5d0XgNYOW76xy1hyfd+SvKPAa+vHGCLxmLPNdFc4WKKth
TA382TZlExi/M4KxGexsTDtSDqc2PMlMguPMAaOsClgzEPpYjbeZU2BlS+mh
Dt+RMbQaGn1Pm6Gm78BphdJVn3468e0RjM2w6XsrDK2Fdm/LgVEwNhTj2yIY
m3HV91d5m8qbARnU7qcO30qQ9Q23fqDJ4cwYGzmjjFhLSyNi2Fqh2G/ec84N
T28yN3MICimtrFDQBLxvIfB6RGgD+SRCG1p6hs1fJX6ZQ8BpzdI5jAograjI
GzSkcwVu43XOVuxzTRBur3Bh1ZbK/TYXEjz+HeExV2T3Si2yW0AUFCXhF36M
M9epMKWyvpoztj92r6dua6HfbhGwgK9R9Ddf+aeh8bb16TVZy7wTRkBrJbSy
P26k4Hd+MyEwf1R4JPKexk9vi5jpwvACfmRZeqgzQ3+JzXV8o2ZeCkJvQYRt
9YDomwiioxU61LmbjhQcg5+Os/2MyDcSNJfZeKLmtDmWOSbLed8KpIbGfAOB
xOHgadMo/g+0WWa6JEs5AEDY/TkWBlyvI7iurAhpgXGGFPlXDJAAjf2GuNvw
FJLF4gZcD9al7DbgCcauKtivJXiuqfTZ5ltmfBmedIg0DjsY0v0aAunapnQX
WJb5FUu2pBQOBiTQvJqguT5vA5qu8UotOGQ+xCjm4/EYpIZM8x7tDRWZrvGs
thAyMiS4h1QzRIWT2j1YlgpQDzgsaZ4SHHxSOR2ENWUqHMtG4pHRsSHKAHcC
z6sIniT8HqEcFMuWpGxCb6NrBFmvIN5S4jDWnQo64ExdYxe2+TsooC463YVK
8AZl+KIVb5+8Ow7gjeTdDf4RUDiSVT+WRxqjBQ8x9bEiII8VukBjCG2DcHcI
dZfwlWnSuDQqnSKOKvLIkyghN/zlqzFsBSLYsq2vfjaDHVdrS34QYBP6cRle
BgrfOwZ57EKoDrBeQv04GH7Dqfg2RZZJIEF0oz383zcprxWJR02aF9ZrjnCW
LquaHKvQSPpiK1aK9UEu34RYIVAy3bY+zaApYAUBJgF+CAJFC9i+opKBx+aW
ga+jPi0Z4MC0sQsyUKKykEneB1ygM45IAtGUEyEzlwWezEKLXuKwxb6nCzi4
c6ohdCHwXcSKeT7VrzqJESNpHbvwGbsg2J0HsSUF0rpEjAnek1AnO0XRVwr4
Spt00GIBSNdLklG6MAX7WuquIgBSNnFBT/jZzgg8l9xr7IKRBAD07dRso4VY
0+TVvuFpHC8rzUwSKLCOumNcoNRtqBFka4yG/LCAohwzgO/mkY2+XKbZW+bD
GVwGD4C4XHU32iwGeNYZJIFZ4M0p41ZFLaYuEB3glZBdCBMF1rO862EEXk3S
IM7L3oiqbCOiOsO4rQB5g6craU+SyRtCQOEw3kTRZUu85bmwOYFkYqUGuweD
v4Y6JAbvErRFB8dOmVkXtGOSfA9kMo9JjIB2kjJWrjbGRAcEt3QrTc/HZG+V
BSqEfhl7XkxFcxLem5/JlrswEBoofLNjK315zOfczRk58zidcXKwaWPG+dXU
J7HZH5URNgsMCq3RuvG8E+pQ6Dq6QEAS0Wly33HgRqFzTtwiBGLgcYdP+axJ
lLFcw9pQ6qkHig5QCO+lvgffYr2ddbkpBHxOEsj/bWdf/7kwdIMHC2H4625+
AeCbzNJhmnmfLvUy7xt+2ldRd8T7kaancyGgmodVr7kuZjupR6Cgd7zhhZCz
ZASHzgRLrQFWitfKKZcKtyN6qbNClp1aC3WqibbHzlPAOs6RGfeJU4d6HJ07
EcEH1sfKhNJvQcFpHtKlAeZ2agHOzGsb3P5KgsjgtibSIH7cOYPbJilGUm3K
qIvk02n6RbwixtWPlaFeEtuHQkGhKp9f7Fz8EbIFogbmqbLsVE+jqohil1ed
FarOfHG0DjBWOMTVcCEGvBtx59HLC4JBEi6fFAHOzZGt+LGwRstHZxllvaWj
U53yuLqePOoCSeLT/YU86kwmKZabogA+TaYeUzVsH61nfDAq9GIBZF7hYwEu
3caisHPd5VkKpNqaC6ZTlwflGuhXuaedUg2UxS9JqletruCvWirOVlqZAMbi
XdXz+7dYRRIJaUoLXrLVt6ZI4+WgfLwH609c+IwDAZZS9/UNO067wNcvL97g
8VOpN3VhaWzMZfIsOeekWdS5aAVPWll38SQS/pJ2ThGbtCksZcOQlvPh10ny
yoy/q2FiGf4XqKwuaDl+1VzDdvHsGP72cwNfgbVSns/UX+F5+gzA5KBWe0/H
0mJOeaspyxu29ur0BJ+N0vFQ8E08S/xw7piGC/QVJt6iYNgt71dImcBLsev2
Qrt1/Q26Isp6AaRQxKkMYlqcZdMTecy0SFfqE1pE59mYFg0H4cs1LaKpF+DO
O0mdi8mwz4YU9z3UEbxABvyN7rP/MLmmmuoWVTiWKN1HIYIMUwOyEBYL44gK
okZ1NIxJAQisubCYixLNI8lEI7IvpzP0gnSgc1uIUIr4xAUzJYhHZQewzFaN
W6nPlAEaezENFvbWAPByqsmJ6M09glpUCpFkMRUHusiEIPIBPPA5LWBQ2U/6
MqpcyGGPDKb9rYJ8ZBvz+vSnBU/DcnwpVX4ob9wvvjytybaMuDoMaAtAfQlV
fjgQScezIMY1zhmyhJpE8Hi8ghi1FoJfRvA8kjMG2q/ya6Shmx0O0CRZyCwB
5m6fa9NYC3CFN9Fo88ThdEStAvDFBMBn27TuyYeRAP744Xte9a7Dx14lvZ0R
2FQZ0r+IYHi0KaAZA7h7ER/o/gPMBNV9QxS/kLr/nJwHj/XhwS0BBugT+v7Q
IeIDgCjhafUR7d8QDM+3SY1DZJsNSDrp/z2HjtGzM2IhsAYR7r12ZqvKAHxF
On7/JhPwlaRjS/peSh2/sC19FdIjy57g3oH9N1wQZ+SriN4XEACfmzMJAKmR
XCU4f9MmqaFv+NF9N+TuJdT3i3O560f14Y+qfj/v/Hun/Zynz6duP68tahWa
DwXnDzCpergq3PE8R9f45IXput7fZs4bD937KgHSm5LT2mJJtJnnCBsEaj7i
igdclCRnzGRY37AJK6gO/HgcT82F2HA4SIL0UTYg6FaOshVOQ9TkgZJlehMs
KAjWjEFDFUj/tnyurXBWoikmCnYog5FLYAcy94P9RQT7HIfcCifFakLCkAoo
YGv1OHtqzLeCj/NCDWn7nBufXjXH4/srEkEBZkvaJ9BeEdZhGGpKyNDOcfJN
nT3KnMmaGBDAAw2wG5AnGU1IrPP9CdAv0EC3z8M9Ned20LdMCPgGmnQ+bc2j
eX7XGP26CNrm8bhaAtyaQNxgo2OthRQulkvgfn4Ed/PcXCFnelMuGG49psE7
1vEOYz5twP05EdzNs3R8PMyM0y4ceeJwUw1yemYjmqwl94Raw3YMdPOc3X1b
FJLrc8ihQEMerY30uOH00UxMqqfxCqKAelUTkwRykWc9a49k3MiBa+jm8yLg
m8f0ahGzBVmh/OEjDYfAqZZkorl0IRtFAvpnR6A3T+8VTolo9TTRog2F1dQ5
gkIr+oBTeDRUlGbifc73vW11x25eecocppq4XJvTEK0KFacU6KGgMcjGsT/v
NH10/3lH3nXyRXcjm2uLZgWJMUBXITB2qpaqhtJyS+VI4FCOBEL524crO5VU
enPwjC0K0DW2NC/kxdBsIXV1gtFzNEa1o4NLlieb2upI+RhNczJ0X0XgrrEF
fyG8ku3H7bYpk+BKi3fp8UIUvuLxwlHpeOEgF0fPxAdzUBMGZ6J6TV6cIJ3R
qR/StIy6lVOHSxX+PZjzSNkRU3p5Vz01c4O8pZC5rzVDoKRec51IXLUpilL8
YM7TXhJLqMVGj2N2UufXSgBjI3WZTX4UorYFyQTsaqPjYQXfXW1AaceAI+hG
KTDCsoIZQDNxX0VeOC4r3XUd2qjjKzvDKxVPhQYS6/TeYwZ9MwWuCcKVOQB+
myofKwtpTBJwSSjlwhhTG5+Rtx+0MZMEA0goZiBTlS7kM0mAJAhK18ug8NRS
Hdbk4IqcSgDMoi27KFZWhg4b4OtsqurTrqaS1YTAABj+X8xfSbKyVJWNoGHn
vahsT8/x8VOw+2xxYHDTINfkMKFgvj0XHkPFyLuXo3umij3d5l9THC635dG4
GR6Q227zIgGX1i/6nPAzJ1s1Ybg8J7oCN/XZttvIJeCSXpeuLEXhqR0hLcjB
5THDRaJGoZfM7doWi62lZwzrxCat2lyu6pmJx2VG70sVViTQWkpG3fGRzaKS
PZBzCarVxOAyo+9lW2Q5RUN6SDCBlNLczHkIND6pyKdD1lx85A9ORkLcoMRO
rvPzBXwJQ+w6qcvRY1ETKlJz6kK815gfj6U5RMMfOR2HV+Mzo4PQHJStJU1N
8+YmAokKPK8SR50+sLCYOXWSytFiAwSX4rHJGAv1atwcdzHT9fjq5VQP+UBR
6vewtBQSejQMHK3MzXl2dNDx904RROrJR+oABeDI2AJQJT85yaFq6/ptanFl
oloQeukyhJICA5ekbJzUmyqo13QZQz1N2pu6EIoG/yv2pESY6rKknkZDykRI
nQtnEiH0lA5qIHVGUk8+8i6HdUWP2cqbFpCjqFJ3k5OumEMrxcm15IVWoLd4
znTQuUxutqVyI9+hHS3qcJpDlHms6ktElyFB5hEhUVos4zOAApewR/Caqvek
bN3AB99LRED1mdFkHJ5Fh+omLlO7gA4G9CYn8eCFsJI/ktuoOn6vJj63Emjm
oMTio2UBDNCy/YoWn8a0nDZetnhK1ZO7C2VLEZ1cUF5FYu9cyK01cJNNxfCY
YjNVZJWTKBH8LhEbDwMKDB2m4o/mXnJuVaHr76yTv9L9WHVTstYKnezovrw/
C3WWtVMBZIJroTSolgQV0sUawgNCxQKSOnJWhqS5hUZ02rle5153p0IjlFx3
8VlYoIq+ICt2fduyo6JxOw8yvrHS8WuCjlBVwJ/im/gCdEM97tLSpgF3LvZE
BOmJJsgcIiJQKcM2Sr3ammjcjr/tsYnybGUDTWJApJce8kF7zyfy2KxBoni4
RybyCQsRjmh6wkRpSohyqHynJCGLIozymYRnvl2EgE6BBinZnXLTVI+kXMgw
rlKhLijGyovMFUwpKcQY4RDEUpIuPqzkXaSZuxorEBRbcSJO31pk4hQWYxdO
x0xdPCqVdt6TM2+6bGpAJZCndis5VEtGfsOX+Y/VHb27Y+xilZHv04QIE6ec
cwYrtVBCHfa0UvmRpvEVtaIA8iCyg8M1oxW9X8hyfElerETHXGYrZDRLRIf6
OxGHd3O/ZeLUdJctrtQZcx0BnaRnUe/FezZWDsdLc12oh0e5JgkYwmqBeuai
mbBvls/7di6WDqPr6PbfqYs0SxMhFpaY2eQDb7hIStdccIskpwFMFPR241ih
wWOFPTAlV/lIeZIZU8xKIc1bIjIUIXdCTgBnItOpFvQRwHWnBwa3ZK2t9ZGX
tbxs+9iVj9lODbiSg54KVH9P8bpqyo9IPM9Zc/HJMJYbgUy/VpWbgMyagiBC
UDUDhsepW9iEOPC3dik9CVC87shZhu2UhdUF0rLoCIGhrMfx4EhukjIkNp6r
4jFC226RyxRZmUfxAodmkh8OXJy3KT0FvKZgEdSmqkzw0LItZao9v+4zTfos
vsdTt4hOTjlfjsiK7xNJcIVC2td1hebyXeHkJ+jwF8i1gDI1kNegC157y4av
ihSluwKJFFnOMflYWz5ZrNjhJYOlYupCZglhO5TRxHpFYBVhkSCXzqnRiiSP
2hu7/KBu5zITMg0geLA6BZZuZuaCrWVMxvkrvgybJoXCa+47RlhjL3W1AAQo
F1MEFLR+IdApCGUBEBIu4iDEWerNAYoyCMbsJsmwd2F447bhENNcrc855HHy
DOnDQTPCUg3A1AU7RRtYMRf5SHJkrrmeYbPsfaBaVv+LcvyhzrbKK0yyhiN4
m0kyIQF8Lx1hVvo0FfT4+KlU1WFT0fXyFgnPMdpb6ElWDkSxd6sys1QgprEx
WYgZMOg40XTse/zZGtWIhF4I4SNdS7YPyAFWoaAhcOgUVSlYCDVoKjLdzplF
LjAt050cnjrXfIWYkGMXZp5AMTo8jdiiDsunExqc5CuwLda6oRe+VDKwqXRr
iaAyrP6zzaiXzPi0BFU12yAglG+v8GMYU9EaK28loD47b8WbG97KNSMBCOBM
cQxY4f/tNnrYEnu/jZ1e2gAqnTbVQliznKaA8rW3qfom9+9IUwMbwwRc2tUs
3R+I/Lgv7xbKa5JwQU50BWnaUj9I6YwSD/92aMK9FUkryMEFMfGOR5DaK1oL
MRaFTRUKpuETO8XYhHu2KAqH8VlsfXbmbfn6C3F9S88Y4BflmKcQmbGBBUxQ
HA4bve+ypbYHoHQIRQ62mhqmgMkCAguCQG5Pto9PYLYSrkRHRxJwKaq9dCAW
ETRAUhpmCsD5AVz9CoObTkmgUB268KubBrgUE8inh201uycXEYvymRgYMIcr
C0eWs6xWZWswU7Aln7Yu6lrtnFZBKBji1CUgiJctJLXm2YLwb3LqPZZQtqZg
pjScl8MJ9Sh6eSkV3ppyMfu/yAYEOzsWENDKhSyusZ+BTDcPdufF0GwPzaLI
WM4xYWtWgefKlcl4zmCmoyzTUpNYHz1FyiTwUfJCzkViq9KxClNrDD+Yw66A
1OjCOd4akExEyuJS1J3CApsWWpPnDGcapUiHXfyZtvdzXg/LiWb45jnW/0AQ
0EzDjuXcDaY2kwUCPx5mk3xXciLdUiaK1d3KQf8HbJlBBtbOydZk5twYGQR4
b2hLspvAD2QLSJGhgNMTkQagEEGKABUEDRW2Jmg038mG773hFZ2tAdNoJPhR
zOe8SQKAYacooTO1/O4KNwvrjQofTR8+CCy4SGqOBBWKSdQ5A75t2/adtZwB
FIBcVP+n2pTX6m+K3JggSEOWGIvXHL7HJ/l4xeFjKRaXaiza+QSekavFYzED
Mq2vCZQBOpQnDBDNT0Cnzc55kgs8syIiT80xa4mPAT38z0nqQL0/wLbLt5Sg
cLFGoZ1q4Jk2KVGntyo9BwiJ1GHYG2T1cTa+kqwCqiZ4XBTh0UxC8GybDwjr
U+1n6J0VHA0UpQO59Ck8hEd6oDZOfl4Y4dFMSvBQIJKl0LVcFgWRYizSZRHG
QpCDREkzlSMsweKCCItmioKHc8l/LOZGNmmqCZR1yem+uAyzc1iBIAki50eI
NNMWPNcWHWz9rhzJ1Nc2xaqMTeRvhdiE6hzqYCZf1WwGhYxuqO+FS5prwmVd
v6jGbt2EXomvzQ7OjRBqZjgoLNhhD3fZz7Tim/KmLgjTK4bK6dKaVMzokCB2
ToRYM/8BLe0VLcGdW5Q+4/KzgNtAk8rpFJzRkfMEsTEhVk6OMJTkCL+z6/RD
0GiXA+8l7U4beOVJZlJo3OoUkiSsRIrm7CwQdZSM5AlL+s5kSJ4QCVdnCx72
dGdF8GpCaVyJAPWsdAq80pkqcYIjDQyVLAuLOssCWA/kz8BQ4doydIGfehpt
CmrhCgiVb0HrZrK4WxiMz9Yo19IwLAt74ZlPKMbCg6v0ZSqYpujOHL4w6mUC
zbinHpSRZ0Ul2kgXDxPc6QrGE5SWgWPqgBoadkH3+eGxZbs401nNdpkqcEZO
rQJZ0HIF4co28xPaEL23kr1huYwpdPT8HFMv/LV8bzXFYChTE7YnljChdWG7
H1tKqEAN19I8ANpRmgfad4uW2UX8oMfn2xqBLKglcTxmq4WVs9Syf8ZevGEM
aHnHuvbYs+H5NvGwE8W+zBWvCbGVErOCRLp/nSBB6syrbSOxTrY+2papkNyx
JoEq4bUGuZDBqpb+IsGGrezVARtLqRqeUS3tY0GwjAzeCqHUsNRyYyQIkbPH
WwijdOldIC7kGEb21FKH1sSskCM0sRICdyF1RoINZTqUzGY1jTG1+g77GXpM
tUhQI+EmtLHHUCQjP4GhNDTb4g3JgVYac4LyPBs21FLFnoIVyITNQAfQTNDB
1ke2KCPFEpzodZ271BqYay7KHbkMKENgCtkptoLszmUPejDiU0qGgFpIk2in
/T9afgxltXNTNXk7xdaRQiKopZxshurQ1iOHFo3gKkgohoBFiLCX8fLRnN9e
mm63Ia5J2il5cWHnTiHSGDV3akQwpHzGjzAyt6w+pkm4PX8mtBAWmew7OSb6
8Qiz2CQs52wzTAIFjjA8g46L37z77KuclVuuZhJuz5nYS+xkqVMDbxkFdXC4
5dfSapxo9rqjCFvp3VouKzALES9cPo8z84IEJjgh/Mo66Blc4Ty05ahS4JyZ
lYNsDB6HmDmVhUPXocHORxCP+bkenSFMD5RUDpiuuxBnN3XhgibnQn4Mrrsq
daG8S+oKrPDXyodBx6p8NPgG/6xzE/yK9DgLvcYpOdShkLQZgUyfF5gxpHLG
xcLQU4+IXzS6LCQ1o2s+U6mJtbQYRledf27YKqplnnVmh0dTaM3Z0b6DUFUI
OfXFOPWRs3UQe/743vNuhseobXymQ3oQOgt9hScbih8df1f8iMNkSU+yu9zX
XSwq6hyA7kq6J6nB42bymbi4xV7ZQFhi1lysS0IsbMcIJH2sYVP09qtpEYxM
1gVxgf9ZXBpzKaJsRVz8wa51/EZllqzoehuhqlAFDtfxOtoyYKoZpKm37gkc
9zyfqAwiBiaHYDujvbWACZ69FSzG3OzMhXM3fXJ+9JERDoI0nQROjWDPULMh
x8gVXsl0WTgCbQ2mNLSY4sFzdcEoJo51gm4kdBWd3Ihe8Yl9xI9XQ7VvLZzh
5Mv5tAg51W4XQIzlI7mVEFtNDgitBZh9shenUI76gKqdf5YdB5fv0/B+XSjI
aba9LDYcNS/LHGc433M6mbQShhZymFqyQRyoZH5C2RBFmgZ+WLIR0Uk1RS35
fBtrXAVuXRX4oBxGI/HnhLzrLpwxILkJw9Ogc/3sSOeUi6FOgMUSGeyNU+1F
JFFuTCdlnKeh49ciGvSRFQ5NMx1XAnr+QcaQFWOWgbLCZwobs0BCJBUTPZoI
jnrUsWRE+DPhYvmeDBcbgbRLcnYQ5ENPtIjEWCdOhdFXPDitprAjFQUP+jCu
p01Lp1AQeEVm5SPkmoa26iKhAk4sT5VIV4vVy8YWFoh05swx8el6h3Fa2fA6
iPEsEz4Lkh5GOvUdEVX23hNXIa8ZIO924T0ceyYunGqC5+CSkEcylEmuVEvc
QPlELW9BLBILEZ2mdS7P0DKVssSiTENZXRxo9dJ2Qyf0zFzGq40mheVUFojU
cGzLISgt530WIUBSsSy4rht/4RnPelOB6JxiEc9XNImlDnzn+4OlCVkUhWSD
MK0RW4qtWIOHNux9xUDqjcO7OPf0MLswgk08DguT0IIQRvW+FLXqEiGgJTFb
6bGLXF9rIwTzP11h25W3pPjfZwE0O8e5xjSwMguwXqfsh//XXVE5csqmiW6w
bEXqgShokIWuaqyIjpdOXOYlYNWdcZllrWYKJKObQQS6MdOdMIqBYCMpci6e
XyUQIl0lPsDyO6mdmt+ZjRrWRoW1Ulk4EBiE4l8J/MQoaIOZG4VIKjTN2ewK
yTtVRWi27uKcDNIyH8+XYjl2T5k+8FWfkc25YIbWVDOz0A06K/6zPeaHkoRl
/b4FliVs5UwZ3s3WzcwC8lrDxup1PhVgOpq30rOao2kOI5Y0WF6mcRAzXvb6
F4K3nN0vOhcO/7PtgCrCh4kL5oYfT108aoy5+oD4I7WpC/ztFxHhByQDJARM
CIXLBWDk3UlorlM9meMHh59MXJydYur0MmmWAwN6gqZZfIUS8haiv0AQCCnw
o4yOh4ykoOhbsiCYW52FsGp12Yh54jL1LlkWyvsa/0yQVuakUiaywCdNmhui
JxssOTXuBglI50dtj+vW8Cw7jVawo4oQeuOg4GztCGSubJP8Y5lIQ5tIKseT
l4b9QRqsXde+9FoO9XzzFLJmOyy11PQ1c2Nc4KEImc5udti9JBsz/1Am5KJN
SGuKeCAQ0trw3Tc/IT0UByrEurVCrJq6GleLAKOIkLE5N1zC2HR/MiKgyMAE
6RFQnAqKah23E+pRhHExGmuv8copRncrod5E6o2JCuaoVxBDfYInVWWDcEDQ
hHDa/JXX7v+eIHxhDqGHgsL4i9b6lpw3yvE3pcKwvvC/0qzcRLVWmT9OiLwo
AGuR27gU3uN5S6WfmhzvyGmssLG51FoX/TvC5sVl0sMLtQMWN9v94H5zQa52
5MUFRFQgRNnh/lvCga6oLoZvPWLDidJ7SwW/WvrE7TFox2NE0l2MZHMj15GP
ESJf0NQRW8MLnFDneWy5YmfeMISxju+x5TZZGPlrQoJuh297KQ+XJQ/KbrZp
VhCsOTFpTPH/iiD8wgCh5TY8klPlsYQjNU035cq6naVwn9felnb8JWHxxWU6
Q5ePVDTgpi3K1WoOMdQpqLlxxWc89H6UEKED/8Xh8zk2QEjC2p1GxoG35AIa
Y2RMl46MrYhYwz9COHxZDoinaIET+ExxIlsArcmTcdEFvLPTUJd9eReGanyY
8Hh5ECoL3ueUZQ7KbspJDtVqImUgAuUJIsjsfZVmAiJ/Toh8RV07WKhMHb8p
f9YSqsK9IztyWYMeTmopxocIh39LOJTGv+dUhP9Gm1ZNuTJubVKIpPgxImUf
8c8Ika+qaEdNvW+yMcTxqXBqEqVhOeeSwiJ1t4wNCkNB/oRQ+WoSzOYo+JAN
OtZRF8dlc/CCgDFG6dhmXQV4sk2YBJ0/JjD5xFOaJ2QBD9kPojQhSvetUbMx
7N9gQ4VOZU0grRzDlnE4JSZQPmp+kBDumVwEyiS5SMXoAYi1Q9c3VjCrCbCV
E1cZEz3HMaKmYx38I0L8BCQioYGsOFA/bIs8Iltgv7JHmciPAr6aDoYpApKd
knPBcGX/kGiRJC3Bk9t9kpYYI7nH4mEbQ2TdjTaPanJvpL0tYA//n5J3bpiw
dcJ+jjwnagJvWbICx5EeN9gMaYq+gbiaYaYzMD7UUVb7P9A4t7OifHZA2NL1
RpqI6228lJHLpNzI1RtWmWMDcFouRbHb8PuE6xxpVPgkR8nDeCjnoZf3G2ze
a/6agj20JbiCcNn5/j2NcDvpinEKJ1VfE50CW/G9migbRwmhvcIls6eFlip+
+vsjlJv5WZ5P9ZruyrNsNJANN+RyF6xXJtDGIVCFdMr20+x+E5/+dyOkm8lc
VBJRy1OpuWbX5xLfS6oHOTEU1ikxTs+LY01+X4RwM+/LCwPCltV6dvkxlF23
RfFmnPWAA/WsJZszck2INfl3IoSb+WF4dbPkiTw756LHyDhFmcwpMpEeGBhZ
9uqMivAEVN+bCXM1c8zn5/B6XAqSjB0qrmYrCzVJXjAQK1isM2zhSPB9T4Qv
WKVqYpmXBGG1NPTZdp8I5vU5+6CcsF01ZdjFeUngb8FSnRlLe+5p/FaEZynP
zPr+cw7jYPTSgGdZZ20jdV1FzgjZUSrCgqiVL6dwyS4jXJ5Y/Ca9Xs4/syj5
Z35/95kXeegpoWvR53hWmS5Qdq3NfyXWeWpU6IoRF1ooxGO9PsumbTKP+I0I
dSNPzVDmD8Dvd5x06DbrNONLcx57XGom7DpbNhDGO23yAU0UGUT2LTKgbJyV
k9kwZe+mBsqpbJbSVDbwEc6bJzxpq6TtsNQSAF5r81AP4tl9NWj6qB/8Xz68
spfOuinyoGINfl2TppbyZtFMecNRo5aSQD/KeFgeTs2bKygQKkZhXMBnFeKk
c3EmTtm9eRe9nuTEgRnJFnLijHqTyrKzz7LlCGXtWpscSIJCeiUt1y1Swf/7
8+LYyP4avb6FFDmrvehScqGeWSYblF1jo6/M8JIWzCcOJzbEiNGHtvaHZitz
oF8hmsyTMGdnH2LYlpglxLTE1+ZoBI9jpAXnPYeOYaJH6DHxkFEtz7YJmkyE
fpkwv6qOjUrsbsl1QeSRyNfkyCYiH4kEJBN9ooLVgZw+sSX4JULomt4IWTpc
S6baFlQ/FgAywCZ8jwU0dXkZofJE5hcJoet6IVTygQqDGwJ9TYV7KsedTk8N
2Xet29fg/wMVhges3klY3dAHK1uLGvbk6sCmbLaiTO0bVCLn7z9k2xGFVWNm
8guE1U11rGhC0vZIagmVr8nBDHZi+HWHj71SsHr95qMkWADHFE5wXXY4/idB
cUsfZIqOQ82ruroiKcyip29qjyDydnlmuZfn2PQI2Pw8YTPpjY1lFx60pQAh
uNp+pgXuygvufTXYBMAGTLfer07twjk2cZJpw88RVrf3wqo0Mj9o8wghv9p+
hmBw4jTA4j3MJ8AKnbuCd3JOTiTDOHAU6VP6YGUbhwfLfISyqwIYmXHgXgEL
GIgEKwHTyEID/5/b0qb/QTjdVcfp8wPcFjsezIXCw311DgH8z+jAv4/zcCTp
oYFxy7EuoWU4mOtSPMb+LOFyd29cKrpkWoargmRlz+6IIYas3c6ai4/ieqij
B3PmxVbiZ+jde3phVhpsn5ELuYfgKvsZcjDBrJgJW21o6RnkwVyoDd36acKQ
LpPw4cKocRjBHc5ojrEX+IVnbwbGG+p40cSFjxCGgYdMKjOpkmS+2QjNrEgz
E6cy2bgkaw2/3zmV2UadQpwKDOocnO97wSOzFD9FZPAothtKCwLh4EkCx2d8
4f81FwLn1zVgBOyqtKXrCDjwLiQygoRGlrNAF0jYRvyq/JnYfitvy3ERVmtt
x9htg+cH82bkkRK+x6mNywJJ1hNyrLlIGD035KNOrDZS4qx2yasilZLkB6gJ
JFG35kpLlP3CrUxdfLJswk2NXXa8xLwrXN6lb3E/na+HOCmJ9FCgYtHxPOfi
4+NPGkJ1tEraXHMpDZd1c8KqqBrCEmU5QZIaAvoAdVgakinxqe0MKhnV8qtX
kSLTX9gRNi6Wise1/0avH6V6mjSAK5tdoaKQopiFA0lvJA0Z++JtE9UF/JVL
RYVwEVf58KS8I00Je6TLT4k4Ii7sK5wooNQZcz+AcBYiaU6Ajb4nZ9NnAcHi
LKQ2k2LBM5cvDcGDcrRq1shsbFXDuyx45Tn+OwjNozFm2OZSzKa1mE1q5Ftn
WulByDNWHfQVWsMzuEiZERkCIpJZZOybWdJS69ynw/RpWYt63ypE1pF4dRy2
43Z0/wkNldwV/VmWMdOfZRkz/dkJNZvG60g31hicbB/jWE33obSWXf4rNaDO
pvkBZdngQiZovraidf6G2yktiwQIz7TLDGeItX2d+Nfr6T8+1ULnT9JrwLYM
WQIF1kPPh5MyaGX3namGER3ekShN4Nn3MyccBfOGpo/6GqW+HBSqXGXR0FoR
vcba2E9SA5fGNJp6uuEY2Uf+PIPLaYi2C7mFmul3kUOQQTB62DA5M6NP/8C6
Et4QRSEHbAsQJb1jW5hPhgnswswmSRWFCLAKmIsqBQunRtFs/Q1BiiVMBku8
8MIYQzmjQLoextcDlxdYfoKQY/kSPUXqW7m0eLK75tRnC5YuHnrVu2tx2Q6R
OHDx4AckD4bfz9D4iivCC9gppviYujw9ZA2UzugW61HiNy9ULrwbpasS/gAK
nCu3tOjVuBqRr30wB75b8Vl0/67ImTTH7s9iNMA6shDmvqsxi4iduceoXkUQ
hQhTT1Iq85/Ut/NcKeRWGmsOEFf8wCKfCT8fuyxgYkmmxOOkvXUFtPSJgJJw
beRPu/C0PsoONDySwybCVf5a3UwVYJYmRAgQOJ3LRgx8i/ZGim4dj63m1IFF
zxxbSfSy+M2FvDgEBGa7Tofyzo1NgLcT6pbA7fCcSCansyqxzDFlSd7tmNZR
W+wfAahvOXDTS2BQhR9R4jHWodFo6sJn7ILdmQRmUcW1pOIsr9gQshK66zG6
y0ICL1suCOE0ADThYnkkAHWq+alLNcGcMnvQsDsK/iyuKBcW99AuGdfe+Gec
DyENqCWoekVropXg9C+NXZsfJ5pcGqO35tFDXvFKpxBp3dkZoIT++A6neY/0
PHlH2pClZMhRJKiBOAokUl/X1VImyBTqYi5w/Wm4dIsVGIt5qXjlE4o0mchF
xdpLVrOp/ZcmhWwmmTkDhOnu1WYVyvJlG2gkdLEEDey2aCElro/t0zWlFW/v
PxPdjnp6ssJPnZ0i2xOb4+CEujMXZ5ziV8b8yhTBprLOqQGL57mTpBl43nFP
WplBHn/89KMPftWZ1z4K9RdmHjL/4aFBmhAIy1VjxFRuGS8KHLFVgpKGw+3w
deLCHQeC5ET9L6/DX2amiTfTSr8iGHjawYfzYzVjIJ5GfZlzDhLCzBNL5A/l
iT3QRhBz1POhvPV4tfg/UT1etBOLMVO8AGz9SENGtLinyFeiTZxiHx2IKa5q
NlbUaYvPdoz5XH0aqW6cL8J9PBXoG/nCTKPyfurbqB5t+AzF/MycXgWPFsfX
pBj9tfPqNNvlK1om+FiZPNDgAzl5vAlj0pmOnSKdxrmwOpiESRvUa23Y/seI
hGMXbxEu+KHBMhH49FCdiGFstoh4L71cWnliIprOx+X2M3Reb8wFJ5xdXErV
NBpKLrR5k+w0vpWoQCbCNEfwfSLUom1uKLqgTq1tvuJS3DQ2dX+OspebB2y4
0TwpVdWdIk4GqaCcd6MyVSU5i45j8GBatmQ/RvVeWke9kc6qIAqI+2UV3A38
4H8WBf0KBEToq835avnKvsqPEmJf2Bsxy1A8rfwYyhg305m+IQcQynk5V8Qc
cIK4HGHtRUEashYDbm8h3L64F26licXT8q68wBaYhs+ME5wKMcEXEPsA/4XH
F9ktJoj9CCH2JX0Qq6qaaZUuyyEHWBihdLo+inkPwUYQEAaBYVB2Mb1VdlN/
mHD5sjouL8THbWfovooaXVYRGjrGZt6mBghLSOKPbsrgEZs8AaM3Eyhf3gej
oudS8+qO2kiiu1ZGBPVPEPkFQfximyjJ+smbCKVX9EbJshL3lx9D2dGKSF4X
Y4XsZKz2H7zrawQrED4cES7OKWTYB54YfGUvrErj+/05Ab2WFRiFz/gYQxqi
thyayyJGj7R06YcIoa/ug5BtFwpih4Q7agu+QuSxDBEkmxUkenHeWDzi/iDh
8rV1XNSxc0tV7rcZgPJz1JZ8RJVjx9MdZxUKKpGiZgTYhfnrsYngY3mv7I1c
WZ9sE3FpRfIM5Iw4V2CaGTqkvMuKT/79VHnaC8PS2HtfmQBQdmlFWK/OkYT/
l3JhVT5htMvWz4v+PsLz1X3wtFWuZkAUG7NFJMbQvtp0MeVuMVqRZbWsiN9L
9V5bx7Aj6WkO0PdWeHZpDgqAzYimjoeBKPxfDHm7MKdXrJT/nup9Qx9Ei+N2
zQG5NIfY404BqFmyMUYyGs4d7Qyb4VUXVroImH43YTpHIrLP7U0Uy1LdZzMd
BeMSm2AqKtdyZkaRK+Cyi14jEb/A7iIhyndR5S0kK+tHnJIDcW+ZdlB2iU07
dNCuNOijLJz2Kwq7ak33/I1ElROQyezFfahkm8j7cqn2zy4Jz7KFgYQ+KCtM
n9Q+1jZ8eBJd9vi/k4i01RRnDco8PwiIpUEF5ULIj9iSj3bxiiAoGiuDPmFX
1h4NC7PxZA7x7USkOTKhVQ6RJHSxjM69NsQoBJdUuH15Thegl3FlOFQxkhDB
/8Y83rDD36ZJ0k6U9pJe9Cg5U4WRF5WoICdqpTfzha0kkcO2EpUtzbcSMebI
pNZYjXt+jrBHqmF0C3N8gxSAq5U5ctjUl4rL9S2aFO0ca5XsLtAHpWBru2a0
G2Bb2SP5s3S9KLUYKpekbmqxpjCVKdMbIpo0k7B9UR+aFL24mpdqrC14m2os
nSlS2Au4trr0m2W9PiJKM0nby3oTxTKo99iIo7gfqRDsaM5xRZSUVosVxek3
JfvmiCjNRG6NVVQmSsl7u8dGHJWmIClqaSjz95MjmdqjK2hM2Yp8U0SHZn63
l/ehg21N7ykLjloDTq3p0SKulsdWU5PKpO4bMw1JMr+NJPPbu1b2HIB3AUxo
u7Ei/WjA2WI+y4VpTAtrrmoOHBOgYEmX2prSmAe+LiIOWAcrTdzHLjhy1ft3
7b/cDXHQwGMwIGlCqIZVUYSqWBXTchR2Q5Tfn+3PF0ytkZ0c/i8YlIRMr43I
ZGSZG3k3bWXPGOgPECI0gWJQJBRr7LY1MsQes4FGUbnYpia64kdyMWpSrKp1
ZV/uNUSxcpq6gaSpg4mSPq4tZIK2F6HhBbQL6Kn4SX0llUugX81U2fZaiVu2
2mYQLyTMHohcIawrTb2sTCVfHVGuluUOyuE5dreAHEYqCSxuMQiftmuNWdXz
qOemt6gibyybf1GucFDtSC5s0KqViWC1qrKNyeaUgCxnyRumWfJ2BQZD24YG
a5vXWPJ5XiCO5V7WPO3a1vbFtqoWsh2sVjTYWBIzxodXaSriusZjQsk+CfVO
CnD1MIqVvYCEpNYwwiQ1h5GClVdjcbaKbqQIhyqrdktatctGkXXnxGTgOyPQ
tpfJ/Jxe1C15uYV7oVWIiT3kGD5qgbrw/7aaxlcc3a8jwrbz9cGwDcU+X98Y
fs1hO5/Xh4r2wFMQUHxW89YMQ6pImC5HbWvqfGWKTXutvC2waOX4cws4j0RX
kXKxOB/i2NNyPlInoboMwCLV3eGxNeoUVvpxbp4sQMkrHI4bzUK2282gMqku
KhNz2oLnAPG+FvCh3qSxLODduRB54buwIhYXGgSwxmPjvkH4v0DyZE5OtxFx
ht3+VuuZvShScpTvtlWuNAAm1IqxN67IgLo72vpWtlsUeMIXfgw0UZySEG1/
ntGHHrb9qZnwgld6QcBZ06JgvWt353JL5Wk6XbvFo1RfU/K0OjUSumIblid7
ly0mWOeCXKk8fw/nIqHIk455O6vq05io081qfF1qX3Nybx/yFH3Uhn9vHHjy
lvZwLiAhdNm6V9LWn0IXCWkozI73RjLLQqQZaNJI1HsPulhm9qk5w7yOXWBL
EkJsHAQIQcrWNcBVTSp7mbSMx+vfvYxKI+Ee06PkGj61grPiYDahNugB/w9z
pYLqu2vaU5lO0yKe+9LQag+7ckcfgthWtnDtIrK1ACwTIp2BFDI07W4rTGNq
TOvdHMu5lNoSeElSPriBbVjwzAmeETijTqlHgipZ1rUgOkjIAi6I5/m5MLQp
ZmpTv2ObtMDJPt3imIvfsOO0C4RqzrIzY1JBqT+Bb2f2Jphle+4qP4YydVom
82mYZimWfNw7Wr/aW9W1suX5Yk2mOOsD75JrawRdFWZZdBECnhfzLZzVi3Al
T/CuXJo8ZQ7bUohaQ6er4iHLsthEsppWVtxAMtXsIntxmcK35UC3HnaLV7sm
Th2vPrsP3aq2rDKa2ZbdIpoy63qJaq8tsUo3K9NVWkXnPVd/HhUf0flhTLEB
cjjBlrAepgOcuXA8bN2Fo63rLsqqM/NvxbKojrGvu+i064qGQlqfMC98XT5g
2xUgSQ7hI0ArAQxvS1SqhgTxlQhxR9FxIkCQUgWyWciJfbD0UAYpV+C9nxou
7xKJmo8GXE86x486MeeRGbTLOkXTqF9GSuqIXLsFRGnkxw8XH8pVAjGNUVid
uOR0uHpVs5AT6HXO5hodj2nPNjgltOkhsMini+aJQqn4ksyd3Je3AP8bjpgx
zlE8jWxNC/6CJGaFDSdUxcIsBCpqcnQJBcWkhUOXSZJCxRIv5mPnO0iSGU4R
FvkudZPMHOuhqpULMU5ywhrm3wvgPElKvGK04zRpQbIHgr6hcCxAyQIISIJm
kRxDo8w6ljqI29tQZZ0COs2XIB+jzo51xkAkC9JGvHe4tEOw7VycJUnBsVPT
f8p9aEppazVV5Rb76DxkceZam8/zuGUO1Ofis8Kx5cyt3FdpqeCIJWtitIsp
Ue9jF4sNdYtpV7SIOxes/cST178dyWJDzbJMfcKPWahTTVsamvfiM02qYFN8
smSs6yRwbwlrn5oXft68++yrxK9ErVKTFxFSYE5FpzpFQFOnOAhWAy0QpdmD
ulDWQ7c4i52MZpL3EXJiAE6JLuv+IntVhiHOYJTIBNbjGzlKU4/CHWfiKRcS
HKLO1fUq3cHYZ7ekXcKyK02rQGaeJ1rS9hmapkyyqM7QeO9JadI0tJolZZ06
xU2cVCwEIMYu6E+SdnQa+j3RGNIqjya7pD3jFHAyU4PE4Kn2CMioKRXtEfjg
2Xr8bCDPAly9tYdHX6n9zjOueDiy/C444mMXqc9MWq6oz9SlzKJ6E3n3Zufp
pydSskrG15uYE1AeLdJ1IZyAnoPPsngJJnk0xeLAadv1qyy9UzyIzjrq7QlJ
1OLExRKFSKtMZRMXpDon3onQnbROZAlxGLBcOpXwyIOUzFtOMJpqnUPGHCA2
D0VgzqFIcpij30fMFbgB0YruzBTYQpMTpTuM6X2nHrkHHDvJwgn/v+iMy589
VtTrqzU5mzhduLneUPDb1JKfvRxo6AhIe6IjOGsiHak6bY2dGDqrI2doxy72
AhjviQsiqvOi6QF3S7ohRJ46/96ipRtuGVtaFFkZu7JaIHO2nXB8suyastIM
6wuiBRxSugj/QxkoDfAfbR+Z2V0Tp/QgxcUFezFJaNQ5tyU9WCHSvW113zlS
3XdXnkDFEy3MR0xl/nMr/i4uhhcut0SxLXhXuNlmSH9wc7N9lJPtltC7Ksxa
EgWgyDc6PUbZcXFE1+iTK0HojpkzUxckq3MnTvyzOmtRHeSQTwYr/Bi7sjrQ
G58G7IYaciA6DwdAe9EHcL/I9dqeLpI7F0RfVEPoMxEQ6H6U9LGHcE7naqBR
dAP8vQzLG+IOwrKGyLPQt6IyBqs8G5A1vBFXn5PYE31WGdPSj4n+6Q49syXV
JD6wWPCrytshtFlvLk9zNrJ1F5yNNK3iBFt3EU007YQV9I1+CzPHoWwpKnP9
VEjqdKrORL/nbBWK3lNpDj8DeFs5oYcPrew9B8rAtIdtlBFknYRiGJiA4fDq
um9p5KF3J0CDIlInaAIcsmQsg6EmUd5yUsbtTZxiFc/bSxtjtBpdnNbTyrM9
rR8TUdNdWNaiVLlIi2qeV2UX/4VEWlqY9hNcMcYzp/LLceSaN9SBVlFiwInL
JGotqSpdzFwkpOvScsKBqeJAxGXlXONtRvIRcNYFdJdolVqRFgsuWv1/CAlY
x6eqRa63O92yBKbCnBzqwTxIj3B6D3PCbdFayMjLNn8E+KJKaGWTtmaBcjsF
LaGMKIbAotcLdOv4Oru+EwXQWPok0viPMTZ5zaktBvA+faoL1Ha2fc/GLloH
kGj9iovXiBBhghcWpldj0pMuzDx1VrzM8UfkU8uqULJzQQdCE1HeZ+kHui6q
V7xODS1JHYG6suUTDSmJ9H/6kB5opPUo5pumdYGRjGLgdMG9kfA/aBZPpWDp
G0YyWA9PRou+Y1XisgVkSR/h+5hbmPB3xkH2kgE2Kkt0Y+LpQA16KzWFbxSZ
195DJb/QXingIcucxh+g9o3IhHiZgI5oZC6fMUEyVgieTzDyetrEKYFjywy4
rrnYXxk7O/+q/7BgTl1YiJr6qkNdNRQvRS24MFeZ4EvUc+eyPfEs97dAq4BN
tahzmVJ+ZpGPW7Ag51RCAuWaC3oZ5mPbdFQcVJO/oHsyIYNYsKlCXIjR+TI1
GWxkVt8mj7VqgG8IHcsSIgxV04BXkWEqg5q1VVoLRqj5fokiYf3CigPpUtXx
K8+hKB481SW0lGp+4Y3UVQaTyXIv+ff402xrHPcJfyXlpJTNdBvDQGnATZgk
EjOMN1By64wCQkHiqx54/kCDYuqhMWHfQ6FPa37M3DXnx+fZz5At+wMnNYcL
82NmcMXfqGzY0VFd81pHtUOsCV3msfdDnSdqvyaR1Wg0VmIGi2cwQTLjs2Up
gx9Y+xAnV26r4p0ybS0kTs/hvjTxuLqGDi/p9G5+8KPzM8Vdpsp6CZQdDJzK
gvYUz3WrBZ5TkrTCAFkJ2XueZjfuo2tyrnvCJEunnMdr7BTP+VIi7zvwR9ok
h2RRN+9fHVNzE6cmX8R5dO01OJx7o1PFncv8KVnahmEg5h9ynE4TplHUMnBO
XSYISJk17iuEuBUFwp5msPqb0wxS/2yaYUhBuHspjhKm0G/brqv16kq4GcXR
U34pDPPhcXtNeAKfawKROilbDfybOe1JFFsZ+6d8qhwKpi6Eqi37CkR8+XRc
Rzg+cWG4FjcVvuNuQSGcWV114T+8flwKy2U9L+0VFAw70peV3PR/KYg6201O
ZpE4mjN7Tate2I5IwpsotNj9BlKv/xHb7b0pYw15d9igIUoH7WeoDwZlQlbA
LGyZE2cWzF95tHsOkeS9odUeUd0rvQhSWuArTJUQ6YP2M+QVo5ieSlmw6cRH
hivGoBKA8DBR5f2BKj0Ot/VSINsuNkbJc4OY6JZRus/MOVygCvx/ZmippEON
3WZCg5cA+h+bHdSJ8yyq1Jxm35bD6ImoqJQpmqEeikppwNdZtjL1uzKXUHEf
hF9lI7NkbZ5Vx9VnBhmx5k21BYhzK7rAKQr06gHONIkh0brE/rZKledNBL77
UJCbiqGBIkhn3qCDZW5vr0hBQUKw6TMMhK1RaH9Tgyq7Bg8SET4aiKDtCknG
CHLSw/UBcHUA/Lw10pGip327LQA63jEF7AwDPzW+aPqcXVWJxuot5RxwHwtN
a5vB15nKvSOQlh/+/uomCb78/GNE2WfmyHnO3V4WCCg7xwYRpfa0AJEmQsF4
nl2Rf2NpwjCeDxAhPgG/yDYMxTYI+guAvxvBv8D81Ew8EJC1OH17jqyn0zm2
5OI0UBFCC4hhHxUhajpQNgR0RN79E/7Gw57HDh37+ndsclvuzBDc9WFP7X5U
cvArC2BawnMqz07NuY4XqsdKgoZhXNOGirdFifXdv1KTYu7B0rkFvN1gIFcl
Eea2o1E5LQ40uc3mDmp3QQZQPgz8g8MZG4lxUxMqM25iH/3/WWVUkPYI2ECD
SkJhuRhGsF5iI2zjeE7ONejw1ABaNNK78u2DNb1QBqIyAb1H0YY3VksuEz6d
YxZDDkLbxbq1rF1Qxqw3zSntqI9SDx0K0dui3qQIP7Rsm2lSYaU3mc8dU9Ra
LEsSoMfxFj0nOJNAA8vXqnmhYxtyfMb0Sc1pmz5VTSubm7sVfZbq9FE5+ntM
dW4uywg8NkJqk0gn+xmFAi5nzvXmRy/0FNw4pWaVqR0dIZ7nook/rlNuNVCu
10zohlwIBEpoY2Ijp82uuVoqWaj1MGWZbpphlxSuMfmjMIG+F1LAd7mQokFE
iirqlRvkulyAPBEKgqcUMzPzicwh3RyZeL2+wgsTph4WVnES2tEK2Ym4tuJP
6rScL20kbV4UHcpJeGyNBgcqYkO5Fhcj6XNk6cxrfwq+iVbrsldJo9uW77to
kHRvIGkP63h5mWZhcLFHjwM2DfDZvtCslkyhqTV68LzPVvbKPJXcpXkuxviz
OgHlCoWD7VxIR8stKftojh8H7GfoI+0N1HssoR7UL1OvqvONie9E0zHcmlC6
TeNDdSKS6ehlJI3k916OJraMITWUPmcrjUTB5XSpHgq19awtxRuW0hhlyAOd
59qND9cJpzKT9rCIF8RkxkqWo3yLLW1YpzATQBobdBQ7qG0lL90XdLdsCW/R
1Gvf1PEXddKp7bcelu/8oGSW39yYWtTWV/bk+gb/o75ZzDmv0ha7QGW/+eaI
hM2LPT5aJ+E4kLBl+w6WCQSt35oTwWthQeLw2R6WBUUMV7wevjb1YsqV5/Y3
RZRr3v7xV3XKHcwpB48KE1yic9GxZuKZA8fZuUTAayx06a4B0tQinZEFDP43
ghwMq3dDRLrmHSF/XSfd+YF0PUze/pw2XnhuteUBTdnZuUB6zCjJ2VJq5yNH
m7MTVnJftJYAro+o1rxR5G/rVFPpRQtU09aOpkFF17kgcEjUwi4CrsUahIOC
yI+upbhtmrfrMiVNLiAZyAUkqKQfr9Ps4lxJS+bt1EAwy7zdUn4MZYaQemHh
OU+2i2WMDEZGo6CklYWDayOqgeEv3Uzy5tGOU9zf16l2qU21gmk7qdwYtHBL
roZefQuShs925s/gr56hRfbtcFtdGwsIV0dEvMPZ95Z8dP95R5444/JnC7EA
wE/U6XlZU3M1PffkopTaO1PM9ueqBc0qOuriFh1N7S2YvYSONGuXiYU3e8Zt
Jj+9fe/pvJEQ76M21PrKJkG1KUzWb8jDMJTvJhs7vbNqSpBqP3gwaC0H2kZa
qemVcped5isjesJkDC9BCHecLKV3nGB1Rpc3qjx9EeQGfa8J9G041lCFFhmL
jnVtKnKWTXJ8RmRdSqd00VDD9/fU8lOVFxLoRs95Lj0ZxpKEICTkRaf/7+rk
vT6Qt4d9XQ7ktQamynJ3CBexlx225xQGSkYLOIVL2bQ5aKwzXKbJ7G9FQdNa
WP2CZ/5WlCVDexOaY42G93RjoHkPG8wbNiV3/eYccS+2SqSzdXAieBZQaC04
Lga0fVlhxcywysboRktXJ+g6lW0GU5J4GOy+wZRbmkzRE4GFXJQ9ZQtGBoEw
IqagF2aGfqW02KbiTuAfGT9r83jmVdmqk5Nl3cIC4p/cwgKG3d/CsismftEK
faxO/NsCUhUjLxFPVrRTbcA8K1cRTxvj4prQxXJEeUeXt0vzlUg3ZZEq0wu6
Bm/uO1v2GfJuGaG/qZP8KYHk2XRkgaJKIMbCE+pmW6qxu0K0JD5j9Yz32xDc
kfdGXLgE/v0hmi2yN+flfAr2prLQQgu8nHeybSQaRLsrEE0bCSJ/Fpn1C5s/
3flMP5X50hobz7TJizQgp2aHJmG6WQQSB4Ex0DUwT+hTnYqojaTKegu5isz/
tqY31lvUDYiagiRwFNIl8Kc2lzc0zZHuTPsZorJalEA8FvGGQ/e+6gNYBt3j
g9qqQW33LRCNrmXhLYS2rjbW9ziQa//Bu77mi86/9+uBQBIDBv8Xwp+utkUK
aVI4I4AisxKAfuMmbbSu/BJLNjKKIvAGwi59k1pBTcu2kCjuKrE3kZr2oteS
ngVA7NgTh5XSFDzcK2zC4Cu1UHlO9w7CJAQBczAiGnm5C7JRU8nK6grpMwcY
tLXxL/sQasUySgCCNI9iUXBPj9pShqJdkDJ8xr40EOw9h45N3wd0WoolCilS
uEhW62JjLYUGaQ7yaetiY5eCdbHkjiv3rIcbSTOa4qAgDlkybRwE8caja5sk
/PAm4f56k4yf3Pz7kc2/Qko9RsiFialyFixaQkUagN29PTW0FxVt/1ndmdxj
K824hcm3RPRbMeXDhdgVsKVu8Ekk2CcOkV1F8i0SEUE+PUWOtLW37GjT+gqH
t7a19yN1It4bpMdSv5VAx2xqbwVcnW9rMmImkUyWWWT2/8EmrT7JP26BqPl3
TElNTbDEaFDgc6Sp3ZVFExpVOFg8ynoDp3kt3W5s4iqCWssb6MrOEUlaO2hD
ormskQPCzNiHA30G4rFUgmp7Og5jqUR4Lq2qdmNVZKzpiPkI4ATmugsnpQFM
a+2uHz1Ly/E7g4D2sJWFoBXkbUE80askN2VRrKP8oJUcBZH0MnJpRcHHeT/G
gEOQ8iGW0UyKXVgIDZOGWOEb8Rn35iTwtm6+0Kszy5IOZUTPZS1OQCNx/YB2
YChZyz+ipXMQSyc2dLSt5WWbSXunvCMSH8XdZZRZCe34fJI1aElCX6ThrUZ7
P1ZnyT3lpr1EwWdfYE8vY8ypGcxhjVeJtRjw8IFzJ20/gEHAKSXovgveCrJt
RsVXp/0HOvydJIBJsgQiIXGhGk920zoiXuOzoX6g9sSF8/9T/1Y5b4ikaJbE
THBWHxKtxOtzxRtfAkyqH9/3clyGfavESmmZ1OtC2dLY5ZcJrTk7dc56wMPM
ryh19LsRHCpB1pT70+1NpD2VgyuBNy7jer790MdQ2t/gvih71sB3AR+6FKuh
McUtGhTuOQZZzk5oei1qqUzsC09jRo+rc1R/eZgUBRRGuXzebyZJryYkLS9A
0eIjKxvKhQys8HfmQvIi1p7h1MUfnYy2U+9yor3FqSqDv5PAQ5+oFn6gbyOV
HlTpXJwIV6fg/57F1X1S17rSZZDCOHFBPtIbELTeaMWs5Jr1V4WkwHLGuYki
lSYFUSfOSsuaIlQZF3oZc3NjwYxekY4lQ4nuWaqLQVpLnlmZ4qjnFQ+dakbj
O1Hvi7yshU5i5XsZYdND+SwPd74A0MIVcKg3FJwTj4urpMfpGAWemZ4c+EX3
y+32cQAbh2eVtUvCR67F0oSFHvi6387F9x6lSb/iXPiDuC0pp+JFKZZXuvCK
dZnBitSHrHuAg+TWhPHMuyVJPiR8PwNy4hpap/LTZNaimPss5DFUyPuMwiK1
GutWcu9x0raHuZz1Kc7uxQyYuBiPhbhYfhiaVMekmuo5ahF6pFsdW6pUWgia
LyCYPFl7ckPTpIHeDnfbSJX0KAZqhJMaNT/082yOUkl9PWJOazGbZgNmpi9e
xetcKmhaNIX1E1coY+XpVJkMjqmz5EIZDqZeLFyw/jB66WtvhMjxMLAV5Ukh
VM98Yt+OoRHosEfexBfajblOx20RGNsiorhEZ1xI+qnHsogI7CFH7SyEttdV
G9KmEM1gSF1rlPfr+/8aQrOuMvb8lacdvSdInESsNIOlxzh/kn1EH4W0nXRQ
xqGPsOIMwxDktx5Jb3rnoo8nSjSHS1MgIqGKMqakMruOcOJyczrxnBiJpdaP
obqaNnW+LwQQjbSuDglqkxXJoVx8KDTZit5YoJX0JmrTSlOt8mZOXJh8CqXY
mks3ndN+3Ejop3taCx1FwBBDUAFwLVVDqTHy2PZRm8SRx3pfSxjV90yL67y4
qDzHjIkzJZpLC7xXKvKOZazoIhfY6Ao1rccf+Dswhh4Kwax5cZXtLlrq0Ddc
JYTEQWCifoSwiUoxfyeufh3OxHm5HGsOuWDPFadRp5LmlkRb5RMZcXb5NSsl
1aiwFPRtPSBo6dg+KRP9HSff5XnH37vadx6bpooE0iaUqTWdWYyGv19ByCRg
JkPDNPSyu9NlLtENFy+UaOpL831ULBkFkShfRxD3UDFrXsRnzHrOi/hSMnNJ
ApWPF+uiBUIXBiiaJw2eUPmNZFk1GpxoSbTk1DV2RSm03LxvkQVv6vT8HH8v
ioAJq7CUo0LHLhhkeQbf1TKWly81LmyoJhH0ZClsokCKdIkuXkSTj04C5utc
8nsT/Jm4TH38/EWw6XLQVteN513yfSpQhEXNCVfRI9KaizTNX/slRJopDCPQ
qP4eaVu6T/taU991uYFWXXE43aXAjv2RhLYUp7TFw/EgPWdBLBXmggJ7F7oT
c6GdpU0vL7olqvc4KxNsskn0CgxV/n2KNbe9vQM2bIlW0QGUmlZNXEhfyonO
oyUsEYqxi+zomos0AdPDp9ba+yRsJDtny81U1RmrNpyzLxAauyCnYqPEK0zn
WXLFAfZhZGl3Ck525IRKaffMyUhik3EXsVX11uN6q50LHrNz8VispZz2A+Bb
MlET0khnyTxQa54MihpTpyjHYAoxpvCNp89Rb6+iZhoBdOYciiJKe82haGGJ
9CLaIufBU8u4HIsp6RmUHw96hrBpzxDzdskenKM1ytdhGxB9zzGuEPt6RBqv
RfoTPysbhrTqb+ogneNYiQyvy+8vxXIC2LzPWupB25w83hpOOt+KMSNnb3Hi
wkd3FSqGW07AU2SeDWGhUDzHV590/m2Gqo3V/4P4cedMVZPOp6Fzn25ZWlIw
ea1MliJmoax4/St2kSyMroUyb980i2LW8PK/V3n+CLH6jHdLAUVNd3xW1kAr
kMwaiS6N6+Ez1JAkvBr9OR4dtC/H87dYPYdG51Rvm6g1tA7DGnwHjQJVg2hy
OF8BwfsQxO8WMAnRIsT4QzkoIughaiCpYcGvrMTj7I3w7jRX+VyaSM16YKB3
KadOrY/grJs5rNmn2ZQsmo2TKusubK35dnmlceKCa+slmbubuvgjz2kBYVl2
nuEHBkEtGeq4jvQAEAglAtCL68mjLgC3pAEWYiUIxItJtEThB8AJllG9iDiJ
lit1G8zy9pbkuxBWo5G+p9paTRmiVXCq8OGdtYkqpsm42uvynyn+buhkcVOZ
onoLcfsrEnQlcfuvV+yE91D5VspjZbQyou78lO5mB2/70rfvO+8WUDLMtnTj
7ffgASdIzRIdclrEYk5hBdVxO68WcniAnjUivGg3jlbwkbrq5lTPYvZfpi4s
mon+dOHx2OXX1XTCfNwfVkst07jtRetFcbmshqEN3smeurAACv+z0E+ZP8UY
Su554oKgegvE87HOBSX0yjgMEMs7fSAeO5eO+UiAQB7a9NOfTrWz5uKxUZ45
VTZxirK8ox+VuXA7grQvwMxUPShfhi+vJXx6KJe1OMLnDNI5ngq+G4BWScZW
Xn63NGk1XeLEzbTNB68bbT/5l1d37n3fpVdeDyqywmdiN/+FY2kwgsEoV4sm
PZA/M1ZFaB9Otro00Zy6C2Kdf9JDMYQYTTkFvYlqw1tKDnHW5cCMU+NukZfn
B55vMO/cd/TiV2lnks7RDOA0yZs23QTiE/jqOw3GjALvwbCCGQNf4iPX3nwn
WCw5nKySTIHJ4olIwYMou+601SmRaUIa+Av4qx3siQvjCJJkYnCCp6ZySazU
nygOSFmNA7QzhR5p58In4sgb+3DEnrRdHz+TOEtki8URjloAWX/8swbD9Uuv
vBHIvyNwAlQCBo8jnhO1saOygbVDswMlXwhjXdKzLsS4g9rVwa6wJcvDOjhN
3jqrEIx+bDAuX0Kr+t11BlA20+IWynXh8TsOhwMAH2B+WGxgWyzONZgit4tT
Smz+LyeUJZy4YpMqwWN0LpizA+A6zNTF49FUyEMYDq/ZedZVUAYR8HCXkTXF
V2MRMtV/ON1I59SYw2SfOiX9P9Cb2NZ4wfcCwePHeFyQ5W05+YNA76BV8uOH
Q943kGiQbDA/kuzp1rseAAag7edAn9TuKNtfCRaivS/3mgBeOr2LYt/XexGh
tDB6ZeglcR19fJRIIBJoV1gxfcOuM4+KyAkRnvfil8PUDt1FUldb5WuZtwMl
aIeQ1mh6HFP5gz6UsI0fSbYVyhzFtsj+Ij3D3hfQgffJzxcQhcFbl3ed+fMr
23diKoc9IQcdzHkRnVpMWdMektfsvsmQEOu0ye/X6XJXWdCidYRLQj0Ah66j
gxqUpQHb/7zz70U5AaIJcXnODVYIUyvABGMvkQQm/49J+1fUlKayN0urJ+7f
9dSXXtQozuCuDY/L4R6Y4AezOAKWjKuMhvipxXPUkrQFrGnEct/SUzd+rzfW
lqm8NgfJq85qYC+oPrJ3T0hL5jPOKvc8k/iCOUhQpqmQ+/aeYv+/e6Fc8k4Z
ZXPzVPaAHI+5Wsk3//dj7rVViS67nzSmszPXluheiNp271qb8ChGvCkAthwT
VkHSrz3BswBdxtwb1zVlubJWR740u01tMX5/HdU7gxhb7lWBpyG6hKNXXrFn
fN1ssLgCyeE4zxnmPfr4PQ8+KmP89W1xbiyGOPe9PSX5d3tjXfZz8O03bxbB
dj4M7T+7+T8c2eVNlXeMtu0FPz5yIDdHLNBpFOabbGE2VDe2VnR5CvtqbWHu
h2vJnVFjFFRBblDesUVNGu/v0brACoSA/9bmkAXL1bI+8IbTr3z4ieHyDhyz
QMN3BEGQcQsE4ea2+Jua/i9Elx/sKfnv60MXW8nP86LN3okksMHOaEFxpyQm
eA9HIcqJLQjn/e1DJDZQ8+0re84G3cCZ9yZZVFowWE8E9QCLcWtTPWz/5p+J
Km/qqRm/U6fKU8pCF7k2BNFAN8OhzUNNlxBatl0Oun9MHW7780MkVbhAwWTC
IXFTpXQ6L56WgQChL3h7TbPsWRndxuR+uKdS9SJT0eeh8SpOR8zpQjV1+OzE
XiENnKn4GJ+vgKNNf3vo2Ks+yc9gPgGLPtiFowEGr6W48tpbZUl6QSXyg3Ud
WGTblDAhHY49T6kon8qkac+2/oGI+JaeGvjbvYloWeGzDSIu0I60EFCdTt8r
RNOHJz/GxBO1hJqgmn+y+f+HeXbyVjaEYJnAbOPWtluUPFryg1nY6Rm6MXeI
JtxZ0dvaVXpI0E9SGz/WU3nf24ugJQcNjw7zgA3jmszR5DC1pqAb4gnh1b9n
EdQU/CBPb4ELcpUfz4AFUp0TKwoWAEvngwWOVdXYtHaUdHaey22+safG96Kt
PVzw4Sttd4AmQ4OslBZg1z9skvMfN8n5T5vV4H9NYrEG8LYcxhadwO4U9D5e
7sGmWtvzQUo6W7rvBmZgpftuEroWjcB76nS9IxgBy8s8PfQiGXrcwoeRkkBT
GUyYrkOh6z/zXzrnPhLSii2QBRqWWh/x7EI6M6GyP0sKn2e0db08CaV8nifi
epxvNkTaMhe/1Zv0lv09JSALBALL+yc8frtFpOuikPtfNv8KyTmDyKrQHP7C
z4fVsqx2QIe5YnkknmkbiIJZDaSmjJFbvivn9T1NRj/6ljxvStG8LLtvgols
I3j3iUQYSA3WAkgt5IYyfqxHPcnqAMqi0qV5KR6W+Q5lPUyJ6Z5/jBWIqlSu
1PF519/Q04T8Zh8626Z5Z9zF8cDKZc1K6BoID8Md249XDoDMbhv8K6lHRN61
yf6IMtVaSjy5l3LD4MF7sGlQ7JWAv9G0bl+78609Dcb/qhP69rJeRJOD5VDP
R/IqyviTYBzWArejPnGYrIgjqi+JNdGUB07AX8lRJIPkBxQ6UfrblVwwvCQT
5UumpbwQQQns5rm65zvKVIusSS/iF6ccKtWvWBPdC7yCvXDUgUicbFl8/DBI
9LFXakuuJV7MDZF+qEkPLqAl99ts2UbIajbGSOcdD6R/qVnQvv/nO2P6F63M
b/Shv5lxT7ww6cJsngi/3XJ0INUoLC79lbLrQGf0YKCAHBvRBRiBOTeS3nbz
hqN2JLntwdjG/aMRzZsXBiWrk0WD8+5eMq8xASsNO73J5ele74nMu0v+pLAJ
CPdu9kzEtuhhleVcJ5XDwdiQ811BMa3h9Bk1Q2NPcj4SEbt5x5C1KGoZmAax
J7EF0WctxG/DZsh92GNRGDBAYXchR5+IKLTxicR5YUu+KP6h3roXedFHgqxL
svxYyqJdsSn2ytBfRNRuXkv0fTG1i+bk1+vUvqnItBHMzV9zOPaUoQ4fQdTp
BIoWSB3ugGY+yKYDjcnAJjpt5xMm0ayHr7k0h1G6+N62J0YS+9iQ/3lE+ebV
RsnCb9GovKtO+etCM4l3EkUsCDkBLcUYSawrLYYLxHemRBCA4O+fbX7/KKdN
+UTiPS4YIRRWAvmTbVojrwpWpnA1RliA+lDEguZNSW8qSm1sahosUDEUVWeF
Y9h0jmyxxFCHfRlLMDWEINjwP7DvfWqhRRm3lO7RfOk0W/6RvSz/NaNjmvg/
i+gOY2Zy19Ki3LX0np1nHfV0TehfND6/Vqf/0TYbsRkVQ6ixeAcfx1O+f7Js
sk2PtcdTorlw2/XvAQuSUSYFxyvBGQEca6R9oCLszAtzDexPI17c4bIrm9Cf
/NP9514IVzalhEKMLL2wTNOv1vlycWimOnEq8EV0h9Z4d8gj8fHhb+oHHU9o
KMHi0BU0JWvEst47NPTDuKXBmz/Sj5JdKi+W/TE1Xb7+aSTxknjHi5reD8MI
5sm+1pZ37LrBnkOhmarZWg40tAbqQeAevPIetYAAJoqiokKz4lBJFK0QTTZB
XnH42FTff+Xrc/CcOW6zrph2q3ApRGDOByPmGHdJDdO7pOQMobZbyZVdCPYP
GfUs+/YrdUad2+Y3NtO4FYnPKWk+ynRNFoxAp8R5QnHjk7dat97M78GDcKNX
okRjm+hIgR6GzZy0/RE1PcfdVMk9SRafUAwSPhXt3S/X+XR2aKZq7xSfrFGY
aL4zfSz7Xiirm39hp09sGfBNni+E1gVIYY1/bC1wHLT1C5EnlhXsnr2m9wHN
LX/FlazrNa+4Wg209DtFfVln2cIG69TGTNUWrtRZxwd5dC+ehiqpQKp+Emoq
mqyfyzEmoT1K0aGypkPZ06irmjksLwlSPPEJuhRrV1uzkDh9o2B+qc7Gk9vS
gDWIjUslNmJXal8hrRPUbEdKY62h8ppEEIvHIkd4BAv8Vrs/4GlBdDKLaQxv
se9BUdFyB4a+VAt+8PjtQuVmrZNikiK8llNyvM1prPGLdQ7uCaSp2lC+YDF1
SsQILtrKliqiZiw+WwzQ/ayyr29mio4Ckk4+fI2K6ZcQ40p20xzlKDx57tu4
TjMUyHJJLDZZ9rLBpu2hmaq9rGTHg+eLfXQs4tTxmFOR3L+VOeUsd/MyW4cQ
8ra9tKe9FFSdnvkquhk/YNSzjNwTddovx80UjZyivbXFMqqoyMB+htpHhF9K
mSKEpvcJHA+KYoDpX9xvM0cZOHuxkyKf9XVNVWfBikG1bNQ76wzg3AdNG6UY
YGFdmfZCGfPAHKhHsVDGr7R3NI+WtRLKiBuZ1VIjjRaKMNJQ6C6fAGuP+X0j
gokbyxY3wHkS+2OZn+25rGbjfE0PhjGdhRJLOfnD6FBUuMtzhvpxhxXAtECF
26vCqieFBrvkCojiSN13yf8XAt3Bqsq6i8w3pO5Owro0ElekPKwe2Ca+QGbl
g1tjCpPZHI/vq5CyZugpfta8L8kaZBMKF+3Mz1GXOl4Gt58pBOAJzsuC1bfX
kV6yEVNCbAu4QeIwvBdDL2tjadV42CuWFFjLi2vtYdSirmU3/ruhD2ojSYyE
98KtMXSprtLLtqzVyI4CUiC7sdXtuVgQa3x2X9t6lNcmKaKRg9PaY2iyPVu0
Hj/V5hIRgShcH2uLY+hyRe4Xc4WGOsu5JIaJR7Gjy8r6B2X32nCgYSnY78AB
CrxzD7etBuLV99TQf6F62rpUlqPM8VW4CX/LK45N+c+mWQUenFQmMkB3WS7K
vkVSgZLZMWdaFIfnnmuYCWvYxBmndZ2NdQzXskdvMzqynBZODqf5oVOwCmrp
km86cEFZzfQzD+CZJs2pZX1Upt8cXVkJKmbIXiqkUDH3aEyf4uiKxpPTBvhM
JvB5vdGAZZp+tM0wrEHZitB7BAdIX6nsb2pbDjhnFC4sQijGZdSXVRprBKiN
uj3sT3nFjyJpOK1Ce/xFjw6TZn2rQUjLEv2HUM+vFqjQDG+JFMHT0Ra2hYqj
tNqCsmZSi7bMpnwQHoUVmr659WwDSDzJTJIxHMQD8q9T05zeb+zUR63y+EGa
0+PrC+S8Y61TjkcNWTH3ls1K1mWLNqsxenK0YGmIgYfWmrlSoGwIUbeKasYd
CIBYDltj5ssXQ9QsmDmUUICIZEiYOnWJGa/WrDmVmEblz4IyNGAqf7OVzGas
6y4Z7/OSgNRbd1nq3uSuugGk7RSpoUQOlMQ6iMvU5Vl2JoyYR5Dzc0L5zIXc
UrQX2DbGPcL9sAZJWJ+pfDRySoClvswd6yrZEkE5XpEt+Ev7sEX3hGTLdk/u
Cb0V7LM98aTIFxGsiaKvThoqgjIJDBdWqMQJ0T0enQs5RqVsg78r8fK9sXjp
Zsee+Sudi6W1Uy1DnqVwEw5lR/cn69acTtWK8pTdIzd2vqOhljCoRxnj2iOQ
ipqujkCUOjRbzBB/Su06pKEkib3KBvyCTFFateJMm2XKdLdIpgrji71eShEh
khk1IjBvbQgnkSG8ODNOGNKFZz411iSURXeSQV1LnjjRXqeqelBcfPfcOEAi
1X9quLzLWxUUKTYZInBI8iRH6YYHEe1c3yEwcXKKQyCley5ah9XwWHNT9iyS
9OVMBkcJDEJvssqu/RbtRfAuouk/siyZ/mNt4FOXGtvrvrS3nubbRSlJMvkr
KYnusPJikUgVtjE0yiyRYiunRSeS8KQvurYBWlvwMuG2CWUkr7weFyRyT1oV
aL2+wKfvJKSH+GENJVaWQ6OOpWTzD44Esbyu13iRs846Zc4pQnxhgMQagQum
Cps/ljfrh7/CndlheZv2/FXSWEqNbCXaL949RaTwI6CMdJ3Lb6mAvxXxmqnX
5f8xNzHVTfhuWbLgFyAp95iChEF2PH3HqXfRLMlKUj0VxzqVOK461inJsphW
2b1SW7fp7gAMi/B9NXBVu1coSEdCy5alvLT8GMoKx+xrXhRtZqfZVPERJsx3
26Yu/kScV8IxVcwZuzQPJWeS9lYKO6DKUYPUgPeahMOWONG1rEGOVKp6b4ao
b3SsEB29Wijt9z2296q4njXlRh7SUl3dHTdskx+MSMOW5ZkkXpAsM9KO2teQ
brwY8VyutFLFU3PTHWd7VBnu7J0K2pkXQRL+6ZFr7P7/6t4E3tajqhOtPvO5
85Dp5ia5+2a4NyQhIRNzyE5CQgYgEGYIsEHCDGESRIVsGRwQwRYc0KuHxqlp
RX040qJHQXltN7TPJ9g2bfcRfQ7PRh/PBifA22fVqlW1quq/6qt9s+nfe/v3
O8Our76qVeu/1qpV40q9D4wxGYZXETxPCLdk5OrARVQHskZczC5dnYhNKUaa
TN/rpmFemh9Y8LmXpHrRj8XkVtFw0TOv9wTiN+b5zB6ON22ZPveAHWLmrKLZ
rebKTrG0K8XxJYRNBwo64+Fm3VYPZy/B8Eqr3G+bicZCjr1yy3NRC3f2Z6Lm
0uXp49TkPP5v0EMpf0O9p3s6JmO1FK3staWcrM1Ivp5WGLt0P7nsLpZStUSJ
xEHjg4wZ6glfl/KVPWF02+kTJNDqkHg1FC8yBT+87HYGVrUW8rekomtAu5CX
Ztwv7ttndI+Gl5Vk8ONcdJDBzNkO0AEnPr8OHISgcS7JqBod6qKCAktJZY+r
JT4TP0TVQqpCa0IlhajwkavUyds98snMufDebvVVeT6zW+VDCKa3z0tD2McG
XWXR265bI4HMIj2kTUJrxjsYwVa3CqdPP8aQs+zFMF/aFpVdaoZ6YUbkM9Hv
LdBTtXoXP+yfZeKnKxwpaQDi5+dGNlV+tnq+nqWpyz/agdPvaOLiS+PwUAUH
pVkPmfZHwlhcjGp2zC/L85kdsxJGBHcQxsYCLx6WhpkQEcZy5PDwVCsyxg+0
H1PaY1LFRj+M1yB/k7nOuyyy+NgTl0yh6kEngmoRT08JBwzMQd/DDqaxS1ZI
d7aFjI9SLVXgknF8tpDeNGOjFGSJ/E1dNnXc6lY9gL0X8N6T8jW7X5az9lii
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
YeZp+w4ndhY04kmjKXr4vmTcv3DBxQ9604ELHiFRBaze+kYsk17zi4lxoeLh
GNmdKbnf6X//7LBaCupJvg6UhxT5CW1YG1fhpZ4b+23GiW9lrfF6yb/IYI1B
4clpE1i3HXtK89voXtIFa0tr9auRNw+v34savS8B3OGx/6tOZIudZqZP9shh
CfA57uxGFvXD+2220mMG17LScPHknzNcySEX4xxxJWd8O837YsWstOlj3YD1
tgRYK6gXwRbAZ6RnM9nmjU6onw3yIZcLQY1scx/U1qTNfqwinqqWbV7DHPTP
vpqBHXtignl/AHv7O6X7HGHS3XKrbsTCKHJwWUPqFMxax/2zc5Me9xvqE50Y
3z2Msc+HDlAidX58D8at/herCIhRWlrp0m5+JcOWgmhHbAtFphF1awGUarkp
SVg1RuI7xasx/iPzZMHzggRnh1n+4U4cVUzlph9V4Gia5ce1cTzDVvlYBH32
2lyltCDa2D5XDP1yhihJuJ8r2UZRIxqHyQPbim7Cj8X5B71ulFSALDFKLbnM
ZI9/aHaMm04VwhjZ4y6MzemQ1mTYuUlbDHtcLaf8UwYu+Uw0yCUfKoK73QeT
P+V3BUza4D46EWeoK57uMJBVN9L2m+Af6IT1mXk+06N6GCgPqe5ju2FFHtU+
m7H0+JzEvMoQG8fHfCP/IYM3joLuvue1ehREaV4vCy9Ti3DmVhldrtgXA2rl
tVRL1w9OUHeY5971L3TkBrlSaPkfYXxHF8ZlNyu2bR8G0VNlmGTgRUXc/56x
DX0C9bTeLpPLvCepLqWROy3nuCwv6tEN9bw8x0yI5lFktTiptoDPZI+/vxPU
pw+D6vN17Onw+bpAxb7T/vpZZFpQ2ZYxLnvav8sQJeH97X37D/pZyN1hFjKs
SNAKNz2/27YqVPGju/W06mwNcG9Ketpvknv3LKhzuE1v6qGgPKSut7eRbRyF
ou/KJCMn6nBDNddq5lGeLzE72BtPkxc0J7VT4RtmmsmbelabxJsHlbYagLXA
vS2B22GEv3d2VJv+00OH8/kct3Wjane02H9ilbWMMFw9+B8aUr+YSIZYFg/Q
YiI9OyFa/owefE39VRBX/ex1CUvdxjvTKzMZ5/d0gv3UPJ/pVT0EgI2Mcx/Y
1uTFXpt/9EpQYWiiV7F6+2d/y6DzrPYaAUm6TLY6riLTTgICfBv6BT9UWvEb
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
Pwhb4H+9bfCR+xf/EwMsWxI=\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"7fca6039-92e7-43ac-9d99-b5bbb0840462"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", " ", "=", 
  RowBox[{"VertexDelete", "[", 
   RowBox[{"g", ",", " ", "\"\<\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.9208495774050207`*^9, 3.920849591290235*^9}, {
  3.920849633725016*^9, 3.920849674770034*^9}},
 CellLabel->
  "In[273]:=",ExpressionUUID->"f6becc8f-bb6a-420d-98f8-0e816b000ab1"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Benjamin Babazadeh", "Ryan Doolan", "Filip Florea", "Saturday", 
       "Luca Florea", "Max Friedman", "Mia Itskowitch", "Kiyaan Joshi", 
       "Giovanni Larrea", "Samuel (Sam) Millette", "Grayson Moskowitz", 
       "Ava Nejat", "Tristan Peake", "Damian Piuzzi Arvizo", "Joey Jr. Rallo",
        "Ben Reiss", "Jake Reiss", "Sam Tarkan", "Max Teigman", 
       "Alexander Vandooijeweert"}, {{{3, 4}, {5, 4}, {7, 4}, {8, 4}, {9, 
       4}, {11, 4}, {12, 4}, {13, 4}, {14, 4}, {19, 4}}, Null}, {
      ImageSize -> Large, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQAWIQjQou2KPyH6DxX0D5Ag6oNAx8QFP/BY3/A43/B43P
gGYeExqfBY3PhsbnQONzofF50Ph8aHx0/wii8YXQ+MIOAPU6Dgk=
        "], VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{0., 0.75}, {4., 4.}}, 0.040109890109890106`], 
        ArrowBox[{{0., 1.}, {4., 4.}}, 0.040109890109890106`], 
        ArrowBox[{{0., 1.5}, {4., 4.}}, 0.040109890109890106`], 
        ArrowBox[{{0., 1.75}, {4., 4.}}, 0.040109890109890106`], 
        ArrowBox[{{0., 2.}, {4., 4.}}, 0.040109890109890106`], 
        ArrowBox[{{0., 2.5}, {4., 4.}}, 0.040109890109890106`], 
        ArrowBox[{{0., 2.75}, {4., 4.}}, 0.040109890109890106`], 
        ArrowBox[{{0., 3.}, {4., 4.}}, 0.040109890109890106`], 
        ArrowBox[{{0., 3.25}, {4., 4.}}, 0.040109890109890106`], 
        ArrowBox[{{0., 4.5}, {4., 4.}}, 0.040109890109890106`]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.25}, 0.040109890109890106], 
         InsetBox["\<\"Benjamin Babazadeh\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 0.2901098901098901}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.5}, 0.040109890109890106], 
         InsetBox["\<\"Ryan Doolan\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 0.5401098901098901}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 0.75}, 0.040109890109890106],
          InsetBox["\<\"Filip Florea\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 0.7901098901098901}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 4.}, 0.040109890109890106], 
         InsetBox["\<\"Saturday\"\>", 
          Offset[{2, 2}, {4.04010989010989, 4.04010989010989}], ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.040109890109890106], 
         InsetBox["\<\"Luca Florea\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 1.0401098901098902}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.25}, 0.040109890109890106],
          InsetBox["\<\"Max Friedman\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 1.2901098901098902}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.5}, 0.040109890109890106], 
         InsetBox["\<\"Mia Itskowitch\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 1.5401098901098902}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.75}, 0.040109890109890106],
          InsetBox["\<\"Kiyaan Joshi\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 1.7901098901098902}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.040109890109890106], 
         InsetBox["\<\"Giovanni Larrea\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 2.04010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.25}, 0.040109890109890106],
          InsetBox["\<\"Samuel (Sam) Millette\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 2.29010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.5}, 0.040109890109890106], 
         InsetBox["\<\"Grayson Moskowitz\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 2.54010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.75}, 0.040109890109890106],
          InsetBox["\<\"Ava Nejat\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 2.79010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.040109890109890106], 
         InsetBox["\<\"Tristan Peake\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 3.04010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.25}, 0.040109890109890106],
          InsetBox["\<\"Damian Piuzzi Arvizo\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 3.29010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.5}, 0.040109890109890106], 
         InsetBox["\<\"Joey Jr. Rallo\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 3.54010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.75}, 0.040109890109890106],
          InsetBox["\<\"Ben Reiss\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 3.79010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.040109890109890106], 
         InsetBox["\<\"Jake Reiss\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 4.04010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.25}, 0.040109890109890106],
          InsetBox["\<\"Sam Tarkan\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 4.29010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.5}, 0.040109890109890106], 
         InsetBox["\<\"Max Teigman\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 4.54010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.75}, 0.040109890109890106],
          InsetBox["\<\"Alexander Vandooijeweert\"\>", 
          Offset[{2, 2}, {0.040109890109890106, 4.79010989010989}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->"NetworkGraphics",
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->{286.2778015136719, 303.}]], "Output",
 CellChangeTimes->{{3.920849654535969*^9, 3.920849675895748*^9}, 
   3.9208499538898907`*^9, 3.920850018596498*^9},
 CellLabel->
  "Out[273]=",ExpressionUUID->"fdd3e56d-78ca-46b7-9b06-76eed58a8361"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"VertexAdd", "[", 
  RowBox[{"g", ",", " ", "\"\<Sunday\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.920849752907165*^9, 3.920849836964563*^9}},
 CellLabel->
  "In[265]:=",ExpressionUUID->"18f8ff0a-a776-4b73-b021-48b0f030dfcc"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Benjamin Babazadeh", "Ryan Doolan", "Filip Florea", "Saturday", 
       "Luca Florea", "Max Friedman", "Mia Itskowitch", "Kiyaan Joshi", 
       "Giovanni Larrea", "Samuel (Sam) Millette", "Grayson Moskowitz", 
       "Ava Nejat", "Tristan Peake", "Damian Piuzzi Arvizo", "Joey Jr. Rallo",
        "Ben Reiss", "Jake Reiss", "Sam Tarkan", "Max Teigman", 
       "Alexander Vandooijeweert", "Sunday"}, {{{3, 4}, {5, 4}, {7, 4}, {8, 
       4}, {9, 4}, {11, 4}, {12, 4}, {13, 4}, {14, 4}, {19, 4}}, Null}, {
      ImageSize -> Large, VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAQBWIQjQoe2KPyP6Dxf0D5Ag4QWsEBzQA0PgsanwONz4PG
F0DjC6HxRdD4Ymh8CTS+FBpfBo0vh8ZH948iGl8Jja/soKGwpytuAvsBGA0A
O68R1A==
        "], VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.026457798505014746`], 
        ArrowBox[{{0., 1.5}, {4., 8.}}, 0.07350497986668383], 
        ArrowBox[{{0., 2.}, {4., 8.}}, 0.07350497986668383], 
        ArrowBox[{{0., 3.}, {4., 8.}}, 0.07350497986668383], 
        ArrowBox[{{0., 3.5}, {4., 8.}}, 0.07350497986668383], 
        ArrowBox[{{0., 4.}, {4., 8.}}, 0.07350497986668383], 
        ArrowBox[{{0., 5.}, {4., 8.}}, 0.07350497986668383], 
        ArrowBox[{{0., 5.5}, {4., 8.}}, 0.07350497986668383], 
        ArrowBox[{{0., 6.}, {4., 8.}}, 0.07350497986668383], 
        ArrowBox[{{0., 6.5}, {4., 8.}}, 0.07350497986668383], 
        ArrowBox[{{0., 9.}, {4., 8.}}, 0.07350497986668383]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 0.5}, 0.07350497986668383], 
         InsetBox["\<\"Benjamin Babazadeh\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 0.5735049798666838}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.}, 0.07350497986668383], 
         InsetBox["\<\"Ryan Doolan\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 1.0735049798666838}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 1.5}, 0.07350497986668383], 
         InsetBox["\<\"Filip Florea\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 1.5735049798666838}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{4., 8.}, 0.07350497986668383], 
         InsetBox["\<\"Saturday\"\>", 
          Offset[{2, 2}, {4.073504979866684, 8.073504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.}, 0.07350497986668383], 
         InsetBox["\<\"Luca Florea\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 2.073504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 2.5}, 0.07350497986668383], 
         InsetBox["\<\"Max Friedman\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 2.573504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.}, 0.07350497986668383], 
         InsetBox["\<\"Mia Itskowitch\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 3.073504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 3.5}, 0.07350497986668383], 
         InsetBox["\<\"Kiyaan Joshi\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 3.573504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.}, 0.07350497986668383], 
         InsetBox["\<\"Giovanni Larrea\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 4.073504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 4.5}, 0.07350497986668383], 
         InsetBox["\<\"Samuel (Sam) Millette\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 4.573504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 5.}, 0.07350497986668383], 
         InsetBox["\<\"Grayson Moskowitz\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 5.073504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 5.5}, 0.07350497986668383], 
         InsetBox["\<\"Ava Nejat\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 5.573504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 6.}, 0.07350497986668383], 
         InsetBox["\<\"Tristan Peake\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 6.073504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 6.5}, 0.07350497986668383], 
         InsetBox["\<\"Damian Piuzzi Arvizo\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 6.573504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 7.}, 0.07350497986668383], 
         InsetBox["\<\"Joey Jr. Rallo\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 7.073504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 7.5}, 0.07350497986668383], 
         InsetBox["\<\"Ben Reiss\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 7.573504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 8.}, 0.07350497986668383], 
         InsetBox["\<\"Jake Reiss\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 8.073504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 8.5}, 0.07350497986668383], 
         InsetBox["\<\"Sam Tarkan\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 8.573504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 9.}, 0.07350497986668383], 
         InsetBox["\<\"Max Teigman\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 9.073504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{0., 9.5}, 0.07350497986668383], 
         InsetBox["\<\"Alexander Vandooijeweert\"\>", 
          Offset[{2, 2}, {0.07350497986668383, 9.573504979866684}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{-2.9454928244267826`, -2.9454928244267826`}, 
          0.07350497986668383], 
         InsetBox["\<\"Sunday\"\>", 
          Offset[{2, 2}, {-2.8719878445600986, -2.8719878445600986}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->"NetworkGraphics",
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->Large]], "Output",
 CellChangeTimes->{3.9208497709588737`*^9, 3.920849837695356*^9},
 CellLabel->"Out[265]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
IuGp65GZp0RvvXTJaaBGi0TwNUM+Y6RI737IIrOAMcPf/gB8b5wLph1GJw/S
t/S2Rn9Uhfeku3kyffB1eSp4sK8oVgXbMZlpaQtfQbHAjp3MzP/wJCCK6YOL
DXymvoxwWx9b0W6oTKm3b7SYLcu2O3s/4YkffCvGGtuq9ncMBi/WNLHLMRvn
fxsLfNj4famC+Am9cQV0NRvH7fNZnptGRdzCb8H3t06DNU5B/Ssoa62eWXpQ
KViwc5GdzEX+GIpbC20XG2lFwWzxzSI4TdT9y6JgjWATqH8Bxb+iTnA5V4cF
v7JGcHWi7hNF6QrVxlzdH0HZr1pNcpLtH0LByjWZsnVJNkNdYNRlwBnlj3xl
Z0DJxHp+BhSl0UR7XCI4r4lHORmObZ7cEXHWspFlvNzUP4dmD3CK3HnTkI2K
+s+K5lafNddGslQQbGPqiXQWZi0P8QdlGyvPrctW4AArw5NUGuBtVbWj7c6f
BFRyOh8v21h5AN75daBMgf9Tu43m5rIL60CVHsxoYOX+swsbQFWd3e+VDa28
ztQSb9Uj/pOygdZuNlk1tRxl1TZ+H9pYcSlqPDmwsqp1YSn1aB6/VzSz6vZU
2dXIvvPSOmyl48S21rxglZ5Jw+wGLqtjWbrO34WGjZMCpadwG6R3bguXYiOn
l0/GNlrU70CzaxwpeGUd01JNsI1vMDJVDIjz/3ZRtsKe4fWw7DeuJji5MhzT
flOdYBPQ3yrK1gguvQ+WfU+N4KpL+Ufw/b1Vqg1X8Y+LgqtITrL9TSj7zQbJ
LbtGgt9XJ7g00rJgjeDSzv4hlP1qxrPjnL2Dz7EqJ9u50Kk0ld2NdXGnFt+i
3AehwcZ83tBIG7juVHYp9fkpBZ50ovYWLs3jjVBfmF/BJPoosK0VHOuNN8zD
SF09kEb10aQKExWmK5aumNbYlbLytwRyB6kOD+haOJj0CVsnFQEuTaL5duNF
tkL7HLJF/qyFD9DklTITuvaBOVUZNCgEbTDBalFi4SKEksyZYHpLapA1jVzd
s6wHkN7e+7cOnUlpNAP5nqPnXds7I24/W3xdujQFI8qnFXaFGA8pSlya81s6
PX/qxRrvy1OMHliMnpstrCxDZUdV6sxlWH08YJgHljrFHDtAqI/saw+znhCj
EHJMSIBZnZGN3AyWBhtDZGOF8IpFJQXgpgbConThTl54UrB35W4KVanT4RJ5
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
+B6u4aooRPLtTqYUf/QmeLkf+j+bsMH5\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"7e2b5105-e8a2-4ea5-983c-7215c787cdc2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testcoords", " ", "=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"i", "->", 
     RowBox[{"{", 
      RowBox[{"0", ",", " ", "i"}], "}"}]}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"i", ",", " ", "1", ",", " ", "19"}], "}"}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.920848029255176*^9, 3.920848082049765*^9}, {
  3.920848233522911*^9, 3.920848247076589*^9}, {3.9208483375436487`*^9, 
  3.920848355435588*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"ba9eae55-01b3-4fd3-a447-5fa60cd6e5d2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "2"}], "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "3"}], "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "4"}], "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "5"}], "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "6"}], "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "7"}], "}"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "8"}], "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "9"}], "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "10"}], "}"}]}], ",", 
   RowBox[{"11", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "11"}], "}"}]}], ",", 
   RowBox[{"12", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "12"}], "}"}]}], ",", 
   RowBox[{"13", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "13"}], "}"}]}], ",", 
   RowBox[{"14", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "14"}], "}"}]}], ",", 
   RowBox[{"15", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "15"}], "}"}]}], ",", 
   RowBox[{"16", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "16"}], "}"}]}], ",", 
   RowBox[{"17", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "17"}], "}"}]}], ",", 
   RowBox[{"18", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "18"}], "}"}]}], ",", 
   RowBox[{"19", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "19"}], "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.920848083151173*^9, {3.92084823399228*^9, 3.920848261856937*^9}, 
   3.920848356984177*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"3a7321aa-478e-4011-be9c-5a73d669f46e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "winterSaturday", "]"}]], "Input",
 CellChangeTimes->{{3.9208482259434977`*^9, 3.920848228636072*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"d3cbc780-1111-41f6-a76a-31263b932031"],

Cell[BoxData["19"], "Output",
 CellChangeTimes->{3.9208482289852448`*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"a561a6de-2966-4af1-8823-f620606e3d27"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"winterSaturday", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", "8"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Saturday\>\"", ",", "\"\<Sunday\>\"", ",", "\"\<Tuesday\>\"", ",", 
       "\"\<Thursday\>\""}], "}"}]}], "]"}], ",", 
   RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", "    ", 
   RowBox[{"VertexLabels", "->", "\"\<Name\>\""}], ",", " ", 
   RowBox[{"ImageSize", "->", "Large"}], ",", " ", 
   RowBox[{"VertexCoordinates", "->", "testcoords"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.920847665045027*^9, 3.920847665927334*^9}, {
  3.9208478567544937`*^9, 3.920847882285966*^9}, {3.920847942963429*^9, 
  3.9208479954134693`*^9}, {3.920848255149539*^9, 3.92084825605098*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"684416a1-1b0d-469c-97b6-335ca3aff9a3"],

Cell[BoxData[
 TagBox[
  DynamicModuleBox[{Typeset`sgraph$$ = 
   Graph[{"Benjamin Babazadeh", "Ryan Doolan", "Filip Florea", "Luca Florea", 
     "Max Friedman", "Mia Itskowitch", "Kiyaan Joshi", "Giovanni Larrea", 
     "Samuel (Sam) Millette", "Grayson Moskowitz", "Ava Nejat", 
     "Tristan Peake", "Damian Piuzzi Arvizo", "Joey Jr. Rallo", "Ben Reiss", 
     "Jake Reiss", "Sam Tarkan", "Max Teigman", "Alexander Vandooijeweert", 
     "Saturday", "Sunday", "Tuesday", "Thursday"}, {}, {
    ImageSize -> Large, 
     VertexCoordinates -> {
      1 -> {0, 1}, 2 -> {0, 2}, 3 -> {0, 3}, 4 -> {0, 4}, 5 -> {0, 5}, 
       6 -> {0, 6}, 7 -> {0, 7}, 8 -> {0, 8}, 9 -> {0, 9}, 10 -> {0, 10}, 
       11 -> {0, 11}, 12 -> {0, 12}, 13 -> {0, 13}, 14 -> {0, 14}, 
       15 -> {0, 15}, 16 -> {0, 16}, 17 -> {0, 17}, 18 -> {0, 18}, 
       19 -> {0, 19}}, VertexLabels -> {"Name"}}]}, 
   InterpretationBox[
    RowBox[{
     TagBox["Graph",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
                 ImageSizeCache -> {11., {0., 11.}}], Appearance -> None, 
                BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = True), 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               
               GraphicsComplexBox[{{
                0.1, -3.31951456589972}, {-0.14816751450286603`, \
-2.625037331552915}, {0.6310524421714278, -1.3}, {
                0.9405108616213151, -2.8841601437046225`}, {
                0.4967448863824806, -2.092358403567382}, {-0.846735323402297, \
-1.466588600696043}, {0.8846460183439665, -0.5107506168284197}, {
                1.8939086566530445`, -2.50980168725566}, {
                1.756629266633539, -3.4622764737192444`}, {
                2.119361963550152, -2.99}, {-0.5709741939515942, \
-4.632295267644082}, {
                0.20977925607671288`, -4.647162049737781}, \
{-1.0861820131541373`, -4.047493574735101}, {-1.2223073729506904`, \
-2.2040562174063485`}}, {
                 Hue[0.6, 0.7, 0.5], 
                 Opacity[0.7], 
                 Arrowheads[0.], 
                 
                 ArrowBox[{{1, 2}, {1, 4}, {1, 11}, {1, 12}, {1, 13}, {2, 
                  3}, {2, 4}, {2, 5}, {2, 6}, {2, 14}, {3, 4}, {3, 7}, {4, 
                  5}, {4, 8}, {4, 9}, {8, 10}, {9, 10}}, 0.0378698213750627], {
                  Hue[0.6, 0.2, 0.8], 
                  EdgeForm[{
                    GrayLevel[0], 
                    Opacity[0.7]}], 
                  DiskBox[1, 0.05], 
                  DiskBox[2, 0.05], 
                  DiskBox[3, 0.05], 
                  DiskBox[4, 0.05], 
                  DiskBox[5, 0.05], 
                  DiskBox[6, 0.05], 
                  DiskBox[7, 0.05], 
                  DiskBox[8, 0.05], 
                  DiskBox[9, 0.05], 
                  DiskBox[10, 0.05], 
                  DiskBox[11, 0.05], 
                  DiskBox[12, 0.05], 
                  DiskBox[13, 0.05], 
                  DiskBox[14, 0.05]}}], AspectRatio -> 1, Background -> 
               GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], FrameTicks -> None, 
               ImagePadding -> 0, ImageSize -> 
               Dynamic[{
                 Automatic, (3.5 CurrentValue["FontCapHeight"])/
                  AbsoluteCurrentValue[Magnification]}], 
               PlotRange -> {{-1.1, 2.4}, {-4.4, -0.7}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Vertex count: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["23", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Edge count: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["0", "SummaryItem"]}]}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
          GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
                 ImageSizeCache -> {11., {0., 11.}}], Appearance -> None, 
                BaseStyle -> {}, ButtonFunction :> (Typeset`open$$ = False), 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              GraphicsBox[
               
               GraphicsComplexBox[{{
                0.1, -3.31951456589972}, {-0.14816751450286603`, \
-2.625037331552915}, {0.6310524421714278, -1.3}, {
                0.9405108616213151, -2.8841601437046225`}, {
                0.4967448863824806, -2.092358403567382}, {-0.846735323402297, \
-1.466588600696043}, {0.8846460183439665, -0.5107506168284197}, {
                1.8939086566530445`, -2.50980168725566}, {
                1.756629266633539, -3.4622764737192444`}, {
                2.119361963550152, -2.99}, {-0.5709741939515942, \
-4.632295267644082}, {
                0.20977925607671288`, -4.647162049737781}, \
{-1.0861820131541373`, -4.047493574735101}, {-1.2223073729506904`, \
-2.2040562174063485`}}, {
                 Hue[0.6, 0.7, 0.5], 
                 Opacity[0.7], 
                 Arrowheads[0.], 
                 
                 ArrowBox[{{1, 2}, {1, 4}, {1, 11}, {1, 12}, {1, 13}, {2, 
                  3}, {2, 4}, {2, 5}, {2, 6}, {2, 14}, {3, 4}, {3, 7}, {4, 
                  5}, {4, 8}, {4, 9}, {8, 10}, {9, 10}}, 0.0378698213750627], {
                  Hue[0.6, 0.2, 0.8], 
                  EdgeForm[{
                    GrayLevel[0], 
                    Opacity[0.7]}], 
                  DiskBox[1, 0.05], 
                  DiskBox[2, 0.05], 
                  DiskBox[3, 0.05], 
                  DiskBox[4, 0.05], 
                  DiskBox[5, 0.05], 
                  DiskBox[6, 0.05], 
                  DiskBox[7, 0.05], 
                  DiskBox[8, 0.05], 
                  DiskBox[9, 0.05], 
                  DiskBox[10, 0.05], 
                  DiskBox[11, 0.05], 
                  DiskBox[12, 0.05], 
                  DiskBox[13, 0.05], 
                  DiskBox[14, 0.05]}}], AspectRatio -> 1, Background -> 
               GrayLevel[0.93], Frame -> True, FrameStyle -> Directive[
                 Opacity[0.5], 
                 Thickness[Tiny], 
                 RGBColor[0.368417, 0.506779, 0.709798]], FrameTicks -> None, 
               ImagePadding -> 0, ImageSize -> 
               Dynamic[{
                 Automatic, (3.5 CurrentValue["FontCapHeight"])/
                  AbsoluteCurrentValue[Magnification]}], 
               PlotRange -> {{-1.1, 2.4}, {-4.4, -0.7}}], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Vertex count: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["23", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Edge count: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["0", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"unknown\"", "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Connected graph: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicBox[
                    ToBoxes[
                    ConnectedGraphQ[Typeset`sgraph$$], StandardForm], 
                    ImageSizeCache -> {26., {0.096484375, 7.64765625}}, 
                    SynchronousUpdating -> False, TrackedSymbols :> {}], 
                    "SummaryItem"]}]}, {
                 RowBox[{
                   TagBox["\"Acyclic graph: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    DynamicBox[
                    ToBoxes[
                    AcyclicGraphQ[Typeset`sgraph$$], StandardForm], 
                    ImageSizeCache -> {23., {0.096484375, 7.327734375}}, 
                    SynchronousUpdating -> False, TrackedSymbols :> {}], 
                    "SummaryItem"]}]}}, AutoDelete -> False, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
            False, BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    Typeset`sgraph$$,
    Editable->False,
    SelectWithContents->True,
    Selectable->False],
   DynamicModuleValues:>{}],
  Setting[#, {0}]& ]], "Output",
 CellChangeTimes->{
  3.920847616676264*^9, 3.920847668138221*^9, 3.9208478882182083`*^9, {
   3.920847973448103*^9, 3.9208479958882933`*^9}, 3.92084825848069*^9, 
   3.9208483613964043`*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"7a5de60b-4044-4d7d-8928-fbadaebcc28b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.920848376432534*^9, 
  3.920848383666548*^9}},ExpressionUUID->"6eeb73e8-95fd-4a8e-a87d-\
da4a84a11039"],

Cell[BoxData[
 RowBox[{"Show", "[", 
  TagBox[
   DynamicModuleBox[{Typeset`sgraph$$ = 
    Graph[{"Benjamin Babazadeh", "Ryan Doolan", "Filip Florea", "Luca Florea",
       "Max Friedman", "Mia Itskowitch", "Kiyaan Joshi", "Giovanni Larrea", 
      "Samuel (Sam) Millette", "Grayson Moskowitz", "Ava Nejat", 
      "Tristan Peake", "Damian Piuzzi Arvizo", "Joey Jr. Rallo", "Ben Reiss", 
      "Jake Reiss", "Sam Tarkan", "Max Teigman", "Alexander Vandooijeweert", 
      "Saturday", "Sunday", "Tuesday", "Thursday"}, {}, {
     ImageSize -> Large, 
      VertexCoordinates -> {
       1 -> {0, 1}, 2 -> {0, 2}, 3 -> {0, 3}, 4 -> {0, 4}, 5 -> {0, 5}, 
        6 -> {0, 6}, 7 -> {0, 7}, 8 -> {0, 8}, 9 -> {0, 9}, 10 -> {0, 10}, 
        11 -> {0, 11}, 12 -> {0, 12}, 13 -> {0, 13}, 14 -> {0, 14}, 
        15 -> {0, 15}, 16 -> {0, 16}, 17 -> {0, 17}, 18 -> {0, 18}, 
        19 -> {0, 19}}, VertexLabels -> {"Name"}}]}, 
    InterpretationBox[
     RowBox[{
      TagBox["Graph",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                GraphicsComplexBox[{{
                 0.1, -3.31951456589972}, {-0.14816751450286603`, \
-2.625037331552915}, {0.6310524421714278, -1.3}, {
                 0.9405108616213151, -2.8841601437046225`}, {
                 0.4967448863824806, -2.092358403567382}, \
{-0.846735323402297, -1.466588600696043}, {
                 0.8846460183439665, -0.5107506168284197}, {
                 1.8939086566530445`, -2.50980168725566}, {
                 1.756629266633539, -3.4622764737192444`}, {
                 2.119361963550152, -2.99}, {-0.5709741939515942, \
-4.632295267644082}, {
                 0.20977925607671288`, -4.647162049737781}, \
{-1.0861820131541373`, -4.047493574735101}, {-1.2223073729506904`, \
-2.2040562174063485`}}, {
                  Hue[0.6, 0.7, 0.5], 
                  Opacity[0.7], 
                  Arrowheads[0.], 
                  
                  ArrowBox[{{1, 2}, {1, 4}, {1, 11}, {1, 12}, {1, 13}, {2, 
                   3}, {2, 4}, {2, 5}, {2, 6}, {2, 14}, {3, 4}, {3, 7}, {4, 
                   5}, {4, 8}, {4, 9}, {8, 10}, {9, 10}}, 0.0378698213750627], 
                  Hue[0.6, 0.2, 0.8], 
                  EdgeForm[{
                    GrayLevel[0], 
                    Opacity[0.7]}], 
                  DiskBox[1, 0.05], 
                  DiskBox[2, 0.05], 
                  DiskBox[3, 0.05], 
                  DiskBox[4, 0.05], 
                  DiskBox[5, 0.05], 
                  DiskBox[6, 0.05], 
                  DiskBox[7, 0.05], 
                  DiskBox[8, 0.05], 
                  DiskBox[9, 0.05], 
                  DiskBox[10, 0.05], 
                  DiskBox[11, 0.05], 
                  DiskBox[12, 0.05], 
                  DiskBox[13, 0.05], 
                  DiskBox[14, 0.05]}], AspectRatio -> 1, Background -> 
                GrayLevel[0.93], ImagePadding -> 0, FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Frame -> True, 
                FrameTicks -> None, ImageSize -> 
                Dynamic[{
                  Automatic, (3.5 CurrentValue["FontCapHeight"])/
                   AbsoluteCurrentValue[Magnification]}], 
                PlotRange -> {{-1.1, 2.4}, {-4.4, -0.7}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Vertex count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["23", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Edge count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[
                
                GraphicsComplexBox[{{
                 0.1, -3.31951456589972}, {-0.14816751450286603`, \
-2.625037331552915}, {0.6310524421714278, -1.3}, {
                 0.9405108616213151, -2.8841601437046225`}, {
                 0.4967448863824806, -2.092358403567382}, \
{-0.846735323402297, -1.466588600696043}, {
                 0.8846460183439665, -0.5107506168284197}, {
                 1.8939086566530445`, -2.50980168725566}, {
                 1.756629266633539, -3.4622764737192444`}, {
                 2.119361963550152, -2.99}, {-0.5709741939515942, \
-4.632295267644082}, {
                 0.20977925607671288`, -4.647162049737781}, \
{-1.0861820131541373`, -4.047493574735101}, {-1.2223073729506904`, \
-2.2040562174063485`}}, {
                  Hue[0.6, 0.7, 0.5], 
                  Opacity[0.7], 
                  Arrowheads[0.], 
                  
                  ArrowBox[{{1, 2}, {1, 4}, {1, 11}, {1, 12}, {1, 13}, {2, 
                   3}, {2, 4}, {2, 5}, {2, 6}, {2, 14}, {3, 4}, {3, 7}, {4, 
                   5}, {4, 8}, {4, 9}, {8, 10}, {9, 10}}, 0.0378698213750627], 
                  Hue[0.6, 0.2, 0.8], 
                  EdgeForm[{
                    GrayLevel[0], 
                    Opacity[0.7]}], 
                  DiskBox[1, 0.05], 
                  DiskBox[2, 0.05], 
                  DiskBox[3, 0.05], 
                  DiskBox[4, 0.05], 
                  DiskBox[5, 0.05], 
                  DiskBox[6, 0.05], 
                  DiskBox[7, 0.05], 
                  DiskBox[8, 0.05], 
                  DiskBox[9, 0.05], 
                  DiskBox[10, 0.05], 
                  DiskBox[11, 0.05], 
                  DiskBox[12, 0.05], 
                  DiskBox[13, 0.05], 
                  DiskBox[14, 0.05]}], AspectRatio -> 1, Background -> 
                GrayLevel[0.93], ImagePadding -> 0, FrameStyle -> Directive[
                  Opacity[0.5], 
                  Thickness[Tiny], 
                  RGBColor[0.368417, 0.506779, 0.709798]], Frame -> True, 
                FrameTicks -> None, ImageSize -> 
                Dynamic[{
                  Automatic, (3.5 CurrentValue["FontCapHeight"])/
                   AbsoluteCurrentValue[Magnification]}], 
                PlotRange -> {{-1.1, 2.4}, {-4.4, -0.7}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Vertex count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["23", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Edge count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"unknown\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Connected graph: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    ConnectedGraphQ[Typeset`sgraph$$], StandardForm], 
                    SynchronousUpdating -> False, TrackedSymbols :> {}, 
                    CachedValue :> 
                    AnimatorBox[
                    0, {0, Infinity}, AppearanceElements -> "ProgressSlider", 
                    ImageSize -> 20]], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Acyclic graph: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    AcyclicGraphQ[Typeset`sgraph$$], StandardForm], 
                    SynchronousUpdating -> False, TrackedSymbols :> {}, 
                    CachedValue :> 
                    AnimatorBox[
                    0, {0, Infinity}, AppearanceElements -> "ProgressSlider", 
                    ImageSize -> 20]], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     Typeset`sgraph$$,
     Editable->False,
     SelectWithContents->True,
     Selectable->False],
    DynamicModuleValues:>{}],
   Setting[#, {0}]& ], "]"}]], "Output",
 CellChangeTimes->{3.920848380509674*^9},
 CellLabel->"Out[96]=",ExpressionUUID->"cb39af23-ff18-457b-84f7-736ab0bf36dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[UndirectedEdge]", "2"}], ",", 
     RowBox[{"2", "\[UndirectedEdge]", "3"}], ",", 
     RowBox[{"3", "\[UndirectedEdge]", "1"}]}], "}"}], ",", 
   RowBox[{"VertexCoordinates", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"1", "->", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", 
      RowBox[{"2", "->", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.920847911587784*^9, 3.920847911592833*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"c8ebda5e-17fb-444e-9c75-8e073fc42cfe"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3}, {Null, {{1, 2}, {2, 3}, {3, 1}}}, {
      VertexCoordinates -> {1 -> {0, 0}, 2 -> {1, 1}}}]]}, 
    TagBox[
     GraphicsGroupBox[
      GraphicsComplexBox[{{0., 0.}, {1., 1.}, {0.5004530409465475, 
       0.5004530409465475}}, {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.], 
         ArrowBox[{{1, 2}, {1, 3}, {2, 3}}, 0.01273]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.01273], DiskBox[2, 0.01273], DiskBox[3, 0.01273]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->"NetworkGraphics",
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.920847912705152*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"7a93dce8-5776-42ac-ae89-652fac521fd9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"VertexList", "[", "%80", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[81]:=",ExpressionUUID->"c74eff20-e49b-41d7-b261-37b8bc5bd6d9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Benjamin Babazadeh\"\>", ",", "\<\"Ryan Doolan\"\>", 
   ",", "\<\"Filip Florea\"\>", ",", "\<\"Luca Florea\"\>", 
   ",", "\<\"Max Friedman\"\>", ",", "\<\"Mia Itskowitch\"\>", 
   ",", "\<\"Kiyaan Joshi\"\>", ",", "\<\"Giovanni Larrea\"\>", 
   ",", "\<\"Samuel (Sam) Millette\"\>", ",", "\<\"Grayson Moskowitz\"\>", 
   ",", "\<\"Ava Nejat\"\>", ",", "\<\"Tristan Peake\"\>", 
   ",", "\<\"Damian Piuzzi Arvizo\"\>", ",", "\<\"Joey Jr. Rallo\"\>", 
   ",", "\<\"Ben Reiss\"\>", ",", "\<\"Jake Reiss\"\>", 
   ",", "\<\"Sam Tarkan\"\>", ",", "\<\"Max Teigman\"\>", 
   ",", "\<\"Alexander Vandooijeweert\"\>", ",", "\<\"Saturday\"\>", 
   ",", "\<\"Sunday\"\>", ",", "\<\"Tuesday\"\>", ",", "\<\"Thursday\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.92084768864417*^9},
 CellLabel->"Out[81]=",ExpressionUUID->"785a2a21-b90d-4aec-865e-8fb586909b44"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Now add 4 nodes which should be to the right: Saturday, Sunday, Tuesday, \
Thursday\
\>", "ChatInput",
 CellDingbat->Cell[
   BoxData[
    TemplateBox[{}, "ChatInputCellDingbat"]], Background -> None],
 CellChangeTimes->{{3.920847040836529*^9, 3.920847072170895*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"99851150-5530-4543-b965-2fd81b1a616b"],

Cell[TextData[{
 "To add the four nodes to the right of the graph, you can use the ",
 Cell[BoxData[
  TemplateBox[{"VertexCoordinateRules", "paclet:ref/VertexCoordinateRules"},
   "TextRefLink"]],ExpressionUUID->"bc00a7fe-b77a-4be7-b865-657da24455d9"],
 " option. Here is the modified code: \n",
 Cell[BoxData[
  TemplateBox[{
    Cell["Graph[winterSaturday[[All, 8]], VertexLabels -> \"Name\", \n    \
VertexSize -> Medium, ImageSize -> Large, \n    VertexCoordinateRules -> \
Thread[{\"Saturday\", \"Sunday\", \"Tuesday\", \"Thursday\"} -> Range[4]]]", 
     "ChatPreformatted", Background -> GrayLevel[1], 
     TaggingRules -> <|
      "CellToStringType" -> "InlineCodeCell", "CodeLanguage" -> ""|>]},
   "ChatCodeBlockTemplate"]], "ChatCodeBlock",
  Background->None,ExpressionUUID->"72e7e7d4-4fb7-4b07-a096-3278b10a5ccf"]
}], "ChatOutput",
 CellDingbat->Cell[
   BoxData[
    PaneBox[
     TemplateBox[{}, "ChatIconCodeWriter"], ContentPadding -> False, 
     FrameMargins -> 0, ImageSize -> {35, 35}, ImageSizeAction -> 
     "ShrinkToFit", Alignment -> {Center, Center}]], Background -> None],
 TaggingRules-><|
  "CellToStringData" -> 
   "To add the four nodes to the right of the graph, you can use the \
`VertexCoordinateRules` option. Here is the modified code:\n```\n\
Graph[winterSaturday[[All, 8]], VertexLabels -> \"Name\", \n    VertexSize -> \
Medium, ImageSize -> Large, \n    VertexCoordinateRules -> Thread[{\"Saturday\
\", \"Sunday\", \"Tuesday\", \"Thursday\"} -> Range[4]]]\n```", "MessageTag" -> 
   Inherited, "ChatData" -> 
   "OEM6eJytWkt3G7cVPkmdJmKTpmn6SLrogRm3SVyStvyKLcfJkSVLVkzaqoaNmkMxETgDkrCGwB\
TAiKJ99EPaf9Huuuu+/RFd9Xf0XgAz5JBDxnHCjYTHfX33gTuY2fxtPahsas21oSJk+\
kJbpQynUiN3pBpRk0/\
dp5rtKzlKjF7DZVjjYT345RaL47ZsMa3pgO2kIjRcCl09lHFf0dHx1pCanpQnx24fDv3eevALHG1JY\
diZ2VcsWeT+c9yxrfgpE4+lYchIv7ZDYw3Uv8I1p6ThYpCLvrgg2m3C4ZPUJKmpB+/\
g4CFYLdWkycTADLfeh9ntiaAjHs5YP6vMrx8I2osZku4qmSYBs4J1rtE7bkOz2QqYOuWAZ4H+ZzuK/\
SVlIpzsM0FjM1F/+yv+/vk5rD2kIoqZyq3YfHUjeANF7Utt9G8WbLqUrW0Er9t/FdPvL9mlEOt5AY/\
YpKjeT/dEGKcR87AU1tZa9KwtT5gokrzVYmrAvD91FiqvtWTE4uCdQWLq1xs36yZVPVlfv3VSD95GN\
QEBtojAW8FQjltc8BF/xqJijAVGMXCMGDj/tZgZyuKWn7TZKGGKgiym+\
vb3v89xWsr4SeIRrQfveYSaVAxS0PnBKY1TCuZuvlYP3t2MYzlm0YMzFqaG7VMznHOg33DAaORWfwQ\
z4Hc/f6h4Gdl7Xgoo0eYjBgGvjaJcmK1PIcL3way5aUzKQ9bbYSYcMrX5CkgG/G2iCOPC9el/\
GwA0WleU9aadcnEY5YF5oS2T/S3g8/aeAI7cJnub6Ty7L2xTQ1HQG5kz+6/\
rC02IBETtwoGMWfDjYKING9Uh3pwmwb/\
e3dSEkiGLk34aE48tycAlIcQBGSMoqkYmMlXkqewRromRBOIgkSIiY26GhCaQ+\
4ni1LAlXLjwFJohdaqZIiOvaoMcDplgpzCVSKhlYLoVR/\
RQpnFUFPU01caxhHwgQpoh4E8YwNQg2xInCI0iWJzgX45OozFJhWCYzlRNCFYrIhUwGY0ABTslnXmZ\
iprwvtUgpKh3Ek+ccJTbqFQ+ILugrwK+e+\
jz1CVkpfIVUFCFxgJiNMTi4vFxBpshlJ0BDjOQsqLoSPo0BCvaQ5ZDY5VQoDpUUNKH+\
go8mGM2pDDVY0yAVgKwMyxCO5IYQtDZaPeLTELonN4gAWRoTFU88T7NZaHqNAtFGoPRU86W1wzvHut\
LhfLRxohrWJo4BTIFGwRKMIxcuIylQhUU2GK8ZDJCV9IIApplhH2JmYg8BymHIsQF0xuVyuVphBT8Z\
I0CnTCKe7EMT4jsWyfViE4VgA0hwo3zAYDPQGEanoB1J9qGD3cV04qOs3gdgyiM6BhAgFDcqBwfH2e\
LFWSOE14lmx2obhbkBfVqRApAcYDOc7AgQ7v3Lnn84MsHB7kG1T3RaTQa3Y17VYzNKhRKO4ZhTHsQ3\
sSCmeUkj2Mb6r2caW+SIw+\
6bTYPN78KZkAQCGVGDGhEMrVUORzgAHoqOWTOqMcBfJOHvD3eCRys4ApyfNya+BMf/\
ssOo85Z10GCtYJA/AwJO0sABo2JAUohRE3aZn+\
2sOdqgcajTJ8YYpJoPhAg5dLZ19fIH8jk62uXgOtea//\
JQXvzcftiIQxcZQLPx1igIBkzYxCqGX7Ex2wtQ4XpkCYsDwxqCXVM9bBBHpzRUQJOJ3tYZaDAQnqQo\
0t37jTu3CQoGWCGYm/lQwYMmEHkPMejYxR9dIlgNWSQYRdB+\
yYXJ5AhLvBx80KBjGSY2kqEUKIjHV7FfNAT2HC2QTo2HLofJTSMmdlIFf/\
YZRrzmlfWLpNOG2Mi36RY/4qd+\
dgu5oKfnGKbw8b5Rpt0V7L1bNlR7Qk4uUlg1cgJDJQLKPvxFbvqFj/\
OcgPEQmqLENVfMFpPRj046abOcd60EUExn4uoQPieNMgTTKdIuqqSU2IiuMp8ebF4akj6slJZWhxrN\
jxtdsk+TGB+RbxvzfD1dAwN2bQIA3dtET9gIoJdERkomgx5qB0XM0l8KQVOeJBAhc/\
OTDzeQBUBEz15hqu2t3IGb5Cji0cfHV3e9ezuy7POp59+\
9ln3COENbJhDLPVSHps6IKHt2U76PiEp5MSkQTZtRoOvTiweqYgBGqITFvK+\
18u2tEAb2XNtwU2BmUCZ2M2LMdbiR4wlrpRojiHnKmZ2dMOGP0FlnmqC2QCojLD/\
A6eBLBphnYZpACOFzAWS7OjWNmMHsewB4SmF2AKW2kng5kNtd+\
VnORDu2ygjI1BHieVhhn4dubYTiFrYHgg2zpenEQJNgzvHDptgHrRZrqSfCDmGjgzbGQj5fp9E0OvA\
KSMJtHjgi2K0QgALxoBRlgoh9L/\
2nEhiaXTNtijStbVQDcMhUvg6j5rGbADxZIvyiJ74rGBUc2wioHvCWMMnvmja3V0A0NVMb/ePD/\
CUglPlOpwp4HIF0gNsryM6IffI3iiB4OtUA7vwzX2AO16/\
un7Fj7OdjVCfVmukuhV8We2Su6RSWat4XqDEC3Gy+\
5bzaUP0vRAjv3EFp2GqXpCV3znHq4JwfYJwjW07VgLXoV2YMvTjVXB5XvNwLeO0FC7HZxGuJYxWwOU\
5LcK1jNUKuNbXS/HaZnA6sC0KrXSnuFgjz8+\
XQFNCZJcWSaYoLNL4tRKiqcElVH7RkznbbpamzixxcXFW5lyWlBAt2DafEIs0JbYtxH4JVZltN26hc\
buKR53frd+41rVNbUWxkTzFPjFOR4KsuyOP4kFm63Cl4ovK+\
p1SaIoTnQ48V9fINXL3LukuwWV2uGL/FJTCeBXFFJHixCLN2kwsTm0pTpRKmovf2eGK/\
VNbCuNVFFNbihPzNAUnWrdhD8nhrCBKjqfuu/\
bJC7nP8oW2OY5fzH1L9y9133KK5e6bp3kx95VIWum+pfuXum85xXL3FWlsZl53VYeanTSOH+\
NTF9C1aNIJDOLwheSi80Gns97tQikmUI9hcK0L5L+vleff8+\
s1cuO865WqLHgdeLfh2ZhGnc0kgbYDKObL2qw2vvIAo1S8vIqzSVKuYOaW5er5AjqrR66cSdlLK1dM\
yFLtpkGwVL28Vs+\
qMtVvmL68fsXsL1dwGnPLNczPhVltpv59qRAsLZtzKi4ka4mK813DDxiCJXW6XMEVIVjsT37AECw7E\
0q1WxmCc63QDxiCpQdQuYIrQ3C+\
7ZoPQVsLb9russ9F5Dr3bZCIF1HfdAnMH8KD8bBTWSOkxUY9pv7YKa1/\
t9EMpEJrsjUwqoRwNiSKZHallKjoqgKVXyonKyJYpPNrnhCv+\
GH2sRSsWlnrOmSuLyJTDViPasOpIPepMoIZU4XdeJUI2+/\
N8HV9wi7eS47cDRp0CPBIju2CYjqNjbZP6HE6GNjrdQqPqKidvwMp5i+MZFGV/Ok/7zhu3kB9hY+\
10iJxu1jBgE0WlgXeDiY9d4h/\
t1qSC5hG2ie5fqv6uRIdZ6tEqaZuw8tWljk5efZa1qtbyRJlC0WjVFu/46VLzYKsOY2/\
pZUt07lQR8qV9lu+R/1ZlHeeN9RNhjdP9iaGugs+vPv1BpD84d9ewwo5du+o8LY0a8Fd3OOtkIyYu+\
KJpPjQkEjRsX1XhVdLenqbs5a90zczVzoclbEXgp1lCVQjX+\
L15lnT3SXVP4OyAbKr2XzAnzGcbbGIp6MaPPnTAcsmm1QNmH0QXH6ttOfz+dZt9/\
i4Spml2szJKDX276+\
07YshjnfB7vKbMKUA4ewti73yJQfuYQdRZmdGURLG0l6f9xQNTxj4oI9OcoIb5KHn6V6l2NdRLLKsN\
kjl5fH9FtT+83oBtu8px5V0YHWPtMFm/DCjU/2u/I4sw6Nq197ouK8M+u5jDBbhwUPa1Bb/\
gxQvYIECvCRDbi84O1X3NYjrF9qThFWtjnv2NdMWoInrljP8n13Guj3VLjK/\
D84ZuJdAMAnKT5rslMXYc7hruKvfHl94n7EcKAsSsLlXcpNuu4yEhgwH1cfM4OvJbAOo7b8jackIjM\
c9FULIc7RTM3PsKsA98lDG0ZbEG3DDOk7V59X7TDzFTx3Awh59RiM2RBgOJnAob0sZU4HDHR7zhOzE\
EmqSxdr/qs00pNP5aguCfkdxFo0cXYtTsmf0iRxzE1rGj/\
iEAusvpB5yHO9yeUqF4JjMEOmNRoPUbzfu3F6//HX91nk3y/\
iQxizqPL9aI1fPuzMKEPxKyN35I5Q5JN3zc9zXkqlmWEKpsl8g0MEiel3Pz35T8YgpweI9waErifkz\
dzsOnO13Dbhzm/UptBtFsYsOqRD3PQ+6ALe0Fc3e7eNCDVACl7btm0xYxlYJ35TYZHkMFRnv22/\
46jvGtjH7tqCXv3pWfDA0G2TaJWRHcH60ZQeDzXNlKxedqVz+HVLw71fb0gp0L/\
BS5eXOysmaLRtKtfxTg1S7SnbsgnpLShVxQQ2zSXjsXxkUq9hIRrzPsyL2PWqYD4MXPSgK2+\
c0tS5yB+7z2ZZ72kfP9MbTtvQc6Q6gWrDODTg+0JZ68Gaz2co/8wkqWFDsa2aorxX/\
sQvEoV7zX8aw6P8le19e"|>,
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"6eda124f-fa47-4424-a1b5-2f2130a0c235"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[Cell["\<\
Graph[winterSaturday[[All, 8]], {}, VertexLabels -> \"Name\", 
    VertexSize -> Medium, ImageSize -> Large, 
    VertexCoordinateRules -> Thread[{\"Saturday\", \"Sunday\", \"Tuesday\", \
\"Thursday\"} -> Range[4]]]\
\>", "ChatPreformatted",
  TaggingRules-><|
   "CellToStringType" -> "InlineCodeCell", "CodeLanguage" -> ""|>,
  Background->GrayLevel[1],ExpressionUUID->
  "a3580d37-e3fc-463b-a980-43f964a5f1a0"]], "Input",
 CellChangeTimes->{{3.9208470923672113`*^9, 
  3.9208471059628983`*^9}},ExpressionUUID->"d8dabe70-b7de-4ff2-979c-\
fc1bc556d8d6"],

Cell[BoxData[
 InterpretationBox[Cell["\<\
Graph[winterSaturday[[All, 8]], {}, VertexLabels -> \"Name\", 
    VertexSize -> Medium, ImageSize -> Large, 
    VertexCoordinateRules -> Thread[{\"Saturday\", \"Sunday\", \"Tuesday\", \
\"Thursday\"} -> Range[4]]]\
\>", "ChatPreformatted",
   TaggingRules-><|
    "CellToStringType" -> "InlineCodeCell", "CodeLanguage" -> ""|>,
   Background->GrayLevel[1],ExpressionUUID->
   "daccca8d-6e9d-4ca7-afa2-4789034b8760"],
  TextCell[
  "Graph[winterSaturday[[All, 8]], {}, VertexLabels -> \"Name\", \n    \
VertexSize -> Medium, ImageSize -> Large, \n    VertexCoordinateRules -> \
Thread[{\"Saturday\", \"Sunday\", \"Tuesday\", \"Thursday\"} -> Range[4]]]", 
   "ChatPreformatted", 
   TaggingRules -> <|
    "CellToStringType" -> "InlineCodeCell", "CodeLanguage" -> ""|>, 
   Background -> GrayLevel[1]]]], "Output",
 CellChangeTimes->{{3.9208470883403482`*^9, 3.920847094209247*^9}},
 CellLabel->"Out[73]=",ExpressionUUID->"bc2459d7-873d-4527-9c9a-a922e93fa7f3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"winterSaturday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "8"}], "]"}], "]"}], ",", " ", 
   RowBox[{"{", "}"}], ",", " ", 
   RowBox[{"VertexLabels", "->", "\"\<Name\>\""}], ",", " ", 
   RowBox[{"VertexCoordinates", "->", 
    RowBox[{"Thread", "[", 
     RowBox[{"{", "\"\<Saturday, \>\"", "}"}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9208471203236628`*^9, 
  3.920847273868416*^9}},ExpressionUUID->"4026e3f3-d94d-446b-b8bb-\
c2facef1ad9f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{
   RowBox[{"winterSaturday", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", " ", "8"}], "]"}], "]"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Saturday\>\"", ",", " ", "\"\<Sunday\>\"", ",", " ", 
     "\"\<Tuesday\>\"", ",", " ", "\"\<Thursday\>\""}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.9208473008976297`*^9, 3.9208473426185703`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"de6daf61-ca15-4191-8fac-fd6029028750"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Benjamin Babazadeh\"\>", ",", "\<\"Ryan Doolan\"\>", 
   ",", "\<\"Filip Florea\"\>", ",", "\<\"Luca Florea\"\>", 
   ",", "\<\"Max Friedman\"\>", ",", "\<\"Mia Itskowitch\"\>", 
   ",", "\<\"Kiyaan Joshi\"\>", ",", "\<\"Giovanni Larrea\"\>", 
   ",", "\<\"Samuel (Sam) Millette\"\>", ",", "\<\"Grayson Moskowitz\"\>", 
   ",", "\<\"Ava Nejat\"\>", ",", "\<\"Tristan Peake\"\>", 
   ",", "\<\"Damian Piuzzi Arvizo\"\>", ",", "\<\"Joey Jr. Rallo\"\>", 
   ",", "\<\"Ben Reiss\"\>", ",", "\<\"Jake Reiss\"\>", 
   ",", "\<\"Sam Tarkan\"\>", ",", "\<\"Max Teigman\"\>", 
   ",", "\<\"Alexander Vandooijeweert\"\>", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Saturday\"\>", ",", "\<\"Sunday\"\>", ",", "\<\"Tuesday\"\>",
      ",", "\<\"Thursday\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.920847343180488*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"775bdd4a-ad3d-43fd-8a14-cba3d3dac274"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Append the four days to the name list like above", "ChatInput",
 CellDingbat->Cell[
   BoxData[
    TemplateBox[{}, "ChatInputCellDingbat"]], Background -> None],
 CellChangeTimes->{{3.9208473594499826`*^9, 3.9208473728499002`*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"512d4183-0fcc-43f3-b8e9-841f77c4fe95"],

Cell[TextData[{
 "To append the four days to the name list, you can use the ",
 Cell[BoxData[
  TemplateBox[{"Join", "paclet:ref/Join"},
   "TextRefLink"]],ExpressionUUID->"6e7725f5-5486-4271-9d8b-bdb07cb4410e"],
 " function. Here is the updated code: \n",
 Cell[BoxData[
  TemplateBox[{
    Cell["nameList = Join[winterSaturday[[All, 8]], {\"Saturday\", \
\"Sunday\", \"Tuesday\", \"Thursday\"}];", "ChatPreformatted", Background -> 
     GrayLevel[1], 
     TaggingRules -> <|
      "CellToStringType" -> "InlineCodeCell", "CodeLanguage" -> ""|>]},
   "ChatCodeBlockTemplate"]], "ChatCodeBlock",
  Background->None,ExpressionUUID->"e8a82d99-6bc9-4752-b573-a956c2ef9e1e"],
 "\n"
}], "ChatOutput",
 CellDingbat->Cell[
   BoxData[
    PaneBox[
     TemplateBox[{}, "ChatIconCodeWriter"], ContentPadding -> False, 
     FrameMargins -> 0, ImageSize -> {35, 35}, ImageSizeAction -> 
     "ShrinkToFit", Alignment -> {Center, Center}]], Background -> None],
 TaggingRules-><|
  "CellToStringData" -> 
   "To append the four days to the name list, you can use the \
[Join](paclet:ref/Join) function. Here is the updated code:\n```\nnameList = \
Join[winterSaturday[[All, 8]], {\"Saturday\", \"Sunday\", \"Tuesday\", \
\"Thursday\"}];\n```\n", "MessageTag" -> Inherited, "ChatData" -> 
   "OEM6eJzNWt12G8UdP9BQsAptKW2BXvQMIqeQVBLkCxKHwHHsOHEiOa6lknJkUY+\
0I2ni1c52ZteynOMHad+il9z1AfoAvWuvetln6O8/M7vSWpIhJhf4xp6Z//\
f3zHrtt9Vmac0YaRIe9YS50NKpoK00UZtKj3iSb93lRuxoNYoTs0LHOJO9avNX6yIMW6ohjOEDsZlG\
vUSqyJSfqLCv+Wh/fciTrlIH+\
w6Olh622vwlrdZVlIijZEeLeJ76LwhiQ8tDEW2rRBAh88omDw2wf01nTshERoOc9XtzrB0QLR+\
nSZwm1eabtHgArZWe1EU0SIbr72J3YxLxkezNaD8rzNv3It4NBaHe1yqNm8IyNrlEbzqAer3RFPpQw\
p4F/J9vavGXVES9yY6IeJhM9N/+Sj/ffIGzBzwKQqFzLdZeXm2+Rqx2lEnMb+\
Z0upidrTZftX9qYd5dAqXJ1qcZPBKTong/3Yp6YRoIb5bC2UqDH7XUgYiKKG80hB4I70+\
ThcorDRWIsPnmIE6q12o3qkmqu6p65ZODavNnJCYsIOYt8EZzqMYNGcmRPBZBMcaaiRZwTDRw/\
muIZKiKID9piVEsNAcvofv2579f0LZS4ePYW7TafMdbqM6jQQqZ7x3yMOVQd+\
2VavOttTBUYxHcOxK9NBE7PBmecqAH2BU8cKc/\
wg787vefaLkI7R3PBUK05Egg4E2iuYyS9c8Q4TtQ69Q2JeUT0d0USW8o9NpL4Az720SJEheuT/\
9Tg6FJuyKv1+\
2Wi8MgD8wLLRXvrIPOz7YiUJQ22VvC5Nl9YYMnnBi9ljmzv2Iu1BEJZLULuyoUzR83JyYRoyrizUnS\
/Mdba4ZxNhRh3E9D5m3LMuOyHuKAjckousImKtXsqeoyaViiGOIgVlHAxjIZMh4j92MteSKWUJGRxz\
CCsFMjNBt5UWvsyVBE4hBbsUItg+qWHTNDlYZBkdXT1CSOJPKBRSoZwv5MwEw1tqFog/\
EgwOGEfktyGg9ZGkWC0pnrCaNqxZQGkdEIVrBbyqmXiWiY7FsJepzkjsOJY058a6XS++w+5NWgu0U+\
T11ClkpfAYNrUhYW4z0qLt4+TuFkiLIzoGVmpKwoOpQ+70GL1lDkprFCaIiOCsr6qK+\
gIRyxIcdWV4gIUkWwXSIC0iMOEYJORwsfZRx6zuk11kSGhlyHE+/\
TnBeJzrNQ5CGUnlK2tGZod0VfaeJPOgbS4GjiBMgErDGUYKxcuIyVJhE0dEk8ZzYiV/\
IAAS0yxL6iTCSag1SiCMlImNVS6fI0Qgp+\
skpBJoribqh6B0z1rZMqzKQaxkaIyMT5AMYXEJj3DqDdgbHhI13FtKzDLF7HYEURHcIICMXV0v7+\
fnZYIuK04UWy2UHiZkFeEK/\
CVAQrDsh5zixE0MLeZtv3vry3m0tQ3oratVqts3qnTLFZRqG0ayxD3kV4M2vMLCdlGNpQ7+\
ZEu5Pc8pBtrf5k7avmjBEiMmWGDGsEKrVYuTngAH6oJDJn1JUwfpKHvG3vDI0VrmD7+42J7/\
j4K2tG7aOOMwnVCob4GTJxFMMMhhIDQpGJ6rwl/\
mTNnosFiUeZPCFikhk5iMDl4tHXV9nv2eTrqxdBdaux83i3tbbdeq8QBq4ywfMhFSgkY6YMmWqGHvM\
xW8msIkyPxyIPDG4RTcjNsMbuHfFRDKezLaoyKLBID7Z38dat2q0bjDjDzCj2lj8yYCASspynuLdPr\
PcuMqqGAhn2HqSvy+\
gAGeICn4DnCmSgeqmtRGRKcqSzVzEfzAQAR6usbcOh82HMe6FIVlMtL7lME17y0spl1m5RTORAWvQ/\
sjuX7GHO+PEhjTlinAPapPsoO8+OHdZWhM7NmlaMHCFBuUDZDz+yp+7wUpYbYIvUjnok/\
pzSZjLqotNNneO8aSOCUz4XrYLwPaixx5ROgXJVJcekRHCV+fJ88TRI+kWlcmFxrNjwtNml+tig/\
Apk36rh6+kYA9m0CIO6sRbfFVEAqIANNI+HsmcclWQS+\
1IKStRIUOGznkntDaJE2OiqIzq1s5VTeJXtvbf34d7l+57cXXXU/uyzzz/\
v7JF5mzbMEUvdVIZJFZYwtrezvk9IjpyY1NiazWj46sDaI41CmIaZWPRk38tlR1rgBravzbmpmUxQJ\
u7nxZhq8SMhYldKjKSQcxUza90A+\
CMq81QSygZYZUTzH5wGXjygOo1tGCNF5gIla93GZuwgVF0gHnLEFkgax0EmHxgLlfdyIO7YKGMjiKO\
j5WFGfh25sRNIDRoPIjHOj6cRgqHB9bEndaiHMcuV9INIjTGR0TiDkO/\
3WYBZB11GMYx48EUxWhHAkRAglKVCD/Ov7RNxqBJTsSOKcmMtqmFvSBi+\
zpOkoRggnmxRHvEDnxWCG0lDBKYnijW68QXT6e4CjK5nZrtv3tZipKAVpzCkUiKBwrQaw4fUwNBwrn\
6KfoNw0JCsSaN3wCfs9Ea7fZXdvs1QPcOw02G3Wam0UvIgEGQWwy7PgG8h0mYR/PosjGGqiyh+\
Yx5nhbDGdo6a0aW4sZCTB8l0mV2eAT/VpbA+\
C2OqS3HjNE6JfHPthvUNbshpGG5T8wVeg8dt3KVgh4dKRu332+\
0rnU6FlVm5wrC42gH67ypzDgTdCnt2rcKun3S8UKU5r4N2CyMSD9prcYzoA0YRplKQ5sTTKZk0Or+\
I3spnCJi5Zbl4FoIGvmheuCQV5xYu9+\
hy6aZBsFQ8D1Jhs6JM5Rum55cvD58zBJzG3HIJPQxEnJFm6t9zheDpvFsk4lyyLhCxCPNCQ7CY6GcI\
eEYIzkK80BA8VVSWS3dmCBZAXmgInq5gZwh4ZggWYeZD0NbCG1eoFvZlFDRtxG6AI91H/txh2H+C+\
WjYLq0w1hCjrtB/aC+sfzdJDcIibbIzKLUAcTYkimj2ZCFS0VUFLH+0GK1owSKeP/\
OI9NKD3W0ViXJppeMsc23eMuWm6HKTSB6xu1wnkUiSMqDpRgnwOzN07RxQuk/\
X05G7SGFCwGRG4wJm0TTE9YcGtTAdDOwrC8ekQtL5UbiYv1ipoij5EJhPHDeuk7yRj7WFReJmsYKBT\
BaWBdrOTOZUE3++\
WpIzmEbap7l8SwaCZTLOVomFkjqA81aWU3zy7LWkl84iy4QtFI2F0nqIc5eaOV6nJF4+\
Cy2VuVBHFgvtQb5H/\
ZnnZ2PDJkpd0AXEDuTc3fPoCcArwLK4crdxXBfcUyVdmrMR3MU9XQ5wW3GTfqCiDxIWaD62T5Z0wzD\
ToX4l+7STzEz2koSx98L2sgSqsC/plntUd1eK6ucoG+\
Bdzvab8ljQbkMEMh1V2NYId6Vss871QHRI5eW3iy2fz5/cpHw5W5il0pzisVDZv7/Usu+\
Dkp4E3BsIE1rDwtljm7354/5tLztkZXGUaM56obKvKF2N26+AD/\
rkJMe4xh54mu5Fzb5K4tZHpFZZ6fz2/Rar/fPVgtm+Jx9X0kHqDmtBZ/o+1y4/\
L709S3Cv3EFslP3Hpr77JicCajysxW3x303pHg4MeEn1pL3ntsvuo6CbF1qTWJStjFv2tXEd1qRzSx\
l/Z3dyB1PuEPG7cM7AvQViE8JP6uJQhDRz2Hr86cffHl/\
I4pPlhrJGApk7Cx5U7JQR856gRXlbJPRKnQFAbP85saECKE8wJcbYM9LTiGTfVYA77IEKg3VFDyGJa\
DtRn5XviugpffGChl1+zAMxJDPsTtCUN5QKeUTLTRnKmG2GCjXJ2tr/lOtpj0/3yw0E/\
aaWIhg5vIbkbCsxB2osk54l/EhOOEg/VGYoaX1fqkMeRZKSGZFeq9VY9Wbt1s0rl7+ufnLSyTK+\
x0MRtJ99XGEfn3RmBGD0sdg9/ZApc5N0Tk4IrqFSI6iEcm0/RPHBvPU6np79tPZI6EiEW5HEVBLKY/\
dIAsr28xZBbog+\
x7hRZDvvkBJzn3XJBQTS0jz7xEMHFVgJLm3ZB20c06hED2Y2WbZRkenZ5bqvvmMaG7NPTN38C4SWg2\
GyyqZTQtaC89aWNYZvqVz/e7mlLEP3jptqz3eWTzZs2VCq5F+\
cUuMqWdsF9bpSOpART4RNwsKz7kKIS/5tqVjnRiqQffkiypyPlO/aSwrgp0S1XnQ9+\
dnsVD4dtWfG5+\
nkekJ4uygoon0dHebssvvvFVL1u6i7vJD8IFX2xe3ac3WARTpmXaDC9qLlau6VFik6i3GGpnu5qpaN\
V9b97dW1i9JervLeaZ1/gD3q+0TUaZstjgxIdpJ1Q3t7crPrWTyfJ6qyDnkdQXS+\
tvWiu5Ul0uSjVITsQ/y+xBoyRL1LhIWF/\
Q26R0M5ise0uXbI2bZ4yhOrm7a1mO0ITOq0sQGNaC3T42PJ1vShPFa0/1CJCXuoMTxiQLc7UB+\
TpDTGHtOgn68gCMJMH3idoGNLyIFXcS0UR5we5dmX+KWUfCrGAt4tP6czTlxWOw9PG0dAd2DfN+\
z1217UQ0kXkS7GXlv6tO1EfKYT+Y9azX+\
9RJ3ou9Bc0ILoFajQcWjjUn6zL7aYNKbPIr7DWF2INP0bCuYk+570oqLWXcmqzdfr9Ub+T0DNEuWw/\
QiN+l/y/wqD4mBW/P/NiOD/tBBqHQ=="|>,
 GeneratedCell->True,
 CellAutoOverwrite->
  True,ExpressionUUID->"28d9d3d6-72d6-4cda-905b-9cc944a55205"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nameList", " ", "=", " ", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"winterSaturday", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", " ", "8"}], "]"}], "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Saturday\>\"", ",", " ", "\"\<Sunday\>\"", ",", " ", 
      "\"\<Tuesday\>\"", ",", " ", "\"\<Thursday\>\""}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.9208474135371447`*^9, 3.920847413542349*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"75ef9a60-b2b2-4222-a7bc-f992500554c1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Benjamin Babazadeh\"\>", ",", "\<\"Ryan Doolan\"\>", 
   ",", "\<\"Filip Florea\"\>", ",", "\<\"Luca Florea\"\>", 
   ",", "\<\"Max Friedman\"\>", ",", "\<\"Mia Itskowitch\"\>", 
   ",", "\<\"Kiyaan Joshi\"\>", ",", "\<\"Giovanni Larrea\"\>", 
   ",", "\<\"Samuel (Sam) Millette\"\>", ",", "\<\"Grayson Moskowitz\"\>", 
   ",", "\<\"Ava Nejat\"\>", ",", "\<\"Tristan Peake\"\>", 
   ",", "\<\"Damian Piuzzi Arvizo\"\>", ",", "\<\"Joey Jr. Rallo\"\>", 
   ",", "\<\"Ben Reiss\"\>", ",", "\<\"Jake Reiss\"\>", 
   ",", "\<\"Sam Tarkan\"\>", ",", "\<\"Max Teigman\"\>", 
   ",", "\<\"Alexander Vandooijeweert\"\>", ",", "\<\"Saturday\"\>", 
   ",", "\<\"Sunday\"\>", ",", "\<\"Tuesday\"\>", ",", "\<\"Thursday\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.9208474169600763`*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"7c929f4b-e19a-44b2-bb2b-7b5f505fe1db"]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{240, Automatic}, {Automatic, 49}},
TaggingRules-><|"ChatNotebookSettings" -> <|"Assistance" -> False|>|>,
FrontEndVersion->"14.0 for Mac OS X x86 (64-bit) (December 12, 2023)",
StyleDefinitions->"Chatbook.nb",
ExpressionUUID->"be98f886-6e4b-4e42-9134-03258cb9bcc8"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 264, 4, 30, "Input",ExpressionUUID->"1752cafd-9886-41c1-84ab-f19eea4e6c31"],
Cell[CellGroupData[{
Cell[847, 28, 223, 4, 30, "Input",ExpressionUUID->"6f68bfa0-8f66-472d-b452-1d8a922c286b"],
Cell[1073, 34, 224, 4, 34, "Output",ExpressionUUID->"5b81cb48-30a6-4a2c-8774-3d94010d30b9"]
}, Open  ]],
Cell[1312, 41, 957, 26, 94, "Input",ExpressionUUID->"ffd9a4c8-6977-4d25-a5b2-560db33b144b"],
Cell[2272, 69, 996, 27, 94, "Input",ExpressionUUID->"22927090-1f40-41d0-8f81-84b32927ad21"],
Cell[3271, 98, 804, 22, 94, "Input",ExpressionUUID->"df80b77d-45d9-4b1e-a71b-cb6e7bc9e132"],
Cell[4078, 122, 860, 23, 94, "Input",ExpressionUUID->"f78b4db5-db5f-4117-909e-449d744afc78"],
Cell[CellGroupData[{
Cell[4963, 149, 191, 3, 30, "Input",ExpressionUUID->"0e5d9517-0261-42b8-86b5-6ac0070f0b4e"],
Cell[5157, 154, 5801, 124, 434, "Output",ExpressionUUID->"3d14a16e-b6d4-4f0b-8618-ccf18a0d2645"]
}, Open  ]],
Cell[10973, 281, 164, 4, 30, "Input",ExpressionUUID->"ea4c11a5-9659-4c47-a739-54657b0323bc"],
Cell[11140, 287, 298, 5, 55, "ChatInput",ExpressionUUID->"47c8637c-7813-488d-a552-36a3f9188ea4"],
Cell[11441, 294, 1822, 54, 199, "Input",ExpressionUUID->"06562fb6-b2a1-4993-854c-cbf5afb9571b"],
Cell[13266, 350, 294, 6, 55, "ChatInput",ExpressionUUID->"6bbc195e-bf26-45fc-a06d-7913111f8731"],
Cell[13563, 358, 1726, 58, 199, "Input",ExpressionUUID->"33a11239-4c61-4bed-b135-c5c3c57549fc"],
Cell[15292, 418, 6677, 203, 493, "Input",ExpressionUUID->"47d9e82e-e6b5-44ef-8b5b-3380289a1c92"],
Cell[21972, 623, 1288, 32, 157, "Input",ExpressionUUID->"d10432f9-9240-43ca-b146-cc045dc79b11"],
Cell[CellGroupData[{
Cell[23285, 659, 191, 3, 30, "Input",ExpressionUUID->"844474a0-88b9-4b0e-9221-6b4c9f4a63fd"],
Cell[23479, 664, 4363, 80, 308, "Output",ExpressionUUID->"7c26e275-9a5c-4522-bfb9-0f66493ac856"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27879, 749, 381, 6, 30, "Input",ExpressionUUID->"14f1e675-7407-4989-b3b3-a26c28fb4326"],
Cell[28263, 757, 258, 4, 34, "Output",ExpressionUUID->"eae61600-4d74-4312-ae7d-80e579feb3ba"]
}, Open  ]],
Cell[28536, 764, 373, 8, 55, "ChatInput",ExpressionUUID->"c5490ac3-893a-4347-854c-968d3736dd7b"],
Cell[28912, 774, 777, 21, 73, "Input",ExpressionUUID->"26066b3b-fe1a-4a52-b633-039eeb05ecaa"],
Cell[29692, 797, 1925, 55, 241, "Input",ExpressionUUID->"9f0b210b-e72b-4f64-88d3-334f3e4f4b06"],
Cell[CellGroupData[{
Cell[31642, 856, 380, 8, 55, "ChatInput",ExpressionUUID->"774b8b1d-954f-48f4-bf38-d1c365266738"],
Cell[32025, 866, 4744, 81, 89, "ChatOutput",ExpressionUUID->"a467b38f-9169-4334-82b2-e321c67990cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36806, 952, 444, 11, 30, "Input",ExpressionUUID->"12d876b9-c89c-4d9b-b77f-a345e92814cc"],
Cell[37253, 965, 5283, 88, 109, "AssistantOutputError",ExpressionUUID->"bbff0479-bf76-4ee5-87c9-956c0c0e78a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42573, 1058, 363, 6, 32, "Input",ExpressionUUID->"7d31c866-2e15-403d-bd1f-a4ac61aecb19"],
Cell[42939, 1066, 658, 15, 36, "Output",ExpressionUUID->"8281b586-9a07-4dfa-8c85-cd4fe4ab4f43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43634, 1086, 787, 19, 30, "Input",ExpressionUUID->"e5fbbad9-717c-4696-97f6-4da1f52177b4"],
Cell[44424, 1107, 6629, 128, 294, "Output",ExpressionUUID->"9ab2b1f9-724e-4240-a910-3481d6b1efba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51090, 1240, 189, 3, 30, "Input",ExpressionUUID->"f175b77c-530c-4a8d-b879-e238d7a962a6"],
Cell[51282, 1245, 168, 3, 34, "Output",ExpressionUUID->"eda3d19a-09dd-4c04-a8b4-33df37f7551a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51487, 1253, 385, 8, 55, "ChatInput",ExpressionUUID->"ed9d039c-276b-4a96-a269-697c526a9739"],
Cell[51875, 1263, 8949, 167, 153, "ChatOutput",ExpressionUUID->"dea09b41-f0e4-4a66-87dd-721e6aa4a853"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60861, 1435, 1882, 49, 52, "Input",ExpressionUUID->"24852a25-f07e-44a1-91ff-8b8e0fdf26c3"],
Cell[62746, 1486, 1706, 30, 77, "Output",ExpressionUUID->"bd6c710d-a134-49fa-9044-13c8c4c2a23f"],
Cell[64455, 1518, 3253, 92, 163, "Output",ExpressionUUID->"f5535e90-de6a-4f82-b779-83f7c62f6303"]
}, Open  ]],
Cell[CellGroupData[{
Cell[67745, 1615, 544, 11, 30, "Input",ExpressionUUID->"a68b6f40-3ed7-4a90-a6b3-34a4dc364d5f"],
Cell[68292, 1628, 93591, 1549, 630, 7192, 132, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"7fca6039-92e7-43ac-9d99-b5bbb0840462"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161920, 3182, 329, 7, 30, "Input",ExpressionUUID->"f6becc8f-bb6a-420d-98f8-0e816b000ab1"],
Cell[162252, 3191, 6577, 118, 320, "Output",ExpressionUUID->"fdd3e56d-78ca-46b7-9b06-76eed58a8361"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168866, 3314, 252, 5, 30, "Input",ExpressionUUID->"18f8ff0a-a776-4b73-b021-48b0f030dfcc"],
Cell[169121, 3321, 62082, 1032, 737, 6613, 122, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"7e2b5105-e8a2-4ea5-983c-7215c787cdc2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231240, 4358, 532, 13, 30, "Input",ExpressionUUID->"ba9eae55-01b3-4fd3-a447-5fa60cd6e5d2"],
Cell[231775, 4373, 1997, 63, 56, "Output",ExpressionUUID->"3a7321aa-478e-4011-be9c-5a73d669f46e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[233809, 4441, 219, 3, 30, "Input",ExpressionUUID->"d3cbc780-1111-41f6-a76a-31263b932031"],
Cell[234031, 4446, 152, 2, 34, "Output",ExpressionUUID->"a561a6de-2966-4af1-8823-f620606e3d27"]
}, Open  ]],
Cell[CellGroupData[{
Cell[234220, 4453, 900, 19, 52, "Input",ExpressionUUID->"684416a1-1b0d-469c-97b6-335ca3aff9a3"],
Cell[235123, 4474, 10972, 227, 102, "Output",ExpressionUUID->"7a5de60b-4044-4d7d-8928-fbadaebcc28b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[246132, 4706, 152, 3, 30, "Input",ExpressionUUID->"6eeb73e8-95fd-4a8e-a87d-da4a84a11039"],
Cell[246287, 4711, 11188, 233, 61, "Output",ExpressionUUID->"cb39af23-ff18-457b-84f7-736ab0bf36dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[257512, 4949, 673, 18, 30, "Input",ExpressionUUID->"c8ebda5e-17fb-444e-9c75-8e073fc42cfe"],
Cell[258188, 4969, 934, 20, 376, "Output",ExpressionUUID->"7a93dce8-5776-42ac-ae89-652fac521fd9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[259159, 4994, 165, 3, 30, "Input",ExpressionUUID->"c74eff20-e49b-41d7-b261-37b8bc5bd6d9"],
Cell[259327, 4999, 899, 15, 77, "Output",ExpressionUUID->"785a2a21-b90d-4aec-865e-8fb586909b44"]
}, Open  ]],
Cell[CellGroupData[{
Cell[260263, 5019, 356, 8, 55, "ChatInput",ExpressionUUID->"99851150-5530-4543-b965-2fd81b1a616b"],
Cell[260622, 5029, 6339, 110, 151, "ChatOutput",ExpressionUUID->"6eda124f-fa47-4424-a1b5-2f2130a0c235"]
}, Open  ]],
Cell[CellGroupData[{
Cell[266998, 5144, 577, 12, 75, "Input",ExpressionUUID->"d8dabe70-b7de-4ff2-979c-fc1bc556d8d6"],
Cell[267578, 5158, 1005, 20, 79, "Output",ExpressionUUID->"bc2459d7-873d-4527-9c9a-a922e93fa7f3"]
}, Open  ]],
Cell[268598, 5181, 529, 13, 30, "Input",ExpressionUUID->"4026e3f3-d94d-446b-b8bb-c2facef1ad9f"],
Cell[CellGroupData[{
Cell[269152, 5198, 491, 12, 30, "Input",ExpressionUUID->"de6daf61-ca15-4191-8fac-fd6029028750"],
Cell[269646, 5212, 938, 16, 77, "Output",ExpressionUUID->"775bdd4a-ad3d-43fd-8a14-cba3d3dac274"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270621, 5233, 317, 5, 55, "ChatInput",ExpressionUUID->"512d4183-0fcc-43f3-b8e9-841f77c4fe95"],
Cell[270941, 5240, 6126, 108, 131, "ChatOutput",ExpressionUUID->"28d9d3d6-72d6-4cda-905b-9cc944a55205"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277104, 5353, 536, 13, 30, "Input",ExpressionUUID->"75ef9a60-b2b2-4222-a7bc-f992500554c1"],
Cell[277643, 5368, 902, 15, 77, "Output",ExpressionUUID->"7c929f4b-e19a-44b2-bb2b-7b5f505fe1db"]
}, Open  ]]
}
]
*)

