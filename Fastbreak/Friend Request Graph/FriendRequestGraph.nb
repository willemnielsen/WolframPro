(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[    914178,      17557]
NotebookOptionsPosition[    901716,      17329]
NotebookOutlinePosition[    903183,      17367]
CellTagsIndexPosition[    903100,      17362]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Friend Request Graph Generator", "Title",
 CellChangeTimes->{{3.922245668737317*^9, 
  3.9222456765112133`*^9}},ExpressionUUID->"d839f5ef-b48f-4c75-ab13-\
8322c9c8bee0"],

Cell["\<\
Program that visualizes friend requests in a graph making it much easier to \
form teams. \
\>", "Subtitle",
 CellChangeTimes->{{3.922246672088529*^9, 
  3.922246786495332*^9}},ExpressionUUID->"6d7e4cd8-a7c3-45e5-802d-\
b248f784eed0"],

Cell["\<\
This was made by Willem Nielsen. Any issues please reach out to \
will@fastbreakkids.com and I will be happy to help\
\>", "Subtitle",
 CellChangeTimes->{
  3.922246798295039*^9},ExpressionUUID->"d17f35eb-2af3-4ef1-ae23-\
4bfea98621e8"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.930092211654504*^9, 
  3.930092220153968*^9}},ExpressionUUID->"97bf3ad9-7a91-4ea8-ba84-\
babf5f920413"],

Cell[CellGroupData[{

Cell["Import and Preprocessing Data", "Section",
 CellChangeTimes->{{3.922245736330765*^9, 3.922245784468317*^9}, {
  3.930096916641411*^9, 
  3.930096921411708*^9}},ExpressionUUID->"7d268a8c-8180-46b0-9a21-\
300ec9dc8cc4"],

Cell[CellGroupData[{

Cell["Process Raw Data (Experimental)", "Subsection",
 CellChangeTimes->{{3.9300798162011023`*^9, 
  3.930079827652753*^9}},ExpressionUUID->"75c919dd-276a-4d64-9dd1-\
0aa87d030a84"],

Cell[CellGroupData[{

Cell["Processing Customer Form Report", "Subsubsection",
 CellChangeTimes->{{3.930072874140196*^9, 
  3.93007289063269*^9}},ExpressionUUID->"c08e7ae3-c99b-48b8-a4a5-\
f8aca88280f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"raw", " ", "=", " ", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\</Users/erichegonzales/Projects/Wolfram/Fastbreak/Data/BSNY FA24 \
Travel Friend Requests/8th9th.csv\>\"", ",", " ", "\"\<Dataset\>\"", ",", " ", 
     RowBox[{"\"\<HeaderLines\>\"", "->", "1"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.93007289409889*^9, 3.930072934526307*^9}, 
   3.930075254269045*^9, {3.930082347554398*^9, 3.930082347834683*^9}, {
   3.930082692761637*^9, 3.930082693096046*^9}, 3.930083372059745*^9, {
   3.930103571651471*^9, 3.930103575656852*^9}, 3.933173756541749*^9, {
   3.934032246856131*^9, 3.934032250322757*^9}, {3.934286876401802*^9, 
   3.934286877865994*^9}, {3.934290545070147*^9, 3.934290545552667*^9}, {
   3.934291276816876*^9, 3.934291277169615*^9}, {3.934292335103814*^9, 
   3.934292337637051*^9}, {3.934293303354151*^9, 3.934293304631599*^9}, {
   3.937496301388577*^9, 3.937496383052413*^9}, {3.937498746761531*^9, 
   3.9374987500597963`*^9}, {3.937499339769286*^9, 3.93749934125434*^9}, {
   3.937501085347234*^9, 3.937501085540653*^9}, {3.937511706887052*^9, 
   3.937511713420946*^9}, {3.937512107104599*^9, 3.937512130975039*^9}, {
   3.937515443084729*^9, 3.937515488504752*^9}, {3.93751590498459*^9, 
   3.937515905546865*^9}, {3.937516208397893*^9, 3.937516211786708*^9}, {
   3.937516762171327*^9, 3.9375167625420923`*^9}, {3.937517048029216*^9, 
   3.937517054609165*^9}},
 CellLabel->
  "In[333]:=",ExpressionUUID->"9a30d8cc-f262-4146-bc33-25c3e09aa5dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fullnames", " ", "=", " ", 
  RowBox[{"raw", "[", 
   RowBox[{"All", ",", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", "\"\<First Name\>\"", "]"}], "<>", " ", "\"\< \>\"", "<>", 
      RowBox[{"#", "[", "\"\<Last Name\>\"", "]"}]}], "&"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.930073127927278*^9, 3.930073180529457*^9}, {
   3.930073246350331*^9, 3.930073264910274*^9}, {3.9300733106993217`*^9, 
   3.930073372193726*^9}, {3.93007341179243*^9, 3.930073432901205*^9}, {
   3.930073526305721*^9, 3.9300735387204437`*^9}, {3.930073697851219*^9, 
   3.930073740104892*^9}, {3.930073797012657*^9, 3.9300738280831327`*^9}, {
   3.930074012976406*^9, 3.930074043190864*^9}, {3.93007410669149*^9, 
   3.930074135444131*^9}, {3.93007435364636*^9, 3.9300743970263653`*^9}, {
   3.930074430423029*^9, 3.930074546115583*^9}, {3.930074619360628*^9, 
   3.93007462370119*^9}, 3.9300752609287663`*^9, 3.93007547134062*^9, {
   3.934213896294546*^9, 3.9342138977967663`*^9}, {3.934213946051035*^9, 
   3.9342139530825644`*^9}, {3.934216907475509*^9, 3.934216913403626*^9}, 
   3.937496510750285*^9},
 CellLabel->
  "In[334]:=",ExpressionUUID->"61a45b83-48df-429d-b3a0-06fb07180ab4"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {
      "Jonathan Bador", "Josh Boyman", "Zack Cohen", "Aiden Comen Weitzm", 
       "Patrick Dere", "Ben Eisenberg", "Noah Gaffen", "Aaryan Lalji", 
       "Otis Lerner", "Max Markus", "David Miller", "Bodhi Naik", 
       "Oliver OBoyle", "Pierce Ravener", "Cameron Reilly", "Matan Renas", 
       "Zachary Renza", "Ryan Shapiro", "Eli Steiger", "Jamie Voorheis", 
       "Tate Waldman", "Asher Wolfson", "Tiger Zhang"}, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`MulticolumnShape[
       4, 6, 23, 201.60000000000002`], 23, 6, {All}], "InitialType" -> 
     TypeSystem`Vector[
       TypeSystem`Atom[String], 23], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`MulticolumnShape[
       4, 6, 23, 201.60000000000002`], 23, 6, {All}], "Type" -> 
     TypeSystem`Vector[
       TypeSystem`Atom[String], 23], "Path" -> {}, "DisplayedRowCount" -> 4, 
     "DisplayedColumnCount" -> 6, "DataRowCount" -> 4, "DataColumnCount" -> 6,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation["Jonathan Bador", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                GrayLevel[0.7490196078431373], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Josh Boyman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Zack Cohen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Aiden Comen Weitzm", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Patrick Dere", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Ben Eisenberg", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}]}, {
            Item[
             Pane[
              Annotation["Noah Gaffen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                GrayLevel[0.7490196078431373], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Aaryan Lalji", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Otis Lerner", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Max Markus", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["David Miller", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Bodhi Naik", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}]}, {
            Item[
             Pane[
              Annotation["Oliver OBoyle", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                GrayLevel[0.7490196078431373], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Pierce Ravener", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Cameron Reilly", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Matan Renas", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Zachary Renza", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Ryan Shapiro", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}]}, {
            Item[
             Pane[
              Annotation["Eli Steiger", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                GrayLevel[0.7490196078431373], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Jamie Voorheis", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Tate Waldman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{21}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Asher Wolfson", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{22}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Tiger Zhang", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{23}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item["", Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1262., {60.634033203125, 66.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1262., {60.634033203125, 66.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.93749651114634*^9, 3.937498752372978*^9, {3.937499335428849*^9, 
   3.937499343061369*^9}, 3.9375010938143272`*^9, 3.937510180128944*^9, 
   3.93751171935301*^9, 3.937512119657132*^9, 3.9375154905310593`*^9, 
   3.9375159823000507`*^9, 3.937516213784265*^9, 3.9375167649187593`*^9, 
   3.937517057678837*^9},
 CellLabel->
  "Out[334]=",ExpressionUUID->"32466dba-bcc0-4ca6-bb2b-197170219675"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rawreqs", " ", "=", " ", 
  RowBox[{"raw", "[", 
   RowBox[{"All", ",", "  ", "\"\<Friend Request (max. 4)\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.934032808845388*^9, 3.934032826654106*^9}, 
   3.934209089705793*^9, 3.934213917803334*^9, 3.9374965076677647`*^9, {
   3.937496546457548*^9, 3.937496552615115*^9}, 3.937501107250381*^9, {
   3.937515492685088*^9, 3.937515504826158*^9}},
 CellLabel->
  "In[335]:=",ExpressionUUID->"cb2ef2e3-0b16-44fe-a06c-9b52c9fdbc20"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {
      "", "", "", "", 
       "Jamie Vorhees, Oliver O\[CloseCurlyQuote]Boyle and Ryan Golden, \
Cooper & Brother Renza", "", "", "", "", "", "evan henry  leif Abrahamsson", 
       "", "Jamie Voorheis, Luka Djunic, Patrick Dere, Ryan Golden", 
       "Ryan Shapiro with Pierce Ravner", "Zach Cohen Tate Waldman Eli Wahl", 
       "", "", "Cooper and Zach Renza and Pierce Ravener", "", 
       "Ryan Golden Olive O'Boyle William Dolan Patrick Dere", 
       "Asher Wolfson", "tate waldman zach cohen  cameron reilly", ""}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`MulticolumnShape[4, 6, 23, 560.], 23, 6, {
       All}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Atom[String], 23], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`MulticolumnShape[4, 6, 23, 560.], 23, 6, {
       All}], "Type" -> TypeSystem`Vector[
       TypeSystem`Atom[String], 23], "Path" -> {}, "DisplayedRowCount" -> 4, 
     "DisplayedColumnCount" -> 6, "DataRowCount" -> 4, "DataColumnCount" -> 6,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                GrayLevel[0.7490196078431373], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation[
              "Jamie Vorhees, Oliver O\[CloseCurlyQuote]Boyle and Ryan \
Golden, Cooper & Brother Renza", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}]}, {
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                GrayLevel[0.7490196078431373], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["evan henry  leif Abrahamsson", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}]}, {
            Item[
             Pane[
              Annotation[
              "Jamie Voorheis, Luka Djunic, Patrick Dere, Ryan Golden", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                GrayLevel[0.7490196078431373], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Ryan Shapiro with Pierce Ravner", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Zach Cohen Tate Waldman Eli Wahl", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Cooper and Zach Renza and Pierce Ravener", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}]}, {
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                GrayLevel[0.7490196078431373], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation[
              "Ryan Golden Olive O'Boyle William Dolan Patrick Dere", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["Asher Wolfson", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{21}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["tate waldman zach cohen  cameron reilly", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{22}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{23}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item["", Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{3410., {60.634033203125, 66.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{3410., {60.634033203125, 66.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.9374965084753733`*^9, 3.9374965542304287`*^9, 3.937498754408597*^9, 
   3.937499346679948*^9, {3.9375010989397097`*^9, 3.937501107633849*^9}, 
   3.937510182903039*^9, 3.9375117224480267`*^9, 3.937512122930747*^9, {
   3.937515493493844*^9, 3.937515505292691*^9}, 3.93751598427872*^9, 
   3.937516215983862*^9, 3.937516767477839*^9, 3.937517060371917*^9},
 CellLabel->
  "Out[335]=",ExpressionUUID->"b5b40253-215e-4eef-b2fa-d85190f36868"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"namesandreqs", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"MapThread", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "->", "#1"}], ",", 
        RowBox[{"\"\<Request\>\"", "->", "#2"}]}], "|>"}], "&"}], ",", 
     RowBox[{"Normal", "@", 
      RowBox[{"{", 
       RowBox[{"fullnames", ",", "rawreqs"}], "}"}]}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.934216454910203*^9, 3.934216455915388*^9}},
 CellTags->"ChatGeneratedCell",
 CellLabel->
  "In[336]:=",ExpressionUUID->"fefad891-f630-4393-b564-c009e4b0fdef"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|"Name" -> "Jonathan Bador", "Request" -> ""|>, <|
       "Name" -> "Josh Boyman", "Request" -> ""|>, <|
       "Name" -> "Zack Cohen", "Request" -> ""|>, <|
       "Name" -> "Aiden Comen Weitzm", "Request" -> ""|>, <|
       "Name" -> "Patrick Dere", "Request" -> 
        "Jamie Vorhees, Oliver O\[CloseCurlyQuote]Boyle and Ryan Golden, \
Cooper & Brother Renza"|>, <|"Name" -> "Ben Eisenberg", "Request" -> ""|>, <|
       "Name" -> "Noah Gaffen", "Request" -> ""|>, <|
       "Name" -> "Aaryan Lalji", "Request" -> ""|>, <|
       "Name" -> "Otis Lerner", "Request" -> ""|>, <|
       "Name" -> "Max Markus", "Request" -> ""|>, <|
       "Name" -> "David Miller", "Request" -> 
        "evan henry  leif Abrahamsson"|>, <|
       "Name" -> "Bodhi Naik", "Request" -> ""|>, <|
       "Name" -> "Oliver OBoyle", "Request" -> 
        "Jamie Voorheis, Luka Djunic, Patrick Dere, Ryan Golden"|>, <|
       "Name" -> "Pierce Ravener", "Request" -> 
        "Ryan Shapiro with Pierce Ravner"|>, <|
       "Name" -> "Cameron Reilly", "Request" -> 
        "Zach Cohen Tate Waldman Eli Wahl"|>, <|
       "Name" -> "Matan Renas", "Request" -> ""|>, <|
       "Name" -> "Zachary Renza", "Request" -> ""|>, <|
       "Name" -> "Ryan Shapiro", "Request" -> 
        "Cooper and Zach Renza and Pierce Ravener"|>, <|
       "Name" -> "Eli Steiger", "Request" -> ""|>, <|
       "Name" -> "Jamie Voorheis", "Request" -> 
        "Ryan Golden Olive O'Boyle William Dolan Patrick Dere"|>, <|
       "Name" -> "Tate Waldman", "Request" -> "Asher Wolfson"|>, <|
       "Name" -> "Asher Wolfson", "Request" -> 
        "tate waldman zach cohen  cameron reilly"|>, <|
       "Name" -> "Tiger Zhang", "Request" -> ""|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "Request"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[201.60000000000002`], 
            "Request" -> TypeSystem`PackageScope`AtomShape[560.]|>], 
          DirectedInfinity[1], 2, {All}]], 20, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Name", "Request"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 23], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "Request"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[201.60000000000002`], 
            "Request" -> TypeSystem`PackageScope`AtomShape[560.]|>], 
          DirectedInfinity[1], 2, {All}]], 20, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Name", "Request"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 23], "Path" -> {}, "DisplayedRowCount" -> 
     20, "DisplayedColumnCount" -> 2, "DataRowCount" -> 23, "DataColumnCount" -> 
     2, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Request", 
                  Style[
                  "Request", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Request"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Request"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Jonathan Bador", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Josh Boyman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Zack Cohen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Aiden Comen Weitzm", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Patrick Dere", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "Jamie Vorhees, Oliver O\[CloseCurlyQuote]Boyle and Ryan \
Golden, Cooper & Brother Renza", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Ben Eisenberg", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Noah Gaffen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Aaryan Lalji", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Otis Lerner", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Max Markus", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["David Miller", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["evan henry  leif Abrahamsson", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Bodhi Naik", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Oliver OBoyle", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "Jamie Voorheis, Luka Djunic, Patrick Dere, Ryan Golden", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Pierce Ravener", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Ryan Shapiro with Pierce Ravner", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Cameron Reilly", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Zach Cohen Tate Waldman Eli Wahl", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Matan Renas", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Zachary Renza", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Ryan Shapiro", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Cooper and Zach Renza and Pierce Ravener", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Eli Steiger", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Jamie Voorheis", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "Ryan Golden Olive O'Boyle William Dolan Patrick Dere", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 23, 1], {1, 23 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 23, 1], {1, 23 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[23, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[23, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 23, 1], {1, 23 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 23, 1], {1, 23 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{798., {300.634033203125, 306.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{798., {300.634033203125, 306.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.934214107913105*^9, 3.934216456387568*^9, 3.934216917968598*^9, 
   3.934217026061801*^9, 3.9342227351695337`*^9, 3.93428692426904*^9, {
   3.934290588019711*^9, 3.934290608940241*^9}, 3.934291285038282*^9, 
   3.9342923830220633`*^9, 3.9342933152926702`*^9, 3.9374964885570917`*^9, 
   3.937496557355102*^9, 3.937498756790724*^9, 3.937499354525261*^9, 
   3.937501111201202*^9, 3.9375101861447*^9, 3.937511725174342*^9, 
   3.937515508421028*^9, 3.9375159866670027`*^9, 3.93751621909118*^9, 
   3.937516770112109*^9, 3.937517062763529*^9},
 CellTags->"ChatGeneratedCell",
 CellLabel->
  "Out[336]=",ExpressionUUID->"0512d828-18c0-44fe-849f-e9971726b079"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Splitting Names Using LLM ", "Subsubsection",
 CellChangeTimes->{{3.930075365134631*^9, 3.930075377982736*^9}, {
   3.930079404276347*^9, 3.930079436518785*^9}, 
   3.930079862776681*^9},ExpressionUUID->"68839ae0-e7a0-486b-b482-\
7098b5b68d89"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "ex1", " ", "=", " ", 
   "\"\<Mimmo hakak Jack Clemente, Matthew Sotoloff, Max wiener Brody \
kasselman , Jagger Senzon\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "ex2", " ", "=", " ", 
   "\"\<Jacob Bender, Henry Sayagh, Tommy Zohar, Damon Pena\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ex3", " ", "=", " ", "\"\<Russel, Tommy, and Jacob\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
  "res1", " ", "=", " ", 
   "\"\<{\\\"Mimmo Hakak\\\", \\\"Jack Clemente\\\", \\\"Mathew Sotoloff\\\", \
\\\"Max Wiener\\, \\\"Brody Kasselman\\\", \\\"Jagger Senzon\\\"}\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
  "res2", " ", "=", " ", 
   "\"\<{\\\"Jacob Bender\\\", \\\"Henry Sayagh\\\", \\\"Tommy Zohar\\\", \
\\\"Damon Pena\\\"}\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
  "res3", " ", "=", " ", 
   "\"\<{\\\"Russel\\\", \\\"Tommy\\\", \\\"Jacob\\\"}\>\""}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.930082591397544*^9, 3.93008262689944*^9}, {
  3.9300826595301867`*^9, 3.930082671045903*^9}, {3.930083524631885*^9, 
  3.930083612139953*^9}, {3.934290640070047*^9, 3.934290641222642*^9}},
 CellLabel->
  "In[269]:=",ExpressionUUID->"13e26949-2d62-43e7-aa3e-43d4e85f91b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"toNamesLLM", " ", "=", " ", 
  RowBox[{"LLMExampleFunction", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<Split this string of names into separate names\>\"", ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ex1", " ", "->", " ", "res1"}], ",", " ", 
        RowBox[{"ex2", " ", "->", " ", "res2"}], ",", " ", 
        RowBox[{"ex3", " ", "->", " ", "res3"}]}], "}"}]}], "}"}], ",", " ", 
    "\"\<Expression\>\"", ",", " ", 
    RowBox[{"LLMEvaluator", "->", 
     RowBox[{"<|", 
      RowBox[{"\"\<Model\>\"", "->", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Service\>\"", "->", "\"\<OpenAI\>\""}], ",", 
         RowBox[{"\"\<Name\>\"", "->", "\"\<gpt-4o-mini\>\""}]}], "|>"}]}], 
      "|>"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.930082719973832*^9, 3.930082719977233*^9}, {
  3.934209209573173*^9, 3.934209222490549*^9}, {3.9342128972501307`*^9, 
  3.934212927476715*^9}, {3.9342132110526876`*^9, 3.934213229045192*^9}, {
  3.934221609686451*^9, 3.934221613150601*^9}},
 CellLabel->
  "In[275]:=",ExpressionUUID->"9c27b1aa-b8c5-4cbc-9811-8b46a763c131"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["LLMFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], "", 
            GridBox[{{
               RowBox[{
                 TagBox["\"Content: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    "\"Split this string of names into separate \
names\\n\\n\"", 
                    "\"Input: Mimmo hakak Jack Clemente, Matthew Sotoloff, \
Max wiener Brody kasselman , Jagger Senzon\\nOutput: {\\\"Mimmo Hakak\\\", \\\
\"Jack Clemente\\\", \\\"Mathew Sotoloff\\\", \\\"Max Wiener\\\\, \\\"Brody \
Kasselman\\\", \\\"Jagger Senzon\\\"}\\n\\nInput: Jacob Bender, Henry Sayagh, \
Tommy Zohar, Damon Pena\\nOutput: {\\\"Jacob Bender\\\", \\\"Henry \
Sayagh\\\", \\\"Tommy Zohar\\\", \\\"Damon Pena\\\"}\\n\\nInput: Russel, \
Tommy, and Jacob\\nOutput: {\\\"Russel\\\", \\\"Tommy\\\", \\\"Jacob\\\"}\"", 
                    "\"\\n\\nInput: \"", 
                    
                    TemplateBox[{"1"}, "TemplateSlot", 
                    DisplayFunction -> (
                    FrameBox[#, Background -> RGBColor[0.945, 0.992, 1.], 
                    BaselinePosition -> Baseline, 
                    BaseStyle -> {ShowStringCharacters -> True}, 
                    FrameMargins -> {{2, 2}, {0, 0}}, FrameStyle -> 
                    RGBColor[0.698, 0.898, 0.9255], RoundingRadius -> 3]& ), 
                    Tooltip -> Automatic], "\"\\nOutput:\""}, "RowDefault"], 
                   Deploy, DefaultBaseStyle -> "Deploy"], "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    StyleBox[
                    "1", ShowStringCharacters -> True, StripOnInput -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], "", 
            GridBox[{{
               RowBox[{
                 TagBox["\"Content: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   
                   TemplateBox[{
                    "\"Split this string of names into separate \
names\\n\\n\"", 
                    "\"Input: Mimmo hakak Jack Clemente, Matthew Sotoloff, \
Max wiener Brody kasselman , Jagger Senzon\\nOutput: {\\\"Mimmo Hakak\\\", \\\
\"Jack Clemente\\\", \\\"Mathew Sotoloff\\\", \\\"Max Wiener\\\\, \\\"Brody \
Kasselman\\\", \\\"Jagger Senzon\\\"}\\n\\nInput: Jacob Bender, Henry Sayagh, \
Tommy Zohar, Damon Pena\\nOutput: {\\\"Jacob Bender\\\", \\\"Henry \
Sayagh\\\", \\\"Tommy Zohar\\\", \\\"Damon Pena\\\"}\\n\\nInput: Russel, \
Tommy, and Jacob\\nOutput: {\\\"Russel\\\", \\\"Tommy\\\", \\\"Jacob\\\"}\"", 
                    "\"\\n\\nInput: \"", 
                    
                    TemplateBox[{"1"}, "TemplateSlot", 
                    DisplayFunction -> (
                    FrameBox[#, Background -> RGBColor[0.945, 0.992, 1.], 
                    BaselinePosition -> Baseline, 
                    BaseStyle -> {ShowStringCharacters -> True}, 
                    FrameMargins -> {{2, 2}, {0, 0}}, FrameStyle -> 
                    RGBColor[0.698, 0.898, 0.9255], RoundingRadius -> 3]& ), 
                    Tooltip -> Automatic], "\"\\nOutput:\""}, "RowDefault"], 
                   Deploy, DefaultBaseStyle -> "Deploy"], "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox["\"Parameters: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    StyleBox[
                    "1", ShowStringCharacters -> True, StripOnInput -> 
                    False]}, "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"CombinerFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["StringJoin", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"InsertionFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["TextString", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  LLMFunction[
   TemplateObject[{
    "Split this string of names into separate names\n\n", 
     "Input: Mimmo hakak Jack Clemente, Matthew Sotoloff, Max wiener Brody \
kasselman , Jagger Senzon\nOutput: {\"Mimmo Hakak\", \"Jack Clemente\", \
\"Mathew Sotoloff\", \"Max Wiener\\, \"Brody Kasselman\", \"Jagger Senzon\"}\n\
\nInput: Jacob Bender, Henry Sayagh, Tommy Zohar, Damon Pena\nOutput: \
{\"Jacob Bender\", \"Henry Sayagh\", \"Tommy Zohar\", \"Damon Pena\"}\n\n\
Input: Russel, Tommy, and Jacob\nOutput: {\"Russel\", \"Tommy\", \"Jacob\"}", 
     "\n\nInput: ", 
     TemplateSlot[1], "\nOutput:"}, {{}, CombinerFunction -> StringJoin, 
     InsertionFunction -> TextString}], "Expression", {
   LLMEvaluator -> <|
     "Model" -> <|"Service" -> "OpenAI", "Name" -> "gpt-4o-mini"|>|>}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.930096047247147*^9, 3.93010373110511*^9, 3.930315613029954*^9, 
   3.934032363351077*^9, 3.934032754929623*^9, 3.9340327897699823`*^9, 
   3.934209052895964*^9, {3.934220661280489*^9, 3.934220668552359*^9}, {
   3.934221613600382*^9, 3.934221637920088*^9}, 3.934222709618487*^9, 
   3.934287160223393*^9, 3.934290649873061*^9, 3.934293321858008*^9, 
   3.937496607655965*^9, 3.9374987707854548`*^9, 3.9374988138540154`*^9, 
   3.9374993637916803`*^9, 3.937501117867755*^9, 3.9375103743763514`*^9, 
   3.937511734140232*^9, 3.937515514427658*^9},
 CellLabel->
  "Out[275]=",ExpressionUUID->"b52e5c7a-95c0-48af-a60a-7ef8b204981f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"toNames", "[", "namestring_", "]"}], ":=", " ", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"namestring", " ", "==", " ", "\"\<\>\""}], ",", " ", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"toNamesLLM", "[", "namestring", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.930077493837385*^9, 3.930077526641148*^9}, {
  3.930077758793964*^9, 3.9300777799091673`*^9}, {3.930079057433749*^9, 
  3.930079071363369*^9}, {3.930079103825273*^9, 3.930079108189798*^9}},
 CellLabel->
  "In[276]:=",ExpressionUUID->"7b0b3448-f478-4135-ab76-6ab3dbad3eb8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"out1", " ", "=", " ", 
  RowBox[{"toNames", "[", 
   RowBox[{"rawreqs", "[", "3", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.930076451762697*^9, 3.930076469033926*^9}, {
  3.93007653771455*^9, 3.930076548175259*^9}, {3.930082758104443*^9, 
  3.930082758258015*^9}, {3.934032401168223*^9, 3.934032401403137*^9}, {
  3.934032873897271*^9, 3.9340328749317207`*^9}},
 CellLabel->
  "In[277]:=",ExpressionUUID->"427a45d8-bd4e-464f-b162-9d02c39b195e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"James Brogadir\"\>", ",", "\<\"Jesse Edelson\"\>", 
   ",", "\<\"Noah Edelman\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.930103742134804*^9, {3.934032383861625*^9, 3.934032405869223*^9}, 
   3.934032880298139*^9, 3.93422175688762*^9, 3.934287166138788*^9, 
   3.937496619721612*^9, 3.937498779419261*^9, 3.937498850034677*^9, 
   3.9374993782368717`*^9, 3.937501122327083*^9, 3.937510380535079*^9, 
   3.937515518617613*^9},
 CellLabel->
  "Out[277]=",ExpressionUUID->"3864d8e6-ee2e-41aa-9733-dd7fffa599b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"out2", " ", "=", "  ", 
  RowBox[{"toNamesLLM", "[", 
   RowBox[{"rawreqs", "[", "7", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.930076599862007*^9, 3.93007660816365*^9}, 
   3.930082800156987*^9, {3.934032427793174*^9, 3.934032428055944*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"877ef65e-d595-4000-8905-9d959f374e80"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"David Spodek\"\>", ",", "\<\"Amit Brachot\"\>", 
   ",", "\<\"Eiden Stern\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.930103746972272*^9, {3.934032424113078*^9, 3.934032430088809*^9}, 
   3.934032904485311*^9, 3.934221762719831*^9, 3.9342871692380743`*^9, 
   3.937496636781624*^9, 3.9374987924374523`*^9, 3.9374988850656433`*^9, 
   3.9374993810246773`*^9},
 CellLabel->
  "Out[186]=",ExpressionUUID->"00aa9919-263d-4998-b425-34112b7de49b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"out3", " ", "=", "  ", 
  RowBox[{"toNames", "[", 
   RowBox[{"rawreqs", "[", "19", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.930076630440666*^9, 3.930076636851248*^9}, {
  3.930076714502923*^9, 3.930076714681218*^9}},
 CellLabel->
  "In[188]:=",ExpressionUUID->"b0dee14e-bedd-45e5-b9af-317c349c089b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Charlie Falk\"\>", ",", "\<\"William Gribetz\"\>", 
   ",", "\<\"Coach Mamadou\"\>", ",", "\<\"request\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.930103754306201*^9, 3.9340329240643263`*^9, 
  3.934221772338051*^9, 3.934287182003715*^9, 3.9374966419181423`*^9, 
  3.9374993904266787`*^9},
 CellLabel->
  "Out[188]=",ExpressionUUID->"55a5e0b1-9f21-4d23-b247-8fb7eff8af3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"requestsLLM", " ", "=", " ", 
  RowBox[{"toNames", "/@", " ", "rawreqs"}]}]], "Input",
 CellChangeTimes->{{3.930076736823865*^9, 3.930076830842794*^9}, {
  3.930079296481406*^9, 3.930079298144351*^9}},
 CellLabel->
  "In[337]:=",ExpressionUUID->"9f2a6540-19df-4994-9736-9ef60a7770e4"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{}, {}, {}, {}, {
       "Jamie Vorhees", "Oliver O\[CloseCurlyQuote]Boyle", "Ryan Golden", 
        "Cooper & Brother Renza"}, {}, {}, {}, {}, {}, {
       "Evan Henry", "Leif Abrahamsson"}, {}, {
       "Jamie Voorheis", "Luka Djunic", "Patrick Dere", "Ryan Golden"}, {
       "Ryan Shapiro", "Pierce Ravner"}, {
       "Zach Cohen", "Tate Waldman", "Eli Wahl"}, {}, {}, {
       "Cooper", "Zach Renza", "Pierce Ravener"}, {}, {
       "Ryan Golden", "Olive O'Boyle", "William Dolan", "Patrick Dere"}, {
       "Asher Wolfson"}, {
       "Tate Waldman", "Zach Cohen", "Cameron Reilly"}, {}}, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 23], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 23], 
     "Path" -> {}, "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 1, 
     "DataRowCount" -> 23, "DataColumnCount" -> 1, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Jamie Vorhees", "Oliver O\[CloseCurlyQuote]Boyle", 
                    "Ryan Golden", "Cooper & Brother Renza"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Jamie Vorhees", "Oliver O\[CloseCurlyQuote]Boyle", 
                    "Ryan Golden", "Cooper & Brother Renza"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Evan Henry", "Leif Abrahamsson"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Evan Henry", "Leif Abrahamsson"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{11}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Jamie Voorheis", "Luka Djunic", "Patrick Dere", 
                    "Ryan Golden"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Jamie Voorheis", "Luka Djunic", "Patrick Dere", 
                    "Ryan Golden"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{13}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Ryan Shapiro", "Pierce Ravner"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Ryan Shapiro", "Pierce Ravner"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{14}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Zach Cohen", "Tate Waldman", "Eli Wahl"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Zach Cohen", "Tate Waldman", "Eli Wahl"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{15}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Cooper", "Zach Renza", "Pierce Ravener"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Cooper", "Zach Renza", "Pierce Ravener"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{18}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Ryan Golden", "Olive O'Boyle", "William Dolan", 
                    "Patrick Dere"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Ryan Golden", "Olive O'Boyle", "William Dolan", 
                    "Patrick Dere"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{20}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 23, 1], {1, 23 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 23, 1], {1, 23 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[23, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[23, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 23, 1], {1, 23 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 23, 1], {1, 23 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{439., {287.134033203125, 292.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{439., {287.134033203125, 292.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.930103776490081*^9, 3.934033043306999*^9, 
  3.934221817833567*^9, 3.9342227157082148`*^9, 3.934222772316211*^9, 
  3.934287250034792*^9, 3.934290687228577*^9, 3.934291352044111*^9, 
  3.934292466608493*^9, 3.93429336654943*^9, 3.937496712569275*^9, 
  3.9374989865653143`*^9, 3.9374994442777042`*^9, 3.9375104243564*^9, 
  3.937511748433022*^9, 3.937515555433544*^9, 3.9375160155568647`*^9, 
  3.93751625903827*^9, 3.9375168000115757`*^9, 3.937517078180386*^9},
 CellLabel->
  "Out[337]=",ExpressionUUID->"d9510b5e-1d32-47a0-8e9e-0ec31befd45e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"friendRequestData", " ", "=", " ", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Normal", "@", "fullnames"}], ",", " ", 
      RowBox[{"Normal", "@", "requestsLLM"}]}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.930080080743803*^9, 3.930080099619508*^9}, {
   3.930080919368013*^9, 3.930080922268737*^9}, {3.934287281725679*^9, 
   3.934287310663959*^9}, {3.9342876255451727`*^9, 3.93428763003467*^9}, {
   3.934292477217781*^9, 3.934292479453439*^9}, {3.937497175515359*^9, 
   3.937497202073707*^9}, {3.93749732639506*^9, 3.937497329651277*^9}, {
   3.937497476194798*^9, 3.9374974830054417`*^9}, {3.937516300271036*^9, 
   3.937516304331533*^9}, 3.9375169299346333`*^9},
 CellLabel->
  "In[338]:=",ExpressionUUID->"05f673b1-56f2-4280-b775-defbfbbeda37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"splitds", " ", "=", " ", 
  RowBox[{"toDataset", "[", "friendRequestData", "]"}]}]], "Input",
 CellChangeTimes->{{3.930080080743803*^9, 3.930080099619508*^9}, {
  3.930080919368013*^9, 3.930080922268737*^9}, {3.934287281725679*^9, 
  3.934287310663959*^9}, {3.9342876255451727`*^9, 3.93428763003467*^9}, {
  3.934292477217781*^9, 3.934292479453439*^9}, {3.937497175515359*^9, 
  3.937497202073707*^9}, {3.93749732639506*^9, 3.937497329651277*^9}, {
  3.937497476194798*^9, 3.9374974830054417`*^9}, {3.9374975293973417`*^9, 
  3.937497600839155*^9}},
 CellLabel->
  "In[339]:=",ExpressionUUID->"3764d586-0741-46a5-9cc5-e059011f9bd0"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|"Name" -> "Jonathan Bador", "Request" -> {}|>, <|
       "Name" -> "Josh Boyman", "Request" -> {}|>, <|
       "Name" -> "Zack Cohen", "Request" -> {}|>, <|
       "Name" -> "Aiden Comen Weitzm", "Request" -> {}|>, <|
       "Name" -> "Patrick Dere", 
        "Request" -> {
         "Jamie Vorhees", "Oliver O\[CloseCurlyQuote]Boyle", "Ryan Golden", 
          "Cooper & Brother Renza"}|>, <|
       "Name" -> "Ben Eisenberg", "Request" -> {}|>, <|
       "Name" -> "Noah Gaffen", "Request" -> {}|>, <|
       "Name" -> "Aaryan Lalji", "Request" -> {}|>, <|
       "Name" -> "Otis Lerner", "Request" -> {}|>, <|
       "Name" -> "Max Markus", "Request" -> {}|>, <|
       "Name" -> "David Miller", 
        "Request" -> {"Evan Henry", "Leif Abrahamsson"}|>, <|
       "Name" -> "Bodhi Naik", "Request" -> {}|>, <|
       "Name" -> "Oliver OBoyle", 
        "Request" -> {
         "Jamie Voorheis", "Luka Djunic", "Patrick Dere", "Ryan Golden"}|>, <|
       "Name" -> "Pierce Ravener", 
        "Request" -> {"Ryan Shapiro", "Pierce Ravner"}|>, <|
       "Name" -> "Cameron Reilly", 
        "Request" -> {"Zach Cohen", "Tate Waldman", "Eli Wahl"}|>, <|
       "Name" -> "Matan Renas", "Request" -> {}|>, <|
       "Name" -> "Zachary Renza", "Request" -> {}|>, <|
       "Name" -> "Ryan Shapiro", 
        "Request" -> {"Cooper", "Zach Renza", "Pierce Ravener"}|>, <|
       "Name" -> "Eli Steiger", "Request" -> {}|>, <|
       "Name" -> "Jamie Voorheis", 
        "Request" -> {
         "Ryan Golden", "Olive O'Boyle", "William Dolan", "Patrick Dere"}|>, <|
       "Name" -> "Tate Waldman", "Request" -> {"Asher Wolfson"}|>, <|
       "Name" -> "Asher Wolfson", 
        "Request" -> {"Tate Waldman", "Zach Cohen", "Cameron Reilly"}|>, <|
       "Name" -> "Tiger Zhang", "Request" -> {}|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "Request"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[201.60000000000002`], 
            "Request" -> TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 2, {All}]], 20, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Name", "Request"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Vector[
          TypeSystem`Atom[String], TypeSystem`AnyLength]}], 23], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "Request"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[201.60000000000002`], 
            "Request" -> TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 2, {All}]], 20, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Name", "Request"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Vector[
          TypeSystem`Atom[String], TypeSystem`AnyLength]}], 23], "Path" -> {},
      "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     23, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Request", 
                  Style[
                  "Request", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Request"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Request"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Jonathan Bador", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Josh Boyman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Zack Cohen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Aiden Comen Weitzm", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Patrick Dere", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Jamie Vorhees", "Oliver O\[CloseCurlyQuote]Boyle", 
                    "Ryan Golden", "Cooper & Brother Renza"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Jamie Vorhees", "Oliver O\[CloseCurlyQuote]Boyle", 
                    "Ryan Golden", "Cooper & Brother Renza"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Ben Eisenberg", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Noah Gaffen", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Aaryan Lalji", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Otis Lerner", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Max Markus", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["David Miller", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Evan Henry", "Leif Abrahamsson"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Evan Henry", "Leif Abrahamsson"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{11, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Bodhi Naik", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Oliver OBoyle", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Jamie Voorheis", "Luka Djunic", "Patrick Dere", 
                    "Ryan Golden"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Jamie Voorheis", "Luka Djunic", "Patrick Dere", 
                    "Ryan Golden"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{13, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Pierce Ravener", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Ryan Shapiro", "Pierce Ravner"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Ryan Shapiro", "Pierce Ravner"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{14, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Cameron Reilly", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Zach Cohen", "Tate Waldman", "Eli Wahl"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Zach Cohen", "Tate Waldman", "Eli Wahl"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{15, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Matan Renas", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Zachary Renza", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Ryan Shapiro", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Cooper", "Zach Renza", "Pierce Ravener"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Cooper", "Zach Renza", "Pierce Ravener"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{18, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Eli Steiger", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Jamie Voorheis", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{201.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Ryan Golden", "Olive O'Boyle", "William Dolan", 
                    "Patrick Dere"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Ryan Golden", "Olive O'Boyle", "William Dolan", 
                    "Patrick Dere"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{20, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[True, 23, 1], {1, 23 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-20) 
                    If[False, 23, 1], {1, 23 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[23, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[23, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 23, 1], {1, 23 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 23, 1], {1, 23 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{649., {300.634033203125, 306.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{649., {300.634033203125, 306.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.934287630932508*^9, {3.934290688900444*^9, 3.9342907080098*^9}, 
   3.934291428873295*^9, 3.934292479904949*^9, {3.93429354061732*^9, 
   3.934293551471609*^9}, {3.937496783782089*^9, 3.937496790516244*^9}, 
   3.9374968984812202`*^9, 3.937497202638686*^9, 3.937497287568738*^9, 
   3.93749732996283*^9, {3.93749752619346*^9, 3.9374976012991343`*^9}, 
   3.9374990044630823`*^9, 3.9375005892374907`*^9, 3.937511620825685*^9, 
   3.937512034284808*^9, 3.937515801425681*^9, 3.937516064772048*^9, 
   3.9375163108536253`*^9, 3.9375169282106857`*^9, 3.9375171529837523`*^9},
 CellLabel->
  "Out[339]=",ExpressionUUID->"c446847c-0e86-4791-8884-e80660d04b6c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["How to import", "Subsection",
 CellChangeTimes->{{3.92224616125556*^9, 
  3.922246163055416*^9}},ExpressionUUID->"ab47d9c2-dc9c-459d-81fa-\
ed75c4c10c59"],

Cell["\<\
Your data must be in the form of a CSV file with two and only two columns, \
The names should be in the left column and the requests in the right. The \
requests can be delimited by commas or newlines. Any names that are \
misspelled will not register as the same person. I recommend you make the \
graph first and then correct the spelling in the view and edit your data \
section\
\>", "Text",
 CellChangeTimes->{{3.92224577172264*^9, 3.92224594071126*^9}, {
  3.92224605814599*^9, 
  3.922246115802367*^9}},ExpressionUUID->"9fbcc17e-05fd-4031-8d12-\
f43c76e46243"],

Cell[BoxData[
 RowBox[{
  RowBox[{"splitstring", "[", "req_String", "]"}], ":=", " ", 
  RowBox[{"StringTrim", "[", 
   RowBox[{"StringSplit", "[", 
    RowBox[{"req", ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<,\>\"", ",", " ", "\"\<\\n\>\""}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.930087521908173*^9, 3.930087531265346*^9}, {
  3.930087564658661*^9, 3.930087599578809*^9}, {3.930095249053219*^9, 
  3.9300952497032137`*^9}, {3.930098927992498*^9, 3.930098929965436*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"21a53cb8-1ad2-41ef-b0e6-27230914966f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"toDataset", "[", 
   RowBox[{"table_", ",", 
    RowBox[{"headerlines_", ":", "0"}], ",", " ", 
    RowBox[{"headers_", ":", 
     RowBox[{"{", 
      RowBox[{"\"\<Name\>\"", ",", " ", "\"\<Request\>\""}], "}"}]}]}], "]"}],
   ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"keys", ",", " ", "assList"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"keys", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"headerlines", ">", "0"}], " ", ",", " ", 
        RowBox[{"table", "[", 
         RowBox[{"[", "headerlines", "]"}], "]"}], ",", " ", "headers"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"assList", " ", "=", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"AssociationThread", "[", 
         RowBox[{"keys", "->", "#"}], "]"}], "&"}], "/@", " ", 
       RowBox[{"List", "@", 
        RowBox[{"Delete", "[", 
         RowBox[{"table", ",", "headerlines"}], "]"}]}]}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Dataset", "[", "assList", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.930089974307756*^9, 3.930090194829623*^9}, {
  3.930090848752819*^9, 3.9300910305232077`*^9}, {3.930091082468507*^9, 
  3.9300911900458713`*^9}, {3.930091249018828*^9, 3.930091268033173*^9}, {
  3.930091574070711*^9, 3.930091576413618*^9}, {3.93009190316964*^9, 
  3.930091910051757*^9}, {3.930091941419712*^9, 3.93009197496604*^9}, {
  3.930092051942492*^9, 3.93009206841287*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"2ec110ef-753b-4e70-9dc3-179d91397944"],

Cell[BoxData[
 RowBox[{
  RowBox[{"toTable", "[", "ds_", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "keys", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"keys", " ", "=", " ", 
      RowBox[{"Normal", "@", 
       RowBox[{"ds", "[", 
        RowBox[{"1", ",", " ", "Keys"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"Normal", "@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"ds", "[", 
           RowBox[{"All", ",", "  ", "#"}], "]"}], "&"}], "/@", " ", "keys"}],
         ")"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.930094513293627*^9, 3.930094824008892*^9}, {
  3.930095070800275*^9, 3.9300950708704443`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"38c8f986-2118-4a36-9fcc-54e8ed7d07c3"],

Cell[CellGroupData[{

Cell[BoxData[Cell[BoxData[
  DynamicModuleBox[{$CellContext`attached$$, $CellContext`cell$$}, 
   TagBox[Cell[BoxData[
     RowBox[{
      RowBox[{"toCSVString", "[", "dataset_", "]"}], ":=", 
      RowBox[{"ExportString", "[", 
       RowBox[{"dataset", ",", "\"\<CSV\>\""}], "]"}]}]], "ChatCode", "Input",
     
     Background->GrayLevel[1],ExpressionUUID->
     "70b0d8a1-7b21-4f7f-8c06-92d61cf9dc6c"],
    EventHandlerTag[{"MouseEntered" :> If[
        Not[
         TrueQ[$CloudEvaluation]], Quiet[
          Needs["Wolfram`Chatbook`" -> None]]; 
        Symbol["Wolfram`Chatbook`ChatbookAction"]["AttachCodeButtons", 
          Dynamic[$CellContext`attached$$], $CellContext`cell$$, 
          "toCSVString[dataset_] := ExportString[dataset, \"CSV\"]", 
          "Wolfram"]], Method -> "Preemptive", PassEventsDown -> Automatic, 
      PassEventsUp -> True}]],
   TaggingRules -> <|
    "CellToStringType" -> "InlineInteractiveCodeCell", "CodeLanguage" -> 
     "Wolfram"|>,
   DynamicModuleValues:>{},
   Initialization:>{$CellContext`cell$$ = (FinishDynamic[]; EvaluationCell[])},
   UnsavedVariables:>{$CellContext`attached$$, $CellContext`cell$$}]],
  ExpressionUUID->"744b9ea1-43b7-496d-94ff-d98c0a7af298"]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"454f2d21-dad9-4b5f-9941-0328a1f58dc8"],

Cell[BoxData[
 InterpretationBox[Cell[BoxData[
   DynamicModuleBox[{$CellContext`attached$$, $CellContext`cell$$}, 
    TagBox[
     InterpretationBox[Cell[BoxData[""], "ChatCode", "Input",
       Background->GrayLevel[1],ExpressionUUID->
       "0af671a4-dd47-4dba-8159-2da520a045a5"],
      ExpressionCell[Null, "ChatCode", "Input", Background -> GrayLevel[1]]],
     EventHandlerTag[{"MouseEntered" :> If[
         Not[
          TrueQ[$CloudEvaluation]], Quiet[
           Needs["Wolfram`Chatbook`" -> None]]; 
         Symbol["Wolfram`Chatbook`ChatbookAction"]["AttachCodeButtons", 
           Dynamic[$CellContext`attached$$], $CellContext`cell$$, 
           "toCSVString[dataset_] := ExportString[dataset, \"CSV\"]", 
           "Wolfram"]], Method -> "Preemptive", PassEventsDown -> Automatic, 
       PassEventsUp -> True}]],
    TaggingRules -> <|
     "CellToStringType" -> "InlineInteractiveCodeCell", "CodeLanguage" -> 
      "Wolfram"|>,
    DynamicModuleValues:>{},
    Initialization:>{$CellContext`cell$$ = (FinishDynamic[]; 
       EvaluationCell[])},
    UnsavedVariables:>{$CellContext`attached$$, $CellContext`cell$$}]],
   ExpressionUUID->"666ac6e9-1d50-48f3-876b-7b073198a319"],
  ExpressionCell[
   DynamicModule[{$CellContext`attached, $CellContext`cell}, 
    EventHandler[
     ExpressionCell[Null, "ChatCode", "Input", Background -> GrayLevel[1]], 
     "MouseEntered" :> If[
       Not[
        TrueQ[$CloudEvaluation]], Quiet[
         Needs["Wolfram`Chatbook`" -> None]]; 
       Symbol["Wolfram`Chatbook`ChatbookAction"]["AttachCodeButtons", 
         Dynamic[$CellContext`attached], $CellContext`cell, 
         "toCSVString[dataset_] := ExportString[dataset, \"CSV\"]", 
         "Wolfram"]], Method -> "Preemptive", PassEventsDown -> Automatic, 
     PassEventsUp -> True], 
    Initialization :> {$CellContext`cell = (FinishDynamic[]; 
       EvaluationCell[])}, DynamicModuleValues :> {}, 
    TaggingRules -> <|
     "CellToStringType" -> "InlineInteractiveCodeCell", "CodeLanguage" -> 
      "Wolfram"|>, 
    UnsavedVariables :> {$CellContext`attached, $CellContext`cell}]]]], \
"Output",
 CellChangeTimes->{3.937497376871529*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"f53031d2-779e-4d80-a16d-7e49a6451750"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"splitds", " ", "=", " ", 
  RowBox[{"Import", "[", 
   RowBox[{
   "\"\</Users/erichegonzales/Projects/Wolfram/Fastbreak/Friend Request \
Graph/Output/FA24_4v4Requests_Mon_LLMclean.csv\>\"", ",", " ", 
    "\"\<Dataset\>\"", ",", " ", 
    RowBox[{"\"\<HeaderLines\>\"", "->", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.922239763651211*^9, 3.922239795501932*^9}, {
   3.922239840084663*^9, 3.922239840086875*^9}, {3.922239997528731*^9, 
   3.922240001631764*^9}, {3.922243436425635*^9, 3.922243441990087*^9}, {
   3.922246178583409*^9, 3.922246182733844*^9}, 3.922407294524422*^9, 
   3.9224073274267263`*^9, {3.922408908760186*^9, 3.922408909029108*^9}, {
   3.922413873888096*^9, 3.9224138765257998`*^9}, {3.922423075795149*^9, 
   3.9224230762984533`*^9}, {3.930063139758389*^9, 3.9300631578256083`*^9}, {
   3.930063331184891*^9, 3.9300633377917633`*^9}, {3.930094107222251*^9, 
   3.930094107567239*^9}, {3.930094194590502*^9, 3.930094257570977*^9}, {
   3.930094893178625*^9, 3.930094931290016*^9}, {3.93009509845488*^9, 
   3.930095104525111*^9}, {3.930095204163741*^9, 3.930095205213859*^9}, {
   3.930095993445489*^9, 3.930095995693583*^9}, {3.930100214813945*^9, 
   3.930100242982938*^9}, {3.930103865287699*^9, 3.930103865629339*^9}, {
   3.930141622041279*^9, 3.930141622307023*^9}, {3.930141763276433*^9, 
   3.930141764984118*^9}, {3.930141886288724*^9, 3.930141887707916*^9}, {
   3.9342931207395563`*^9, 3.934293131469473*^9}, {3.9342931998566713`*^9, 
   3.934293220638503*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"f2dbea04-dc82-4fdc-b88e-af0277e6b97f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Name" -> "Chase Basroon", "Request" -> "Beckett Schein"|>, <|
       "Name" -> "Jacob Bender", "Request" -> 
        "Tommy Zohar Henry Sayagh Russell Koicim"|>, <|
       "Name" -> "Spencer Berk", "Request" -> "Jesse Edelson"|>, <|
       "Name" -> "Jacob Biselman", "Request" -> 
        "Nate Kassel Teddy Kasell Leo Kaufthal Jack Spodek Howie Dushey"|>, <|
       "Name" -> "Mason Brown", "Request" -> ""|>, <|
       "Name" -> "Meijer Buterman", "Request" -> "COACH CURTIS TEAM"|>, <|
       "Name" -> "Alessandro D'angelo", "Request" -> "alberto mion"|>, <|
       "Name" -> "Howie Dushey", "Request" -> "will update"|>, <|
       "Name" -> "Jesse Edelson", "Request" -> "Spencer Berk Aiden Sofer"|>, <|
       "Name" -> "Gabriel Fruchter", "Request" -> ""|>, <|
       "Name" -> "Benjamin Ganfer", "Request" -> ""|>, <|
       "Name" -> "Oliver Gordon", "Request" -> "Grant Leaf"|>, <|
       "Name" -> "Bennett Grandis", "Request" -> "Jagger Greene"|>, <|
       "Name" -> "Jagger Greene", "Request" -> ""|>, <|
       "Name" -> "Jesse Guberman", "Request" -> 
        "Langdon Senzon Chase Keating Jesse Wasserman"|>, <|
       "Name" -> "Asher Harary", "Request" -> "benjamin ganfer"|>, <|
       "Name" -> "Leo Kaufthal", "Request" -> ""|>, <|
       "Name" -> "Chase Keating", "Request" -> 
        "Langdon Senzon  Jesse Wasserman  Jesse Guberman  Dylan Merson"|>, <|
       "Name" -> "Russell Koicim", "Request" -> 
        "Jacob Bender, Henry Sayagh, Tommy Zohar, Damon Pena"|>, <|
       "Name" -> "Grant Leaf", "Request" -> "Oliver Gordon"|>, <|
       "Name" -> "Evan Lewis", "Request" -> ""|>, <|
       "Name" -> "Luke Lucas", "Request" -> ""|>, <|
       "Name" -> "Jordan Mann", "Request" -> 
        "Ben Ganfer Ray Sardar Asher Harary Ben Zarabi"|>, <|
       "Name" -> "Dylan Merson", "Request" -> 
        "Chase Keating Beckett Schein Jesse Wasserman"|>, <|
       "Name" -> "Sam Meyer", "Request" -> 
        "Meijer Buterman Joshua Fulton Alex Moss Ben Moss"|>, <|
       "Name" -> "Alberto Mion", "Request" -> ""|>, <|
       "Name" -> "Chase Moolani", "Request" -> 
        "Beckett Schein Chase Basroon"|>, <|
       "Name" -> "William Morrison", "Request" -> ""|>, <|
       "Name" -> "James Morrison", "Request" -> ""|>, <|
       "Name" -> "Benjamin Moss", "Request" -> 
        "Alex Moss (twin - they need to be together) Meijer Buterman"|>, <|
       "Name" -> "Alexander Moss", "Request" -> 
        "Ben Moss (Twin - need to be on same team) Meijer Buterman"|>, <|
       "Name" -> "Freddy Packin", "Request" -> ""|>, <|
       "Name" -> "Luke Pantzer", "Request" -> 
        "Max Tish Luka Hymowitz Dylan Rimsky Minjun Park"|>, <|
       "Name" -> "Damon Pena", "Request" -> "Jacob Bender Tommy  Henry"|>, <|
       "Name" -> "Kaeden Rametra", "Request" -> ""|>, <|
       "Name" -> "Henry Rook", "Request" -> ""|>, <|
       "Name" -> "Max Ross", "Request" -> ""|>, <|
       "Name" -> "Raymond Sardar", "Request" -> 
        "jordan mann  & ramaz kids"|>, <|
       "Name" -> "Henry Sayagh", "Request" -> "Russel, Tommy, and Jacob"|>, <|
       "Name" -> "Hunter Sayegh", "Request" -> 
        "Jacob Bender, Tommy Zohar, and Russell"|>, <|
       "Name" -> "Beckett Schein", "Request" -> "Chase Basroon"|>, <|
       "Name" -> "Langdon Senzon", "Request" -> 
        "Dylan Merson Chase Keating"|>, <|
       "Name" -> "BEN SHAY", "Request" -> ""|>, <|
       "Name" -> "Spencer Shmuely", "Request" -> ""|>, <|
       "Name" -> "Aidan Sofer", "Request" -> 
        "Jesse Edelson Alex Moss Ben Moss Josh Sultan"|>, <|
       "Name" -> "Jack Spodek", "Request" -> "jacob  leo k"|>, <|
       "Name" -> "Joshua Sultan", "Request" -> ""|>, <|
       "Name" -> "Charles Wang", "Request" -> ""|>, <|
       "Name" -> "Jesse Wasserman", "Request" -> ""|>, <|
       "Name" -> "Jordan Williams", "Request" -> ""|>, <|
       "Name" -> "Benjamin Zarabi", "Request" -> ""|>, <|
       "Name" -> "Tommy Zohar", "Request" -> ""|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "Request"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[212.8], "Request" -> 
            TypeSystem`PackageScope`AtomShape[560.]|>], 
          DirectedInfinity[1], 2, {All}]], 20, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Name", "Request"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 52], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "Request"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[212.8], "Request" -> 
            TypeSystem`PackageScope`AtomShape[560.]|>], 
          DirectedInfinity[1], 2, {All}]], 20, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Name", "Request"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 52], "Path" -> {}, "DisplayedRowCount" -> 
     20, "DisplayedColumnCount" -> 2, "DataRowCount" -> 52, "DataColumnCount" -> 
     2, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Request", 
                  Style[
                  "Request", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Request"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Request"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Chase Basroon", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Beckett Schein", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Jacob Bender", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Tommy Zohar Henry Sayagh Russell Koicim", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Spencer Berk", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Jesse Edelson", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Jacob Biselman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "Nate Kassel Teddy Kasell Leo Kaufthal Jack Spodek Howie \
Dushey", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Mason Brown", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Meijer Buterman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["COACH CURTIS TEAM", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Alessandro D'angelo", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["alberto mion", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Howie Dushey", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["will update", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Jesse Edelson", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Spencer Berk Aiden Sofer", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Gabriel Fruchter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{10, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Benjamin Ganfer", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{11, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Oliver Gordon", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Grant Leaf", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Bennett Grandis", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Jagger Greene", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Jagger Greene", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{14, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Jesse Guberman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Langdon Senzon Chase Keating Jesse Wasserman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Asher Harary", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["benjamin ganfer", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Leo Kaufthal", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{17, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Chase Keating", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "Langdon Senzon  Jesse Wasserman  Jesse Guberman  Dylan Merson", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Russell Koicim", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "Jacob Bender, Henry Sayagh, Tommy Zohar, Damon Pena", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Grant Leaf", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Oliver Gordon", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[True, 52, 1], {1, 52 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[False, 52, 1], {1, 52 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[52, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[52, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 52, 1], {1, 52 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 52, 1], {1, 52 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{809., {300.634033203125, 306.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{809., {300.634033203125, 306.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.934293220996078*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"77160a91-272c-4964-bb01-3e05075da12c"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Preprocessing using requestsLLM", "Subsection",
 CellChangeTimes->{{3.9342222813337107`*^9, 
  3.9342223041160183`*^9}},ExpressionUUID->"8190a36c-3fa9-42a6-a130-\
cd90a03e38ec"],

Cell[CellGroupData[{

Cell[BoxData["requestsLLM"], "Input",
 CellChangeTimes->{{3.934222310157119*^9, 3.934222315858129*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"4b884096-84f4-41b6-bffe-3baa5e0f7103"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{"Beckett Schein"}, {
       "Tommy Zohar", "Henry Sayagh", "Russell Koicim"}, {"Jesse Edelson"}, {
       "Nate Kassel", "Teddy Kasell", "Leo Kaufthal", "Jack Spodek", 
        "Howie Dushey"}, {}, {"COACH CURTIS", "TEAM"}, {"Alberto Mion"}, {
       "will update"}, {"Spencer Berk", "Aiden Sofer"}, {}, {}, {
       "Grant Leaf"}, {"Jagger Greene"}, {}, {
       "Langdon Senzon", "Chase Keating", "Jesse Wasserman"}, {
       "Benjamin Ganfer"}, {}, {
       "Langdon Senzon", "Jesse Wasserman", "Jesse Guberman", 
        "Dylan Merson"}, {
       "Jacob Bender", "Henry Sayagh", "Tommy Zohar", "Damon Pena"}, {
       "Oliver Gordon"}, {}, {}, {
       "Ben Ganfer", "Ray Sardar", "Asher Harary", "Ben Zarabi"}, {
       "Chase Keating", "Beckett Schein", "Jesse Wasserman"}, {
       "Meijer Buterman", "Joshua Fulton", "Alex Moss", "Ben Moss"}, {}, {
       "Beckett Schein", "Chase Basroon"}, {}, {}, {
       "Alex Moss", "Meijer Buterman"}, {"Ben Moss", "Meijer Buterman"}, {}, {
       "Max Tish", "Luka Hymowitz", "Dylan Rimsky", "Minjun Park"}, {
       "Jacob Bender", "Tommy", "Henry"}, {}, {}, {}, {
       "Jordan Mann", "Ramaz Kids"}, {"Russel", "Tommy", "Jacob"}, {
       "Jacob Bender", "Tommy Zohar", "Russell"}, {"Chase Basroon"}, {
       "Dylan Merson", "Chase Keating"}, {}, {}, {
       "Jesse Edelson", "Alex Moss", "Ben Moss", "Josh Sultan"}, {
       "Jacob", "Leo", "K"}, {}, {}, {}, {}, {}, {}}, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Vector[
        TypeSystem`Atom[String], TypeSystem`AnyLength], 52], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Vector[
        TypeSystem`Atom[String], TypeSystem`AnyLength], 52], "Path" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     52, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Beckett Schein"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Beckett Schein"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Tommy Zohar", "Henry Sayagh", "Russell Koicim"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Tommy Zohar", "Henry Sayagh", "Russell Koicim"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Jesse Edelson"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Jesse Edelson"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Nate Kassel", "Teddy Kasell", "Leo Kaufthal", 
                    "Jack Spodek", "Howie Dushey"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"Nate Kassel", "Teddy Kasell", "Leo Kaufthal", 
                    "Jack Spodek", "Howie Dushey"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"COACH CURTIS", "TEAM"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"COACH CURTIS", "TEAM"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Alberto Mion"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Alberto Mion"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{7}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{7}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"will update"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"will update"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{8}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{8}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Spencer Berk", "Aiden Sofer"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"Spencer Berk", "Aiden Sofer"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{9}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{9}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Grant Leaf"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Grant Leaf"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{12}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{12}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Jagger Greene"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Jagger Greene"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{13}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{13}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Langdon Senzon", "Chase Keating", 
                    "Jesse Wasserman"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Langdon Senzon", "Chase Keating", 
                    "Jesse Wasserman"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{15}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{15}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Benjamin Ganfer"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Benjamin Ganfer"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{16}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{16}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Langdon Senzon", "Jesse Wasserman", 
                    "Jesse Guberman", "Dylan Merson"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"Langdon Senzon", "Jesse Wasserman", 
                    "Jesse Guberman", "Dylan Merson"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{18}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{18}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Jacob Bender", "Henry Sayagh", "Tommy Zohar", 
                    "Damon Pena"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Jacob Bender", "Henry Sayagh", "Tommy Zohar", 
                    "Damon Pena"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{19}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{19}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Oliver Gordon"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Oliver Gordon"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{20}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{20}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[True, 52, 1], {1, 52 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[False, 52, 1], {1, 52 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[52, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[52, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]}, 
                    "Rows", 100000000, {}]], MenuEvaluator -> Automatic]}], 
                    " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 52, 1], {1, 52 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 52, 1], {1, 52 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{434., {287.134033203125, 292.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{434., {287.134033203125, 292.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.934222316190578*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"38941b36-d70c-4189-a076-4c6767eb8888"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Assuming", " ", "raw", " ", "and", " ", "requestsLLM", " ", "are", " ", 
    "already", " ", "defined"}], " ", "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Extract", " ", "the", " ", "names", " ", "from", " ", "the", " ", 
    "original", " ", "dataset"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"fullnames", "=", 
     RowBox[{"raw", "[", 
      RowBox[{"All", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<First Name\>\"", "]"}], "<>", "\"\< \>\"", "<>", 
         RowBox[{"#", "[", "\"\<Last Name\>\"", "]"}]}], "&"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Combine", " ", "the", " ", "names", " ", "with", " ", "the", " ", 
     "processed", " ", "requests"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"namesAndProcessedRequests", "=", 
     RowBox[{"Dataset", "[", 
      RowBox[{"MapThread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<Name\>\"", "->", "#1"}], ",", 
           RowBox[{"\"\<Request\>\"", "->", "#2"}]}], "|>"}], "&"}], ",", 
        RowBox[{"Normal", "@", 
         RowBox[{"{", 
          RowBox[{"fullnames", ",", "requestsLLM"}], "}"}]}]}], "]"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"Display", " ", "the", " ", "new", " ", "dataset"}], " ", "*)"}], 
   "\[IndentingNewLine]", "namesAndProcessedRequests"}]}]], "Input",
 CellChangeTimes->{{3.934222794263077*^9, 3.934222798976976*^9}},
 CellTags->"ChatGeneratedCell",
 CellLabel->"In[16]:=",ExpressionUUID->"d53e8b93-5432-4a36-9e80-a19829cfde7a"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Name" -> "Chase Basroon", "Request" -> {"Beckett Schein"}|>, <|
       "Name" -> "Jacob Bender", 
        "Request" -> {"Tommy Zohar", "Henry Sayagh", "Russell Koicim"}|>, <|
       "Name" -> "Spencer Berk", "Request" -> {"Jesse Edelson"}|>, <|
       "Name" -> "Jacob Biselman", 
        "Request" -> {
         "Nate Kassel", "Teddy Kasell", "Leo Kaufthal", "Jack Spodek", 
          "Howie Dushey"}|>, <|"Name" -> "Mason Brown", "Request" -> {}|>, <|
       "Name" -> "Meijer Buterman", "Request" -> {"COACH CURTIS", "TEAM"}|>, <|
       "Name" -> "Alessandro D'angelo", "Request" -> {"Alberto Mion"}|>, <|
       "Name" -> "Howie Dushey", "Request" -> {"will update"}|>, <|
       "Name" -> "Jesse Edelson", 
        "Request" -> {"Spencer Berk", "Aiden Sofer"}|>, <|
       "Name" -> "Gabriel Fruchter", "Request" -> {}|>, <|
       "Name" -> "Benjamin Ganfer", "Request" -> {}|>, <|
       "Name" -> "Oliver Gordon", "Request" -> {"Grant Leaf"}|>, <|
       "Name" -> "Bennett Grandis", "Request" -> {"Jagger Greene"}|>, <|
       "Name" -> "Jagger Greene", "Request" -> {}|>, <|
       "Name" -> "Jesse Guberman", 
        "Request" -> {
         "Langdon Senzon", "Chase Keating", "Jesse Wasserman"}|>, <|
       "Name" -> "Asher Harary", "Request" -> {"Benjamin Ganfer"}|>, <|
       "Name" -> "Leo Kaufthal", "Request" -> {}|>, <|
       "Name" -> "Chase Keating", 
        "Request" -> {
         "Langdon Senzon", "Jesse Wasserman", "Jesse Guberman", 
          "Dylan Merson"}|>, <|
       "Name" -> "Russell Koicim", 
        "Request" -> {
         "Jacob Bender", "Henry Sayagh", "Tommy Zohar", "Damon Pena"}|>, <|
       "Name" -> "Grant Leaf", "Request" -> {"Oliver Gordon"}|>, <|
       "Name" -> "Evan Lewis", "Request" -> {}|>, <|
       "Name" -> "Luke Lucas", "Request" -> {}|>, <|
       "Name" -> "Jordan Mann", 
        "Request" -> {
         "Ben Ganfer", "Ray Sardar", "Asher Harary", "Ben Zarabi"}|>, <|
       "Name" -> "Dylan Merson", 
        "Request" -> {
         "Chase Keating", "Beckett Schein", "Jesse Wasserman"}|>, <|
       "Name" -> "Sam Meyer", 
        "Request" -> {
         "Meijer Buterman", "Joshua Fulton", "Alex Moss", "Ben Moss"}|>, <|
       "Name" -> "Alberto Mion", "Request" -> {}|>, <|
       "Name" -> "Chase Moolani", 
        "Request" -> {"Beckett Schein", "Chase Basroon"}|>, <|
       "Name" -> "William Morrison", "Request" -> {}|>, <|
       "Name" -> "James Morrison", "Request" -> {}|>, <|
       "Name" -> "Benjamin Moss", 
        "Request" -> {"Alex Moss", "Meijer Buterman"}|>, <|
       "Name" -> "Alexander Moss", 
        "Request" -> {"Ben Moss", "Meijer Buterman"}|>, <|
       "Name" -> "Freddy Packin", "Request" -> {}|>, <|
       "Name" -> "Luke Pantzer", 
        "Request" -> {
         "Max Tish", "Luka Hymowitz", "Dylan Rimsky", "Minjun Park"}|>, <|
       "Name" -> "Damon Pena", 
        "Request" -> {"Jacob Bender", "Tommy", "Henry"}|>, <|
       "Name" -> "Kaeden Rametra", "Request" -> {}|>, <|
       "Name" -> "Henry Rook", "Request" -> {}|>, <|
       "Name" -> "Max Ross", "Request" -> {}|>, <|
       "Name" -> "Raymond Sardar", 
        "Request" -> {"Jordan Mann", "Ramaz Kids"}|>, <|
       "Name" -> "Henry Sayagh", 
        "Request" -> {"Russel", "Tommy", "Jacob"}|>, <|
       "Name" -> "Hunter Sayegh", 
        "Request" -> {"Jacob Bender", "Tommy Zohar", "Russell"}|>, <|
       "Name" -> "Beckett Schein", "Request" -> {"Chase Basroon"}|>, <|
       "Name" -> "Langdon Senzon", 
        "Request" -> {"Dylan Merson", "Chase Keating"}|>, <|
       "Name" -> "BEN SHAY", "Request" -> {}|>, <|
       "Name" -> "Spencer Shmuely", "Request" -> {}|>, <|
       "Name" -> "Aidan Sofer", 
        "Request" -> {
         "Jesse Edelson", "Alex Moss", "Ben Moss", "Josh Sultan"}|>, <|
       "Name" -> "Jack Spodek", "Request" -> {"Jacob", "Leo", "K"}|>, <|
       "Name" -> "Joshua Sultan", "Request" -> {}|>, <|
       "Name" -> "Charles Wang", "Request" -> {}|>, <|
       "Name" -> "Jesse Wasserman", "Request" -> {}|>, <|
       "Name" -> "Jordan Williams", "Request" -> {}|>, <|
       "Name" -> "Benjamin Zarabi", "Request" -> {}|>, <|
       "Name" -> "Tommy Zohar", "Request" -> {}|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "Request"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[212.8], "Request" -> 
            TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 2, {All}]], 20, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Name", "Request"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Vector[
          TypeSystem`Atom[String], TypeSystem`AnyLength]}], 52], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "Request"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[212.8], "Request" -> 
            TypeSystem`PackageScope`UnknownShape[False]|>], 
          DirectedInfinity[1], 2, {All}]], 20, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Name", "Request"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Vector[
          TypeSystem`Atom[String], TypeSystem`AnyLength]}], 52], "Path" -> {},
      "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 2, "DataRowCount" -> 
     52, "DataColumnCount" -> 2, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 2, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{All, "Name"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{All, "Name"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Request", 
                  Style[
                  "Request", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{All, "Request"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{All, "Request"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Jacob Bender", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{2, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Tommy Zohar", "Henry Sayagh", "Russell Koicim"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Tommy Zohar", "Henry Sayagh", "Russell Koicim"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{2, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{2, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Spencer Berk", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{3, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Jesse Edelson"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Jesse Edelson"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{3, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{3, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Jacob Biselman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{4, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Nate Kassel", "Teddy Kasell", "Leo Kaufthal", 
                    "Jack Spodek", "Howie Dushey"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"Nate Kassel", "Teddy Kasell", "Leo Kaufthal", 
                    "Jack Spodek", "Howie Dushey"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{4, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{4, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Mason Brown", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{5, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Meijer Buterman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{6, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"COACH CURTIS", "TEAM"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"COACH CURTIS", "TEAM"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{6, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{6, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Alessandro D'angelo", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{7, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Alberto Mion"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Alberto Mion"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{7, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{7, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Howie Dushey", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{8, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"will update"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"will update"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{8, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{8, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Jesse Edelson", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{9, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Spencer Berk", "Aiden Sofer"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"Spencer Berk", "Aiden Sofer"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{9, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{9, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Gabriel Fruchter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{10, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Benjamin Ganfer", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{11, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Oliver Gordon", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{12, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Grant Leaf"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Grant Leaf"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{12, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{12, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Bennett Grandis", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{13, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Jagger Greene"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Jagger Greene"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{13, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{13, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Jagger Greene", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{14, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Jesse Guberman", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{15, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Langdon Senzon", "Chase Keating", 
                    "Jesse Wasserman"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Langdon Senzon", "Chase Keating", 
                    "Jesse Wasserman"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{15, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{15, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Asher Harary", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{16, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Benjamin Ganfer"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Benjamin Ganfer"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{16, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{16, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Leo Kaufthal", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{17, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Chase Keating", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{18, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Langdon Senzon", "Jesse Wasserman", 
                    "Jesse Guberman", "Dylan Merson"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"Langdon Senzon", "Jesse Wasserman", 
                    "Jesse Guberman", "Dylan Merson"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{18, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{18, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Russell Koicim", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{19, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"Jacob Bender", "Henry Sayagh", "Tommy Zohar", 
                    "Damon Pena"}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"Jacob Bender", "Henry Sayagh", "Tommy Zohar", 
                    "Damon Pena"}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{19, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{19, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Grant Leaf", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{20, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"Oliver Gordon"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"Oliver Gordon"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][{20, 
                    Key["Request"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{20, 
                 Key["Request"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["Evan Lewis", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][{21, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{212.8, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[True, 52, 1], {1, 52 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[False, 52, 1], {1, 52 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 2, "\[Dash]", 21, " of ", 
                    Style[52, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 2, "\[Dash]", 21, " of ", 
                    Style[52, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"}, "Rows", 1, {}]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"}, "Rows", 10, {}]],
                     MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"}, "Rows", 30, {}]],
                     MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"}, "Rows", 
                    100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"}, "Rows", 
                    100000000, {}]], MenuEvaluator -> Automatic]}], " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 52, 1], {1, 52 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 52, 1], {1, 52 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8", {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              "36cbea2f-cd5a-4ef9-948a-310c02f1c0b8"][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{655., {300.634033203125, 306.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{655., {300.634033203125, 306.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.934222508416173*^9, 3.9342227993419447`*^9},
 CellTags->"ChatGeneratedCell",
 CellLabel->"Out[18]=",ExpressionUUID->"1fdc77cf-0bb4-467a-8b58-0a451df2acc8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Examples", " ", "of", " ", "using", " ", "LLMExampleFunction", " ", "to", 
    " ", "correct", " ", "names", " ", "in", " ", "CSV", " ", "strings", " ", 
    "with", " ", "multiple", " ", "rows"}], " ", "*)"}], 
  "\[IndentingNewLine]", "\t", 
  RowBox[{
   RowBox[{
   "correctNamesLLMMultipleExamples", "=", "\[IndentingNewLine]", "\t    ", 
    RowBox[{"LLMExampleFunction", "[", "\[IndentingNewLine]", "\t        ", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Correct the misspelled names in this CSV string\>\"", ",", 
       "\[IndentingNewLine]", "\t         ", 
       RowBox[{"{", "      ", 
        RowBox[{
         RowBox[{
         "\"\<\\\"Name\\\",\\\"Request\\\"\\n\\\"Chase Basroon\\\",\\\"Ben \
Moss\\\"\\n\\\"Jacob Bender\\\",\\\"Tommie Zohar\\\"\\n\\\"Benjamin Moss\\\",\
\\\"Tommy Zohar\\\"\\n\\\"Spencer Berk\\\",\\\"Jesse Edleson\\\"\>\"", "->", 
          "\[IndentingNewLine]", "\t             ", 
          "\"\<\\\"Name\\\",\\\"Request\\\"\\n\\\"Chase \
Basroon\\\",\\\"Benjamin Moss\\\"\\n\\\"Jacob Bender\\\",\\\"Tommy \
Zohar\\\"\\n\\\"Benjamin Moss\\\",\\\"Tommy Zohar\\\"\\n\\\"Spencer Berk\\\",\
\\\"Jesse Edelson\\\"\>\""}], "\[IndentingNewLine]", "\t         ", ",", " ", 
         
         RowBox[{
         "\"\<\\\"Name\\\",\\\"Request\\\"\\n\\\"Alberto Meon\\\",\\\"Beckett \
Shain\\\"\\n\\\"Jordan Willams\\\",\\\"Henry Sayagh\\\"\\n\\\"Henry \
Sayagh\\\",\\\"Russel Koicim\\\"\\n\\\"Dylan Merson\\\",\\\"Chase Keating\\\"\
\>\"", "->", "\[IndentingNewLine]", "\t             ", 
          "\"\<\\\"Name\\\",\\\"Request\\\"\\n\\\"Alberto \
Mion\\\",\\\"Beckett Schein\\\"\\n\\\"Jordan Williams\\\",\\\"Henry \
Sayagh\\\"\\n\\\"Henry Sayagh\\\",\\\"Russell Koicim\\\"\\n\\\"Dylan Merson\\\
\",\\\"Chase Keating\\\"\>\""}], ",", " ", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<\\\"Name\\\",\\\"Request\\\"\\n\\\"Tommy Zohar\\\",\\\"Henry \
Sayah\\\"\\n\\\"Jesse Edleson\\\",\\\"Josh Sultan Moss\\\"\\n\\\"Jacob Bender\
\\\",\\\"Russel Koicim\\\"\\n\\\"Spencer Berk\\\",\\\"Ben Moss\\\"\>\"", "->",
           "\[IndentingNewLine]", "\t             ", 
          "\"\<\\\"Name\\\",\\\"Request\\\"\\n\\\"Tommy Zohar\\\",\\\"Henry \
Sayagh\\\"\\n\\\"Jesse Edelson\\\",\\\"Joshua Sultan\\\"\\n\\\"Jacob Bender\\\
\",\\\"Russell Koicim\\\"\\n\\\"Joshua Sultan\\\",\\\"Benjamin \
Moss\\\"\>\""}]}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       "\t         ", "\"\<String\>\""}], "}"}], "\[IndentingNewLine]", 
     "\t    ", "]"}]}], "\[IndentingNewLine]", "\t", "\[IndentingNewLine]", 
   "\t", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Execute", " ", "the", " ", "functions", " ", "to", " ", "see", " ", 
     "the", " ", "outputs"}], " ", "*)"}], "\[IndentingNewLine]", 
   "\t"}]}]], "Input",
 CellChangeTimes->{{3.934227290900487*^9, 3.934227297522235*^9}, {
  3.934227393916865*^9, 3.934227439056759*^9}, {3.934227499828065*^9, 
  3.9342275795578833`*^9}},
 CellTags->
  "ChatGeneratedCell",ExpressionUUID->"e6e763eb-424f-4d36-a7a2-cbd3903e0191"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Spelling correction", "Section",
 CellChangeTimes->{{3.922409067450886*^9, 
  3.922409078642228*^9}},ExpressionUUID->"db16c572-d6c3-45ce-a6f1-\
4ca937bd2bca"],

Cell["\<\
Go through each name in the request column and see if it matches to a name in \
the names column. If it does change it to that name. \
\>", "Text",
 CellChangeTimes->{{3.9224091209057*^9, 
  3.922409147859104*^9}},ExpressionUUID->"bc31cf68-7eb8-4332-8c76-\
9f63fad4b34e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"correctSpelling", "[", 
   RowBox[{"req_", ",", " ", "allnames_"}], "]"}], ":=", " ", 
  RowBox[{"SelectFirst", "[", 
   RowBox[{"allnames", ",", " ", 
    RowBox[{
     RowBox[{"StringMatchQ", "[", 
      RowBox[{"req", ",", " ", "#", ",", " ", 
       RowBox[{"SpellingCorrection", "->", "True"}]}], "]"}], "&"}], ",", " ",
     "req"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.922409883451666*^9, 3.922409932117175*^9}, {
   3.922410439225458*^9, 3.922410486849824*^9}, {3.922410521531987*^9, 
   3.922410561648361*^9}, {3.922410714873543*^9, 3.922410877068803*^9}, {
   3.922410927558777*^9, 3.922410928693268*^9}, {3.922410976277525*^9, 
   3.92241098027619*^9}, {3.92241112047849*^9, 3.922411121137353*^9}, {
   3.922411168602524*^9, 3.9224111811900043`*^9}, {3.9224112162247553`*^9, 
   3.92241121785643*^9}, {3.922411301166788*^9, 3.922411333964134*^9}, {
   3.922411516059148*^9, 3.922411517409395*^9}, {3.922411610043846*^9, 
   3.922411616519933*^9}, {3.922412469062067*^9, 3.92241247258897*^9}, 
   3.922413593931675*^9, {3.922414009093095*^9, 3.922414010889029*^9}, {
   3.922414067194413*^9, 3.9224140884457293`*^9}, {3.930065310085324*^9, 
   3.930065310315191*^9}, {3.930095495930286*^9, 3.930095511033527*^9}, {
   3.930096195687945*^9, 3.930096203152678*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"8c5e57e8-79c2-41c6-9591-34d896a46ade"],

Cell[BoxData[
 RowBox[{
  RowBox[{"correctAllSpelling", "[", 
   RowBox[{"reqs_", ",", " ", "allnames_"}], "]"}], ":=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"correctSpelling", "[", 
     RowBox[{"#", ",", " ", "allnames"}], "]"}], "&"}], "/@", " ", 
   "reqs"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.930096206171776*^9, 3.930096254840592*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"921976c2-acdb-474c-a870-d8e514ef7ce2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"splitds", " ", "=", " ", 
   RowBox[{"stringds", "[", 
    RowBox[{"All", ",", " ", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "->", "#Name"}], ",", " ", 
        RowBox[{"\"\<Request\>\"", "->", 
         RowBox[{"splitstring", "[", "#Request", "]"}]}]}], "|>"}], "&"}]}], 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"names", " ", "=", " ", 
   RowBox[{"splitds", "[", 
    RowBox[{"All", ",", " ", "\"\<Name\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spellchecked", " ", "=", " ", 
   RowBox[{"splitds", "[", 
    RowBox[{"All", ",", " ", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "->", "#Name"}], ",", " ", 
        RowBox[{"\"\<Request\>\"", "->", 
         RowBox[{"correctAllSpelling", "[", 
          RowBox[{
           RowBox[{"Normal", "@", "#Request"}], ",", " ", 
           RowBox[{"Normal", "@", 
            RowBox[{"splitds", "[", 
             RowBox[{"All", ",", " ", "\"\<Name\>\""}], "]"}]}]}], "]"}]}]}], 
       "|>"}], "&"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"joinds", " ", "=", " ", 
   RowBox[{"spellchecked", "[", 
    RowBox[{"All", ",", " ", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "->", "#Name"}], ",", " ", 
        RowBox[{"\"\<Request\>\"", "->", 
         RowBox[{"StringRiffle", "[", 
          RowBox[{"#Request", ",", " ", "\"\<, \>\""}], "]"}]}]}], "|>"}], 
      "&"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"stringtable", " ", "=", " ", 
   RowBox[{"toTable", "[", "joinds", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.930094884086279*^9, 3.9300949193084507`*^9}, {
   3.930094995400454*^9, 3.930095015380019*^9}, {3.93009508132944*^9, 
   3.930095084321837*^9}, {3.930095134095766*^9, 3.930095148403461*^9}, {
   3.930095211251256*^9, 3.930095350080112*^9}, {3.930095397962329*^9, 
   3.930095409617219*^9}, {3.9300955332369843`*^9, 3.9300956014381323`*^9}, {
   3.930095668130535*^9, 3.930095738714476*^9}, {3.9300958156253357`*^9, 
   3.930095840392975*^9}, {3.930096066690586*^9, 3.930096080686124*^9}, 
   3.930096588395406*^9, {3.930096632833733*^9, 3.930096644944068*^9}, {
   3.930097037760771*^9, 3.930097039401626*^9}, {3.930097452497948*^9, 
   3.930097452852783*^9}, {3.930098948199423*^9, 3.93009895028968*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"2b484971-bf6c-4dda-b01f-a924ac432bd6"]
}, Closed]],

Cell[CellGroupData[{

Cell["View and edit your data", "Section",
 CellChangeTimes->{{3.922245982315623*^9, 3.922245988197601*^9}, {
  3.92224651803407*^9, 3.922246519681365*^9}, {3.922408961026733*^9, 
  3.92240896529065*^9}},ExpressionUUID->"5f163356-3a45-4384-8e31-\
e209f1524154"],

Cell["\<\
Here you can make edits to your data. Remember to run the cell below the \
spreadsheet each time after editing so that the new changes show up in the \
graph\
\>", "Text",
 CellChangeTimes->{{3.922408974246134*^9, 
  3.922409006518429*^9}},ExpressionUUID->"4b3a9e54-2158-4719-af3d-\
2dd82234804b"],

Cell[BoxData[
 RowBox[{"TableView", "[", 
  RowBox[{"Dynamic", "[", "stringtable", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.922408385395619*^9, 3.922408385403553*^9}, {
  3.922408434211611*^9, 3.922408434780321*^9}, {3.922408678305778*^9, 
  3.922408697551581*^9}, {3.922413885603406*^9, 3.922413910762998*^9}, {
  3.930094922968796*^9, 3.930094923593232*^9}, {3.930097042531192*^9, 
  3.930097045026612*^9}, {3.937497217360219*^9, 3.937497239960829*^9}, {
  3.937497279121059*^9, 3.937497297877486*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"0f6daf1d-9046-4ca2-af55-78961885515f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"newstring", "  ", "=", " ", 
   RowBox[{"toDataset", "[", "stringtable", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"splitds", " ", "=", " ", 
   RowBox[{"newstring", "[", 
    RowBox[{"All", ",", " ", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "->", "#Name"}], ",", " ", 
        RowBox[{"\"\<Request\>\"", "->", 
         RowBox[{"splitstring", "[", "#Request", "]"}]}]}], "|>"}], "&"}]}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"names", " ", "=", " ", 
   RowBox[{"splitds", "[", 
    RowBox[{"All", ",", " ", "\"\<Name\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"joinds", " ", "=", " ", 
   RowBox[{"splitds", "[", 
    RowBox[{"All", ",", " ", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "->", "#Name"}], ",", " ", 
        RowBox[{"\"\<Request\>\"", "->", 
         RowBox[{"StringRiffle", "[", 
          RowBox[{"#Request", ",", " ", "\"\<, \>\""}], "]"}]}]}], "|>"}], 
      "&"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.930096650676898*^9, 3.930096658231699*^9}, {
   3.930096697929325*^9, 3.930096720339323*^9}, 3.930096838378236*^9, {
   3.9300970910439253`*^9, 3.9300971031693068`*^9}, {3.9300971548781023`*^9, 
   3.930097167409175*^9}, {3.930097205753404*^9, 3.930097248161302*^9}, {
   3.930097425495585*^9, 3.930097443203273*^9}, {3.930098938254788*^9, 
   3.930098940501711*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"8990e422-3dc7-4e86-afea-13e98ffefbd4"],

Cell[CellGroupData[{

Cell["Editing programmatically", "Subsection",
 CellChangeTimes->{{3.9374986565824013`*^9, 
  3.937498666741394*^9}},ExpressionUUID->"741082d3-bc67-4e1d-9055-\
4a4ccc26e6e2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newsplitds", "=", 
   RowBox[{"splitds", "/.", " ", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Name\>\"", "->", "\"\<Teddy Gerstein\>\""}], ",", " ", 
       RowBox[{"\"\<Request\>\"", "->", "s_Pattern"}]}], "|>"}], ":>", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Name\>\"", "->", "\"\<Teddy Gerstein\>\""}], ",", " ", 
       RowBox[{"\"\<Request\>\"", "->", 
        RowBox[{"{", "\"\<Canyon Gunther\>\"", "}"}]}]}], "|>"}]}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.937497669990512*^9, 3.937497672136845*^9}, {
  3.937497703468576*^9, 3.937497709187829*^9}, {3.9374977410987167`*^9, 
  3.937497744435417*^9}, {3.9374978318554068`*^9, 3.937497843714259*^9}, {
  3.937498090892083*^9, 3.937498091961071*^9}, {3.937498234504229*^9, 
  3.937498268020598*^9}, {3.93751666090639*^9, 3.9375166688782063`*^9}, {
  3.937516982100172*^9, 3.9375170058697853`*^9}},
 CellLabel->
  "In[330]:=",ExpressionUUID->"33680eb1-700b-414b-ac2d-bd5163cacfb0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Save your data", "Section",
 CellChangeTimes->{{3.922246901781392*^9, 
  3.922246906989966*^9}},ExpressionUUID->"13deb74e-4efe-41fe-b078-\
e7c82fde5879"],

Cell[CellGroupData[{

Cell["Set name of outputs", "Subsection",
 CellChangeTimes->{{3.9300645070701036`*^9, 
  3.930064542193099*^9}},ExpressionUUID->"6447a5b1-3f83-49f2-a311-\
fd395bef29f2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"name", " ", "=", " ", "\"\<8th9th\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"exportRepo", " ", "=", " ", 
   RowBox[{
    RowBox[{"NotebookDirectory", "[", "]"}], " ", "<>", " ", 
    "\"\<Output/FA24/BSNY Travel/\>\"", "<>", "name"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data", " ", "=", " ", "requestsLLM"}], ";"}]}], "Input",
 CellChangeTimes->{{3.922239763651211*^9, 3.922239795501932*^9}, {
   3.922239840084663*^9, 3.922239840086875*^9}, {3.922239997528731*^9, 
   3.922240001631764*^9}, {3.922243436425635*^9, 3.922243441990087*^9}, {
   3.922246178583409*^9, 3.922246182733844*^9}, 3.922407294524422*^9, 
   3.9224073274267263`*^9, {3.922408908760186*^9, 3.922408909029108*^9}, {
   3.922413873888096*^9, 3.9224138765257998`*^9}, {3.922423075795149*^9, 
   3.9224230762984533`*^9}, {3.930063139758389*^9, 3.9300631578256083`*^9}, {
   3.930063331184891*^9, 3.930063343684725*^9}, {3.930063418634616*^9, 
   3.930063507762448*^9}, {3.930063990045562*^9, 3.930064012927765*^9}, 
   3.930064500232915*^9, 3.930064544804575*^9, {3.93007282693358*^9, 
   3.9300728276524677`*^9}, {3.9300823044233227`*^9, 3.930082305743775*^9}, 
   3.930083831321867*^9, {3.930098475341301*^9, 3.930098477183724*^9}, {
   3.9301039586445293`*^9, 3.930103966717962*^9}, {3.930141506994359*^9, 
   3.930141508275489*^9}, {3.930141661078513*^9, 3.9301416612785263`*^9}, 
   3.930141799454459*^9, {3.930141913986269*^9, 3.930141921388472*^9}, {
   3.9342166557067947`*^9, 3.934216659698938*^9}, {3.934216697253888*^9, 
   3.9342167193546877`*^9}, {3.9342220552080927`*^9, 3.934222066797565*^9}, {
   3.934287232973553*^9, 3.9342872439417562`*^9}, {3.934291256085861*^9, 
   3.934291256674704*^9}, {3.934291438840276*^9, 3.934291439133546*^9}, {
   3.934293403799445*^9, 3.934293404116204*^9}, {3.9374990355133743`*^9, 
   3.937499037907896*^9}, {3.937499074871983*^9, 3.9374991931322317`*^9}, {
   3.93750059759247*^9, 3.9375005981540956`*^9}, {3.9375116528613043`*^9, 
   3.9375116533622847`*^9}, {3.937512041533725*^9, 3.937512041781189*^9}, {
   3.9375158487638893`*^9, 3.937515861898467*^9}, {3.937516071589086*^9, 
   3.937516072705962*^9}, {3.937516319456164*^9, 3.937516319894062*^9}, 
   3.937516938786889*^9, {3.9375171585534143`*^9, 3.9375171611056747`*^9}},
 CellLabel->
  "In[340]:=",ExpressionUUID->"a69a794a-9d28-4d4b-98a4-a8048380b200"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"exportRepo", "<>", "\"\<clean.csv\>\""}], ",", " ", "data", ",", 
    " ", 
    RowBox[{"OverwriteTarget", "->", "False"}]}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.922413109356793*^9, 3.922413179486515*^9}, 
   3.922413259476418*^9, {3.922413296918193*^9, 3.922413310233878*^9}, {
   3.922413364818866*^9, 3.92241341501757*^9}, {3.922413559985763*^9, 
   3.9224135612482557`*^9}, {3.92241402062589*^9, 3.922414023093664*^9}, {
   3.9300622774814053`*^9, 3.930062332585498*^9}, {3.9300623808229227`*^9, 
   3.930062383387878*^9}, {3.93006335644211*^9, 3.930063369784122*^9}, {
   3.930063517866372*^9, 3.9300635194151773`*^9}, {3.930063689383699*^9, 
   3.930063709956642*^9}, {3.930064368150879*^9, 3.930064381918939*^9}, {
   3.930081472592812*^9, 3.930081473035756*^9}, {3.93008302210374*^9, 
   3.9300830228096933`*^9}, {3.930097267090185*^9, 3.930097267966104*^9}, {
   3.934216720703165*^9, 3.934216721180068*^9}, {3.93429249093859*^9, 
   3.934292497279675*^9}, {3.934293413714058*^9, 3.9342934143142567`*^9}, {
   3.934293505545877*^9, 3.934293506245708*^9}},
 CellLabel->
  "In[343]:=",ExpressionUUID->"41f94b97-8342-44d4-aebf-81f56ef5fef9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graph your data", "Section",
 CellChangeTimes->{{3.922246537786934*^9, 
  3.92224655775742*^9}},ExpressionUUID->"ebedc006-e7aa-4895-8c88-\
145bc2c7d54f"],

Cell["\<\
You can control the size of the graph with the number next to ImageSize. The \
vertices highlighted in red are people who were requested but not found in \
the names. Many of the red nodes are misspelled names. \
\>", "Text",
 CellChangeTimes->{{3.9222471588950644`*^9, 
  3.922247247693372*^9}},ExpressionUUID->"e01c07a9-c459-45ec-8be4-\
67290a44c9fc"],

Cell["\<\
I recommend looking through the red nodes and then editing your data in the \
spreadsheet above. Rinse repeat.\
\>", "Text",
 CellChangeTimes->{{3.9222473861467247`*^9, 
  3.922247414709629*^9}},ExpressionUUID->"9658ec83-1d3b-4bde-8420-\
d93cf7dbe4d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getEdges", "[", "row_", "]"}], ":=", " ", 
  RowBox[{"Normal", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"row", "[", "\"\<Name\>\"", "]"}], "\[DirectedEdge]", " ", 
      "#"}], " ", "&"}], " ", "/@", " ", 
    RowBox[{"row", "[", "\"\<Request\>\"", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.930093457643366*^9, 3.930093469648975*^9}, {
  3.930093735755232*^9, 3.9300937666668386`*^9}, {3.930093924266646*^9, 
  3.9300939274392357`*^9}, {3.930097843676457*^9, 3.930097861852465*^9}, {
  3.930097990377075*^9, 3.930097990938534*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"82046ed0-e36e-45fa-a1fd-af8c4a347672"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "getGraph", "]"}], " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{"\"\<Label\>\"", "->", "Automatic"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getGraph", "[", 
   RowBox[{"rows_", ",", " ", 
    RowBox[{"OptionsPattern", "[", 
     RowBox[{"{", 
      RowBox[{"getGraph", ",", 
       RowBox[{"ImageSize", "->", "1500"}], ",", " ", 
       RowBox[{"PerformanceGoal", "->", "\"\<Quality\>\""}], ",", "Graph"}], 
      "}"}], "]"}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "reqs", ",", " ", "names", ",", " ", "edges", ",", "reg", ",", " ", 
      "verts", ",", "notRegistered"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"reqs", " ", "=", " ", 
      RowBox[{"Flatten", "@", 
       RowBox[{"Normal", "@", 
        RowBox[{"rows", "[", 
         RowBox[{"All", ",", " ", "\"\<Request\>\""}], "]"}]}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"names", " ", "=", " ", 
      RowBox[{"Normal", "@", 
       RowBox[{"rows", "[", 
        RowBox[{"All", ",", " ", "\"\<Name\>\""}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"verts", " ", "=", " ", 
      RowBox[{"Union", "[", 
       RowBox[{"Join", "[", 
        RowBox[{"names", ",", " ", "reqs"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"edges", " ", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Normal", "@", 
        RowBox[{"rows", "[", 
         RowBox[{"All", ",", " ", "getEdges"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"notRegistered", " ", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"verts", ",", "names"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Graph", "[", 
      RowBox[{"verts", ",", " ", "edges", ",", 
       RowBox[{"VertexLabels", "->", 
        RowBox[{"Placed", "[", 
         RowBox[{"\"\<Name\>\"", ",", " ", 
          RowBox[{"OptionValue", "[", "\"\<Label\>\"", "]"}]}], "]"}]}], ",", 
       
       RowBox[{"VertexStyle", "->", 
        RowBox[{"Thread", "[", 
         RowBox[{"notRegistered", "->", " ", "Red"}], "]"}]}], ",", " ", 
       RowBox[{"ImageSize", "->", 
        RowBox[{"OptionValue", "[", "ImageSize", "]"}]}], ",", " ", 
       RowBox[{"PerformanceGoal", "->", 
        RowBox[{"OptionValue", "[", "PerformanceGoal", "]"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.922420040400529*^9, 3.92242006985817*^9}, {
   3.9224201254152327`*^9, 3.9224201465141973`*^9}, {3.922420225617985*^9, 
   3.922420304398883*^9}, {3.922422241203802*^9, 3.922422317593146*^9}, {
   3.922490408313676*^9, 3.922490445596305*^9}, {3.922542900440542*^9, 
   3.922542915139868*^9}, {3.922543056332272*^9, 3.922543067262889*^9}, {
   3.922543141398517*^9, 3.922543144836249*^9}, {3.922543913078593*^9, 
   3.922543970958661*^9}, {3.922544760048616*^9, 3.922544761505464*^9}, {
   3.93006517366313*^9, 3.9300652502770653`*^9}, {3.9300654686935167`*^9, 
   3.930065560580947*^9}, {3.9300656174701*^9, 3.930065632568226*^9}, 
   3.930065964350754*^9, {3.930066069649182*^9, 3.930066072570356*^9}, {
   3.930066310458677*^9, 3.930066347860187*^9}, {3.930066378542894*^9, 
   3.930066379527463*^9}, {3.930066488731437*^9, 3.930066490292917*^9}, {
   3.9300665979372*^9, 3.930066601045165*^9}, {3.930066674252392*^9, 
   3.930066690922531*^9}, {3.930066744010415*^9, 3.930066904475326*^9}, {
   3.930066952071553*^9, 3.930067064105668*^9}, {3.930067787010242*^9, 
   3.930067833209983*^9}, {3.930068153667527*^9, 3.930068185907609*^9}, {
   3.930068222291905*^9, 3.930068243218011*^9}, {3.930068679957533*^9, 
   3.930068697970484*^9}, {3.930068728002098*^9, 3.9300687616178303`*^9}, {
   3.930069072784046*^9, 3.9300690737716637`*^9}, {3.930069132636951*^9, 
   3.930069148207977*^9}, {3.93006923069481*^9, 3.930069236499963*^9}, {
   3.930070241922644*^9, 3.930070326616002*^9}, {3.930071806568016*^9, 
   3.9300718169134007`*^9}, {3.930072043323745*^9, 3.930072044870517*^9}, {
   3.9300720987622538`*^9, 3.930072178982399*^9}, {3.9300722401802273`*^9, 
   3.930072263332716*^9}, {3.930072382573797*^9, 3.930072388392331*^9}, {
   3.930072435557759*^9, 3.9300724639723177`*^9}, {3.930072522385406*^9, 
   3.930072541037654*^9}, {3.93009234256774*^9, 3.930092345242459*^9}, {
   3.930093296494794*^9, 3.930093339623395*^9}, {3.930093798149445*^9, 
   3.930093817948974*^9}, {3.930093873079077*^9, 3.9300938794078417`*^9}, {
   3.930093977348657*^9, 3.9300939822735577`*^9}, {3.930098011777974*^9, 
   3.930098013125115*^9}, {3.930098049489975*^9, 3.930098109455958*^9}, {
   3.930098165626277*^9, 3.930098402279369*^9}, {3.930100310287111*^9, 
   3.930100437616559*^9}, {3.930100566837721*^9, 3.930100742206866*^9}, {
   3.93749855923701*^9, 3.937498577067165*^9}},
 CellLabel->
  "In[130]:=",ExpressionUUID->"f80bdd25-42c5-431b-aac6-7f5fcc7340f8"],

Cell[CellGroupData[{

Cell["All", "Subsubsection",
 CellChangeTimes->{{3.930068986714869*^9, 
  3.930068989213251*^9}},ExpressionUUID->"9fe7b7d1-0619-4428-98d2-\
0524b3205998"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gAll", " ", "=", " ", 
  RowBox[{"getGraph", "[", "splitds", "]"}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQB2IQXXConYvR462jqg8LN4jukf3eDaKPZItPBNFnbcO2
geg9drFg2q3HRIgJSH8tviMKoic3MEiBaH1/QzC92oe7EETHdsqB6dK985Yz
A2nGPOWVIHpFqk8aC5Dm+JwNppmuH+gH0acndE4C0byBsrNA9BfzyDkguow9
ZyGI1o2/sAREa2wV3wCie75w7ADRRkLaKpxA+o24FZh+sdT9qgCQ5mLNAtNx
0evMRYB04tELYLr99rpcgQCgP5Y3FIJol2C557phbx1PfDMC0ym+SdP1gHTY
xFowfSlIjFsfSDfH+IJpj7g/E82BtEJR3CQQzaNwdhOIXsL3BkxH3zfcBaIj
8oLBdK8ZwzkQ/TRJFkwDABFsmpg=
  "],
 CellLabel->
  "In[344]:=",ExpressionUUID->"e2f2cd87-67b9-435b-bf3d-ccecb2b23d5f"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Aaryan Lalji", "Aiden Comen Weitzm", "Asher Wolfson", "Ben Eisenberg", 
       "Bodhi Naik", "Cameron Reilly", "Cooper", "Cooper & Brother Renza", 
       "David Miller", "Eli Steiger", "Eli Wahl", "Evan Henry", 
       "Jamie Voorheis", "Jamie Vorhees", "Jonathan Bador", "Josh Boyman", 
       "Leif Abrahamsson", "Luka Djunic", "Matan Renas", "Max Markus", 
       "Noah Gaffen", "Olive O'Boyle", "Oliver OBoyle", 
       "Oliver O\[CloseCurlyQuote]Boyle", "Otis Lerner", "Patrick Dere", 
       "Pierce Ravener", "Pierce Ravner", "Ryan Golden", "Ryan Shapiro", 
       "Tate Waldman", "Tiger Zhang", "William Dolan", "Zachary Renza", 
       "Zach Cohen", "Zach Renza", "Zack Cohen"}, {{{26, 14}, {26, 24}, {26, 
       29}, {26, 8}, {9, 12}, {9, 17}, {23, 13}, {23, 18}, {23, 26}, {23, 
       29}, {27, 30}, {27, 28}, {6, 35}, {6, 31}, {6, 11}, {30, 7}, {30, 
       36}, {30, 27}, {13, 29}, {13, 22}, {13, 33}, {13, 26}, {31, 3}, {3, 
       31}, {3, 35}, {3, 6}}, Null}, {
      ImageSize -> 1500, PerformanceGoal -> "Quality", VertexLabels -> {
         Placed["Name", Automatic]}, 
       VertexStyle -> {
        "Cooper" -> RGBColor[1, 0, 0], "Cooper & Brother Renza" -> 
         RGBColor[1, 0, 0], "William Dolan" -> RGBColor[1, 0, 0], 
         "Leif Abrahamsson" -> RGBColor[1, 0, 0], "Evan Henry" -> 
         RGBColor[1, 0, 0], "Ryan Golden" -> RGBColor[1, 0, 0], "Zach Renza" -> 
         RGBColor[1, 0, 0], "Eli Wahl" -> RGBColor[1, 0, 0], "Pierce Ravner" -> 
         RGBColor[1, 0, 0], "Zach Cohen" -> RGBColor[1, 0, 0], 
         "Jamie Vorhees" -> RGBColor[1, 0, 0], "Olive O'Boyle" -> 
         RGBColor[1, 0, 0], "Luka Djunic" -> RGBColor[1, 0, 0], 
         "Oliver O\[CloseCurlyQuote]Boyle" -> RGBColor[1, 0, 0]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.02048705944470185], 
        ArrowBox[{
         DynamicLocation["VertexID$3", Automatic, Center], DynamicLocation[
          "VertexID$6", Automatic, Center]}], 
        ArrowBox[
         BezierCurveBox[{
          DynamicLocation["VertexID$3", Automatic, Center], {
           5.867044605582118, -1.428210291496072}, DynamicLocation[
           "VertexID$31", Automatic, Center]}]], 
        ArrowBox[{
         DynamicLocation["VertexID$3", Automatic, Center], DynamicLocation[
          "VertexID$35", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], DynamicLocation[
          "VertexID$11", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], DynamicLocation[
          "VertexID$31", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$6", Automatic, Center], DynamicLocation[
          "VertexID$35", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$9", Automatic, Center], DynamicLocation[
          "VertexID$12", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$9", Automatic, Center], DynamicLocation[
          "VertexID$17", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$13", Automatic, Center], DynamicLocation[
          "VertexID$22", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$13", Automatic, Center], DynamicLocation[
          "VertexID$26", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$13", Automatic, Center], DynamicLocation[
          "VertexID$29", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$13", Automatic, Center], DynamicLocation[
          "VertexID$33", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$23", Automatic, Center], DynamicLocation[
          "VertexID$13", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$23", Automatic, Center], DynamicLocation[
          "VertexID$18", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$23", Automatic, Center], DynamicLocation[
          "VertexID$26", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$23", Automatic, Center], DynamicLocation[
          "VertexID$29", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$26", Automatic, Center], DynamicLocation[
          "VertexID$8", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$26", Automatic, Center], DynamicLocation[
          "VertexID$14", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$26", Automatic, Center], DynamicLocation[
          "VertexID$24", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$26", Automatic, Center], DynamicLocation[
          "VertexID$29", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$27", Automatic, Center], DynamicLocation[
          "VertexID$28", Automatic, Center]}], 
        ArrowBox[
         BezierCurveBox[{
          DynamicLocation["VertexID$27", Automatic, Center], {
           1.5807860632132673`, -3.6297527700622467`}, DynamicLocation[
           "VertexID$30", Automatic, Center]}]], 
        ArrowBox[{
         DynamicLocation["VertexID$30", Automatic, Center], DynamicLocation[
          "VertexID$7", Automatic, Center]}], 
        ArrowBox[
         BezierCurveBox[{
          DynamicLocation["VertexID$30", Automatic, Center], {
           1.5807747035469915`, -3.9865990210070237`}, DynamicLocation[
           "VertexID$27", Automatic, Center]}]], 
        ArrowBox[{
         DynamicLocation["VertexID$30", Automatic, Center], DynamicLocation[
          "VertexID$36", Automatic, Center]}], 
        ArrowBox[
         BezierCurveBox[{
          DynamicLocation["VertexID$31", Automatic, Center], {
           5.588510428660219, -1.3285179749837523`}, DynamicLocation[
           "VertexID$3", Automatic, Center]}]]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -4.295835142655248}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$1"], 
          InsetBox["\<\"Aaryan Lalji\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$1", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$1"], 
        TagBox[{
          
          TagBox[DiskBox[{0.11148862192738772`, -4.7492922808847435`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$2"], 
          InsetBox["\<\"Aiden Comen Weitzm\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$2", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$2"], 
        TagBox[{
          
          TagBox[DiskBox[{5.87934018972531, -0.9549073840867875}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$3"], 
          InsetBox["\<\"Asher Wolfson\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$3", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$3"], 
        TagBox[{
          
          TagBox[DiskBox[{2.1084315591449543`, -4.7492922808847435`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$4"], 
          InsetBox["\<\"Ben Eisenberg\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$4", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$4"], 
        TagBox[{
          
          TagBox[DiskBox[{4.10537449636252, -4.7492922808847435`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$5"], 
          InsetBox["\<\"Bodhi Naik\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$5", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$5"], 
        TagBox[{
          
          TagBox[DiskBox[{4.928960325789008, -0.9578143529332571}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$6"], 
          InsetBox["\<\"Cameron Reilly\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$6", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$6"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{2.737354898544207, -4.526315037029969}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$7"], 
          InsetBox["\<\"Cooper\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$7", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$7"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{3.296784367692174, -1.7719938358168827`}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$8"], 
          InsetBox["\<\"Cooper & Brother Renza\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$8", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$8"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809264221743856, -2.028549451507762}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$9"], 
          InsetBox["\<\"David Miller\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$9", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$9"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -2.255278020622514}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$10"], 
          InsetBox["\<\"Eli Steiger\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$10", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$10"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{3.7405662661171113`, -0.958709661669429}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$11"], 
          InsetBox["\<\"Eli Wahl\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$11", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$11"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{5.809952990556426, -2.0285494515077653`}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$12"], 
          InsetBox["\<\"Evan Henry\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$12", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$12"], 
        TagBox[{
          
          TagBox[DiskBox[{1.1766433164590522`, -0.9703238847624374}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$13"], 
          InsetBox["\<\"Jamie Voorheis\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$13", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$13"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{3.517589022262336, -0.8562697156639394}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$14"], 
          InsetBox["\<\"Jamie Vorhees\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$14", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$14"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -2.4820065897372623`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$15"], 
          InsetBox["\<\"Jonathan Bador\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$15", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$15"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -2.7087351588520105`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$16"], 
          InsetBox["\<\"Josh Boyman\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$16", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$16"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{3.809953465285995, -2.0285494515077653`}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$17"], 
          InsetBox["\<\"Leif Abrahamsson\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$17", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$17"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{1.378988475097596, -2.8655868565427154`}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$18"], 
          InsetBox["\<\"Luka Djunic\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$18", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$18"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -2.935463727966759}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$19"], 
          InsetBox["\<\"Matan Renas\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$19", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$19"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -3.162192297081507}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$20"], 
          InsetBox["\<\"Max Markus\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$20", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$20"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -3.3889208661962553`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$21"], 
          InsetBox["\<\"Noah Gaffen\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$21", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$21"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{0.5517595397102666, -0.11148862192738784`}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$22"], 
          InsetBox["\<\"Olive O'Boyle\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$22", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$22"], 
        TagBox[{
          
          TagBox[DiskBox[{1.6461306251914383`, -1.8418292264761003`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$23"], 
          InsetBox["\<\"Oliver OBoyle\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$23", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$23"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{2.9057742813666905`, -0.13846911837294051`}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$24"], 
          InsetBox["\<\"Oliver O\[CloseCurlyQuote]Boyle\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$24", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$24"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -3.6156494353110036`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$25"], 
          InsetBox["\<\"Otis Lerner\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$25", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$25"], 
        TagBox[{
          
          TagBox[DiskBox[{2.462877998740288, -1.1051478434042483`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$26"], 
          InsetBox["\<\"Patrick Dere\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$26", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$26"], 
        TagBox[{
          
          TagBox[DiskBox[{1.038265439460257, -3.8081586253835504`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$27"], 
          InsetBox["\<\"Pierce Ravener\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$27", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$27"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{0.11148862192738784`, -3.807728102828518}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$28"], 
          InsetBox["\<\"Pierce Ravner\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$28", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$28"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{1.7716246180734607`, -1.229365176702587}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$29"], 
          InsetBox["\<\"Ryan Golden\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$29", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$29"], 
        TagBox[{
          
          TagBox[DiskBox[{2.1232953273000055`, -3.8081931656857164`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$30"], 
          InsetBox["\<\"Ryan Shapiro\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$30", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$30"], 
        TagBox[{
          
          TagBox[DiskBox[{5.576214844517057, -1.8018208823930137`}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$31"], 
          InsetBox["\<\"Tate Waldman\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$31", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$31"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -3.842378004425752}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$32"], 
          InsetBox["\<\"Tiger Zhang\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$32", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$32"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{0.11148862192738784`, -1.0433930948081578`}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$33"], 
          InsetBox["\<\"William Dolan\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$33", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$33"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -4.0691065735405}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$34"], 
          InsetBox["\<\"Zachary Renza\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$34", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$34"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{5.570995539494528, -0.11148862192738762`}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$35"], 
          InsetBox["\<\"Zach Cohen\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$35", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$35"], 
        TagBox[{
          TagBox[
           {RGBColor[1, 0, 0], 
            DiskBox[{2.7363782393026552`, -3.0885641003974906`}, 
             0.04726652717507712]},
           "DynamicName",
           BoxID -> "VertexID$36"], 
          InsetBox["\<\"Zach Renza\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$36", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$36"], 
        TagBox[{
          
          TagBox[DiskBox[{4.809953227921211, -4.522563711769997}, 
            0.04726652717507712],
           "DynamicName",
           BoxID -> "VertexID$37"], 
          InsetBox["\<\"Zack Cohen\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$37", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$37"]}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->"NetworkGraphics",
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->1500]], "Output",
 CellChangeTimes->{
  3.9300977934326057`*^9, 3.9300979536952877`*^9, 3.930098020414639*^9, 
   3.930098056356743*^9, {3.930098091316448*^9, 3.930098112706135*^9}, {
   3.930098387104546*^9, 3.930098416819357*^9}, 3.93010027376045*^9, 
   3.930100315478376*^9, 3.930100346720332*^9, 3.930100756344947*^9, 
   3.9301040342327423`*^9, 3.930104254889499*^9, 3.930141540427821*^9, 
   3.930141682052408*^9, 3.9301418068907557`*^9, 3.930141957888031*^9, 
   3.930315630704121*^9, 3.934033315299695*^9, 3.934287127946033*^9, 
   3.934287642529685*^9, 3.934290729987777*^9, {3.9342908041996*^9, 
   3.9342908296464376`*^9}, 3.934291448663176*^9, 3.93429250558127*^9, 
   3.934293173731438*^9, {3.9342932381812553`*^9, 3.934293240619479*^9}, 
   3.934293558650704*^9, {3.937496890100165*^9, 3.937496904739406*^9}, 
   3.937497611917552*^9, 3.937498300549631*^9, {3.9374985664363117`*^9, 
   3.937498580723881*^9}, 3.937499226850854*^9, 3.937501036047284*^9, 
   3.937511636011146*^9, 3.937512054441648*^9, 3.937515874673463*^9, 
   3.937516077036887*^9, 3.937516342885673*^9, 3.937516691855322*^9, {
   3.9375169442327023`*^9, 3.937516951623281*^9}, 3.9375170110115347`*^9, 
   3.9375171692649*^9},
 CellLabel->"Out[344]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzsfQnYZUdRaHOXf5mZTEgmJCSGZJJMJpNJAEEFN8wRFNmCCIJEQAgCsouK
S9QHR59x1+euuCsaQPYIiKBeUHHFLW4sLqCICkFABUWQ//1d1dVd1V29nXsn
8t6X+33/+e89p7v2ru7T3VV99bXPfOLjn3btM5/0xdce/Zwvv/YZT3zSF3/F
0Xt/6Zfv35rfxpiDrzZm91uPmsX+9z1jNnD5DWNurX1r7Vtr31r71tq31r61
9q21b619a+1ba99a+9ba/6/Wvhquiyv3L9fs/13v/uY32ov9Zub2/pXGqNh+
D27Oqbr9MzMJYHZlWu3318P6arx7P8BmC86g4pvOP3rJ8uYTV9zVbNmvb7jt
GUfs340OukLHGwDOkui40f3ZWmZmYWxJcFSgBK5MUAXCq5Cz+8B1i9NkAVhQ
e1c/9NrZ3pO/8pvMYu+bf+D5e899xRvpb25vzKAAIJ1bhNeTWiJMrzdezNc7
FMiyme/d5W73sBgAy8wCnUvwBpiKZatj8ExY2PYPoG+IiVeguO4tMdkaHtM+
ksMWrtkCTPtwOe2KCn4VgXGbSIFtEzB72z4uCeJXC4LoJu9GZPmzg/oIpgGJ
ngnQljG06xW6XgswlhqX5ogEQyxqSnhtIMViAq31kvJy5OpeSNGVGkVnO2jW
MJ3QcwJH/7C4noPZr3YOQFjYr5wWtfLaNLwUObonkiJkvC+L8xwpTCyKrl+Z
IWVfoObcVEE5Ul7ZREPG3l6CfHwmwhCk7Evh/CBSS5nl45oUxi8qlfex3iEQ
QPalEBBVBh8oMRP1CuYXI/WDTv0FKfXZFgfdElU0F0LNuf1OpOvVErovSOlW
cL6I0x1QW997NKC2ROdbE1SzPEG1i1w1ZiuFatTTcGy5ao7WqxSkF0ukmvfA
duIdGVS7xFXbZy/ndF6qSKYB2wuR1s8IugFaXaNieHMAXqxo1deEzqxgyi+u
oqUGFNf8BU530JA1xWPSHjRTfHGkGlvtUqnYPK9QzXtAho3MN0PrPbC2Z9Zq
6HhdwC8M1UDA937gw81ldXtg1bw9NGB7gaDVy9U62ON1ub4wkqutdlm9wbBq
3p03YHO0froi1xOtnM654ZrLpVy1voNV83JtwPZ8Qauw1xOS0wKtwpVcXrfX
F5SxtdF6I9fK5bJlmmztOXcG5iRW8z1Dvhp3A7E6tGrPw7ufFrTiBXRSakVT
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
tZIDCvcleZ4UrCUwl/LzrYHPWKg8cyglUlX4/PwKjfjGiedPnRukeAegccHp
U9ITvjkwmEnQqmepfUiFqAfqRF3oiLpBCi2q/JehciX7reTowU1E4aEKVzlb
uwgomnOK4mp/oZNTTSX8eRVyrg7kgPlbR3mJI+c6lJuWbvXPWTXl+DglIXON
ENxyPefKMpc6Qq4OphNX+1OFkCiLdVTtQW2E3MgVdGldQTcFBSknsPGDBJNm
k6cFw23mvulb7VwWaMkJ5U+CUHLp0yMWGgnxVnuTJCQnlD/Garmz0xT6H1gh
hGVn9RK5vG4mfxTo1w5GUyTSSIiQyOVSIhohf8joV85YU+i/uo0QSDlvPZy9
eRIJ8WpRqv0Bo7/tSLMaIfdVVHMFEnLz0/OdkyOk47yyB7QRIlrNFfVW80ZF
NSclIRH9jYQIG2GE5MZBjJDGk8bWIeSmKiGi1WyekCvrxvr7BUL0czYaCfFe
fq+LkNwBYLc4IR2nUN1/AiHtNrJ5QiYa66khBMZGN3QRsnkb8e9XnJDrqg5t
863GnwbV6OLfGOhvPC6rRgjr9Lyxuk7PqiXXahghvtMrny/VSIhQzeV1G/mD
IMjGg646CKGhABFSUo0bj4hWUz7FqjYMuH9QjZfIZXWJ/FGg39tI+YiqRkKE
ai6TEikMFTvOn6oRwt4oPCGXymGANnj+k1Ct8XCp2pj1AYE1byOOENuKcjby
J4pEyidH1Qi5OlINe+sk1Wg28qeKRMqHUNXeax6oqOai+gjtzxSJVE+YaqMl
vOI7etqmK/48oqh+mlPtPdhN6fDZSqunOzSRg7Mn8oDv8oFNtfkBJHcppGMn
Ru3o4LymaaY3Bfl6d7eJKZTGWURqYblZxLcEeXPyqsct1SacUHA7V15+/9G4
jyXBmjZ0nU6IRwKlNN+Z85B/LQVJ7yjVA5Xa5uvm11x6v2fdeNn9RqDYhdb7
Q4841Tc49R8ODZZIbzkt568jvWVmRQtnOtVmRcnNOYauP77P0JbE6hmyZWGd
Yu7XLma4dnGDcZMbtlwrcziXDmcqJUcVNZypVJuTxr51SZzRH6jMbWiKjgU6
13UyuEhjv8Ha0ix3Zs07AYo/ISlmgh23RAriR0wFOF9Q4eR+OiegK9yTOu28
m382XkekhH229zmYWRZyRxbR+a/1E5hqfN3H4Wd87TMAV+4K1LpLVYNwsBMc
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
3D2Y1j44y+wm31gGu0yC3/RzgnjmYBZW4Cyzm7y+BnFZtDZBHOToMcQ9g7lX
gbNMR491b08j9+gsmT972H+77A890LgDg9ZjTbURb+D5cSPkJ9bw7+2U79gx
xLhRpRt95yz37MaDS2Uu8//cecKlF+5RN/7iZn1xLQH6LqPbjeV2F7fFZY43
u3Sz8j5XfZvp9zQqrpXBqDwBMsNn5Cmp2e1Tu3R/iWtxFFo6tFTmhvDviBtd
L7qvpV9LQ3v37JDHySEjUfGA/cXY6oJVuuGCuOE2JY30wcxw7649kZk49K2b
ANPHlTnWYFBmi5jDiOQUsFnnsOjmHBoRAVdEbRH7hgEBrwOe571c4hCkZs6R
QahIPrgqj62xodcLiP16V8q2gzA25GxwbSv7+RqBmFW38cbtvRvxIdCkaV8f
1H6kPbb/6BrtvaGV2TUp2+42UcOzseEo+yS0r6TKfE1tpPokveUyl/gfp8qO
HHYSfS0/CtK7z30VnYTcm7o5tbOFmhm7n5GrrNh/lKrk9yJlV0snsr6c6klm
mqai4j6yTEyD4t4Sk7U1tRWVlcn6Q19FXfe0JKJTK9c9PY816SJM21ZM2yOO
irZzE6KSttNy2lyRCYmfgJHb4ziWYE0x0dsq12s9V6NJ9jOifljHyPL08VkQ
zcgSV+ThNZb02uo5mCXbNUtiW7dLUB0VHncf5dPv+BEcSpdNOws+vXQ/MSnE
XALlmiCm3KYXQcmMh0Fm7CdJlgz5nIQnOQznLHYQ+Bn324mAgphbaeJJMeZL
Q5xrE1Daq+368Z2lMxJIMYgXSDvEgccquhVWNJjK2aFcF3TQZbTdFVq5TLRC
7oKMZFVJDwIr5Cb67ozSldHEijUl2gVWRLvBKnql7pePBe2sbkdEK8IgfDmi
fV2PGkgPwbRnNoDUYC0wibMa8cNcoG6laAw397BZuxyHdwPt2se0p5iQUF3P
kJ+ThMUmcGaiXcs9Fpa0H1dSgzMbkXxoDwMa5ib2A17Hpo4IXod5BOUZT/Bt
EJOQVvD5f3ec5MyqVmwqsWJnHb/oG2usaLCIUO6AZPie0MohwfDTNRcI3skl
Tj87AaUjVU4/9pb8AtKPk4BtbG/E9CHHgh90qDJyfU9SQNcyheJ+fdKBOaXH
O3JHIa+Zz87Aki5sLelC2DV1/XaMlaP9cJl28ipFvxAoZj1zD/cmz8sHWDcz
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\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"95927349-b5d2-4874-a3fe-1bbc36a2eba6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Registered", "Subsubsection",
 CellChangeTimes->{{3.930068993128759*^9, 
  3.930068994388998*^9}},ExpressionUUID->"44e1ce3d-048e-421a-aeb2-\
16dd40d5a778"],

Cell[BoxData[
 RowBox[{
  RowBox[{"selectRegistered", "[", 
   RowBox[{"reqs_", ",", " ", "names_"}], "]"}], ":=", " ", 
  RowBox[{"Select", "[", 
   RowBox[{"reqs", ",", " ", 
    RowBox[{
     RowBox[{"MemberQ", "[", 
      RowBox[{"names", ",", "#"}], "]"}], "&"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.922414977018982*^9, 3.922415083661622*^9}, {
   3.92241531166252*^9, 3.922415313982171*^9}, {3.92241552424712*^9, 
   3.922415526699896*^9}, 3.922422797974161*^9, 3.922422845622081*^9, {
   3.930062157943814*^9, 3.930062158165831*^9}, {3.930097355202425*^9, 
   3.930097356799556*^9}},
 CellLabel->
  "In[156]:=",ExpressionUUID->"123b7703-e6e5-4d5b-9fe3-082e4d9f293f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"reg", " ", "=", " ", 
   RowBox[{"splitds", "[", 
    RowBox[{"All", ",", "  ", 
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "->", "#Name"}], ",", " ", 
        RowBox[{"\"\<Request\>\"", "->", 
         RowBox[{"selectRegistered", "[", 
          RowBox[{"#Request", ",", " ", "names"}], "]"}]}]}], "|>"}], "&"}]}],
     "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.930097535480268*^9, 3.930097536896796*^9}, {
  3.930097635357794*^9, 3.930097662654263*^9}},
 CellLabel->
  "In[438]:=",ExpressionUUID->"eccd3def-b701-41fc-b30b-7a36b36b92ed"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gReg", " ", "=", "  ", 
  RowBox[{"getGraph", "[", 
   RowBox[{"reg", ",", " ", 
    RowBox[{"ImageSize", "->", "Large"}], ",", " ", 
    RowBox[{"\"\<Label\>\"", "->", "Automatic"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.922415734132349*^9, 3.922415749899654*^9}, {
  3.922416775830505*^9, 3.922416813246863*^9}, {3.9224168433347178`*^9, 
  3.922416847981827*^9}, {3.922422814027629*^9, 3.922422851519073*^9}, {
  3.930072616551384*^9, 3.9300726196971684`*^9}, {3.9300726774323463`*^9, 
  3.930072685238549*^9}, {3.930081635093054*^9, 3.930081635990734*^9}, {
  3.930081691096147*^9, 3.930081715485694*^9}, {3.9300976792842827`*^9, 
  3.930097679822175*^9}},
 CellLabel->
  "In[439]:=",ExpressionUUID->"b14f493e-7579-424b-860b-a0e5b0a9992f"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "aidan sofer", "alexander schulz", "chamberlin canter", "dylan tamchin",
        "eddie woolsey", "evan huang", "gavin ajiashvili", "graham kasner", 
       "grant leaf", "jack rechler", "jacob acker", "james brogadir", 
       "jesse edelson", "jordan bader", "lehan misra", "luke doyle-meek", 
       "Name", "nicky bloom", "noah edelman", "sam freeman", "spencer berk", 
       "tobias kirschner"}, {{{11, 21}, {14, 10}, {21, 13}, {21, 8}, {21, 
       12}, {21, 10}, {18, 6}, {12, 10}, {12, 14}, {20, 6}, {20, 18}, {8, 
       10}, {8, 14}, {22, 20}, {22, 6}, {22, 18}, {1, 13}}, Null}, {
      ImageSize -> Large, PerformanceGoal -> "Quality", VertexLabels -> {
         Placed["Name", Automatic]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.022151269468228964`], 
        ArrowBox[{
         DynamicLocation["VertexID$1", Automatic, Center], DynamicLocation[
          "VertexID$13", Automatic, Center]}], 
        ArrowBox[
         BezierCurveBox[{
          DynamicLocation["VertexID$8", Automatic, Center], {
           0.9077260493827162, -2.3422939506172837`}, {
           0.8410593827160495, -2.40896061728395}, {
           0.7694544444444447, -2.4805655555555557`}, {
           0.6929112345679013, -2.5571087654320985`}, {
           0.6114297530864199, -2.63859024691358}, {
           0.5250100000000001, -2.7250099999999997`}, {
           0.4473058571065055, -2.8120838544791775`}, {
           0.3919712062037996, -2.8955276401389365`}, {
           0.3590060472918824, -2.9753413569792744`}, {
           0.3484103803707538, -3.051525005000191}, {
           0.36018420544041385`, -3.124078584201688}, {
           0.39432752250086256`, -3.1930020945837647`}, {
           0.4508403315521, -3.25829553614642}, {
           0.529722632594126, -3.3199589088896553`}, {
           0.6309744256269407, -3.37799221281347}, {
           0.8655251017299285, -3.4952675508649635`}, {
           1.0829390969841988`, -3.603974548492099}, {
           1.2832164113897517`, -3.704113205694876}, {
           1.4663570449465868`, -3.7956835224732934`}, {
           1.6323609976547044`, -3.878685498827352}, DynamicLocation[
           "VertexID$10", Automatic, Center]}]], 
        ArrowBox[{
         DynamicLocation["VertexID$8", Automatic, Center], DynamicLocation[
          "VertexID$14", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$11", Automatic, Center], DynamicLocation[
          "VertexID$21", Automatic, Center]}], 
        ArrowBox[
         BezierCurveBox[{
          DynamicLocation["VertexID$12", Automatic, Center], {
           2.12501, -2.3422939506172837`}, {2.12501, -2.40896061728395}, {
           2.12501, -2.4805655555555557`}, {2.12501, -2.5571087654320985`}, {
           2.12501, -2.63859024691358}, {2.12501, -2.7250099999999997`}, {
           2.12501, -2.813898888888888}, {2.12501, -2.9027877777777773`}, {
           2.12501, -2.9916766666666668`}, {2.12501, -3.080565555555555}, {
           2.12501, -3.169454444444444}, {2.12501, -3.2583433333333334`}, {
           2.12501, -3.347232222222222}, {2.12501, -3.436121111111111}, {
           2.12501, -3.52501}, {2.12501, -3.611429753086419}, {
           2.12501, -3.6929112345679016`}, {2.12501, -3.7694544444444444`}, {
           2.12501, -3.8410593827160495`}, {2.12501, -3.907726049382716}, 
           DynamicLocation["VertexID$10", Automatic, Center]}]], 
        ArrowBox[{
         DynamicLocation["VertexID$12", Automatic, Center], DynamicLocation[
          "VertexID$14", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$14", Automatic, Center], DynamicLocation[
          "VertexID$10", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$18", Automatic, Center], DynamicLocation[
          "VertexID$6", Automatic, Center]}], 
        ArrowBox[
         BezierCurveBox[{
          DynamicLocation["VertexID$20", Automatic, Center], {
           4.37503, -1.342293950617284}, {4.37503, -1.4089606172839508`}, {
           4.37503, -1.4805655555555557`}, {4.37503, -1.5571087654320988`}, {
           4.37503, -1.6385902469135805`}, {4.37503, -1.7250100000000002`}, {
           4.37503, -1.8138988888888887`}, {4.37503, -1.9027877777777777`}, {
           4.37503, -1.9916766666666668`}, {4.37503, -2.080565555555556}, {
           4.37503, -2.1694544444444444`}, {4.37503, -2.2583433333333334`}, {
           4.37503, -2.3472322222222224`}, {4.37503, -2.4361211111111114`}, {
           4.37503, -2.52501}, {4.37503, -2.6114297530864192`}, {
           4.37503, -2.692911234567901}, {4.37503, -2.7694544444444453`}, {
           4.37503, -2.8410593827160495`}, {4.37503, -2.9077260493827164`}, 
           DynamicLocation["VertexID$6", Automatic, Center]}]], 
        ArrowBox[{
         DynamicLocation["VertexID$20", Automatic, Center], DynamicLocation[
          "VertexID$18", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$21", Automatic, Center], DynamicLocation[
          "VertexID$8", Automatic, Center]}], 
        ArrowBox[
         BezierCurveBox[{
          DynamicLocation["VertexID$21", Automatic, Center], {
           1.6469318021925992`, -1.3859709010962993`}, {
           1.8294017048148254`, -1.4772058524074123`}, {
           2.032667388266682, -1.5788386941333403`}, {
           2.256728852548169, -1.6908694262740838`}, {
           2.5015860976592856`, -1.8132980488296426`}, {
           2.7672391236000338`, -1.9461245618000165`}, {
           2.8423268384000266`, -1.9886066908049511`}, {
           2.9085807044000203`, -2.036548438619763}, {
           2.9660007216000155`, -2.089949805244452}, {
           3.0145868900000106`, -2.148810790679017}, {
           3.054339209600007, -2.21313139492346}, {
           3.085257680400004, -2.2829116179777795`}, {
           3.107342302400002, -2.3581514598419755`}, {
           3.1205930756000004`, -2.438850920516049}, {
           3.12501, -2.7250099999999997`}, {
           3.121518114660807, -2.8124525026231426`}, {
           3.111042458643229, -2.8970022327147955`}, {
           3.0935830319472646`, -2.978659190274958}, {
           3.0691398345729146`, -3.0574233753036277`}, {
           3.03771286652018, -3.133294787800808}, {
           2.9993021277890586`, -3.2062734277664973`}, {
           2.953907618379552, -3.2763592952006952`}, {
           2.9015293382916596`, -3.3435523901034028`}, {
           2.842167287525381, -3.407852712474619}, {
           2.7311589679212886`, -3.518861032078711}, {
           2.6279816924536257`, -3.6220383075463745`}, {
           2.5326354611223922`, -3.7173845388776083`}, {
           2.4451202739275866`, -3.8048997260724127`}, {
           2.3654361308692113`, -3.884583869130789}, DynamicLocation[
           "VertexID$10", Automatic, Center]}]], 
        ArrowBox[{
         DynamicLocation["VertexID$21", Automatic, Center], DynamicLocation[
          "VertexID$12", Automatic, Center]}], 
        ArrowBox[{
         DynamicLocation["VertexID$21", Automatic, Center], DynamicLocation[
          "VertexID$13", Automatic, Center]}], 
        ArrowBox[
         BezierCurveBox[{
          DynamicLocation["VertexID$22", Automatic, Center], {
           4.6154561308692115`, -0.3654361308692111}, {
           4.695140273927587, -0.4451202739275868}, {
           4.782655461122392, -0.5326354611223916}, {
           4.878001692453625, -0.6279816924536256}, {
           4.981178967921289, -0.7311589679212888}, {
           5.09218728752538, -0.8421672875253811}, {
           5.151549338291657, -0.9064676098965972}, {
           5.20392761837955, -0.9736607047993046}, {
           5.249322127789058, -1.043746572233503}, {
           5.287732866520178, -1.1167252121991917`}, {
           5.319159834572914, -1.1925966246963715`}, {
           5.343603031947264, -1.2713608097250424`}, {
           5.361062458643229, -1.353017767285204}, {
           5.371538114660807, -1.4375674973768566`}, {
           5.37503, -1.7250100000000002`}, {
           5.371538114660805, -1.8124525026231433`}, {
           5.361062458643228, -1.897002232714796}, {
           5.343603031947264, -1.978659190274958}, {
           5.319159834572914, -2.0574233753036286`}, {
           5.287732866520178, -2.1332947878008084`}, {
           5.249322127789059, -2.2062734277664973`}, {
           5.20392761837955, -2.2763592952006952`}, {
           5.151549338291659, -2.3435523901034028`}, {
           5.09218728752538, -2.407852712474619}, {
           4.981178967921287, -2.518861032078711}, {
           4.878001692453625, -2.6220383075463745`}, {
           4.782655461122392, -2.7173845388776092`}, {
           4.695140273927587, -2.8048997260724136`}, {
           4.615456130869211, -2.8845838691307892`}, DynamicLocation[
           "VertexID$6", Automatic, Center]}]], 
        ArrowBox[
         BezierCurveBox[{
          DynamicLocation["VertexID$22", Automatic, Center], {
           4.134603869130789, -0.3654361308692111}, {
           4.054919726072413, -0.4451202739275868}, {
           3.9674045388776085`, -0.5326354611223916}, {
           3.872058307546374, -0.6279816924536256}, {
           3.768881032078711, -0.7311589679212888}, {
           3.6578727124746186`, -0.8421672875253811}, {
           3.59851066170834, -0.9064676098965972}, {
           3.5461323816204486`, -0.9736607047993046}, {
           3.5007378722109417`, -1.043746572233503}, {
           3.4623271334798207`, -1.1167252121991917`}, {
           3.4309001654270848`, -1.1925966246963715`}, {
           3.4064569680527352`, -1.2713608097250424`}, {
           3.388997541356771, -1.353017767285204}, {
           3.3785218853391927`, -1.4375674973768566`}, {
           3.3750299999999998`, -1.52501}, {
           3.3750299999999993`, -1.6114297530864197`}, {
           3.3750299999999998`, -1.6929112345679012`}, {
           3.3750300000000006`, -1.7694544444444447`}, {
           3.3750299999999998`, -1.8410593827160495`}, {
           3.3750299999999998`, -1.9077260493827162`}, DynamicLocation[
           "VertexID$18", Automatic, Center]}]], 
        ArrowBox[{
         DynamicLocation["VertexID$22", Automatic, Center], DynamicLocation[
          "VertexID$20", Automatic, Center]}]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
        TagBox[{
          
          TagBox[DiskBox[{0.12501000000000007`, -1.1250099999999996`}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$1"], 
          InsetBox["\<\"aidan sofer\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$1", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$1"], 
        TagBox[{
          
          TagBox[DiskBox[{4.708376666666666, -4.37511}, 0.040610956042012675],
           
           "DynamicName",
           BoxID -> "VertexID$2"], 
          InsetBox["\<\"alexander schulz\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$2", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$2"], 
        TagBox[{
          
          TagBox[DiskBox[{4.375029999999999, -3.37503}, 0.040610956042012675],
           
           "DynamicName",
           BoxID -> "VertexID$3"], 
          InsetBox["\<\"chamberlin canter\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$3", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$3"], 
        TagBox[{
          
          TagBox[DiskBox[{4.375029999999999, -3.6250500000000003`}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$4"], 
          InsetBox["\<\"dylan tamchin\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$4", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$4"], 
        TagBox[{
          
          TagBox[DiskBox[{4.375029999999999, -3.8750700000000005`}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$5"], 
          InsetBox["\<\"eddie woolsey\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$5", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$5"], 
        TagBox[{
          TagBox[DiskBox[{4.37503, -3.12501}, 0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$6"], 
          InsetBox["\<\"evan huang\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$6", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$6"], 
        TagBox[{
          
          TagBox[DiskBox[{4.375029999999999, -4.12509}, 0.040610956042012675],
           
           "DynamicName",
           BoxID -> "VertexID$7"], 
          InsetBox["\<\"gavin ajiashvili\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$7", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$7"], 
        TagBox[{
          
          TagBox[DiskBox[{1.12501, -2.1250099999999996`}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$8"], 
          InsetBox["\<\"graham kasner\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$8", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$8"], 
        TagBox[{
          
          TagBox[DiskBox[{0.12501000000000007`, -4.37511}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$9"], 
          InsetBox["\<\"grant leaf\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$9", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$9"], 
        TagBox[{
          TagBox[DiskBox[{2.12501, -4.12501}, 0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$10"], 
          InsetBox["\<\"jack rechler\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$10", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$10"], 
        TagBox[{
          
          TagBox[DiskBox[{1.12501, -0.12500999999999962`}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$11"], 
          InsetBox["\<\"jacob acker\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$11", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$11"], 
        TagBox[{
          
          TagBox[DiskBox[{2.12501, -2.1250099999999996`}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$12"], 
          InsetBox["\<\"james brogadir\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$12", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$12"], 
        TagBox[{
          
          TagBox[DiskBox[{0.12501000000000007`, -2.1250099999999996`}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$13"], 
          InsetBox["\<\"jesse edelson\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$13", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$13"], 
        TagBox[{
          
          TagBox[DiskBox[{1.12501, -3.1250099999999996`}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$14"], 
          InsetBox["\<\"jordan bader\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$14", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$14"], 
        TagBox[{
          
          TagBox[DiskBox[{1.0416833333333337`, -4.37511}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$15"], 
          InsetBox["\<\"lehan misra\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$15", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$15"], 
        TagBox[{
          
          TagBox[DiskBox[{1.958356666666667, -4.37511}, 0.040610956042012675],
           
           "DynamicName",
           BoxID -> "VertexID$16"], 
          InsetBox["\<\"luke doyle-meek\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$16", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$16"], 
        TagBox[{
          
          TagBox[DiskBox[{2.8750300000000006`, -4.37511}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$17"], 
          InsetBox["\<\"Name\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$17", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$17"], 
        TagBox[{
          
          TagBox[DiskBox[{3.3750299999999998`, -2.12501}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$18"], 
          InsetBox["\<\"nicky bloom\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$18", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$18"], 
        TagBox[{
          
          TagBox[DiskBox[{3.791703333333334, -4.37511}, 0.040610956042012675],
           
           "DynamicName",
           BoxID -> "VertexID$19"], 
          InsetBox["\<\"noah edelman\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$19", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$19"], 
        TagBox[{
          TagBox[DiskBox[{4.37503, -1.12501}, 0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$20"], 
          InsetBox["\<\"sam freeman\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$20", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$20"], 
        TagBox[{
          
          TagBox[DiskBox[{1.12501, -1.1250099999999996`}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$21"], 
          InsetBox["\<\"spencer berk\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$21", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$21"], 
        TagBox[{
          
          TagBox[DiskBox[{4.37503, -0.12501000000000007`}, 
            0.040610956042012675],
           "DynamicName",
           BoxID -> "VertexID$22"], 
          InsetBox["\<\"tobias kirschner\"\>", 
           Offset[{2, 2}, DynamicLocation[
            "VertexID$22", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
           BaseStyle->"Graphics"]},
         "DynamicName",
         BoxID -> "VertexLabelID$22"]}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->"NetworkGraphics",
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->Large]], "Output",
 CellChangeTimes->{3.930098428281377*^9, 3.930100286524488*^9, 
  3.930100772101077*^9, 3.93010407348497*^9, 3.9301415579218903`*^9, 
  3.93014170273619*^9, 3.9301418281692047`*^9, 3.9301419795202436`*^9},
 CellLabel->
  "Out[439]=",ExpressionUUID->"1495d270-b079-4156-b6e5-a2a7d26140db"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Teams", "Subsubsection",
 CellChangeTimes->{{3.930068999540803*^9, 
  3.930068999992601*^9}},ExpressionUUID->"0a7d2539-62f9-4143-ad98-\
c1bac9483d90"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getTeamSizes", "[", "numTeams_", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"pPerTeam", ",", " ", "teamsWithMore"}], "}"}], ",", " ", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pPerTeam", " ", "=", " ", 
      RowBox[{"Floor", "[", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"VertexList", "[", "gReg", "]"}], "]"}], " ", "/", " ", 
        "numTeams"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"teamsWithMore", " ", "=", " ", 
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"VertexList", "[", "gReg", "]"}], "]"}], ",", " ", 
        "numTeams"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"pPerTeam", "+", " ", "1"}], ",", " ", "teamsWithMore"}], 
        "]"}], ",", " ", 
       RowBox[{"Table", "[", 
        RowBox[{"pPerTeam", ",", " ", 
         RowBox[{"numTeams", " ", "-", " ", "teamsWithMore"}]}], "]"}]}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.922418969351949*^9, 3.922418979708234*^9}, {
  3.922419047693832*^9, 3.922419107504983*^9}, {3.922422934312421*^9, 
  3.9224229491815157`*^9}},
 CellLabel->
  "In[157]:=",ExpressionUUID->"2a04f885-7d90-4845-8ea8-e33e60ce9835"],

Cell[BoxData[
 RowBox[{
  RowBox[{"numTeams", " ", "=", " ", "5"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.930085828233677*^9, 3.93008583777358*^9}, {
  3.930086463362867*^9, 3.9300864634251738`*^9}},
 CellLabel->
  "In[158]:=",ExpressionUUID->"be163b4f-9d58-4243-8a2f-16c2c1fea5c7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getTeams", "[", 
     RowBox[{"graph_", ",", " ", "n_"}], "]"}], ":=", " ", 
    RowBox[{"FindGraphPartition", "[", 
     RowBox[{"graph", ",", " ", 
      RowBox[{"getTeamSizes", "[", "n", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"getCols", "[", 
   RowBox[{"graphParts_", ",", " ", 
    RowBox[{"n_", ":", 
     RowBox[{"-", "1"}]}]}], "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sizes", ",", " ", "num"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sizes", " ", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Length", ",", "graphParts", ",", 
        RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"num", " ", "=", " ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"n", " ", "==", " ", 
         RowBox[{"-", "1"}]}], ",", 
        RowBox[{"Length", "[", "sizes", "]"}], ",", " ", "n"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Transpose", "[", 
      RowBox[{"PadRight", "[", 
       RowBox[{"graphParts", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Max", "[", "sizes", "]"}], ",", " ", "num"}], "}"}], ",", 
        " ", "\"\<\>\""}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.93008554454577*^9, 3.930085682136593*^9}, {
  3.9300857230008903`*^9, 3.930085725269367*^9}, {3.93008576062078*^9, 
  3.930085780663268*^9}, {3.930085813789694*^9, 3.930085819132464*^9}, {
  3.9300858573277*^9, 3.9300858786146393`*^9}, {3.930086075069801*^9, 
  3.930086075647363*^9}, {3.930086271408422*^9, 3.930086357856481*^9}},
 CellLabel->
  "In[159]:=",ExpressionUUID->"a39e7e5a-8fe0-4bf8-9c9a-a84f3bf83e97"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"teams", " ", "=", " ", 
   RowBox[{"getTeams", "[", 
    RowBox[{"gReg", ",", " ", "numTeams"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"teamsGraph", " ", "=", " ", 
  RowBox[{"CommunityGraphPlot", "[", 
   RowBox[{"gReg", ",", " ", "teams"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"teamCols", " ", "=", 
   RowBox[{"getCols", "[", 
    RowBox[{"teams", ",", " ", "numTeams"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.922415874843866*^9, 3.922415878914591*^9}, {
   3.922415915259401*^9, 3.922415959135347*^9}, {3.92241600503097*^9, 
   3.922416042019672*^9}, {3.922416377033264*^9, 3.922416377120014*^9}, {
   3.9224164596524277`*^9, 3.92241645975718*^9}, {3.922416518661*^9, 
   3.92241658294656*^9}, {3.922416638599646*^9, 3.922416701446578*^9}, {
   3.922417060652542*^9, 3.922417068494447*^9}, {3.922417220202009*^9, 
   3.922417263401599*^9}, {3.922419135957745*^9, 3.92241915860145*^9}, {
   3.922421936108728*^9, 3.9224219953809547`*^9}, {3.9224228998556767`*^9, 
   3.922422912308282*^9}, {3.922422973234919*^9, 3.922422989499384*^9}, {
   3.93007263558692*^9, 3.930072639927307*^9}, 3.9300817682076187`*^9, {
   3.930085909531708*^9, 3.930085930125102*^9}, {3.930085960247943*^9, 
   3.9300859883707733`*^9}, 3.930086039875156*^9, 3.9300864948866577`*^9, {
   3.930100056182447*^9, 3.9301000625700817`*^9}, {3.930104094280158*^9, 
   3.930104100483006*^9}},
 CellLabel->
  "In[440]:=",ExpressionUUID->"f233b003-34a1-414e-9f95-055e3ccc63f6"],

Cell[BoxData[
 GraphicsBox[{{
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{3.700192661534055, -1.122963761763612}, {
       3.1694361337565815`, -1.1239940659889611`}, {-0.024300796008782058`, \
-2.4520166284440092`}, {-0.024300796008782058`, -2.666595391367789}, {
       2.7723865677940807`, -3.2738558976893346`}, {
       3.8073027792025025`, -3.2738558976893346`}, {
       3.9147714244578347`, -1.337542524687391}, {
       3.9147714244578347`, -1.122963761763612}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{0.6752721285644089, -0.8278592505860277}, {
       1.251003302641794, -0.9496833553726615}, {
       1.4655820655655731`, -0.9496833553726615}, {
       1.4744734821020862`, -0.290865304806969}, {
       1.4744734821020862`, -0.07628654188318966}, {0.887474204611585, 
       0.024300796008782058`}, {0.6728954416878056, 0.024300796008782058`}, {
       0.6728954416878056, -0.19027796691499727`}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{1.4051574869863435`, -3.2738558976893346`}, {
       3.533856963040955, -3.2738558976893346`}, {
       3.533856963040955, -3.059277134765555}, {
       1.4051574869863435`, -3.059277134765555}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{-0.007598510434118591, -2.6179937993502245`}, \
{-0.024300796008782224`, -3.4838581359159386`}, {-0.024300796008782224`, \
-3.6984368988397183`}, {0.8415634938493001, -3.715139233104665}, {
       1.0561422567730794`, -3.715139233104665}, {
       1.072844617587028, -2.8492749183308166`}, {
       1.072844617587028, -2.634696155407037}, {
       0.20698025248966073`, -2.6179937993502245`}}, SplineClosed -> 
       True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{1.131711670824796, -3.2738558976893346`}, {
       3.2604111468794077`, -3.2738558976893346`}, {
       3.2604111468794077`, -3.059277134765555}, {
       1.131711670824796, -3.059277134765555}}, SplineClosed -> True]]}}, 
   NamespaceBox[{
     {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.023640157628009775`], 
      ArrowBox[{
       DynamicLocation["VertexID$1", Automatic, Center], DynamicLocation[
        "VertexID$13", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$8", Automatic, Center], DynamicLocation[
        "VertexID$10", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$8", Automatic, Center], DynamicLocation[
        "VertexID$14", Automatic, Center]}], 
      ArrowBox[BezierCurveBox[{
        DynamicLocation["VertexID$11", Automatic, Center], {
         1.599465958777763, -1.6320695399864742`}, {
         1.5190748672197365`, -1.3688443512945732`}, {
         1.4386837756617101`, -1.1056191626026726`}, DynamicLocation[
         "VertexID$21", Automatic, Center]},
        SplineDegree->2]], 
      ArrowBox[{
       DynamicLocation["VertexID$12", Automatic, Center], DynamicLocation[
        "VertexID$10", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$12", Automatic, Center], DynamicLocation[
        "VertexID$14", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$14", Automatic, Center], DynamicLocation[
        "VertexID$10", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$18", Automatic, Center], DynamicLocation[
        "VertexID$6", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$20", Automatic, Center], DynamicLocation[
        "VertexID$6", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$20", Automatic, Center], DynamicLocation[
        "VertexID$18", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$21", Automatic, Center], DynamicLocation[
        "VertexID$8", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$21", Automatic, Center], DynamicLocation[
        "VertexID$10", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$21", Automatic, Center], DynamicLocation[
        "VertexID$12", Automatic, Center]}], 
      ArrowBox[BezierCurveBox[{
        DynamicLocation["VertexID$21", Automatic, Center], {
         1.4386837756617101`, -1.1056191626026726`}, {
         1.5190748672197365`, -1.3688443512945732`}, {
         1.599465958777763, -1.6320695399864742`}, DynamicLocation[
         "VertexID$13", Automatic, Center]},
        SplineDegree->2]], 
      ArrowBox[{
       DynamicLocation["VertexID$22", Automatic, Center], DynamicLocation[
        "VertexID$6", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$22", Automatic, Center], DynamicLocation[
        "VertexID$18", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$22", Automatic, Center], DynamicLocation[
        "VertexID$20", Automatic, Center]}]}, 
     {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{3.807482042995945, -1.2302531432255015`}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$1"], 
        InsetBox["\<\"aidan sofer\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$1", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$1"], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{3.7000133977406127`, -3.166566516227445}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$2"], 
        InsetBox["\<\"alexander schulz\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$2", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$2"], 
      TagBox[{
        TagBox[
         {Hue[0.2, 1, 0.6], EdgeForm[{Hue[0.2, 1, 0.6], Opacity[1]}], 
          DiskBox[{1.2390010522866857`, -3.166566516227445}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$3"], 
        InsetBox["\<\"chamberlin canter\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$3", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$3"], 
      TagBox[{
        TagBox[
         {Hue[0.8, 0.6, 0.8], EdgeForm[{Hue[0.8, 0.6, 0.8], Opacity[1]}], 
          DiskBox[{1.512446868448233, -3.166566516227445}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$4"], 
        InsetBox["\<\"dylan tamchin\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$4", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$4"], 
      TagBox[{
        TagBox[
         {Hue[0.8, 0.6, 0.8], EdgeForm[{Hue[0.8, 0.6, 0.8], Opacity[1]}], 
          DiskBox[{1.7858926846097805`, -3.166566516227445}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$5"], 
        InsetBox["\<\"eddie woolsey\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$5", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$5"], 
      TagBox[{
        TagBox[
         {Hue[0.07, 1, 1], EdgeForm[{Hue[0.07, 1, 1], Opacity[1]}], 
          DiskBox[{0.09969087102777108, -2.7252831808121143`}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$6"], 
        InsetBox["\<\"evan huang\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$6", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$6"], 
      TagBox[{
        TagBox[
         {Hue[0.2, 1, 0.6], EdgeForm[{Hue[0.2, 1, 0.6], Opacity[1]}], 
          DiskBox[{2.059338500771328, -3.166566516227445}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$7"], 
        InsetBox["\<\"gavin ajiashvili\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$7", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$7"], 
      TagBox[{
        TagBox[
         {Hue[0.14, 1, 0.9], EdgeForm[{Hue[0.14, 1, 0.9], Opacity[1]}], 
          DiskBox[{0.7825615100262986, -0.720569869124138}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$8"], 
        InsetBox["\<\"graham kasner\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$8", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$8"], 
      TagBox[{
        TagBox[
         {Hue[0.8, 0.6, 0.8], EdgeForm[{Hue[0.8, 0.6, 0.8], Opacity[1]}], 
          DiskBox[{2.3327843169328757`, -3.166566516227445}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$9"], 
        InsetBox["\<\"grant leaf\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$9", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$9"], 
      TagBox[{
        TagBox[
         {Hue[0.14, 1, 0.9], EdgeForm[{Hue[0.14, 1, 0.9], Opacity[1]}], 
          DiskBox[{1.0785584888653659`, -0.4550996562726879}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$10"], 
        InsetBox["\<\"jack rechler\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$10", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$10"], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{0.08298858545310761, -2.559306009905899}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$11"], 
        InsetBox["\<\"jacob acker\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$11", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$11"], 
      TagBox[{
        TagBox[
         {Hue[0.14, 1, 0.9], EdgeForm[{Hue[0.14, 1, 0.9], Opacity[1]}], 
          DiskBox[{1.3671841006401966`, -0.18357592334507933`}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$12"], 
        InsetBox["\<\"james brogadir\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$12", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$12"], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{3.2767255152184713`, -1.2312834474508507`}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$13"], 
        InsetBox["\<\"jesse edelson\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$13", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$13"], 
      TagBox[{
        TagBox[
         {Hue[0.14, 1, 0.9], EdgeForm[{Hue[0.14, 1, 0.9], Opacity[1]}], 
          DiskBox[{0.7801848231496953, -0.08298858545310761}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$14"], 
        InsetBox["\<\"jordan bader\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$14", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$14"], 
      TagBox[{
        TagBox[
         {Hue[0.2, 1, 0.6], EdgeForm[{Hue[0.2, 1, 0.6], Opacity[1]}], 
          DiskBox[{2.606230133094423, -3.166566516227445}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$15"], 
        InsetBox["\<\"lehan misra\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$15", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$15"], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{2.8796759492559705`, -3.166566516227445}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$16"], 
        InsetBox["\<\"luke doyle-meek\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$16", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$16"], 
      TagBox[{
        TagBox[
         {Hue[0.2, 1, 0.6], EdgeForm[{Hue[0.2, 1, 0.6], Opacity[1]}], 
          DiskBox[{3.153121765417518, -3.166566516227445}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$17"], 
        InsetBox["\<\"Name\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$17", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$17"], 
      TagBox[{
        TagBox[
         {Hue[0.07, 1, 1], EdgeForm[{Hue[0.07, 1, 1], Opacity[1]}], 
          DiskBox[{0.9655552361251385, -2.7419855368689268`}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$18"], 
        InsetBox["\<\"nicky bloom\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$18", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$18"], 
      TagBox[{
        TagBox[
         {Hue[0.8, 0.6, 0.8], EdgeForm[{Hue[0.8, 0.6, 0.8], Opacity[1]}], 
          DiskBox[{3.4265675815790653`, -3.166566516227445}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$19"], 
        InsetBox["\<\"noah edelman\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$19", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$19"], 
      TagBox[{
        TagBox[
         {Hue[0.07, 1, 1], EdgeForm[{Hue[0.07, 1, 1], Opacity[1]}], 
          DiskBox[{0.08298858545310744, -3.5911475173778284`}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$20"], 
        InsetBox["\<\"sam freeman\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$20", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$20"], 
      TagBox[{
        TagBox[
         {Hue[0.14, 1, 0.9], EdgeForm[{Hue[0.14, 1, 0.9], Opacity[1]}], 
          DiskBox[{1.3582926841036835`, -0.8423939739107718}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$21"], 
        InsetBox["\<\"spencer berk\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$21", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$21"], 
      TagBox[{
        TagBox[
         {Hue[0.07, 1, 1], EdgeForm[{Hue[0.07, 1, 1], Opacity[1]}], 
          DiskBox[{0.9488528753111898, -3.6078498516427753`}, 
           0.035219044968321525]},
         "DynamicName",
         BoxID -> "VertexID$22"], 
        InsetBox["\<\"tobias kirschner\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$22", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$22"]}}]},
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->Large]], "Output",
 CellChangeTimes->{{3.9300864404105253`*^9, 3.930086495183929*^9}, 
   3.930098436668727*^9, {3.930100033737588*^9, 3.9301000630463448`*^9}, 
   3.9301007805715017`*^9, 3.93010410087838*^9, 3.930141567062118*^9, 
   3.930141707338369*^9, 3.930141833852323*^9, 3.930141991777388*^9},
 CellLabel->
  "Out[441]=",ExpressionUUID->"9cc08048-1ee1-4408-adea-b63f4bb022ca"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Communities", "Subsubsection",
 CellChangeTimes->{{3.930069003434929*^9, 
  3.930069004806528*^9}},ExpressionUUID->"7c86e557-e65e-45a1-97cd-\
572f89ec3e6c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"coms", " ", "=", 
   RowBox[{"FindGraphCommunities", "[", "gReg", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"communityPlot", " ", "=", 
   RowBox[{"CommunityGraphPlot", "[", 
    RowBox[{"gReg", ",", " ", "coms"}], "]"}]}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"comCols", " ", "=", " ", 
   RowBox[{"getCols", "[", "coms", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.922417421621366*^9, 3.922417430336231*^9}, {
  3.922417462153316*^9, 3.922417464177959*^9}, {3.922419140911033*^9, 
  3.9224191439839087`*^9}, {3.922422009018695*^9, 3.9224220141375*^9}, {
  3.922422110783602*^9, 3.922422198387809*^9}, {3.930062557257971*^9, 
  3.930062572037343*^9}, {3.930081809337076*^9, 3.93008182414172*^9}, {
  3.93008599933138*^9, 3.930086088880046*^9}, {3.930086372839683*^9, 
  3.930086377880432*^9}, {3.930086427518816*^9, 3.9300864341114264`*^9}},
 CellLabel->
  "In[443]:=",ExpressionUUID->"957f24a2-1b1a-4956-bb16-d9ae6aca1e50"],

Cell[BoxData[
 GraphicsBox[{{
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{0.7665859733590787, -0.020657648134872267`}, {
       0.524134390770856, 0.044404408311267005`}, {0.2998939749177114, 
       0.044404408311267005`}, {
       0.07502831836651715, -0.04712497426359975}, {-0.044404408311267005`, \
-0.2124821043418284}, {-0.044404408311267005`, -0.436722520194973}, {
       0.6495904265047076, -0.9243804922499196}, {
       0.8738308423578521, -0.9243804922499196}, {
       0.8738308423578521, -0.700140076396775}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{-0.027702122736603316`, -0.8355716756273854}, \
{-0.04440440831126695, -1.7014360121930998`}, {-0.04440440831126695, \
-1.9256764280462442`}, {0.8214598815468154, -1.942378762311191}, {
       1.0457002973999598`, -1.942378762311191}, {
       1.0624026582139086`, -1.0765144475373425`}, {
       1.0624026582139086`, -0.852274031684198}, {
       0.19653829311654125`, -0.8355716756273854}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{3.9456745485473097`, -0.44440304024060706`}, {
       4.169914964400454, -0.44440304024060706`}, {
       4.169914964400454, -0.22016262438746248`}, {
       3.796989314215567, -0.12064631503144664`}, {
       3.572748898362422, -0.12064631503144664`}, {
       3.572748898362422, -0.3448867308845912}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{3.786293065467271, -1.5010954268958605`}, {
       4.010533481320415, -1.5010954268958605`}, {
       4.010533481320415, -1.2768550110427161`}, {
       3.786293065467271, -1.2768550110427161`}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{1.1329753246714147`, -1.5010954268958605`}, {
       1.357215740524559, -1.5010954268958605`}, {
       1.357215740524559, -1.2768550110427161`}, {
       1.1329753246714147`, -1.2768550110427161`}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{1.4277884069820652`, -1.5010954268958605`}, {
       1.6520288228352096`, -1.5010954268958605`}, {
       1.6520288228352096`, -1.2768550110427161`}, {
       1.4277884069820652`, -1.2768550110427161`}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{1.722601489292716, -1.5010954268958605`}, {
       1.9468419051458603`, -1.5010954268958605`}, {
       1.9468419051458603`, -1.2768550110427161`}, {
       1.722601489292716, -1.2768550110427161`}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{2.0174145716033665`, -1.5010954268958605`}, {
       2.2416549874565113`, -1.5010954268958605`}, {
       2.2416549874565113`, -1.2768550110427161`}, {
       2.0174145716033665`, -1.2768550110427161`}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{2.312227653914017, -1.5010954268958605`}, {
       2.536468069767162, -1.5010954268958605`}, {
       2.536468069767162, -1.2768550110427161`}, {
       2.312227653914017, -1.2768550110427161`}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{2.607040736224668, -1.5010954268958605`}, {
       2.8312811520778127`, -1.5010954268958605`}, {
       2.8312811520778127`, -1.2768550110427161`}, {
       2.607040736224668, -1.2768550110427161`}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{2.9018538185353187`, -1.5010954268958605`}, {
       3.1260942343884635`, -1.5010954268958605`}, {
       3.1260942343884635`, -1.2768550110427161`}, {
       2.9018538185353187`, -1.2768550110427161`}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{3.1966669008459694`, -1.5010954268958605`}, {
       3.420907316699114, -1.5010954268958605`}, {
       3.420907316699114, -1.2768550110427161`}, {
       3.1966669008459694`, -1.2768550110427161`}}, SplineClosed -> True]]}, 
    {EdgeForm[GrayLevel[0.5]], FaceForm[None], 
     FilledCurveBox[
      BSplineCurve[{{3.49147998315662, -1.5010954268958605`}, {
       3.715720399009765, -1.5010954268958605`}, {
       3.715720399009765, -1.2768550110427161`}, {
       3.49147998315662, -1.2768550110427161`}}, SplineClosed -> True]]}}, 
   NamespaceBox[{
     {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.02314633371356452], 
      ArrowBox[{
       DynamicLocation["VertexID$1", Automatic, Center], DynamicLocation[
        "VertexID$13", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$8", Automatic, Center], DynamicLocation[
        "VertexID$10", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$8", Automatic, Center], DynamicLocation[
        "VertexID$14", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$11", Automatic, Center], DynamicLocation[
        "VertexID$21", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$12", Automatic, Center], DynamicLocation[
        "VertexID$10", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$12", Automatic, Center], DynamicLocation[
        "VertexID$14", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$14", Automatic, Center], DynamicLocation[
        "VertexID$10", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$18", Automatic, Center], DynamicLocation[
        "VertexID$6", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$20", Automatic, Center], DynamicLocation[
        "VertexID$6", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$20", Automatic, Center], DynamicLocation[
        "VertexID$18", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$21", Automatic, Center], DynamicLocation[
        "VertexID$8", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$21", Automatic, Center], DynamicLocation[
        "VertexID$10", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$21", Automatic, Center], DynamicLocation[
        "VertexID$12", Automatic, Center]}], 
      ArrowBox[BezierCurveBox[{
        DynamicLocation["VertexID$21", Automatic, Center], {
         1.3879752816743496`, -0.38599146870250334`}, {
         2.1536065565458977`, -0.3349164867876752}, {
         2.9192378314174463`, -0.2838415048728471}, DynamicLocation[
         "VertexID$13", Automatic, Center]},
        SplineDegree->2]], 
      ArrowBox[{
       DynamicLocation["VertexID$22", Automatic, Center], DynamicLocation[
        "VertexID$6", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$22", Automatic, Center], DynamicLocation[
        "VertexID$18", Automatic, Center]}], 
      ArrowBox[{
       DynamicLocation["VertexID$22", Automatic, Center], DynamicLocation[
        "VertexID$20", Automatic, Center]}]}, 
     {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
      TagBox[{
        TagBox[
         {Hue[0.8, 0.6, 0.8], EdgeForm[{Hue[0.8, 0.6, 0.8], Opacity[1]}], 
          DiskBox[{4.057794756473882, -0.33228283231403477`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$1"], 
        InsetBox["\<\"aidan sofer\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$1", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$1"], 
      TagBox[{
        TagBox[
         {Hue[0.07, 1, 1], EdgeForm[{Hue[0.07, 1, 1], Opacity[1]}], 
          DiskBox[{3.8984132733938432`, -1.3889752189692883`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$2"], 
        InsetBox["\<\"alexander schulz\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$2", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$2"], 
      TagBox[{
        TagBox[
         {Hue[0.2, 1, 0.6], EdgeForm[{Hue[0.2, 1, 0.6], Opacity[1]}], 
          DiskBox[{1.2450955325979869`, -1.3889752189692883`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$3"], 
        InsetBox["\<\"chamberlin canter\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$3", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$3"], 
      TagBox[{
        TagBox[
         {Hue[0.1, 0.6, 0.7], EdgeForm[{Hue[0.1, 0.6, 0.7], Opacity[1]}], 
          DiskBox[{1.5399086149086374`, -1.3889752189692883`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$4"], 
        InsetBox["\<\"dylan tamchin\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$4", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$4"], 
      TagBox[{
        TagBox[
         {Hue[0.5, 1, 0.7], EdgeForm[{Hue[0.5, 1, 0.7], Opacity[1]}], 
          DiskBox[{1.8347216972192881`, -1.3889752189692883`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$5"], 
        InsetBox["\<\"eddie woolsey\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$5", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$5"], 
      TagBox[{
        TagBox[
         {Hue[0.14, 1, 0.9], EdgeForm[{Hue[0.14, 1, 0.9], Opacity[1]}], 
          DiskBox[{0.08441808518996896, -0.9476918835539577}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$6"], 
        InsetBox["\<\"evan huang\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$6", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$6"], 
      TagBox[{
        TagBox[
         {Hue[0.2, 1., 0.8], EdgeForm[{Hue[0.2, 1., 0.8], Opacity[1]}], 
          DiskBox[{2.129534779529939, -1.3889752189692883`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$7"], 
        InsetBox["\<\"gavin ajiashvili\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$7", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$7"], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{0.6544657654325065, -0.13277785606144454`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$8"], 
        InsetBox["\<\"graham kasner\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$8", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$8"], 
      TagBox[{
        TagBox[
         {Hue[1.8180339887498949`, 1., 0.8], EdgeForm[{Hue[
          1.8180339887498949`, 1., 0.8], Opacity[1]}], 
          DiskBox[{2.4243478618405896`, -1.3889752189692883`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$9"], 
        InsetBox["\<\"grant leaf\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$9", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$9"], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{0.4120141828442837, -0.06771579961530527}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$10"], 
        InsetBox["\<\"jack rechler\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$10", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$10"], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{0.7617106344312798, -0.8122602843233473}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$11"], 
        InsetBox["\<\"jacob acker\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$11", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$11"], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{0.18714852629308942`, -0.15924518219017203`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$12"], 
        InsetBox["\<\"james brogadir\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$12", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$12"], 
      TagBox[{
        TagBox[
         {Hue[0.8, 0.6, 0.8], EdgeForm[{Hue[0.8, 0.6, 0.8], Opacity[1]}], 
          DiskBox[{3.6848691062889944`, -0.23276652295801892`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$13"], 
        InsetBox["\<\"jesse edelson\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$13", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$13"], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{0.06771579961530527, -0.3246023122684007}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$14"], 
        InsetBox["\<\"jordan bader\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$14", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$14"], 
      TagBox[{
        TagBox[
         {Hue[3.43606797749979, 1., 0.8], EdgeForm[{Hue[
          3.43606797749979, 1., 0.8], Opacity[1]}], 
          DiskBox[{2.7191609441512403`, -1.3889752189692883`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$15"], 
        InsetBox["\<\"lehan misra\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$15", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$15"], 
      TagBox[{
        TagBox[
         {Hue[5.054101966249685, 1., 0.8], EdgeForm[{Hue[
          5.054101966249685, 1., 0.8], Opacity[1]}], 
          DiskBox[{3.013974026461891, -1.3889752189692883`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$16"], 
        InsetBox["\<\"luke doyle-meek\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$16", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$16"], 
      TagBox[{
        TagBox[
         {Hue[8.290169943749474, 1., 0.8], EdgeForm[{Hue[
          8.290169943749474, 1., 0.8], Opacity[1]}], 
          DiskBox[{3.308787108772542, -1.3889752189692883`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$17"], 
        InsetBox["\<\"Name\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$17", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$17"], 
      TagBox[{
        TagBox[
         {Hue[0.14, 1, 0.9], EdgeForm[{Hue[0.14, 1, 0.9], Opacity[1]}], 
          DiskBox[{0.9502824502873364, -0.9643942396107703}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$18"], 
        InsetBox["\<\"nicky bloom\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$18", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$18"], 
      TagBox[{
        TagBox[
         {Hue[9.908203932499369, 1., 0.8], EdgeForm[{Hue[
          9.908203932499369, 1., 0.8], Opacity[1]}], 
          DiskBox[{3.6036001910831925`, -1.3889752189692883`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$19"], 
        InsetBox["\<\"noah edelman\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$19", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$19"], 
      TagBox[{
        TagBox[
         {Hue[0.14, 1, 0.9], EdgeForm[{Hue[0.14, 1, 0.9], Opacity[1]}], 
          DiskBox[{0.06771579961530533, -1.813556220119672}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$20"], 
        InsetBox["\<\"sam freeman\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$20", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$20"], 
      TagBox[{
        TagBox[
         {Hue[0, 1, 0.8], EdgeForm[{Hue[0, 1, 0.8], Opacity[1]}], 
          DiskBox[{0.6223440068028012, -0.4370664506173315}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$21"], 
        InsetBox["\<\"spencer berk\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$21", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$21"], 
      TagBox[{
        TagBox[
         {Hue[0.14, 1, 0.9], EdgeForm[{Hue[0.14, 1, 0.9], Opacity[1]}], 
          DiskBox[{0.9335800894733877, -1.8302585543846188`}, 
           0.036942279631568015]},
         "DynamicName",
         BoxID -> "VertexID$22"], 
        InsetBox["\<\"tobias kirschner\"\>", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$22", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$22"]}}]},
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->Large]], "Output",
 CellChangeTimes->{3.930086434592781*^9, 3.9300984482041817`*^9, 
  3.9301007846043253`*^9, 3.9301041103723793`*^9, 3.930141584429847*^9, 
  3.930141711922782*^9, 3.9301418374543*^9, 3.9301419978545513`*^9},
 CellLabel->
  "Out[444]=",ExpressionUUID->"df80668a-1362-4840-a3b7-32686767167c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Save Graphs", "Section",
 CellChangeTimes->{{3.930063093092044*^9, 
  3.9300631010546217`*^9}},ExpressionUUID->"5b3affad-62ca-4cdd-a53b-\
ef51466f9e53"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"gnames", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"exportRepo", "<>", "#"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
     "\"\<allGraph.jpg\>\"", ",", "\"\<regGraph.jpg\>\"", ",", " ", 
      "\"\<teamGraph.jpg\>\"", ",", " ", "\"\<comGraph.jpg\>\""}], "}"}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"graphs", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "gAll", ",", "gReg", ",", " ", "teamsGraph", ",", " ", "communityPlot"}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{"MapThread", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Export", "[", 
     RowBox[{"#1", ",", " ", "#2", ",", " ", 
      RowBox[{"OverwriteTarget", "->", "False"}]}], "]"}], "&"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"gnames", ",", " ", "graphs"}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.930063124367483*^9, 3.9300631253922853`*^9}, 
   3.930063398360132*^9, {3.9300635315659733`*^9, 3.930063573439698*^9}, {
   3.930063792827013*^9, 3.9300639235574923`*^9}, {3.930063968367002*^9, 
   3.93006397384496*^9}, {3.93006402415947*^9, 3.9300641445630074`*^9}, {
   3.9300641762661743`*^9, 3.9300642185271473`*^9}, {3.9300642735583353`*^9, 
   3.9300642811377163`*^9}, 3.930064317866816*^9, {3.9300649487208443`*^9, 
   3.930064954478537*^9}, {3.930104184977412*^9, 3.930104195439245*^9}, {
   3.930104237109714*^9, 3.9301042385252743`*^9}, {3.9301416095314703`*^9, 
   3.930141610149703*^9}, {3.930141737289598*^9, 3.930141737879785*^9}, {
   3.930141864666266*^9, 3.930141865212788*^9}, {3.930142016681676*^9, 
   3.930142017283181*^9}},ExpressionUUID->"29257117-ac29-434b-8e5c-\
74f14add25b2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"/Users/erichegonzales/Projects/Wolfram/Fastbreak/Friend \
Request Graph/Output/FA24BSNY2nd3rdallGraph.jpg\"\>", 
   ",", "\<\"/Users/erichegonzales/Projects/Wolfram/Fastbreak/Friend Request \
Graph/Output/FA24BSNY2nd3rdregGraph.jpg\"\>", 
   ",", "\<\"/Users/erichegonzales/Projects/Wolfram/Fastbreak/Friend Request \
Graph/Output/FA24BSNY2nd3rdteamGraph.jpg\"\>", 
   ",", "\<\"/Users/erichegonzales/Projects/Wolfram/Fastbreak/Friend Request \
Graph/Output/FA24BSNY2nd3rdcomGraph.jpg\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.9301042269534082`*^9, 3.930104265152257*^9, {3.930141604418923*^9, 
   3.9301416116165447`*^9}, 3.930141731787331*^9, {3.9301418594936132`*^9, 
   3.930141866373795*^9}, 3.930142007131198*^9},
 CellLabel->
  "Out[448]=",ExpressionUUID->"72f3f20d-cf0d-41bb-9950-f3220978d338"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9301042986495333`*^9, 
  3.9301043001322317`*^9}},ExpressionUUID->"d2a78037-f9a5-47ce-aeb9-\
518b1fdf3a6c"]
}, Closed]],

Cell[CellGroupData[{

Cell["API", "Section",
 CellChangeTimes->{{3.922247285026002*^9, 3.922247299311673*^9}, {
  3.922484906193746*^9, 
  3.922484916198082*^9}},ExpressionUUID->"a627ebd1-b426-49cd-8d4d-\
999bb87c01cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getGraphGallery", "[", "form_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "rows", ",", "nteams", ",", "names", ",", " ", "split", ",", " ", "gAll",
       ",", "reg", ",", " ", "gReg", ",", " ", "teams", ",", " ", 
      "teamsGraph", ",", " ", "teamCols", ",", " ", "coms", ",", " ", 
      "comsGraph", ",", " ", "comCols", ",", " ", "downloadButton", ",", " ", 
      "gallery"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"rows", " ", "=", " ", 
      RowBox[{"toDataset", "[", 
       RowBox[{"form", "[", "\"\<Friend Request Data\>\"", "]"}], "]"}]}], 
     ";", " ", 
     RowBox[{"nteams", " ", "=", " ", 
      RowBox[{"form", "[", "\"\<Desired Number of Teams\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"names", " ", "=", " ", 
      RowBox[{"Normal", "@", 
       RowBox[{"rows", "[", 
        RowBox[{"All", ",", " ", "\"\<Name\>\""}], "]"}]}]}], ";", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"split", " ", "=", " ", 
      RowBox[{"rows", "[", 
       RowBox[{"All", ",", " ", 
        RowBox[{
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<Name\>\"", "->", "#Name"}], ",", " ", 
           RowBox[{"\"\<Request\>\"", "->", 
            RowBox[{"splitstring", "[", "#Request", "]"}]}]}], "|>"}], 
         "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"gAll", " ", "=", " ", 
      RowBox[{"getGraph", "[", 
       RowBox[{"split", ",", " ", 
        RowBox[{"ImageSize", "->", "1000"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"reg", " ", "=", " ", 
      RowBox[{"split", "[", 
       RowBox[{"All", ",", "  ", 
        RowBox[{
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<Name\>\"", "->", "#Name"}], ",", " ", 
           RowBox[{"\"\<Request\>\"", "->", 
            RowBox[{"selectRegistered", "[", 
             RowBox[{"#Request", ",", " ", "names"}], "]"}]}]}], "|>"}], 
         "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"gReg", " ", "=", "  ", 
      RowBox[{"getGraph", "[", 
       RowBox[{"reg", ",", " ", 
        RowBox[{"ImageSize", "->", "1000"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"teams", " ", "=", " ", 
      RowBox[{"getTeams", "[", 
       RowBox[{"gReg", ",", " ", "nteams"}], "]"}]}], ";", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"teamsGraph", " ", "=", " ", 
      RowBox[{"CommunityGraphPlot", "[", 
       RowBox[{"gReg", ",", " ", "teams"}], "]"}]}], ";", 
     RowBox[{"teamCols", " ", "=", 
      RowBox[{"getCols", "[", 
       RowBox[{"teams", ",", " ", "nteams"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"coms", " ", "=", 
      RowBox[{"FindGraphCommunities", "[", "gReg", "]"}]}], ";", " ", 
     RowBox[{"comsGraph", " ", "=", 
      RowBox[{"CommunityGraphPlot", "[", 
       RowBox[{"gReg", ",", " ", "coms"}], "]"}]}], ";", " ", 
     RowBox[{"comCols", " ", "=", " ", 
      RowBox[{"getCols", "[", "coms", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{"{", 
       RowBox[{"gAll", ",", " ", "gReg", ",", " ", "teamsGraph", ",", " ", 
        RowBox[{"TableForm", "@", "teamCols"}], ",", " ", "comsGraph", ",", 
        " ", 
        RowBox[{"TableForm", "@", "comCols"}]}], "}"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"gallery", " ", "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Content\>\"", "->", 
           RowBox[{"GraphPlot", "[", "gAll", "]"}]}], ",", 
          RowBox[{"\"\<Title\>\"", "->", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<All Requests (Above)\>\"", ",", " ", "Large"}], 
            "]"}]}], ",", 
          RowBox[{
          "\"\<Description\>\"", "->", 
           "\"\<A graph of all the requests from the given data with spell \
checking applied. The red dots are players that were requested but could not \
be found in the pool.\>\""}]}], "|>"}], ",", "\[IndentingNewLine]", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Content\>\"", "->", 
           RowBox[{"GraphPlot", "[", "gReg", "]"}]}], ",", " ", 
          RowBox[{"\"\<Title\>\"", "->", 
           RowBox[{"Style", "[", 
            RowBox[{
            "\"\<Registered Requests (Above)\>\"", ",", " ", "Large"}], 
            "]"}]}], ",", 
          RowBox[{
          "\"\<Description\>\"", "->", 
           "\"\<The same graph with players who could not be found in the \
pool removed, i.e. all the red dots.\>\""}]}], "|>"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Content\>\"", "->", "teamsGraph"}], ",", 
          RowBox[{"\"\<Title\>\"", "->", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<Teams Graph (Above)\>\"", ",", " ", "Large"}], 
            "]"}]}], ",", 
          RowBox[{
          "\"\<Description\>\"", "->", 
           "\"\<A graph of teams that were made based on given number of \
teams. The computer makes them based on how mutually requested players are, \
i.e. how close they are in the graph.\>\""}]}], "|>"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Content\>\"", "->", 
           RowBox[{"TableForm", "@", "teamCols"}]}], ",", 
          RowBox[{"\"\<Title\>\"", "->", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<Teams Table (Above)\>\"", ",", " ", "Large"}], 
            "]"}]}], ",", 
          RowBox[{
          "\"\<Description\>\"", "->", 
           "\"\<The teams shown in the above graph in table format\>\""}]}], 
         "|>"}], ",", "\[IndentingNewLine]", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Content\>\"", "->", "comsGraph"}], ",", 
          RowBox[{"\"\<Title\>\"", "->", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<Community Graph (Above)\>\"", ",", " ", "Large"}], 
            "]"}]}], ",", 
          RowBox[{
          "\"\<Description\>\"", "->", 
           "\"\<The computer groups the kids into communities based on mutual \
requests. Groups can have any number of kids and are not meant to be final \
teams\>\""}]}], "|>"}], ",", "\[IndentingNewLine]", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Content\>\"", "->", 
           RowBox[{"TableForm", "@", "comCols"}]}], ",", 
          RowBox[{"\"\<Title\>\"", "->", 
           RowBox[{"Style", "[", 
            RowBox[{"\"\<Communities Table (Above)\>\"", ",", " ", "Large"}], 
            "]"}]}], ",", 
          RowBox[{
          "\"\<Description\>\"", "->", 
           "\"\<The communities shown in the above graph in table \
format\>\""}]}], "|>"}]}], "\[IndentingNewLine]", "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"GalleryView", "[", 
      RowBox[{"gallery", ",", 
       RowBox[{"Pagination", "->", 
        RowBox[{"{", 
         RowBox[{"6", ",", " ", "1"}], "}"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.922488938345648*^9, 3.922488983480934*^9}, {
   3.9224890218008327`*^9, 3.922489076986082*^9}, {3.922490018013081*^9, 
   3.92249002252561*^9}, {3.922490491618051*^9, 3.92249050081208*^9}, {
   3.922490704954495*^9, 3.922490717860595*^9}, {3.922490796507977*^9, 
   3.922490798576602*^9}, {3.922492038957819*^9, 3.922492053280636*^9}, {
   3.922492465045866*^9, 3.922492478225456*^9}, {3.922494954320829*^9, 
   3.922495038441271*^9}, {3.922495180736292*^9, 3.922495200431719*^9}, 
   3.922495243562162*^9, {3.922497560611915*^9, 3.922497561373113*^9}, {
   3.922497769483747*^9, 3.9224978209132433`*^9}, {3.92252584011073*^9, 
   3.9225259268237133`*^9}, {3.922538560593741*^9, 3.922538564373801*^9}, {
   3.922538621615316*^9, 3.922538650879455*^9}, {3.922538748559197*^9, 
   3.922538753337873*^9}, {3.922538814916191*^9, 3.922538858996222*^9}, {
   3.922538912970598*^9, 3.9225389171138163`*^9}, {3.922538950125152*^9, 
   3.922538956084859*^9}, {3.9225389938372583`*^9, 3.922538999775919*^9}, {
   3.922539078381049*^9, 3.922539124350834*^9}, {3.922539697768222*^9, 
   3.922539720073035*^9}, {3.9225400457211742`*^9, 3.922540084375348*^9}, {
   3.9225402190821543`*^9, 3.9225402380540743`*^9}, {3.9225402842476254`*^9, 
   3.922540286779736*^9}, {3.9225403204951*^9, 3.922540322340231*^9}, {
   3.922540841197376*^9, 3.922540841722253*^9}, {3.9225420119545183`*^9, 
   3.922542068492525*^9}, 3.922542150653442*^9, {3.92254254017491*^9, 
   3.9225425450642138`*^9}, {3.9225426272793627`*^9, 3.922542634890084*^9}, {
   3.922542680852831*^9, 3.922542692263272*^9}, {3.92254386190296*^9, 
   3.922543901663507*^9}, {3.922544153632306*^9, 3.922544272874632*^9}, {
   3.922544366063057*^9, 3.922544391214864*^9}, {3.922544559927295*^9, 
   3.922544610131781*^9}, {3.922544927302442*^9, 3.922544959525444*^9}, {
   3.922545805320776*^9, 3.9225458988851433`*^9}, 3.926777878332103*^9, {
   3.926778044170618*^9, 3.926778093466685*^9}, {3.926778446726612*^9, 
   3.926778458683373*^9}, 3.926778505859747*^9, {3.926778668036244*^9, 
   3.926778672426416*^9}, {3.930084251010991*^9, 3.930084251509558*^9}, {
   3.930084378339675*^9, 3.930084378519207*^9}, {3.930085320759727*^9, 
   3.9300853618441267`*^9}, {3.930086633696997*^9, 3.930086638691608*^9}, {
   3.930086704147973*^9, 3.93008671899718*^9}, {3.93008678292233*^9, 
   3.930086812982795*^9}, {3.930087125944688*^9, 3.930087202198295*^9}, {
   3.930087473916138*^9, 3.930087495180143*^9}, {3.930087637699853*^9, 
   3.930087641299483*^9}, {3.930087733622204*^9, 3.930088052903914*^9}, {
   3.930088092274757*^9, 3.930088129017784*^9}, {3.93008815989115*^9, 
   3.930088180865014*^9}, {3.9300882263723297`*^9, 3.930088335218837*^9}, {
   3.930088367486102*^9, 3.9300884810009737`*^9}, {3.93009026120925*^9, 
   3.930090283507223*^9}, {3.930091286510411*^9, 3.930091387807746*^9}, {
   3.930091422843004*^9, 3.930091423065049*^9}, {3.9300922476361938`*^9, 
   3.930092253101329*^9}, {3.930092373147369*^9, 3.930092381425165*^9}, {
   3.930092460540167*^9, 3.930092486739114*^9}, {3.930092517826366*^9, 
   3.93009252714084*^9}, {3.930092592012561*^9, 3.930092616154007*^9}, {
   3.930092721550368*^9, 3.930092742878948*^9}, {3.930092773256387*^9, 
   3.930092775100812*^9}, {3.930092822827887*^9, 3.930092823461158*^9}, {
   3.9300928709134827`*^9, 3.930092892741681*^9}, {3.930093011632945*^9, 
   3.93009301736743*^9}, {3.9300987334299393`*^9, 3.930098783468082*^9}, {
   3.930098847493825*^9, 3.930098848273232*^9}, {3.930098884475544*^9, 
   3.930098896490966*^9}, {3.930098980195408*^9, 3.9300990169380207`*^9}, {
   3.930099051163046*^9, 3.930099051770405*^9}, {3.930099091351729*^9, 
   3.930099098233387*^9}, {3.930099143867349*^9, 3.930099237136985*^9}, {
   3.930099304421714*^9, 3.93009931986819*^9}, {3.93009993957463*^9, 
   3.9300999536769342`*^9}, {3.930100831905665*^9, 3.9301008357940197`*^9}, {
   3.9301008760260987`*^9, 3.930100885181998*^9}, {3.930101135799157*^9, 
   3.930101140476014*^9}, {3.930101270917085*^9, 3.930101337477133*^9}, {
   3.930101406037956*^9, 3.930101433690744*^9}, {3.930101546151387*^9, 
   3.930101562215939*^9}, {3.930101622047195*^9, 3.930101671458657*^9}, {
   3.9301017653799686`*^9, 3.9301017937957478`*^9}, {3.930101854842244*^9, 
   3.930101866472701*^9}, {3.930101960709201*^9, 3.930101968829836*^9}, {
   3.9301020162811604`*^9, 3.930102051813108*^9}, {3.930102085632244*^9, 
   3.9301021017202177`*^9}, {3.930102207699527*^9, 3.930102264883872*^9}, {
   3.930102318997442*^9, 3.9301023256127787`*^9}, {3.930102429966364*^9, 
   3.930102434853716*^9}, {3.930102582347833*^9, 3.9301025864183083`*^9}},
 CellLabel->
  "In[161]:=",ExpressionUUID->"65b5ebf0-3706-4d44-aad3-ab3c3fdb8a95"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"form", "=", 
   RowBox[{"FormFunction", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<Friend Request Data\>\"", "->", "\"\<CSV\>\""}], ",", " ", 
       RowBox[{
       "\"\<Desired Number of Teams\>\"", "->", " ", "\"\<Number\>\""}]}], 
      "}"}], ",", "getGraphGallery"}], "]"}]}], ";"}], "\n", 
 RowBox[{"CloudDeploy", "[", 
  RowBox[{
  "form", ",", 
   "\"\<https://www.wolframcloud.com/obj/de718ea7-4a10-4af8-a045-6a78d2d61228\
\>\""}], "]"}]}], "Input",
 CellChangeTimes->{{3.9300885163830023`*^9, 3.930088537475733*^9}, {
  3.9300902425105333`*^9, 3.930090243319132*^9}, {3.930100989971127*^9, 
  3.930100990327469*^9}, {3.930101075428979*^9, 3.9301010758035927`*^9}, {
  3.930102774587269*^9, 3.930102783835609*^9}, {3.9301028364460993`*^9, 
  3.930102868618792*^9}, {3.9301029188598213`*^9, 3.930102928154108*^9}},
 CellLabel->
  "In[278]:=",ExpressionUUID->"2c2d1dc9-e5de-4b99-b0b1-3b3373bbd57d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"CloudObject", "[", 
   TemplateBox[{
    "\"https://www.wolframcloud.com/obj/de718ea7-4a10-4af8-a045-6a78d2d61228\"\
", "https://www.wolframcloud.com/obj/de718ea7-4a10-4af8-a045-6a78d2d61228"},
    "HyperlinkURL"], "]"}],
  CloudObject[
  "https://www.wolframcloud.com/obj/de718ea7-4a10-4af8-a045-6a78d2d61228"],
  SelectWithContents->True]], "Output",
 CellChangeTimes->{{3.9301029195918903`*^9, 3.930102931453381*^9}},
 CellLabel->
  "Out[279]=",ExpressionUUID->"c46b4b3c-8783-4265-8296-ead5e63e8737"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Scratchpad", "Section",
 CellChangeTimes->{{3.93751229025808*^9, 
  3.937512292047494*^9}},ExpressionUUID->"308d9db9-2ce9-4fe7-b7d4-\
9ba5860fdb02"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"img", " ", "=", 
  RowBox[{
  "Import", "[", 
   "\"\</Users/erichegonzales/Projects/Wolfram/Fastbreak/Friend Request \
Graph/Output/FA24/BSNY Travel/4th.gml\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.937512302126569*^9, 3.9375123443564873`*^9}, {
  3.9375172608777657`*^9, 3.9375172764362803`*^9}},
 CellLabel->
  "In[348]:=",ExpressionUUID->"3aaf8175-e8f0-4f97-8733-b9ba6d6669df"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Ace Levine", "Alden Diary", "Andrew Heitner", "Anthony Leite", 
       "Archer (Archie) Kahn", "Archer Kahn", "Ari Baron", "Asher Kogan", 
       "Augustine (Auggie) Paris", "Benjamin Phillips", "Benji Philips", 
       "Benji Phillips", "Camden Moolani", "Clark Hersch", "Coach Jay", 
       "Czel", "Drew Goldstein", "Dylan Igel", "Elias Newman", 
       "Eli Bernstein", "Eli Goldstein", "Ethan Wurtz", "Graham Sellers", 
       "Hart Anderson", "James Coe", "James Lee", "James Ruzal", 
       "Jordan Marks", "Kailash", "Luca Collado", "Lucas Acker", 
       "Lucca Collado", "Lukas Blitzer", "Lukas Blitzer-Czel", "Matan Wohl", 
       "Max Moskovich", "Miles Abend", "Miles Belsky", "Nicholas Busquet", 
       "Nick Busquet", "Nik Sani", "Oliver Startin", "Owen Levenson", 
       "Put with BEST 4th Graders", "Rhys Stewart", "Silas Platt", 
       "Slater Stumphauzer", "Spencer Grad", "Teddy Garfein", 
       "Will send at a later date"}, {{{31, 20}, {31, 13}, {31, 47}, {24, 
       33}, {24, 16}, {24, 25}, {34, 24}, {34, 25}, {49, 22}, {49, 38}, {17, 
       18}, {17, 43}, {17, 11}, {17, 41}, {48, 1}, {3, 38}, {3, 4}, {3, 40}, {
       3, 2}, {14, 13}, {14, 20}, {18, 17}, {18, 43}, {18, 12}, {6, 35}, {8, 
       13}, {8, 20}, {8, 37}, {26, 44}, {43, 17}, {43, 18}, {43, 12}, {13, 
       50}, {36, 14}, {36, 28}, {36, 21}, {36, 8}, {10, 18}, {10, 17}, {10, 
       43}, {27, 15}, {23, 30}, {47, 13}, {47, 31}, {47, 8}, {35, 5}, {22, 
       3}, {22, 49}, {22, 29}, {22, 4}}, Null}, {
      AnnotationRules -> {
        "Matan Wohl" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Anthony Leite" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "GraphProperties" -> {
          "Creator" -> "the Wolfram Language : www.wolfram.com", "directed" -> 
           1}, "Benji Phillips" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Max Moskovich" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Ethan Wurtz" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Camden Moolani" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Teddy Garfein" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Put with BEST 4th Graders" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Lukas Blitzer-Czel" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Eli Bernstein" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Drew Goldstein" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Lukas Blitzer" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "James Coe" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Augustine (Auggie) Paris" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Clark Hersch" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Czel" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Lucca Collado" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Nik Sani" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Ace Levine" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Rhys Stewart" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Benjamin Phillips" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Hart Anderson" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Asher Kogan" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Dylan Igel" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Kailash" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Luca Collado" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Slater Stumphauzer" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Miles Abend" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Eli Goldstein" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Graham Sellers" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Archer (Archie) Kahn" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Oliver Startin" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Jordan Marks" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Archer Kahn" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "James Lee" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Spencer Grad" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Will send at a later date" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "James Ruzal" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Lucas Acker" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Owen Levenson" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Coach Jay" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Andrew Heitner" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Ari Baron" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Nick Busquet" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Nicholas Busquet" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Benji Philips" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Elias Newman" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Silas Platt" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]"}, 
         "Miles Belsky" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> "RGBColor[1, 0, 0]"},
          "Alden Diary" -> {
          "graphics" -> {"outline" -> "#000000"}, "VertexLabels" -> 
           "Placed['Name', Automatic]", "VertexStyle" -> 
           "RGBColor[1, 0, 0]"}}, 
       EdgeStyle -> {DirectedEdge["Lucas Acker", "Camden Moolani"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Max Moskovich", "Clark Hersch"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Graham Sellers", "Luca Collado"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Lukas Blitzer-Czel", "James Coe"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Owen Levenson", "Benji Phillips"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Clark Hersch", "Eli Bernstein"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Asher Kogan", "Miles Abend"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Andrew Heitner", "Anthony Leite"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Camden Moolani", "Will send at a later date"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Benjamin Phillips", "Drew Goldstein"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Benjamin Phillips", "Owen Levenson"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Max Moskovich", "Asher Kogan"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Owen Levenson", "Dylan Igel"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Ethan Wurtz", "Teddy Garfein"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Dylan Igel", "Drew Goldstein"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Andrew Heitner", "Nick Busquet"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Matan Wohl", "Archer (Archie) Kahn"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["James Ruzal", "Coach Jay"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Hart Anderson", "Lukas Blitzer"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Benjamin Phillips", "Dylan Igel"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Drew Goldstein", "Dylan Igel"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Drew Goldstein", "Owen Levenson"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Archer Kahn", "Matan Wohl"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Lucas Acker", "Slater Stumphauzer"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Ethan Wurtz", "Anthony Leite"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Spencer Grad", "Ace Levine"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Owen Levenson", "Drew Goldstein"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Max Moskovich", "Eli Goldstein"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Asher Kogan", "Camden Moolani"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Hart Anderson", "Czel"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Ethan Wurtz", "Kailash"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Slater Stumphauzer", "Camden Moolani"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Max Moskovich", "Jordan Marks"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Hart Anderson", "James Coe"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Drew Goldstein", "Nik Sani"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Clark Hersch", "Camden Moolani"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Dylan Igel", "Benji Phillips"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Andrew Heitner", "Alden Diary"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Lukas Blitzer-Czel", "Hart Anderson"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Asher Kogan", "Eli Bernstein"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Drew Goldstein", "Benji Philips"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["James Lee", "Put with BEST 4th Graders"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Dylan Igel", "Owen Levenson"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Andrew Heitner", "Miles Belsky"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Ethan Wurtz", "Andrew Heitner"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Lucas Acker", "Eli Bernstein"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Slater Stumphauzer", "Lucas Acker"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Teddy Garfein", "Ethan Wurtz"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], 
         DirectedEdge["Slater Stumphauzer", "Asher Kogan"] -> RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]], DirectedEdge["Teddy Garfein", "Miles Belsky"] -> 
         RGBColor[
           Rational[26, 51], 
           Rational[143, 255], 
           Rational[163, 255]]}, 
       VertexLabels -> {
        "Miles Abend" -> "Name", "Archer Kahn" -> "Name", 
         "Augustine (Auggie) Paris" -> "Name", "Drew Goldstein" -> "Name", 
         "Teddy Garfein" -> "Name", "Nicholas Busquet" -> "Name", 
         "Eli Goldstein" -> "Name", "Coach Jay" -> "Name", "Ace Levine" -> 
         "Name", "Put with BEST 4th Graders" -> "Name", "Lucca Collado" -> 
         "Name", "Will send at a later date" -> "Name", "Silas Platt" -> 
         "Name", "Rhys Stewart" -> "Name", "Lucas Acker" -> "Name", 
         "Benjamin Phillips" -> "Name", "Nik Sani" -> "Name", 
         "Oliver Startin" -> "Name", "Camden Moolani" -> "Name", 
         "Lukas Blitzer" -> "Name", "Dylan Igel" -> "Name", "Alden Diary" -> 
         "Name", "Hart Anderson" -> "Name", "Graham Sellers" -> "Name", 
         "Elias Newman" -> "Name", "James Coe" -> "Name", "Clark Hersch" -> 
         "Name", "Ethan Wurtz" -> "Name", "James Ruzal" -> "Name", 
         "Benji Phillips" -> "Name", "Ari Baron" -> "Name", "Miles Belsky" -> 
         "Name", "Slater Stumphauzer" -> "Name", "Spencer Grad" -> "Name", 
         "James Lee" -> "Name", "Jordan Marks" -> "Name", "Benji Philips" -> 
         "Name", "Nick Busquet" -> "Name", "Andrew Heitner" -> "Name", 
         "Kailash" -> "Name", "Matan Wohl" -> "Name", "Lukas Blitzer-Czel" -> 
         "Name", "Anthony Leite" -> "Name", "Max Moskovich" -> "Name", 
         "Asher Kogan" -> "Name", "Czel" -> "Name", "Eli Bernstein" -> "Name",
          "Archer (Archie) Kahn" -> "Name", "Owen Levenson" -> "Name", 
         "Luca Collado" -> "Name"}, 
       VertexStyle -> {
        "Luca Collado" -> RGBColor[1, 0, 0], "Eli Goldstein" -> 
         RGBColor[1, 0, 0], "Czel" -> RGBColor[1, 0, 0], "Benji Philips" -> 
         RGBColor[1, 0, 0], "James Coe" -> RGBColor[1, 0, 0], "Lukas Blitzer" -> 
         RGBColor[1, 0, 0], "Miles Belsky" -> RGBColor[1, 0, 0], 
         "Will send at a later date" -> RGBColor[1, 0, 0], "Jordan Marks" -> 
         RGBColor[1, 0, 0], "Nik Sani" -> RGBColor[1, 0, 0], 
         "Archer (Archie) Kahn" -> RGBColor[1, 0, 0], "Nick Busquet" -> 
         RGBColor[1, 0, 0], "Anthony Leite" -> RGBColor[1, 0, 0], "Coach Jay" -> 
         RGBColor[1, 0, 0], "Benji Phillips" -> RGBColor[1, 0, 0], 
         "Alden Diary" -> RGBColor[1, 0, 0], "Put with BEST 4th Graders" -> 
         RGBColor[1, 0, 0], "Kailash" -> RGBColor[1, 0, 0]}, 
       VertexCoordinates -> CompressedData["
1:eJxTTMoPSmViYGAwAmIQ3Xzg1EJXMwmHDRZzfl6NYTnwL/X7k8SFnA577O+t
DnvGeeD83nbvvt9MDvlCQJWJ/Af6l/LHBsT/sbcxfH00gI/rAES/kMM0xb7S
wmhGKF8KjS/mUDDzcqqhocCBt5c/zmj0YnZYPZVz/xX/P/th8iJKDwRWbRE/
8JZ3n8FMrX/2M/KAFr4SOZAyzZYz59xx+8v3HnBP5hQ9oDi5Z06rLZeD8CfH
82mhEgc+qbycdXI7l8PKFvUvvya/398nt3/7S38mh5CjIb8401/uh/lv4tsa
e9M49gNLepWvPZos6fBThOGx5JY/+++b7/t2RuiL/UkmtYLXfuIHbDrmapbc
Y3Y4ajvNrsRRDO5+Pct3U/i2SR2Y4SPa45XF7rD2V0zu0X9f9icoFqcG5N60
Z3979bjz/Zv7H9Zr39wo+Nn+uhDQgcv4DsDsX83SfXhmPNeB4oaEPrn5Yg6x
3WILcre+31+/pINn9Q0hiP+vfIW796j0TPd/CbxQ/SJw98PC46Pbs4n2M77t
h/EP/bJv/7mJG64eZp/83F2fIuX4HRyA0alW8x0e3uJ7Xmh7bBY58ODzYY6H
EyUdoObsv9yutyL/ppBDZ0wBW/3+x/t9Hly7a2MqBo9PeW/5XQv2fbZP7GSf
4rvz4/7lrPq/uIQYHdgapzp3v2E7oLLlaUzX6n/2tvzvzt3KFYaH35Lj73N/
GYsd2LV3iWHUcS6HijmLlHfWCB7gurNr9nKrW/YJTy8o3d4pBVe/UPd5UIyp
5IFHjKnB6wyYHG6LpZqdSJGA+w81fMQc/i65tfzxRkE4v2vDw5dTjYQPPHTw
EDNw5HZYbA2K2H/7Yfph6f15j8ZbXruP9mD36wgf0Ehc9jZ+pwA8PAC+sILs

        "]}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.02001256365492079], 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.37283, -3.92275}, {3.2038, -3.23747}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.37283, -3.92275}, {1.77327, -3.25699}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.37283, -3.92275}, {1.91688, -4.85728}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.37283, -3.92275}, {3.34734, -4.3718}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{6.553, -2.16965}, {5.55199, -2.16965}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.41138, -1.76949}, {3.33974, -0.986814}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.41138, -1.76949}, {2.9269, -1.3122}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.41138, -1.76949}, {2.13381, -2.8655}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.8854, -5.22925}, {1.25459, -5.82707}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.8854, -5.22925}, {2.48362, -5.56392}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.8854, -5.22925}, {2.27377, -6.09842}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{3.33974, -0.986814}, {4.18103, -0.185987}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.28902, -0.793828}, {3.33974, -0.986814}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.28902, -0.793828}, {2.9269, -1.3122}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.25459, -5.82707}, {0.185987, -5.25935}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[
          BezierCurveBox[{{1.25459, -5.82707}, {
           1.8258324173787557`, -5.493392388489532}, {2.48362, -5.56392}}], 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.25459, -5.82707}, {0.40983, -6.6815}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[
          BezierCurveBox[{{1.25459, -5.82707}, {
           1.8088009967481264`, -5.795150279285913}, {2.27377, -6.09842}}], 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.48362, -5.56392}, {3.28004, -6.0834}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[
          BezierCurveBox[{{2.48362, -5.56392}, {
           1.9123775826212444`, -5.897597611510463}, {1.25459, -5.82707}}], 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[
          BezierCurveBox[{{2.48362, -5.56392}, {
           2.466588579369312, -5.865677890796494}, {2.27377, -6.09842}}], 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.19182, -3.83145}, {2.37283, -3.92275}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.19182, -3.83145}, {1.77327, -3.25699}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.19182, -3.83145}, {0.185987, -3.46239}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[
          BezierCurveBox[{{1.19182, -3.83145}, {
           1.2929352208275098`, -4.331249200105915}, {1.07765, -4.7935}}], 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{6.053, -3.29668}, {5.053, -3.29668}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{5.65539, -0.990897}, {6.39442, -1.79397}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{5.65539, -0.990897}, {4.71159, -1.36442}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{5.65539, -0.990897}, {6.39246, -0.185987}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{6.053, -3.67236}, {5.053, -3.67236}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{5.053, -2.921}, {6.053, -2.921}}, 0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{3.88982, -1.46781}, {3.33974, -0.986814}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{3.88982, -1.46781}, {2.9269, -1.3122}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[
          BezierCurveBox[{{3.88982, -1.46781}, {
           3.719947167435643, -1.7650082364819752`}, {3.40683, -1.90336}}], 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{4.71234, -0.617126}, {5.65539, -0.990897}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{4.71234, -0.617126}, {4.71159, -1.36442}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{5.55199, -2.16965}, {4.553, -2.16965}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.23404, -1.10774}, {2.41138, -1.76949}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.23404, -1.10774}, {2.28902, -0.793828}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.23404, -1.10774}, {0.397297, -0.404252}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.23404, -1.10774}, {0.185987, -1.41217}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{2.27377, -6.09842}, {3.28004, -6.0834}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[
          BezierCurveBox[{{2.27377, -6.09842}, {
           1.7195590032519414`, -6.130339720714116}, {1.25459, -5.82707}}], 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[
          BezierCurveBox[{{2.27377, -6.09842}, {
           2.290801420630537, -5.796662109203749}, {2.48362, -5.56392}}], 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{3.40683, -1.90336}, {2.41138, -1.76949}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{3.40683, -1.90336}, {3.33974, -0.986814}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[
          BezierCurveBox[{{3.40683, -1.90336}, {
           3.576702832564365, -1.606161763518026}, {3.88982, -1.46781}}], 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{5.053, -2.54533}, {6.053, -2.54533}}, 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[
          BezierCurveBox[{{1.07765, -4.7935}, {
           0.9765347791724939, -4.293700799894148}, {1.19182, -3.83145}}], 
          0.05096810118168327]}, 
        {RGBColor[
          NCache[
           Rational[26, 51], 0.5098039215686274], 
          NCache[
           Rational[143, 255], 0.5607843137254902], 
          NCache[
           Rational[163, 255], 0.6392156862745098]], 
         ArrowBox[{{1.07765, -4.7935}, {1.91688, -4.85728}}, 
          0.05096810118168327]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{6.053, -2.54533}, 0.05096810118168327], 
         InsetBox["\<\"Ace Levine\"\>", 
          Offset[{2, 2}, {6.1039681011816835, -2.4943618988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{3.2038, -3.23747}, 0.05096810118168327]}, 
         InsetBox["\<\"Alden Diary\"\>", 
          Offset[{2, 2}, {3.2547681011816834, -3.186501898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.37283, -3.92275}, 0.05096810118168327], 
         InsetBox["\<\"Andrew Heitner\"\>", 
          Offset[{2, 2}, {2.423798101181683, -3.871781898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{1.77327, -3.25699}, 0.05096810118168327]}, 
         InsetBox["\<\"Anthony Leite\"\>", 
          Offset[{2, 2}, {1.8242381011816833, -3.206021898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], DiskBox[{4.553, -2.16965}, 0.05096810118168327]},
          InsetBox["\<\"Archer (Archie) Kahn\"\>", 
          Offset[{2, 2}, {4.6039681011816835, -2.1186818988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{6.553, -2.16965}, 0.05096810118168327], 
         InsetBox["\<\"Archer Kahn\"\>", 
          Offset[{2, 2}, {6.6039681011816835, -2.1186818988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.553, -4.04804}, 0.05096810118168327], 
         InsetBox["\<\"Ari Baron\"\>", 
          Offset[{2, 2}, {5.6039681011816835, -3.997071898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.41138, -1.76949}, 0.05096810118168327], 
         InsetBox["\<\"Asher Kogan\"\>", 
          Offset[{2, 2}, {2.462348101181683, -1.7185218988183166}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.553, -5.92643}, 0.05096810118168327], 
         InsetBox["\<\"Augustine (Auggie) Paris\"\>", 
          Offset[{2, 2}, {5.6039681011816835, -5.875461898818316}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.8854, -5.22925}, 0.05096810118168327], 
         InsetBox["\<\"Benjamin Phillips\"\>", 
          Offset[{2, 2}, {1.9363681011816833, -5.178281898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{0.185987, -5.25935}, 0.05096810118168327]}, 
         InsetBox["\<\"Benji Philips\"\>", 
          Offset[{2, 2}, {0.23695510118168328, -5.208381898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{3.28004, -6.0834}, 0.05096810118168327]}, 
         InsetBox["\<\"Benji Phillips\"\>", 
          Offset[{2, 2}, {3.3310081011816832, -6.0324318988183165}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.33974, -0.986814}, 0.05096810118168327], 
         InsetBox["\<\"Camden Moolani\"\>", 
          Offset[{2, 2}, {3.390708101181683, -0.9358458988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.28902, -0.793828}, 0.05096810118168327], 
         InsetBox["\<\"Clark Hersch\"\>", 
          Offset[{2, 2}, {2.339988101181683, -0.7428598988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], DiskBox[{6.053, -2.921}, 0.05096810118168327]}, 
         InsetBox["\<\"Coach Jay\"\>", 
          Offset[{2, 2}, {6.1039681011816835, -2.8700318988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{6.39442, -1.79397}, 0.05096810118168327]}, 
         InsetBox["\<\"Czel\"\>", 
          Offset[{2, 2}, {6.445388101181684, -1.7430018988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.25459, -5.82707}, 0.05096810118168327], 
         InsetBox["\<\"Drew Goldstein\"\>", 
          Offset[{2, 2}, {1.3055581011816835, -5.776101898818316}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.48362, -5.56392}, 0.05096810118168327], 
         InsetBox["\<\"Dylan Igel\"\>", 
          Offset[{2, 2}, {2.5345881011816833, -5.512951898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.553, -6.67779}, 0.05096810118168327], 
         InsetBox["\<\"Elias Newman\"\>", 
          Offset[{2, 2}, {5.6039681011816835, -6.626821898818316}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.9269, -1.3122}, 0.05096810118168327], 
         InsetBox["\<\"Eli Bernstein\"\>", 
          Offset[{2, 2}, {2.977868101181683, -1.2612318988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{0.397297, -0.404252}, 0.05096810118168327]}, 
         InsetBox["\<\"Eli Goldstein\"\>", 
          Offset[{2, 2}, {0.4482651011816833, -0.35328389881831673}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.19182, -3.83145}, 0.05096810118168327], 
         InsetBox["\<\"Ethan Wurtz\"\>", 
          Offset[{2, 2}, {1.2427881011816835, -3.7804818988183166}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{6.053, -3.29668}, 0.05096810118168327], 
         InsetBox["\<\"Graham Sellers\"\>", 
          Offset[{2, 2}, {6.1039681011816835, -3.2457118988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.65539, -0.990897}, 0.05096810118168327], 
         InsetBox["\<\"Hart Anderson\"\>", 
          Offset[{2, 2}, {5.706358101181683, -0.9399288988183168}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.71159, -1.36442}, 0.05096810118168327]}, 
         InsetBox["\<\"James Coe\"\>", 
          Offset[{2, 2}, {4.762558101181684, -1.3134518988183168}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{6.053, -3.67236}, 0.05096810118168327], 
         InsetBox["\<\"James Lee\"\>", 
          Offset[{2, 2}, {6.1039681011816835, -3.6213918988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.053, -2.921}, 0.05096810118168327], 
         InsetBox["\<\"James Ruzal\"\>", 
          Offset[{2, 2}, {5.1039681011816835, -2.8700318988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{0.185987, -1.41217}, 0.05096810118168327]}, 
         InsetBox["\<\"Jordan Marks\"\>", 
          Offset[{2, 2}, {0.23695510118168328, -1.3612018988183165}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{0.185987, -3.46239}, 0.05096810118168327]}, 
         InsetBox["\<\"Kailash\"\>", 
          Offset[{2, 2}, {0.23695510118168328, -3.411421898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], DiskBox[{5.053, -3.29668}, 0.05096810118168327]},
          InsetBox["\<\"Luca Collado\"\>", 
          Offset[{2, 2}, {5.1039681011816835, -3.2457118988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.88982, -1.46781}, 0.05096810118168327], 
         InsetBox["\<\"Lucas Acker\"\>", 
          Offset[{2, 2}, {3.940788101181683, -1.416841898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.553, -5.17508}, 0.05096810118168327], 
         InsetBox["\<\"Lucca Collado\"\>", 
          Offset[{2, 2}, {5.6039681011816835, -5.124111898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{6.39246, -0.185987}, 0.05096810118168327]}, 
         InsetBox["\<\"Lukas Blitzer\"\>", 
          Offset[{2, 2}, {6.443428101181683, -0.13501889881831675}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{4.71234, -0.617126}, 0.05096810118168327], 
         InsetBox["\<\"Lukas Blitzer-Czel\"\>", 
          Offset[{2, 2}, {4.763308101181684, -0.5661578988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.55199, -2.16965}, 0.05096810118168327], 
         InsetBox["\<\"Matan Wohl\"\>", 
          Offset[{2, 2}, {5.602958101181684, -2.1186818988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.23404, -1.10774}, 0.05096810118168327], 
         InsetBox["\<\"Max Moskovich\"\>", 
          Offset[{2, 2}, {1.2850081011816834, -1.0567718988183166}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.13381, -2.8655}, 0.05096810118168327], 
         InsetBox["\<\"Miles Abend\"\>", 
          Offset[{2, 2}, {2.184778101181683, -2.814531898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{1.91688, -4.85728}, 0.05096810118168327]}, 
         InsetBox["\<\"Miles Belsky\"\>", 
          Offset[{2, 2}, {1.967848101181683, -4.806311898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.553, -5.55076}, 0.05096810118168327], 
         InsetBox["\<\"Nicholas Busquet\"\>", 
          Offset[{2, 2}, {5.6039681011816835, -5.499791898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{3.34734, -4.3718}, 0.05096810118168327]}, 
         InsetBox["\<\"Nick Busquet\"\>", 
          Offset[{2, 2}, {3.398308101181683, -4.320831898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{0.40983, -6.6815}, 0.05096810118168327]}, 
         InsetBox["\<\"Nik Sani\"\>", 
          Offset[{2, 2}, {0.4607981011816833, -6.630531898818316}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.553, -6.30211}, 0.05096810118168327], 
         InsetBox["\<\"Oliver Startin\"\>", 
          Offset[{2, 2}, {5.6039681011816835, -6.251141898818316}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{2.27377, -6.09842}, 0.05096810118168327], 
         InsetBox["\<\"Owen Levenson\"\>", 
          Offset[{2, 2}, {2.324738101181683, -6.047451898818316}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], DiskBox[{5.053, -3.67236}, 0.05096810118168327]},
          InsetBox["\<\"Put with BEST 4th Graders\"\>", 
          Offset[{2, 2}, {5.1039681011816835, -3.6213918988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.553, -4.42372}, 0.05096810118168327], 
         InsetBox["\<\"Rhys Stewart\"\>", 
          Offset[{2, 2}, {5.6039681011816835, -4.372751898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.553, -4.7994}, 0.05096810118168327], 
         InsetBox["\<\"Silas Platt\"\>", 
          Offset[{2, 2}, {5.6039681011816835, -4.748431898818317}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{3.40683, -1.90336}, 0.05096810118168327], 
         InsetBox["\<\"Slater Stumphauzer\"\>", 
          Offset[{2, 2}, {3.457798101181683, -1.8523918988183166}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{5.053, -2.54533}, 0.05096810118168327], 
         InsetBox["\<\"Spencer Grad\"\>", 
          Offset[{2, 2}, {5.1039681011816835, -2.4943618988183167}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1.07765, -4.7935}, 0.05096810118168327], 
         InsetBox["\<\"Teddy Garfein\"\>", 
          Offset[{2, 2}, {1.1286181011816834, -4.742531898818316}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         {RGBColor[1, 0, 0], 
          DiskBox[{4.18103, -0.185987}, 0.05096810118168327]}, 
         InsetBox["\<\"Will send at a later date\"\>", 
          Offset[{2, 2}, {4.231998101181683, -0.13501889881831675}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->"NetworkGraphics",
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->{1101.6440124511719`, Automatic}]], "Output",
 CellChangeTimes->{3.9375123482611933`*^9, 3.937517277666215*^9, 
  3.937517338435817*^9},
 CellLabel->"Out[348]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
muoF/Y1Fz/4TqU3GrGOe8THH8PVRhsMceAY8W/xBKXMpeE12/fxUCmMgkULD
1OLxOWVyXT5zSXVwj5wXSzIcrWWSOi07YUK24qcK0iONcmtGZVRcBAtT/3/s
vXu8ZUlVH75z7rmvvj0zTPdM93T3dM8TBmRGmeE1gDpbMIIPTNRoAFFAUGNU
FA1B1MAWRBMTRDOowWggSkZRowmJ4vuAER/IAA6oSFTwgaCOyMso8af3d2ut
WlVrrfpW7Tq3ezB/cD6fe+4+tatWfdej3lWr1GtkMKbmzAaDdtpUW2xkSVfm
1iFR4p11yzRWjhXLNltIeAxWwgZmq9VfTvJgnxJG1eF5TUvRitofioKrdaVl
G4204sIYOv0zyZ0rEpTNlFAiR6XxsP6kgjQx5EyhXqkAzwfcQswYyLBx+/O+
1fXmXN3ChmYt4jSoW3gPc7KIl1zNfzRe4EHe44eiWXkd5ZWNwRY75Ja4bgmb
EjYBGuOgPo4uvdvO8VLa6OHX5DXYIgqdjbENXWLyHLJ6TR61cOQKybn7usds
oqwWqj3Nh9kXZBeoJ5ZV/m5CvT8URQ3VqoMKM2pgtre06CSHQC+7xkbtvXJm
s5LEDQc3Ro5I3/qCYYN8sUqkNVIhqFxTSJ7UKhDRjWG4EGrOB9N7lZt7nw8H
L040lfsnlNt+CY6YcG6HBsUEUq6JV4jNuuNFniZiGzUN0KeMEZtTHlfN9H2J
thyNMmWtyOtwgoLcgHEHdqbRP3+tVl8grbavuPpTyo20uhpSkRoVA42quqg+
x6Fu11MOwz6P6LCCurJ72xTsoaNy5kHLRRJP0o86jvpt4ikHXZNkyFXNCFk1
YO4hxebi+gh+YVrqS8HIPiv27vC1m2tIYR52ghsO+4yA81UTSlxJKsoTZMqN
/UWEIDW4m0AKr1gJo7jR3Ey8wfkIjLM0+y48VjiSdFBJp6Gr3VUIejSMJ3LK
qQ/ZIVkYAen6WLMu/nOCGR7RJTh9Q2YlNORwcGniSXbWA5VECcnj6EwEKX+k
euSNtXZriaYJ212LzjLXvksGeiq1Yar6W+r0whZSd99Ml1N3UbSls04vLm5q
/z1JdMjLISrfoF0SjkJYnA/Udd8oWZTun0g6uyAXF7afYKoOb9IlQ0qedzUc
qCgugJsa4yDvtupmFP7vJDR6ZI2056ZibgFR6AXtx6f7kKo+h+jrL5II6poy
NxONEik718uNkJrVmNRfnPkxVTFrNHkFFclIUoFA4WruSpNVNWP6ZFRLh8q6
VV5MJgpbho4BgVwAFeVi9WCKF8I3QiA9XdTsCr2XUihlgebF1kXXpRRb9RST
DvtoEFarVypzPhTlgUAyVXnwVNFS22igvQf6D/+OkwdcUymhpyZ+qdzmQRjq
Il5nWV0lwsNyGnJFsBqK8t4vqexZtLqAVTUQ1NdCy7UE7gh48cIawiyrI2XF
NCje720pqHoROON3HauPBmFFAeqQzwPti+pCU1U+VNXsghffOi8fuk4sV3D3
SU/Zc/q/8Oz0LpS5IpIVz6vgS/0i1RC7NgdefgW8vajJW/7Sp//RRRNV9A9K
mkONC+9ttpUbuh19A0zv8tm76gxJCJuIPAiLjfA0WB+zREMZaWqGXNgE8uLG
fZXijZJWubnVeS04M92VkVGljzolMuoiR7McOyaMrXwSpI0G+wDuOBT28JdM
6JD2gKzZmYKzFnQnIbKqj+N4Wi6+TSPpoalLV/lT2CL3y6YhfyQOWAkaBzyY
iZeoGz2gKR3O0TnYpnhpJlHeTYNaolE6lTjyXu7sTPnGd9ynZWvS+Y0pS3P9
qs7Stnh4vTB//R/Oc31r4c5Prfa42iarGgV7JNjUxpOyYZlYg1FFQPOObKY+
CZFG6lNEYW0G3dOHRuo1d9OCYpVzdIu+VWRpcCnIAC3D/CjklKHNLYmp/OYX
qpy5/BXD0ubStxPrwfyirFyuBi+QpbCfkaW2lPD+EwDm2IRoMTRrFzTRBMaC
rszDm+6MPNUdHsUgdEqZ5OFrHtLUr7ZRDMJpFsOEMyqPgeKpxgtQbag/30pb
VfpDUhRURyDnOShy9MNoumSPBFijynRV6dRevUiMfrMKlzo9JeXWQX7Sx7Ui
Uw5b674hBkzfVJ0LPWR16B7TNXRufquNMetp2g0R+Yw+KNSsWtz/VZ5ABTNU
p6urhUFb5fdotLgUUd47MVCSw2oR1vNc9AXaoLJfU52bJp7g2N0fDldq2xvX
H5p+olJLu9TcuODz6syI4FTFuWcYHJxw/W/WIXYQf8TmS/HdVJM1F7Qgnkhr
OKwFVSEf7hrSmcLIFXD4pecwTex5VZbdNadK1HtzWnSK/vw6e6syrLpEN82I
ZRzUzNzg11pAtev6YhSDO+8kYv0xGGKb6hU96ThoAcGpXvG8VjtL9OPtDV5W
Js1hlI0mXNoluNeL9ZMxV/J7pTjvsYBJh3G6HSPZwa6Eh7COtpdrUwajK5FG
ia9uDXB24jlWyGt9bGAWoBgxW9U70nLEQ1cGujNesQ9ULfSaxhewEDS4UfiK
QuwwCSNEqqTp5cxF94Xo0QitsQ/PAEGVu1Mlp51MmI4neaxyvNrNY33WUZPL
rjHvoRzx0ztnI3p8H22k72wRbeWs1iF7NlnVUJ5G36kTNzq5NGxlJTJxm2BY
zPuJrP4IaZSkYSXjgK0kQVDNvde+5kiqKwPLzf2JWqOppywUB1OZ45gpbekc
tebdRCgDSk/YIv4xRVJjuOqW3vIFmwDu4/NRzdRrFRTEM9rlH+sdUwzVnTZN
hT3Mxhstt0VF2cHyw1IUZPo8YLYd4HgeXzAIb1uAVW4AxszgLNPLTFyXncPw
jc/gzu7LzC8c804+X1qKYUxiaLcIHcLgMg+KWDTRcVCFZV4Shrn2SZmqLXTU
gF+emUh1dNwZnH4rgSQGjtp0XiCpXlumBsKxTF8P6eO7nLp5OIjcyzIC8rYS
SJ8jjEfUFPB/6XvL1z9ylw8C8Xt1EJRBG4STBueP6z+U+TtU5p+RmKpm+bEp
CtmuL3NprQ1l9fs+K1fub2pm6vj8IMq+qes/LLM3FKvZf1zi+f022Vqm9s7z
yt5F/ovzAPKuEkhpbnmw/vHpJ+29W8+0/0zl9ZmJEMrBMUi7c9cw4z/3GSHb
ylneln6SNNYy4/eUWZWKdFm5KH+EMm0q7b3rZTqmn39gI69lKe8vMzWWgjJ1
uN5+Htl/UL36rJSVy/QT0k8+o9tvMn/tyfc6dkR8/nYWj4Qzqmr2/7fM3lDs
zZ6y+i2SwjoG9TeHzf4TQOS35DBJ0K3lvy2BGCPrBUKR7wJhvUD21Ss6408J
q9k/Esjhjeeb/cJj6PWQ69BQnndSWH+BoK+tEoFh0SHIPbBHgci/mvXZWSro
a6cPQ9kLdBgoPz6auU7RoC/tevyziURIXc35E8GLX8xha5cK+tIe6dfHQDn9
AghbC4O+weCzmZjRfdX1zD8EkVfni0bfffHZIOc5NCZn9kK0Zvk4XkdAXbYq
gk9KCnTMkm8wN3KvZq8vQPqcRPGjrKxztfBJgG2XX6/o9a1SHTk/usbuKwGk
tWxAXzH2OUDa92tCcjmfNxp9Ed1aaB5TE9B/PV9I+qbCf5pyaQNx+TGGNYvG
1TBft+vcXbyTYXxyTR4/QC86y8e1HoNTx32b2buy7HLulf91h8WQPfG7rL4P
qGgtk9AXiD8u5dIG4lCfN4YbIAZnHtU7tD5VpTD5iTvfQ+O6n8flGL+hCclF
ZjRrFpyb6gjIDqsIshsrx+x30YvOMvMxKvvHJ4rtTB3bLr9e0T/A59y+pStj
yCdKXVb/3oJb3xpuKSEZTt3NZGhz6iExKO+5h/Ok6OCS6Ti4ec+Uw/LC88Gc
nKIaV5bL4LdyER6j78ryah19q80TEjSE2YmY4XYVs+jqV0McFgStcdMNO3oO
/oeJlarzTe0a9QmckenwujsH8yrPt9BTs4DGKXpxEcpeQANm5bNVEBbu5gEw
I0AEzEX5ZguxbQgs5U1xPmzcJKt7ccSjs3VZrr3jRrBmGtSBzdPUL7Cwe62W
JZs8Jcs9F9H5sJZpkqd2Pvy5KX8EzEnxeYeD+HQM8fKax+kCnzPE6y3SPBc7
UeTeSd2viqQHdXtL9IJ99xd9xXOsZ3TtXfpzgWgQJhflX7EYesr5V8fkUWJB
i+JHvPTHrP2IR2hm0uk6G5Yn4/M85NfSkysetYnjrwbqPCgO6l4gezeRxvfE
lGUblRPdsxC+QT4O3zOt8PStPKJXfCvPE0HO19Zg5lm1Z9pkvaWCr+Ww18Gc
qRWJ84PpIn/V4QB/TcxjUEZ5tnb3kr654fOSqK4FaChKnhHiCxp6y/DXA113
3fAT99OaeqV6MxeanYn1bk9pfg7QdNclHZ8H8u0FSfqkLk1vuX5uhrnePSif
n5R3jZVq7uOi2YQvRuAG+Thw38AEzP0bXXfoZHAug3OdWCnpF4KwjiLz/PNC
7eR1dQ0wGpd/weEAv6AOOFVILcCm4ekFTJGfTGFd5enfRLrDuob6pPCFRur5
8t3qWOmJmUEJr0///1uHUF/LM4/Q5XxVExwB4fFGZ1GK3gHgnUHNO9qeBHTs
wKHuudL2OksH8eC5vu2v76KgJ9e0fMbiz42kQ01JUXXagZp9KNurVc7UNK9b
9ScDyZ2tAUY9UNfl7AV8e0w2lPcDlVfWNAATuF7ABIvHaV0l/j8AqZ7KdwIV
IxyN8ynJHKrocq/UyUpdyzNf6L/bSTLceyGd9ts+8dPrnfanAG0eyTknNJeA
eKhHSDB5/rWzSogXApmLEk9aI8BDIQedRKq8L6Q83a73DD33DR1Ctci1Tq3x
Uk6mx5mDujWosBTNzBckLDuZhcTWpU0WnPTREl0Her4p0A6tDqpkGcwfjF6a
g3nX6FNO0YevPtQbni+1HOa2udpfGg/H0sspcFOzFEzKXzUk3aH6ZApiLu7h
Ni0SmXubPccFc9ZVEb2CoqYbiPzlSXs86RaMLnXwcsH5KcXNU5OYNwCiZZMH
3Y0xouedtKnMIwZ4MWxLzyAmldg7iDb0HURxlrFn6vCprHAzsjr40P/teb5c
ZeJYatvaj0VzGPKsM0930swtzeHy5eh6fjfXyT9bcJFsIvh1C887oFtxcVKH
a28cWHQ+v6MAcUtx/lPp+iaCAws++MUOZzo5ciXvkMzkr0m9p/7X5SD1RRm6
bbFzVe1S9PqDquJ6nsfliCGXjm2YTnKMcM1VtW9SqFBfCjmwuwhk7uoel4Jv
g2rWH/nrXytIsQNiHNTcizMwjskusvFy0X8qwOrQ9Crw35S4TPuwFq6nZVGZ
+3tS9ULFEF1dfBpoaS1D/LfqPepiEB+XNIHzNNqdn/wZT7z9lltHqeupJg/D
qQ3qom7J1WzhnYxPAisnz5eDF6r3qN29JHGQ6xqeaKFLbd597pp7f+C+N94c
UFbWt6iNGrao+T2IFTjRHBw/Xw5epN5T63QpgBwbPHOZ4gEYQuyuJBSQ0u5E
jyvr1QW3e1COw4tBjS73ilRqqOLuSrXMRYuHUbDUlNARmd5a4jsU2CcDsMiZ
YxXsUyxYuvvxAOyx3L8PAhaguxZnr86/U72PLZ+p144CYu6sZq5qn4wRX2YR
B6mHKFtAQB32+secbBzUWf/oacWEDYNxt1DGp9Oei1GQxJO2qyEfP07Bi/S0
naNumKjqgKUk9W5Gx8TD5yvOotRNrd2Qeq0jWdweeyLPuQepv1KBXFfkf8LJ
wvNKovCRs3TyfYrB8ltJPb0mqZNj227faMm/r+Ttog6Zq4p7JopVHOyV9whm
oSE0u7y3vobs2usVdjQoowwe6M2r5M+sHEiU25nh4iqsqj6yWsec0KnCpiW5
Aq8FbfU4X3s5uQ5vHGs3yAsVuR4Vye8I6PpUVcTElnr+VS/zHhSgP772PvcP
nYv6lFg82jVppI17PIyQEJdOP/SJXj9MHoPzKOGcyUydea5m0q6vFeqWHa2p
Ifcp2HEoxUhrdmYX2aDmt07blXdWCdAGHYGi0tBwdHweOkj1jYSPKcPSE4eh
2cjbYNxMBM9PA6hc0BjAacDF437EUmY2RSlx1VOXkjTnL+1Myj9/fYCTTYOq
WKIP9MRS/KxRZw1JTrCMLXV2JMiVQTHlqE11qGwKXy9rNSVoZZX8EMeT2BU/
h6QyKiCLEEOWdgbVnlxpi4W72AqpYJUkFBvJcbCfQ+rB2DAJcjGmjFeDaZix
LzPkJulCSF9uMNcd3J156Tt9HbXKiO7nzH4HpYxQRpAyPpiE0PD+1lc9ERXy
WIT8hajW24dNQ70YjCpLE09dvKALrmbFQKxpwXR40UxjXFkphxnkg+B40oLb
5xEXX4I+Uv10pZrjPaij0J3MH6yLRNjRDeRKx6tqZqemj6q0nBaq5KvtdGyA
TJYDcgumVfLFTM2Y+XZdJeURQuS48XKgIaImnbBBaejsfAvCGtpO7MaPMdjo
2kTCRGtxwGYkiGowJFVXBrjy4swkTLJnBVCMHYk7KbiaBpNwVw0kRHmARGmR
2zIKeqJ6Zh85VgdbYCThlOi8eJ3FrX7sQ6VWP2hL6Yz2WickXmfJXZPGHhjc
zAJzni7HJAoRnjhcajU5Q5Kivx6H25VEK34WuQ3cV3+uemRE9apVqxrehUBB
n6eevyR87aytG6fcq2xDxIyn3SPn1tZO+D8O2ZzzndJHLaP0QaLPd0+7+6jp
6Uh6ogRP8QJx7KE7DHiWK3Vbya3QfTjeand3L5mmq/BfctmJU555dluV2jHh
4yRg1VULq0TjmxUL/xywsARjH8SC65NczWVXN2t6+1dHaxaZE8SCOupRVBBe
qy4EVZvobth9QSDPXwpAbwBeYx1b9qtuSeE0HXx1GlLLDNWg9r4ofoOCG/wK
Y2LBVX6Vh/5p0K2iXuehkxFUg6r9KZaPe1s+iPsbEjPbmZm020iYifPMefUf
fX2/R4OGaEesMnKdcQUAR+so9MR362x80fO+NXfDTibosY2WrT0E+rS1O6pV
qtBfrqB/OYC+aELfm4dOb48AypdlQ0x1h6wOarM6bTvpyKwwO3TCYwm6RzwB
F178XSf+k1YARPNSgF92FA3FbqulVkfaJ9PFAi/y6aUY4gYVWp5MmeeHDoag
RWNZnNIKuMIWhbYC/otC/xX0aBaSaLsCAP5OAPzS1G5m4A+wafVqjRldRIXp
5Y3hhF3fePPJU2ebitCsfGWUix7k7ICwt3by8XHAoI4APk5HEQ5oqWZTWAkL
kmGCLXf05/h5RpTP8/JeGOm4mVL+a538fArgZzvVUldlLu681/HLK0tkweDC
kvBai6HfVzIVEqbmja6RH3ZkX5T8hZ7GnTfdcuvbbnnobY9/5GP+8c8ns9po
8vk5wP42E598kiStb7/n2htuJF7jRqxL4rqrW2ALn5BkAVrmKt//GfB98PWC
Gx/wkHwAc4sqoM0P3XjzQ2UtXVahhx9NjBB3i8RxripI708Fms1T61SRDLta
HrKqr5ecaey4Z43WLN/yYGBT0wk55pZmTgZfmU1MZ364JfqXdsqGMs3C4Gnw
Pc2EGLHszaNtbcEkgmDCfOBG3tu21HvbCDztDbM72+K0jlZHyK8qo5cpGUlr
MvTvCRAFfXunROLRJ9nWRb/4nPvSiyUuB+pdiyKdgQ13QzaB8MnctHxeNilV
9l+q2JfDUYOtS92uAlMyn9/J9v+whYSKcFzsFv7MFrl8VJuyuWhNrv6T4urL
MFegbg1RnmkZqnYQfh4wdE2pxxBeRfm9CuWXYpSVLQdf3InydQDlddGsDl77
QlKvSf6jgqq8BGiobp2eetVP6MT5m6V+QzC74iiuNqqi/O4CJVqrThDJtD6t
E+IfYIg3rGmZL1EQvwQI0q7VpnL28Z0o34NR3q8MblrmfyhQ2lNRp4Egb+6E
CNzDhuf7Z7Psb+C+s8RZW8+jKjJ8ruvESUS3o4pc1XxTBttfhvSmqjjHKaqv
rnxRN72je0lEj2Owcetqdyl6cYmztiiUlH9kHZxXYZy3YMOo4rwd46wtlqxu
uP/NQ7vzSqScu0WqMx9UQmuWn38/A03NOIc+MPUZd2uAbgWAHpINsL+0fFuJ
qjYP/o5zV1/P8yqpCadknwiwPKy0r2aP60X9MOyE72NKLYSMojfCcVCz19y3
2JkGtSUo5HHqzLm3PvgRjxLbWoCkGzbpfvwTMhJPza2vInV9uYYklfn2FCdn
gbK1YXHyKv0OH3XLS+KMF6dDkFt0oQ9CymFp+83+YBd3KJ5a1ksIOGxLp9PC
cUwQhKodnOL8qnZQnfuu2MGNOfPET54UzlvJwq9gCG6D+KTTuRVT1mR4syDR
VC9Xdder5HTuLtcliOeWRykM3S/f2AZU4nVb4NB6vFpu3dSGkyI11ndBhmbR
choGvwpF5NcxCnNivLpmwK4VC6P46MTctkW8UlzIb6o+2SyoOhPIiQu0z0GL
w8i1d1sal15+7e2Kg+364a4FTZ+qTVT2cRkACDzaqdW716xj7X9fxRMshHEd
w6gtrljDYAekRbfiY2zmBLJesi7SgtDdvtCaaO0Ig1VtN4RoBME1ye40qJpc
0Qc0zeVK4X9cVACGUr3GcZWy1jefXmjLMGlZSOnOO/kIg4RwXasIa6jtVSo+
6lv0QWkQw5stpyqbIGwn2IO3Bc1Cxx4ZLTWjHy7we6MKm1QaGL6G7jVMqVzO
Q+PVm0dXir7Js0u7tNtqwX3SoK1wzijM22o/DXY1r6LiWywCiho3cApi+Qjq
aKKSJOg5UDJMHFLBKvu9JNxBNb6DVXYKX1CutmVAW4FY6ebyX6Fp7kk9D42n
HcQCZEzE8/3OwgT97tJ4nFiXqVKe/OfvMIUe9rG31z95sFIYwAOZrgAi0I29
i0YI0cQlrYwlTMlf0xIMDhZXcdGf/FYV/TTk/R5KXZMkqdtCtQJYKQQG6ZDt
DgnlsHUBZ9Wuj7osRR11lnY5Woo5/pl8WLZWnNEIl3bPLhT7ho1leuvqiS97
yCMeGWi89nFPeXrN0iYgwDELEFlpcQX6qNNFE1kNVq+ur0UfMpE9W0yFFuUX
9yp7azycLYACwRt+mSlvcIbxLitgHxi0cgIWisVhw9CzcI+M4CFWgpkLp7hs
Dtx70x8dUXqRfng6xPdgA6wkXw3aSDjink7v8yp+RysRZiQc7ad2FQmFUUsJ
dtvrhKhTe8i2Zkq8YnpTI96U45lpC4E9Dg3z0jcOKCedtjlaqD0bxteR209h
HMA8iuMbC+OJvmJuQSTj7ockMgsq21yEdRENn5d86mc9KR674XpKp5xEKvQu
ThtJrizblBIccUjaQptUlxloSoM2vaLhVjyPpy09Q6iWJwG9SsDdrBnPvznZ
5SrbTs4sbGT6IEtDU3tVU7pMvUfO4NTmhrQwzJ344pi3WxQM+3QePxi7KqZB
omkJfJGXiF1NW42DaGKVwtInzo2Ghi3MoMmfpDOG5c4Ls1CNEcl7EbjJio0z
BC3tU6ZLn17DcrOZK0f0YkN0sI1nYkKDjs8I+0xelgFEoMuKlMdL1+tBHkUK
Kzo2t0XqkTGdMyWe7k9X2E6DKlI8Wb/t10lGFVeuI5lV2DEQryqXB6n37CA5
9QPoiYltmuX1uOko+rMyjgiau6w+HsuFr8IsJmFYY1t6EBIqZhFHrzT4nGNI
gXpdXXJRF3uCBoybuuRiKu3DiZuTePvLtt6IkNwwDfG4d1ViH1tKLDzH4Gmw
rTJfMJQWV03veS1x4Y7GtLbg3A0L1eqaO6NbaMNOMDa1k2nb72Qy8lxicWlR
+jEtX5EZWLsiJw6j0iC98HzfFEHNg09OXBLWFs3D1Hu+E6XW5xbXjUog7NSL
Ni4taA/TUu9hIu9Y2acGFsHDsQie0EiCvr5esfEYy4baude1PUnaaZT1rRjt
E8skzRXlr1No0ZVayB4f0YAVz+GY/iefpDO7GuYXlZ+tgD0qA2u2SKAGTcAe
DIBFDzLdOxi+RmEarWqdhYI2LlF+IEDy1EZ89PUshSRuaa7Uv2D9KlG+uXwX
qDxtTTD/UoFxFzdXbehTGnl8DIbF52L7t8E9U8G6FWlrkM9jG2BuwmB4UWDN
nTpfrRA92CKip89s4Lg/fhf393Wb8FcpCLc0DedzGmDuV6oivANe8JtgnqHA
KFd9zTL+OJw10ahseAXHIZqG85UK1k1WTa6YP7EB5t743TOy4WgwbcN5ukL0
URYRPT2lgYPbG1vdfHUG0W+9X65A3Ddrq1nMn4aBUadwMSb5hqd4hGcc1OeX
AXaubfot/ssU7Htn2E0je3L4OkJJlqlPN8S9KBwcvqYhdw3RTL8b3FM4D+5p
G9Cokg+DHeq6JV6KcsRmEd7BTircLLKfwhJENZxO9OI2d502vOdFF6scvuLK
KodbyP4agKsvfr6WMFnDflrCThO5w5bstPK7a+IeER00JjEWk8BGhMQVaxVP
V1d1Ud+DZU5aTonGlg8e43/KHumD0xlfOpLOT0hx/MxS+vw0Q/JN2LPL4Ga1
yDuf+fkqhlppOqK7BAHMrPO3rwlEE2gWNsqspjx+vaNFKmxrESLtxdMMWqrh
/2YZvMoUNFE4P1nXH1q0Kw7jvoaDvZq4h75mg8HdE36Oo6XZujpudDZa2y4z
DyVwH4hgzOxWy1srDhKboc1KMxNENv5iZRINTZCLdomD2pYwov5qCivUxdf7
9O9a5bLCz3TosNrZiIfKjX7krEvUj+imrppNL/YpCYNL2jTkYiRxG2IyWfDR
/VWSmK/FdA1WK0kKa5eJtEAREj5RUzRJEw7OivlbjrCep23e58OzLf7oI/IL
rCpTfuaN+bYR5P6rVXyswYLiRekhqutxKGHCnsk4qJnkzbVVnTU6DKpfwRpN
bd2oeJ2GC6tw19WhsJ/NotGafR4H1xXOB0j8dZoHHdSNu28LL/YPhonhKQQN
i9eGWbkNcemfN4DRE1kA+5pP/pWHHTnbp10sawKU/lwWVpzjrbWyNJTjvhHx
fVQELR+RprA6DLboIcNgV6/jMF9BCiXKleuhQuUSJ1rEyr1emdcXxiLUPvYU
FjtA3iK+sQy2HaC/ogj53OZN/Lf/bBLPHSHx/l0Hv/fz3yIELCjGMhhLMBOZ
gCWafK28WTXhScvDnJclivpS9Li4MTvAoQHgbq719SfV+pRuKZWltRqomNXQ
bmvoHVoepRc7lvCoEiVNxgV31IhdaEPatrQojG+2KAyJ/fHPDafZveCWuUg2
WNOBHQWj2Qvmc6Dqu9jAxHiMqvmg8yZaTJlzLk7p2TEiP7Pf8lpng0fZ1vct
bRBy+wz11nbZrSbico0R2RkKq/eli2EUGlHnXkesZpK6hszuqkw8ATzE56z1
coU7DhUj3bEiojh8d40dLPPdBI2ZjPcxEF3/BNOgmucSMpdNMZfwzt5fEtcZ
1vHlTulOZ6Ep5+65N/K1zEnZG2HPXiS2EFmsIfct8vBaPlMWaRK3VrdvfxQt
u7CN3AhHa5iGrEZ5P6bXhbu8aSgsoVp3rJIkvEfo/QQnpVUuldKHb3OxVsE3
PTT6KX8RIwy2DjlOBrEMj9oYKMm1LolZqi9OgVMSvQMOeRFCI8johKA0DSeK
BQmX6kuxkrB2TaGk19wLYTUj75zFxjaKqrJLWoy7iScVlqDENVGvYco7e2ZT
4z/JLc44UZdHKKeaMgAJD3yfmNUvuODd9jr+nCMkf/VRv5eX+g1RaCo+7l83
HkzeF/MZmpt8jM55jZefxTfXXE8iXmdrdO4mKlmiDEdEFdaPA93rbFSSXtSJ
lEwhjfqd0W3SOKg6Y1UKOFga3yA5N48S/cZT63oqVrUnSfIbWvLx4naSxKau
wFNf+/1Oi41bBwrZLxPxXO0+z8qZuEcNshJ2svgg7GR/PM1KjQdD1DXXVMp5
qskZDKyDML8ty7nRGYpXJqSNM2GF41SWc2rKruZ4MgQiDsi/UXTWXPPDYH08
n1TC/QeWohtU0Rj9CG6tUGclbFnTdWGKfM5KjFsulpikFSt2GzCHJHCqYn4O
i5lPqTc6D+/iCKYaOegsnGYh6ypEX4UaaJD9otsB3mtJthxLEIS4zfXvmPxs
80HeIo8EiWTvmCwcX2jFLIyGcnWdm4+7SuGF5+/AwVl48RIVmcKh8dwZYJ5U
aslw0D07781UkHv+5OVAC+tvEkXULX9p1AAasm6U70La7yp5te3NOxmlNpLh
Smsl9DmekF0KbON9mUrTTQZlyVuxhr+2vNLTyxsc/gPMIfs+mavZ/4ABJuMN
Nc7ZqNJnK5XmcZFzvnWsruFZfxua67+MaXAF9IpoM7rL8HeYb76ntTHV/PuR
lqC7Q7F8BzdwhG7PIqI8r0CVbM1Nh2YvppntOPwwYPRvQRj7XGqU1XcokKei
/QqXd+VBtPRoTC13pm7JfcfDL1d2UC21PwbY+hsQ9rI5Vt+uoElRPQeK6kaC
cxWQvGIQeQ6xzjHizuA/twzSExq9fAiEsRAa82y/x4lSDbSf2FqmoUzU2HUh
9QeJ7MbbTp4+G45qtr17RAZix262EUID9b8q9RKY4QRzPZ3fqTJHOgtHiimT
/ZD2FCOSQ6hdnL07c9YscD8NOPtLzNkdHFzvXPxvwJQqcyGM71ulL5KIrUzP
ZdGTj40Q430cr89RdSx47wR2uQKMfgAz+oNlsGX0bZHWoEocqlziBITYAuV5
ZbvsdVcuf5BpgwbjfwFuZezn2PqhOW5/O5rSUG8wCN1uTa261ehzoxB5fEc2
4mbx/CXAbZwQ8c3jj1DwXLfgtyzLqFtAfWR1q2tqI08ABb/XibDpLSAy/7sk
zlrr8auAZZkjcCz/aGa5USNFlk3hPZNtOsw8U0tyLLOcbBr5LvZdv6Yv7NjN
fZtlmZ7eABj9M8zof+fgegX1m8oG4wRK4vHZypJJA8iSL65ZsuvAZ0uOnL01
piksmXi8C/D4pyCMHVs2iupvROUMeXgXx3ZLrcTw/lTWYzJddIOiN13gRFvM
VzP8G5nhZvvzFqszKYvvAtz/eMm97TFInoOqqE5Z9VLH9FxmPZnwTr3PVzvF
axUdZxNIldVS+1bLrRTDdwJuucsxV1Gx+HKprc1M8fwOsGi081kV3drxUnOK
PbL+RmtRrkX6Xcz6H5ZKDcE/mblv1Flv5sSNSVFt8fex+EjK6BSRmyOd8Y6q
5+nujAYz1169A8vi97EsfqYMtqX+zRYwmPsXMYQo989iSNb+AUthxm0tZRqX
Al6XWW6W8z/ELL8dswymtxDL+YjdbXERLBQ/WQS7o70I1nU+z7AcF8Fo/7Fr
pd6N2ftdzMeqDLY1GbOXDnfRCPaxmUW9KnwHv9JTd0SCrT0dsfP+v53773Ka
Lq4K/2K2FlCo78Zs80CgaJ95L+NclYas+bFx+wRtpNgg7ncS91HPWgpJZfdz
gnQOv9UpuQ19Sm7g42Ib2ik8E4z7Kn4hm30q6cjs34MF9NtYQL+IYxdmbw79
nWLzD/tBwjvZjFSa/U0g8ayLb0oZtx+R2Vbbtvdj8L+FWf2lqOWZrsym32kX
j/Wdmttul/l0KUOf0x6oo0TsTpu3ibmyXRnox86k8Etq/5U5rtwXn9KSQfhs
uwG8GQckb7FIqFZ/XSn25j5uPuopEx2z1fnfYiSoI/v6qI61jpXwsUteCq9a
HMVcYCRvAiLlDkr/IZF49pSHFbUqkGJuYxBvaGHrtxI+1SkThrNWQmnAKdGQ
9etbeuvf9c8HOocfQepJNkIxgTP9kOHrsAjekm2l0UK4Lz7EObzCgsnKOYYh
xLLqK6bfzBD6zTUe4L5j3lJOYDC/hMHEdqLbYvkUaby0aL4Uq75rgegXMaL/
jRVXRcTHCflykHZBvhLjcDNZhB90q5rmyi0CLxogC7kGZ/0amzXVZm/P5tFv
oXx2dfierJb5Anx9iak2jfkHpZXYbgODts4IeHkHep4ehrwjP64f6mjhOe5m
G1VM6FR6acNG0gDnPA5uz/9g94uq3aDyOt4Pu0o00wdtXW/Ek3y5BdlPGaW4
autYAnApABT9iQk9kZ7hV22dSNLnk2IhiA95zbOkSNEuIs2Chp6yWVpoOp5T
z5aOo+MhD9ub7SSPza+9WY0pw02UelgQ/XTeZHBgkT2ofRcrGzaDYOlfkwac
Va8SHo6vP+yxNltOer+0b4kuz9vF6zg6q+XKXR8/l2mkOuSPcNRc/n8vi25f
MjmSec0lYRLE9hDHMJSHC0d5sW2JcwwOm3QY2qkVqwJJqwWp48WkBhLpKrr9
1DglrZzUHV04USG06vRr+rg930T4UpD70gLXdRgAbgQfD+lMgy0CJHbeNrpt
5OtIwmNnxMSs4oDL9FUimLbaToOqROIZsGnInwZ/FM15gqdfnwowL5IOnLWs
MpVdjTVJYMAb9Q3j9Q1w82jd/uJ9EI/y2QbxeEOvOR8+DUb+lgbc5g7ixVV8
uoMGdWF4CFzUAWDuME84N2qM3wXicxs4RwB/BcQ35bQVb/1F8JreHE28al2h
dzeOg+3OoEMAR3JUjc3VEKx0GzZTa3TzYOLFQ52+qlyWDO1XqFbdya7vIHYF
4k0gj/0ah23Xtp8KEDTOaQCkOxKvVmnU64y2c9gMskNMlAIZxw4IQztsFym3
mVsVeI4i3lLUHIDGC5p80f+pMjivwzWmkX7HSoE+aKc3UjiqKOIRUgkz72Jt
Ienv+drCHRtcASoTYJjC0JHDTSAEGodtjYazcTD970PVF65xymanjddQaTiB
NmGDO+uC+kzZcOMIaYypx0gB5WziIJ7ivbag0FbdRjuHz5K9gFVMQrK+LrBk
0zkPTXYaCpFQLo16YNLo8oUYTEYTye9igf92JtA3pcCzQ0XRfxUO5s34cxNh
cSvUbPmPhuTVZCRUuXpi5eJKONG+5wr/dnpqFPmEI3ychiletcjPnLOtH1qF
xdzYd7uY5xaML4EYh0qx8L+Bg3bNFrpsI3oKGYdyvkKPCSQ7ffxOC2bS6RZj
Yqzr/G5PsZY42fGpOqyXPqiiQ8c6UanmDQ0DnTdqz4Oy6/eiOILdL5UVWNuT
/20LkD7nV0CP6nSTekbhJEsgjwvaQAvIFaBCwI/b3IhytWS681RsAxe0bUaw
CQ7149sl152aVDMGMwV3qWUY3rfuTJnxFpY+0c2vUY+CvnJp5fe+imeg1sts
cRozwtdwJMt46thCRfp2pZer5AxVaHJescmlo7hoCF7xgBo37fmFFHB5ri24
bwXYiK8FQeMuo/pIxNjj6SjIsCqfJIdFpqPlOA0XvBSzCS4lhaRCBZn6kbzR
eBqMWaUPqqX3ACnk2vp8BuioUKPJgmWteHOHgx7NsswUMxjV78plKfKbS0X7
shvHAxfJEOOf1ATDNeH5FOJqw8uAi4uj6L+bZacwd6JbF2Zhkinyt4Yi7+Os
poX53/gfu4dMM/X0y22YRWPr21hWvkzHfcm+BnhvGduOreOWbBEKW9RKMKMG
qKcRd3MPLGJOLXEkfawCksScBFXSZpGZMjRQBexQeZgyR5JsP/Hi+mEonrtU
hD6oxj9q02oW1q0Jplq8avNOFtegMg3Z9LuvNKzOrOjhd60mmGoUVM2VPtzY
F5XOOOg6qe0XIw8+OIOZAXaB2/xGGButvOE5lhQTb0BzfY5W7AREt3tSdvlw
ZA6bX977BHosqgqqf9CmZK4s5vYdxB3wRqjIGxoqtGvUHaBULIW+aMfVHWOM
bX531B0EBc0+cydgX7K2iwhjJRH7RCvO8NNv5bJlEn5RM8NjxFw99tYbS0Fi
JWSJo1k73kK17ZMP6n/XHDGqeFwjspqJN5Xxdlu4mlXMZzBf3uBMvizOltel
5eTCOXjLB0s2De4MOhdvUPFmK/tsm6VKTA226I0Yqx32xrqpa41U/fChpebU
Qryk1Fc6fEDM7in6IOc0M/v3lppA0AoJZ85xtNJHxSyPbeC0i7ETp539HG8z
aXVQfb0FUTyi64gViGdgoCmgPCmY2UTz5ntDJjBpAnEkMqoMYwHfGjUB9Z75
On/sGfFFAHGcSNAUdU6rzJDZUpGD08YdDWZVyocprVKeNZ0qVBsaVUy71CgD
Iq5OmiRz1pW6I2/GUhEkZQ4uxt4STe0rKTaecPCmllJiE1X7zrOxUXukpeEL
C8184i4CubwarBqYTgd530dTHZWLOvhwLTwmX5+g5DMNqFItOofj4JdBWHLj
YC1uEllspYhL+5S3H2q6Y/w9iRjjTgwJy1UJ20gIyz7f6xe6w6WDUQFWQFF7
cjGFFU6uuRzYHPazaJqw3Ww9JVBWuHIMiIToowqgfMJ73vQC9lNt2Pi2XtuU
7ORvUlz1ZIuuDkR1gdvMqKshk1apbBykb2jjoTCVB2bJbT1JNUp4ifYDHGnE
b9GKmw35YpwN3YDDw55sW50riJU7cX4I0PgQjprLfTwrYsq4G71R+EU2jGR5
JUiLptTYbc95FE4K2/JU5O0q5TEshYqEb3ZCvNiGEUm0qBfdcRmT/jIQ9lAA
kc+hDF/Ir4yaNoFJ7OV48wNZnhQo9Ax8aARTBCeY7JzXrwPWuSklCUt4eEaG
cTKHTQKzd5I6GwsPEJtjUKJOjchGSlavSBKVRebHvqAsda9xNahP72KTs0Wp
xV0bQaRjETofe3oavzL2tAXshGf6QTfisxmut507yuBgO/8fBc9NgbzRiorC
toB21KWNKfwEEKkbpQ8qzMQj0bslNflQBrQfGe2PY9e1y8kl2gOgXavNlpNJ
JqUhgHyV0lLC5E8PF1KrHz4XoML5An5lDGQHGEhkoTW1zqdwC1N5OQ5mTTVO
xLwhg54Gs1Zgx0w32Hj0bhuEkfZp1WbTvp3cC9xmUwHdA/mr5miSsF0bRvFp
t+kiPG4konRql56+PD09LD1FFT2FiRkV7QIVbYB41W4CuG8yPH8fDqYki8Y7
9BXPYT8JwNoD8NvzIk/Cmb+Mg/26DRfXNfHG4/SfD/BelGFZ0WbrfxrO7T81
AG6VSZpn5KJzA1ad7TZeasH8Mwzme0nOtW4Cw1nzus/oVuNzgdDulW3PZvTP
Mbr/yDTM0JTic2en/4hldHZCu3TWuNNFLQ4kHpDvyBYPL6nxAA7ZNnmIPnri
fkA5Yi/wt8ht0JZcUiF/cufA5YCTy2ra+FKM7LsADYp/yZqcRF9ZfMp0G93J
ITcpsNuIRXy8g5160X0tdCULOxJIn0sBQOTYq8Uk8CebGiFujNc8Rsq7mOIO
7k3j9eaxzGj0DLKhLwAQ/ow5XgT4O7Umf7c3+DuW+es/Rc2J0k2vg3Vno+42
ENUl/xaInTNrsvPtOFiZWX8lweYzfHTmJLlwOeDkWHbMo7mIbb22CfGI2M3E
ixpMnGy8Q19so3LXbXKRexszcRn2PL8DNHF1rZ6rMBGd4cNm7VSZpNmsXaKZ
YO+mkYHhhPVhSKUk9u2Mi6xr14T/bxvwuRuwZrln645HvKieEn9HwxXMQygQ
qTAsgQrOUhMesiK4i1RQn47BfksIrTbmiov+0s07L+TK4sBMKhN3JUaM0zLU
5zxWY+TrMCP/2io0t5lXc/zuIr2n4WdDCko4nYuCKCGQOmKhbiSo34yhflMN
6rXYzqpQjxioWsri6F3csQavqgNB3LAQX4whfqPVSIZ4fQmxWSx5DBPvvaKm
KUnzSuBnk9J8D8b0vDLrxAZf7btmcds22Exxu9JWGdl90PdibFMDG9+W3H8n
5JaBFQwwafVKW3iyU8LKAOE5DVgfVb5rGtumgfWSqwGsuzysl2JYX9/IunK+
tQpraWClMhDenQW+sVuwvhYHU5KPLt817X5jFlZytJrSvAzn/zUNWNJFXKuC
/geHwPafMYhnhdBq88HuWPqr3jWt6/sxpmcyjbJ6Zf9BXab1dwZOKoN3WDjJ
jyyleTmG89U1OA8t4dRM6m8NnFRTaTjP9jXVfynhBPLPiDSKmp2dYPVXoX9j
MIVim25HvNJ2VnLNfgfG9BWlJFI19fAMq8vCeeFB2sQ0ZnJtYuoHUpofxLC+
vAGLHbp1mfaHDCLjk/i0bQKzLb0CIwId0YTotvJdDdFfM6LYz+SrKyKiK7IT
4cLT5A9hUF/SyBjsfqzZ+F8ZUElMtc4vpfkRjOiLy+CE6FH0rt/M2Ue+jCv0
wMiPK7L2fhTD+sIGrE/idz2dhA9qRL3DNUr5YxjXUxu4HtNQrvti37J6LKxx
VcbClFLtm9fVZFxVKGvOyq4UBIqdVcaphvIuxexGdnn3S/MUWEKGLrl4cg3W
p2HxIljsejg23+lSUHHxad2/bmpd2vr0JwCUeFLLjGL3apA/neXSXbuys/04
DZd8zgruUEADWOW9dSneW8O7wASahCPS6OqNSwAvH5fjpR5HxQki0Y3r1j01
NR/V0tOlesaXekobeM5UnJMSmZ8BnKjdF4mTj83cCaomJ59ZvqtxwjcEyBFT
7yF1g3VQOkddAeRHAcpK67fTAP9Pyne1wsFHXYsOq4XlTJq6oCxQU7cnyNsN
4X1Oma7ZJvypB7gAAHcbYB4BwFMvOi7mwKr4cZlgV1n9E49yA6DcqSF5uFU7
d/FBR3/RQPy52EwQ2Hd7sEsAlnSINrJQV5ouBmQNS3hAVR2dfG7DItzXuzy6
TYAuhplZLLQR68EgHjO1pddVNG3K80kl3loJ+mOPdwvgXWahAYC7WZoFEl5L
7i8vf+ThcGHcKhYIB55QQ1sHHgikFtevy9UoBbCrqPyhBxhrMm+5NNNH4jma
s7ZLzE8ttRSeUUuGkLzJv9q1mls9/0XpdkYjn5uBfKogvwCDvDjnlWh3gRQ/
A89XmRNI0tqlNRhPKWGESHzwplZs3dcbsOqgIAyxjwHxjtWQctnDq9pH8jtd
0VeNjTcuDf+IuJyGWBpoD88ihS2oKU57y8P/FAFve5sGfUxojtDSRSh2ukvE
vAWbwD8LSO0SIN04XjLNR1xXLcsAb5YoSltsQXWw7b02BAv3m6aTF/tKViSD
/Syp8Lga1DELJjfpZBxWeGCchj5aGgZHBWeZdIbosBk9/At+YdSB7ueUZTHd
zF9eK2FPpseidqh2FTpKKbsjb6gGeqYz8o0djVGJczW01FM9NL/RpGSARD81
hvrgDjdWlaOm2tIWGyR0dVFLEuxlNcFW2pctQKPqq919/Rq/QspBG0rRccZG
PCMroBlNR50U8FG4nMSzq0JzihFMHlV9fGWWUdLHyfCNSsfxmvDALE5IuAlo
UK8OSZzvD4ISV8apayq9+Xgc1IclWj1cOeY4Sx+nTs6WPLYt6GlRZ1OV+1fx
CyN3VA7ul+P5FrlUA29Ow108EhbqRCJd8A0FXhfEoNuNPQ2Jy9IP5yrJct0C
MAz5YNOiRgue/rmAjQbVN7LmrW1Y7b+zXSLeIrzlG+0QGCKivaVI/Hy/YRS/
8bM8xlS6jo6j+HHIhxVV81krAMioVTkrKRm3vqOkrfskn6974qKUKQOoirkh
x/MqKEXJezo2fVtALf+RWt1javttLXCx8SQntQE6fWY8t1HcevPdRcuUt4hh
0mFVKcfeqZEyqkHuw/GMoV9ck7JbMaNoaOtxFvGT6Xfab5mm3WgX4jIsbsrU
W5ozpBlV3ma6qS9tCn907e0C7DWllFfxM6y/QAXvKhL+NaR4h6m8JI46y2fJ
5KabO7uWtK7fDGnC92x+Ue5TRiWlqkO3CNuhw89jafmdptv58q2gTVn3yVPy
9MSKTBcr5pu3FvS4EbRqk8Wbt1iLxgVaECdqqWGXi2IsJUwKTF2XHR4Ya+SW
OiqBDAF162DVUxzbohJvvCVkflzJ+4+sItHovtrQXVQbhNLXE+i3XSeK9/Ed
KCEs+vGCxn7+o8UOurTu4N1jeSFEVuKJpmy0GbhEywV9C7p/ju9W/f7/+Xr5
o+vpwh1vfO+o3Ncn1kIU45kINpaWzwxwRhe7FTTxhvWqc0ereTZuP2PbaeW5
qpDTtmKqBLKVe+cX88YRqwRkceWEIn3xBHxardP7sf1ljeqaQqM5bniyfanL
Gge+qXErXU/obmuk9PF0CRo4qPGxLqzqxHH6xDlFo9BNEA+1/67aGXPWNh7h
mviF0dRFQCG88dGWajTJWVVcdZhAX3F9p1j9DeVZ7TYPYfoCVU4sOx4HLr6i
rkvivZpBW7Gs2ns14zmbzjFekBTPERczcaKmk0DyRPKbs5SbZn81iFeVMg3a
6CxQ9TgEfcm63mCX+yt30t6YISRa78cCdnfShobT30lbn7EoZOs8oZDwUL2G
ToYS7X/DL4zVIeFFIRtTrg5F0cj4Cttxj0dnO68+5k4RjYpDbmaXV+Xu347r
jv9RFoqrL8wpx/B81EbVcl4N+ARuikdZfgsQCZKzuts7yXm7NlZFo6+TTbPm
tfb5+7apdqBisgk6Fu+1yhORn7CXyNMlrFreGcblADiNrK/mF8bM0JFsovI1
gEq7VMdNJOlAS+jdnLLsU013VWK/ca+6XMgb6sl0r3rkPdeXJz2Gk3UNG9RX
gnhokbjad7jclrjPcEq7jZt32av3WLUJ53Ri36lit9MYDlqPU1EgRQNywgsk
OiY1VRDp/Bwwhurk73OBBI43+z2frtQoxnAGbJA/kSmnaQjqUX0gE0j3zJ+u
2UHB9mkAGOlXxUtS2KhJ4fkWa0cngl2ibGiTkI2uZof5pZYyUTtWLxzaFA6k
amwhI7jco1FGn4SCVM5+zPqPr7qNAkSxusgTOx5mgeNezfFVvAsglYEwg3XW
boIlrBcz7Nz7ACUpUaF65cpsT9JVqIjuXEbtWTQKWibR0Z410vIG38AdHvUW
MOnjx/ULuOeH8n4hUNsltvqJdpZK2x1KRLq0HUkiOtVR9QbrurJW5AoRXc18
aBElPuRA/GAnRiqjY9ptfTCoeXYeGGuBxUEL3CH0bUBWaPCQYX+KE91dSnT6
9MBWEp2z9NNtSaZyeqW6Sf5AknnnbyHJa5hBv0wRF5CLeYZ8tHc3bZy8ze6Y
NRvxKI8XA0FVh7309cmZJ8o6COocZbtt6rKYXarNr85UQzgVyvfxksvtR49e
nORzNtdjdA97yvgyj4TruG3BTjXmYLu6cYi2pc86h/e333LrmLYXfheQwZ4t
WLHuSaT3E9NUtO+81/HLWaYhWSxT7z53zb0/dOPNDyV+ztZq54IrnohYBoSV
PdDCROpqvyQzkBqk9hrKY9r8vDIqj4/9XUftMClx420nT59FTM2oSg2EZzac
J6aiMwbTQKAuXKzLiH5PK5VB3QyEoIp82pfP66dsqqbInwVwfNMcJOSKPM3J
4yLPhlFszD8BRg8U/3uz5pOQtkCrJ541BuvFgRcVqAqmDcp5b28SWcYWNz3V
asgkru2auGbaGurerVdDXqdSuwMfZqhBkf8TkNUSQIpexX0jdXg/ERlv3Cwg
pFH7TNzuWagE7wrVG07zHaE33C+ueEY4932Ym1N2dJIl9lIgMdQrji3SnLMJ
2cYPnU1klOqwk+/nmVNh3M8DdobWRt/rJK8Fd9AFDEU1L6hUBGc9A5yu2dl/
BlLjPuK2hlRpqrDvisKETKV1xpZCku7xjCI1wWh3l6qvqAAGkZy2FkV1Ox5f
RcGY4+NnakdnuTra1c0UAYpMau8XzSM/9KXOeqWidMaOBqgkqJmAVJQudkUJ
DSyDReSiVDB+TSQ7qHGtOmFtFcfHKalL/PhHPuYfp7IXMLfOXOnioAtXciZw
l53B4ykFUCJQZ8CVCOqVnIrzeUrxCUxNBKlQqEFtWSjucJHdGThpkGYUfAoc
5rsqKzgZ+o5TcCryV9ginxVczCC1uNPjAaXgea8bBXfSCPs5wlSMr8/cJfNF
Y3VfjAOzJ+zsrDGtFr+pJFdPdMvp6UGV2ruwfw7Pcms2WhcAmo12toymooVb
NxUdTNdPRRfMpoKoe36Pxcwibx6gqGtOfQ1/vOQ0rWsQpxXWjjVm2U9dCNZa
3j+cErn5SYNPOr339EEfhqQjh3qs5ZfD7ApmWP8Knb5LMpOhZJoK/3QPk6pw
BjX5o/7Qf0h5ylwxuaUP8elTn3qxNupSyqtbrM2nHA/MUWbwA7t7cQVQqdSK
6kyFZejSo8ayqY+qbklU535p9Hpb3JugjmRuCtNayfVO7w2lIJMkDhRPPYwN
EsV2WrquiuRsRSSJS+dhATl8wN4hikPY9KUO2OpxZYgZSC9JPsT/Us/nJasF
ViQCCMwtgxQW1OwuQ5ikTenPNfhNnUbnwiEbcovfQjj05Tz9mQOfcQdZqq5S
optzoq5Totd4pnwPMgSqKijVWRT55SBy1VOL+/ruSs4kb+mNqXrdlqhGzmXz
uEbOMlaKXZul8CzKvPBsXwfYviJbkWU7dmzWsKL89R99zrEvY4aHJ/BatM68
z4NKX+ZLLXM3AyViTwXwDiCpqsuUufzvjfM/ZvOXTjMl+QHOv889ylz+aveQ
3pmmvRhAEK9wSnNdBOsMxX19jwcR2wMZ7VGtXeyC2hQcejccp5c7BAZVA1b9
oMyBuW8Wr0wgHTR1jyVJRMnI34aqkGLjF6NupGFOovsjTmJzrlHmcMY9gIJT
BLcTiFP7s0jK+lEnn/lxSP76Xp/vTTbfUAeEP96JDKp2roY63ZzQF+0U2B2H
uPhFm8B402942kxhW+AtbcqhLSS7Nh64esjmoHYsp89GDqLHMf6pG5fflIlP
KsZWymErvc8oHTcOSTUevsvShB1JuWX+cx4oxRLE205hvHfGGwX7AWg5iil6
vkqz+wmJOZwR/sLvKT5PGfCkosS9nrRHVTMyESR6t5R3QnIPkEH3PKPs+rez
4sOb7KLfbWsdUphjK21f8vFyGH/rfPjAEW2ERtcVuFOI9Kkf/imEVz/qAi8Y
XYOkQYTOvqAwd4+B1qWRSV2X5njTMLTP5R6CzGY1idXLN/E/V7bYE0gacs04
/s3paI8RyZtsFR09XRBH5rbLHHVL8OqCNQpN3vQ7qiiTijKlaFYH0eeBlkR4
dpdBUxKW8+7ookoOlg/mTciOOaxyIHE5qaAMtjiT5ba4M8xsGVV0kw57nUXH
5YAyJXqbWvwOPiwRkukqx0u3RBkw9YK6Nw4l6JoidQUrn4QL7dVGpdTdm+uF
AHU/DdgAge6Lm4JN5ou16SHBJ2030/OGJV+I/4wC13cORl+fSbjCo7qoloEJ
Sxm6erul347qGSXmarQ4FNw4Or9S0eJOplqlCU51aWE2jnabTGDrXwPj+PuV
kr8QvjWf9aCyrvBsr+lJhOJRcslziu8NrqoiD9kcousfmcniSLuJUz1ZN+w1
y1Y/nU6BugoLN4rsv+vwXu3o67MIWypXsKZsC41LB132Mw62jHlBUNguYHo7
oeAkOoNNi2GMGMzvVkMXfZL4d4a8LrRGQ/VSBBjo17ih1zjqg5QxDlgZmpYJ
uwAlyfC61YFDOYLRH6ETGyyT1Zok0ODPVbskOdwWsQvCwrOibFw5lGfF/vJk
+PR8cy8hXU66GlSPZDEmmpI23ga3n56mSrxYEQtdCZfflKI1ZlOH/6fBlvXV
gC02NsG+7pQ4WyDJL3GYpgxv86wX1t3VUEpuxJz2DuBa2tgyUh6yhfZ2C939
Z/RxZUwgahh6SDPbPNUSoqvGw1t0pP0F/M+VJHZVengvnvRFJwfPq9SoS9xE
R3A2YyvHS3m4O8Qp/ibOcxpmbGhRxWHGDilNrOVqRUTVcinJL4MwVe9PArdy
UFyyUpLwSEeEFDUtG3UaE8iyu0jEI5oS5i15N7chu15yE4ivE/RO+Vizwa3I
+5lG94oefT0+5XFYW7+Isx0Vt+E/qiaP5iwSP64hGGOw+Y1Mu9HHAbX+0itG
dcagPWtWvLHtp1wqQ3B1ubPmw48GrfVul4mmAdtJb39JVSWT8AdmxnR2lRpA
fle6SprCHAnmPbn7kmREii9X8obtvnqqZ9BsKsGnMafgX6wGrBQ3SUJhRxO1
WC03Cz0YaOs4lfGAvEaW5/qVhCnGEySUM7Jkyo56sWj20VWgmnLJU9WQ+W1N
oo18UZjJF00s8+TflHMztUt9gq5Ha7205pGrtIleUYtzl6Y4Xe3Mn7wqrm/+
uf0SusK0my+ZhrpmKE69Zl/6LJCp1mejqn5pNBSdxRxnJBo+BMK1nrzUxEOi
XwE4Y7smrKdKnF6SrZlgK4CyymeD0+iMUJGkkPAjxx6V4TjzObpsWHWmJyMF
PbxGbrcUY5pSfyFKk7ySS4P/Qtrc77Hl0JU5Sl4rS5rTfRPhkGWpvthk+piD
0Ilri+adGyO3pw1UDod22GNogV610NJjlKTZxgqnwYMGAmoK27C4SuwILCEl
2UTBFSxrk4VDKmcdLfGZWptocTsCqKopQehVR7NyYdcwl54MC8+UYYkS/iOD
K2Zs4xnuUad3RePXEse8xBHiVrc40Fte3bY/29KiGGgMrDKaJJ5bsyW61XmT
KoKlfzsMyq6VfxPJNzyz90Tbyru6MsMh4nkzypRytXSnnJ2G343bvFUZbwoV
yaxAlgLDBzXmUSOmgnX59/R8UZIIQTBO6VeOV+xniZd8Cm33lr54d0V45L2/
S4ksYNCi2UWWLiFDBnXcpqXPm5vZjCpYvLkYkh+V8KIU7JG/Ldzv93L4h0Qy
xNlNT6yCcciGsEzvlpmDVJ8ORrvWULiG2pT48jembFzvNufkCi7FcCNTCuMK
s2wsQjBvWtjy7yS9GqQIsGhWOTHwVJa/6DZvUkjcFy1oRW2LcUhFz6jyfKzo
LTgvRmqCw3PVkFynuJL88FbldMc1XzEbPOo4bjxKH9dl1GldBQw7MTodN4KN
Tv1YweDCCCvaerZVtr1TyjEVAl30G+Mas8S9SsFpGl+QEMdovs8Z64tTvFs4
z1Hhgd2X8zHS3wB5oE7GZYDe/W2+M/gunG0a/Q7dttm0uyGnPexA1SoA4eC0
yWDk3R5Ijqam4K5FkBYNoRY2ba5DHT36+qH8YpLM6QVd6bQI4Q9KT1RtXpp+
5vb+svT0VhvZVdYn0tt4z6DOdzTEc0fn5Zw2Y/4kehUec2/eMU15n799tJf3
D3GzRGx8tVknuPEaHkNjpwaNpVvM9Yw1fpChKEKgTf0Bzkwoayv2Xw9RybKG
/IzlaMJ0aRqHe05rQhtobYpR5PdYy34DZR9+IZWh9YxdEK+hJZMRvfxv9Iin
9pBGHqzS0tejCQY9mnZWYE4V1i+A5APpnnXPRldj1PF8OiRcpwSiR43JukWG
q5lVyiF9dO056WRIHQ/yrx4NMMetuhKG6m1C8P+smmAzpOn4pm5UYQKJWaTv
bUPP4+goP4oWcFoe3WiNgxpeqyHXhuRIv9TYZzVI7TWmsPTJg5XsMpWiqZHN
aCIjBDSCIvJbNorPg+aPEz1FR3UW0mu3IZMIHMZaJ4XdqOgCWuuY07b231VN
ROVd9EYFny5hJk7VTHtyHgE3iMMhI7Rc08tPSdnFqX4DeshtMewphpdx1lHg
CeMxeKXiT5mMETVSp9tmScTqB2HSyEhQjIktHssvhbD8R6bhprEony67fUzO
zZJA7LFcfIqWjU6AykrFm9aMtz8TT8JGFc/k0ahe18UyAn4HEI/oRSs2sspW
DEd2aeFrjPGNPS9K251SsOm/aF2g1WdkTx12PeX8K0Wl6PsDq1hOKulYQaOm
qvfdX5+Bd+0+N/WH/A/xo6h1UhesGYyTGpKYUsVVUYk2qOjZujLNXR1xGjAq
PUHjCeq5pfQezeI7nXogRxGQUf3WGg3hzvQ9PTCGUl2MhBYtk7gZNflIHCLs
GrPRxSE6asfO5LCsEon5ffNoLnvG6hXE+dkptbdfcCQ8yO4fmNkwdm8YwWCo
u78asmGzvEvrGu07s8iv9aLiWJ/4sZxNKr42HjftDuBsITghzPU9mfccljg+
YrPQCEQaOvsmN4s2N5TisUNKl6zWrc+Mipa3bvndM5fSu6qPrBl1exlSuhTR
5ykiQjuAqgZNvS5Okl52WTPXEuYmoETgUpAbapY/BiC9AsSjh39qI7PB7yd+
ZzS1ZTJRr+mI+SEbXKIVJ31N2gH2rJca+74Q4p7oqJIKKXXqQ1M3EuhUk6Qx
qM5HTZdlbPqji130b2EHtnFLjcTL1re2AuX3Vhailr/87m0+illZk1+eNfbD
aUJs9rMkJJUxl4GClHhLpsNf1CMlOR7L2NZW2XEQ5njN+T6uJgQ4eu5Yip8Z
9YLNCIRvf7hQKlTjkfSpVpVqzDxfPpAOb/av1KgiFQbWSFGIJM4DbJIxJ7Fh
yGsHqjInxcA4KEOtTDmYdG5tSMTVqDmnAUq1vhOKIvYotn1YDk1PtLIfh9LG
Detd+s1fFzu08+tuHM8c1hqHcpyROfH9+bEMI0aULxAhCPv92xbUmMLmSpOp
xx2MfQuDexppf7FQUsPwSeAgqT6g/or3FqQGQshILq53NyRYdpRMGKcEJslH
cZ9IRBkmwCqeIKB3aLXZrY5RPvXhVbMG3k85ljsqGedkwSbibldMTtEvdT6X
tCn8GuxI5OAMq+Ytb9A6koWRPnuWIL1DG8WOJCrqEFz6IDYePsuhoDQZIQ7R
TNZVAKQTPpeLTrifNgd3KWSFtBNTL9JV+oUcCiHjRJgeW4d7L6IDKiNUQ3YA
zoWBaxqwxHF+gNHXyz8S/SPRPxL9I9E/Ev0j0T8S3X99LMU5jG/odW9muqoH
Dvf1kus8+VuSN+2N4Fg7PNG9JdU7je6f0G1w2uDWYUN8zurLfMq0hSty9HUr
xdnUIAOquz/p0x83VC5wX5ArfL6e4iAaMVB1zcL+a7cN/QMegrsxe0/RzD16
ROzKHo54p11yzqTvKMhO7bfkWmvx4G7yUW6INWh1VVDyq+8vr6P0hV989PVg
mwl5XL/tEz+dZK7u3hYRo0sKissbZu/6Li4pQF8PssTlDqfj+fIDDYiSXIvx
HLOOs43j6uJSCPSl3L1rKJdnKKLAECVeTSG3cMgNfvfF4FpetYvLOOrgNjSw
4WS+nEdMZ5A7Xir3caaLBq+zzArOE9bde3Zk3QUybpsX5qlgxxt57/6ir3hO
Mg/2qAEuGV7wnXrmpja5jzcSbV9pVtzigr6Ui/4kzwPrj3cdaSULUnQBuRHn
GSDOu8xFYhZncXdQHWfinMR5xupci9PofK8mzhOZaLpnp3pz1zowtSjlJjGR
5ZBgXlrDdSxTSdcLncnisy79i/vI0FecZE6umoP44gWNofJriu8Y0PEllp6/
Q8RKbh2EybRDoT7bqeDLa4I8kommWwkVzCDMw8NMCj6bb0QLYdR5obrnTA3X
VgNXvOMhe0M/NK5zNcNzhfhKoOBlppdMUN0U9NrYinDmxY2eDYSpXxCwRYR/
fO197p9uSX0/uD73qizIpQhSSse5ewrVB+57483hmlZCoO9uXe3u7pFQ9tcS
ykvD16HuIqWvbwRIleUFGb7s8ivODB+oyi+8WGQqiQVnecGPf8XyviezkICE
DvVB1+fmh3zcgh7TfTWma5e/ns8IXiB8NEuQ4+NM4sMVqA1F9CZcoBps8X0Y
fP1GgHTAC/GD++EE86AnGi6nUncRVdj9BkZGt1pIZ0XVa5ZddU20XIUsU9zw
Yp/5uuIl9NveqhXYCzB0lxxcrOQYmTIO9kj+2U9JjBw8y3WAsENzGeDrIkdP
8xX70I1LN/8DUNkBD6oDL9f41e61iPyY8nQm26EkhXZ4abJD1VTXbiiiagF3
Ib4Lc6HudAswzHV1+eu5yjDkVr8zViEvqCnk4sTACWBep20Tmc2rYOA7MQOX
WQYqFvWcCGxQl0yezpdMSsobB9zqH6lVBiedZYEblMS6MFffwVzRDYahzEau
TuRim9rUDp2cyjqR2/mgUW2BQnIOaEfdx2TrtaLD/x0xlyFeNx2K7BWWCVQy
IhN6BK/HV75kGMPaAExcl+mhq51kRFC/fvLFQB8HBiKCjddXIlaek1O+UqRg
x7HaypBWyMBuYDJyNVHlfqhgVPWR7IuzMlINfLpXGfly9MiBmhTQN1p+MNqL
vv3zozD4Yw3wxRxBBK+lL3WN6V5C8JsGvL3TkW85hFX19Tlxwt1zKVUx13I7
g79RIUjXO+uhBWwg0hV9qX6LDDRaT3TRY8eVVuXQuJjQuj0bEbGib0RvGNHz
lAnIFYvUwTngZZHvWdw09yzG/s3A1xBWL3BMd2TxrOih7sj6sps03WK6MXL9
kstOnErWpy42D/heYFPonmbCRxOmgfcdYr7GFjsUKK7U2rVXemUxF1cxIrhn
5wsLuxPblGn0kDz8MWy+CjL8FierychuyenCO7mKi9XBE9fhtwV9TQV0KuFq
eJEqfAA6f/353w/FK22XDdlB/npPhWKqlDsta55ikLTU1Zpi6pUdimJqjq8E
He9+irE2TzWau9Y9aadK8S8qFB8vcnSN2zzXLYqCU99ArpvtKtE4iz0Oebdl
eP5Jn9d3AAlfAXrS1YwelDPaV39FRtxd3tCdSn0Rd9F+1PNKO8Ekz8Dg8Cqc
4SH75/mLV6vsRrKf8HnND2Yao8v/wlyFHFbqj7jknVQ7+t005L178qx2K8kr
dR55mZ7UER+cFe+nW1H6RCl8ttPbfPFAuSePQjl52genQY3CjHewlrNd6rhT
5k1+0ucNKRFyPtXmZMO9TRlO8W/pIhTblwUK8uMVXTKGMC1dD8nYcCKA9oEX
tsbD/800q6L6Zfqy8FmDQ5ssi3PJtH1NHQqWNMTJkBKuJE3jRK8Jc9vrKJwk
A86ADZIB79Vdlbm63b304XlmvJ1bbfhLco50hyHv2uQzL3lj4ORAJIkIIbRp
8PUcpnGIf6eEP+WcN+wK2U55mBPbq0QOCJiZ0vQMXLVb2YvXsAD8sw9Cg88W
ZD2NlkdreIV987Rduq1FOuzdN8QXdi64iWenomrYGkeF6zZvDo9Z8VSKWtY0
QINObCOjh2etxzLMbFVf5agmed4l77at7iviAox4+rVMfF9RUucrdJ515+Tt
A9TguIZiwXBbIWdAN+weSXMCYRJvVPAknoQvUy6uVfof/C8bL99PvqVHcKko
HFT3G3noum2GrjNl4gcs1iFhnTvPYcLWKwbFuRsjKaZPhxtWQ64s5Dc6o4R2
fKM95x3eUHK8xk5tk/kyRa4bv7UZhts2580MYalfTkOhAa77gQiiJDVaja1h
4iYMHaCqZseQjfcADV+zMfw4v8vGyFd6m+uEgp3TGHlBw55N2bMm+9ZocLYA
nZofzEJyJrljUCuhiLn1nieuW3j1aCcflZpKWsiEWUFFlwVli3Tp9LavshHW
ppR2zoBLKwHGGf7Hc42mjA24NHF2M977qudnZmroScKi0n0uQmoa6lIFrbYk
K433pfS7dR/QC258wENuv+XW0ZvqfwdZxxZZspO/mQPU6CTJjEWy1zSqbvVn
ilHQWZi6rTrPLPV4qBwJr7n+c25Qo8WJdiUcWe3rcvJEUt3GMCoureFiX0jq
lE3VEa/KAzaYhuWLQFhUubBlVb6ndVdkO1h7Hv4nh2UTi818WINKCyLOCtl5
IeoJjImnlWTYOgV+CCPkI+3FYWhlfFNkGR6XZYRLQShiQEfWqi24qxSzY33E
ecPkDJU9EIZ8b6jO6zRk645SRpXjeVlaW60zzd8kVIouqjKysF5IhtZhZIuE
ptq1ROONzEnfafxxwN0t+n2Rpc1yz9Y32vzmTQo5YVezOenTg98ZFoXVby0s
r14b8ztfwHhknmIxRA16vboL+hoodd2e+6FPzbbMrgdoW1X3TFNisH5UfjkN
9sPBReso6dHob2lhjDHJpH+jgQgaXRIebnd6vYbCbqUB2ADt7cOARhVcvpyt
dC0mEVcpU12Mx+ItnHEpmlsQx9K6uM2KZrdmKitF26SrmOVSm2V4dpb5Y0wK
WP1SCylknw+wK38GBHQarEiz8KYU09kHpu6qcY66qaON8p6AIO/WjYklYJNF
vbOVuPQ+BXKYBWHLoPAV4lTNMrMv2ff4twNZl3dk2JZBRU014OTiTZV4Q4YL
NBhZ1xlprGiiKY/meow1/HUYqyoLKdypKoPOPfRRcNrK1QaDVap+5xNjJV6i
15gVnQZcKSYVLC038qH5A9v3FRjR/0XhcUWyojTVsckiBKkqrSkAFA/dE1YX
FC28aS4E5TSYsZ8hV+1O+ongstAOQy5hzlkeoYi7ILy9bnp7Rf3KH7UQ6HMr
CEN+R67NWJKO8nVcjn8094YIoOs5fgUzCE5lnR93pj6ocjcsJUzClzj4wrPn
duU5bn94nlsuga4OSZ9rAODX2zC2USYzDblopPrgugvJdNwJanbmOqaVj/pE
+1YbppgOQdfbt4TwTg4bdQpUiq8DaSN3prZbh7uWSvPXB3ooLteh+P4einSM
kLYgLgKz+Y69MyAs35NSzfT53Zk6NlARXWOlREBNBLGaztn5foqXPot2vNHg
Vd3A1B+XHIUCcwIouBpT5VR1TDaBdGPmLjkElT+x2X1FA349l/Npq402nyOn
VbF3oyUwDYdXlQvjeKMJWzWydVEpOerZcA9o05AcTGc0TYmOg51Ag666QbZu
pYHCqnM5kF5xE+3aKkTnB0zJq/u8NZss9od1NNoeQsZh5qTTqWxGJSf9Hs4e
qTWX1PWUCDkzNDs5NaCMjTiji+Ny6fDdRV//yr9HCtsO366vTuR5GLQyDOUX
h9ORyUAtNKTPYhxwTy8rodeBHVPZMmEKQp57q5eh9b15n1/h2QaFh3M5YnIe
srTld6qbGHiHcqpLAjujZBvv1vQ1xLZlnDSguoRmfCaRvGvdSeFeSaacq8ba
o8QLqoId0GHkSqlQgf8tKPpVUMwY8wVUFCwfkgKRDU+7KZbrbjA9/jY5Japp
P5N5/fclYGPjbo1KQIhtLNoYUfmdMXE2UeOqWiQTK/IQdNQyr6DCywMNPjei
E8yLnHtPi1DwLL8vvF52gV6cFEcFckx8b2oeksDrSmn7/q1UvOZ3XkRD12w3
thqhnGqluBVHuFqtR8diuiDqIm8E8gHq0s/qhgURf4e60Ioh/dwSTjW3ubjO
K2U30XK5K7EuhYqkcsRz+esCVXblLbl9R65yw86F7H8dYXWacjdYxTmZmGrr
cBosd2tulOLTMBarzPykI8SxqYbk4XvYK/W/MUJeSvykQoq6baIOrtrkleNi
k/aUs0rFQ0MRGocvj+Tex+1amhR1vQ48qZxj0zcNueYY1Gt1+dGk/rgPvOmD
iQIvUG8ZsSh2I0WNLfxtJLILomKXTtz5ijH9ggvPOx7XMJznLEEpal5MkXyz
BSM8iVmRKlqauIq+k+4Epmc/6fPeIOz8+DpKrgQYsTdScIbCVZyiL1joI3OT
Sz5+mJnL3Qtd9sdBfQjNhuOtWaFdrUiZugGNzy48YxexNQ5DLhrhbyeBVzuM
9GcRAq5JT9vpKc+VVoFNENi91pm7/RNI4tJ1SLy7RcJ0TNYkcWwdFO+CJI6D
tZw55o+vk+0fQxKXNbPF3F62TrbvhCSoRlwGkW81AWBZ7eT6VC/08QRJGAhH
52F9CP8I5sEzG5tCQvJCC4r5672QFM/tb/sOk+x9I6xrklzWBv1oSbBB7A76
vdS+SALM2NxItdFmujiDzETt3r44R94nRkyRNLtraaO9XQ06r5wXEU7Ti7w4
M35BUvdxW6T+H/Pc4jS9eAtPAxckdR+3Rer/Oc8tTtOL9+57JHUft0XqH5/n
Fqfpxftn90jqPm6L1D8xzy1O04v3Ty9s6lfN422kaa/+56+icXzVOqCLLsX5
pf7JeZYbadosK3dUH25P6T85L5SIzvskJ5c5G9nB46Y+hpbcnxOFGzPU5AOX
PNc4Ggv2vt7hO70D9tdTFOPiMLl5arlSJ+9Hw1I87Bk/Acpnlnab2OcRUii2
faj/FMkK2NnXUsTkSF1kWHGkDjNzjtTnvD4WTgYLv1MZbNvA/yXIOEjFOVfX
HuDrztUj0y6ddnfG6QqHXz81bzTPwnkdx74jaAMPMX5/m05c/CgnJ3L4uO5M
rQMeyzH70I7wWv7XSTvI2fC9MauXNSAXzut+OuUAgVZ9BSZ/V8gXu/IVmPwO
X4sZV64XRf+zSNuW+lUR0KDcmZ7KuSTLJOC7AKnyxU4uSJxzxWAZDV/sPz1v
A18NRNF2zW6ku1uzhyssXfEjp7wpWjdyhXvMbuxWOL3u2i8Cwj7h6Dn/UgF0
A/DPJJvAMLUY6u7aj1tc9OIYIHDGCjJjKZzYZlxtW/0KzgV5bw+SbUrzeM0M
jlqi3iuitQEMvW0Dz8g6Qx7dUx2O/NOeBDagnbk73/qlDcwBRnMVzwAZVD1T
X1mT62amUrhoDE3YAcyGv+afTSZRB5fcZjccvBsbOJuxbhusA3fgEs6z2XSp
ik25F87MfzbCiRMrRNUh/kqO0udanRW+FIWTi/UDVOdqZakGqGWQhwUUaAFA
fRJqGRwCpAwueR9EfmnP5hKSHO1uZHqkUucfMYAOHiQrpvdz4QuZXoR5KI/t
5NF8oafiNJX+cvFz8/YWa8nUotc8rVfrG4K5l6kU3ha7Ybas0MFElXnVj/rx
BBNX5oZ35SMyWEPDmbpD3Wuqvd7SLwGmejzTS6Z62oo5d/KKBv3nw1fDVI0c
en2iHwUwlSvxZA2q32E9jmKYXUa7hg/0ci8KGcQZZ1ZhpK78ZUoNWnd6/vPW
CBoVqJHuKSvdaou+lZBeDWR6hbXVLNOi4+xgNtrxQ41JFrUSdi0gqlx3isHW
nZivwle9ZW+N9Uof5emuLbFUd9eWjEvXGuStmMWWuT7DZjMzbN7Pgju/EfPK
agrZJo/nypkH4Gq8NvPQ8lOOgRYzDw4osk4ec5Q+zQ7nVlxmiBreAcsJk2J6
59XhC9nmM0t9s18q6zh8BzkOLyzhfpZz49jQenNbem9uVWfdmJW2EUemvMct
mpncLD1uWVO5aS5xhCoSb/gJf7U1FmTVX5NzW3PCuOmUacYXeATWt677Dp/6
NeGrPYGO0/Su0769krpvwr+Wuo/bIvUvzHOL0/Ry+3uV1H3c1lK3uP1ejjIN
6lhmfvvxPuB/1SQQ6azkdw+dtlS+51AUW5I6HMWW9L49S29fwpxPBI5hc6bw
+lHCtB1d/iSOOxI/5iRWgRttMmseWEycXGSz2q9xMQPT5bmUPIWu293o0Quc
V9tciIryGZXCFjZM68hw24hnuNu2+ZLQ2b0X3g+7zDTSZwmw81xS8oQiH4kz
qnTAtqCyQxj73lM2+4vEGCjCL2JooyMETidlLTmfCFMZpk7tTYm+Lghub7jn
M5VUjrejk05KPpZcZzS77ZEH1pueU3q3WA2pkBhzGNCpicph1gWbiRCWz5hE
lPf+rlSYMZ38YsfCFURTTrmJOPfnfCRc4lW3i3pPm4RkOaloUz3nlSJj7COa
vZeJoCMY0RxMnE49s88sb/7tludbLcxJQZ+GQpDIk/N8PFUsbArFcI+nL+Nc
VN6vMgkDxJPYqzJqSmkNJTqk5ep5xL9OO+m0rwFpq8dQSXat4191f11EWFXj
ifBOJ0MUVvdF02PMHe67UEH8r/yvMOdWt+eFgKt8zhcpJ5qWNz9JHYvsOGSz
qnHpSaBsJiUJ/X6JsxE+KCyuE0nWWYvVotU4o2bCBlucdJPdYbA9Z9no7Mhq
sAf+snxTUzBkstBcDXsoLYthc1TxPOsdFlu4MRYWVeMwyTv2sVXaaasz/cIM
XaRSt9NBAdNghbkQj0ynXr3WT2anTCvHpY9YLBSpbXWqQO9plXvKxW/kDf41
iRixXs3UHSAneiSTRt1neKLIvEOb4tCjkDsf05HfJN/CVl5LOYIe6ndahnJj
gJ3yaSThLx7QHutAS9+iyR5iYuFiHJRQ4/5uCaM4pDhqRqv6Qd0h1cVc3ybc
+GqLv2vK2QZJSJsd5qHoH9H0TRqHOzod6bCXwp0iC9+2tUVT+FqG2OrZfXvm
bBrMONx4U0hWEL0p+Mo8VdQU0D5F3VPX+ObXkhWux2HG5FwTxYW0ZnzZId/h
rc3Ec2M2ouwypnjQrcVo0tKno8WbctrCrEocVLTOwwgpfURq4uMKrN0pe5Hl
hO0bWHl17FCpq9Qsgn4n+aj0PXFM30y/dz2mMUYZB6Wsaq3IrZYVQM403+CG
TyUataAhSJy3M+wtQDyXVrM9DrgKa9zNYkgjO+1lCQlmZlyhodfiIO9QNcNt
HXjgXlrqTMofZUmqcw7gtKgBT9B/waTTcrylhAn4BYgak8vvEWSjSMJ4Yxlv
S/M6scgoDdI8z5GmguELB31mhqcI9qTYM5L9XyBefUiH6LXrgYYjb8N39jIx
7HnGTOIhlygFbEvLdlCE19B+wyJMWDEl9EuUGvQ3X2iZJ3zc9y88qi04O1Q5
aewwnuNR/lPUOJ02DvZDUBa1jJ0kcsZMbUtTGxUjRCUPuS6yZKaUkR0RJRT0
jvWZ5uVWSkaTCuPxYMNfv/foq+BPThhGB3HWxMRBBdW1Ts1MtAG7Mad8rL0a
3yHZGA+jS2yt7c7Fv0sUFeeupkvOLoYYHjPXfOs2SxSp22dMQ1+8qlOuJHLH
u2nIw7b0Do5nLcIpM7ilwU3q/UYj+zh7M/rwQamRTRfOOkwloiyzzdoL1FHi
qdmljhyiLh21pIExomQP8PbdMBxCw4Wz6l67w9fU6SI0/MMhAUllbxvEi/vc
THngBi9Jfxps8bwq85OSFU4EIiutbg6zspwUnUATtSePtlH3TdSkBIl+JeDJ
VYby/2rAy7kMYJTkr/X8/XL4ajRoGqpen0wUHw3ibYKKFSnoF7E4GsyY5JiZ
nhluc/d3qog+LedrDdzNrF+ZXvxSero2PZ2zb9fEl79+u5K674hxkZrcV7c3
pOA0vXjfeo+k7uO2SP2r89ziNL14f+seSd3HbZH6dfPc4jS9eH/zwqb+tXm8
jTS9x8ffDEn0gv6NC5v69fMsN9L0snwXJNEL+i0XNvWd8yw30vSy/OuQRC/o
wkbOL/Ub5llupOll+U2QRC/owkbOL/Ub51nGadqbcRsKfuM6eOdSt7d1Fqnf
NM8tTtPLbaHbN63D7VzqNrdF6l+f5xan6eX2jZXUfdzOpW5zW6S+a55bnKaX
2zdUUvdxO5e6zW2R+s3z3OI0vdzeWUndx+1c6ja3Req3zHOL0/Rux359JXUf
t7XUfZvPi9S/Mc8tTtPL7a9VUvdxW0vdx22R+jfnucVpqtzSuJT91Wy+5OqD
geap/Bd+yxmL0r/OA3LKZThTG457iKeWBR2yBd5tblkz0TdUuKlI/zWZ/MZb
bxqGu287ePHYIcykH3wvws9hI7BWc9pDR1d26ATMEvqVuakaVc4qh6jPrcCu
qP3V9JbOGAXUASvh3Q/O8pb7B7Xf/n7+2wgBBxw9m2MFpjRLRPF+iqK4vun2
3iNHlwzFj7oQFIOGA8XCOTWN2Zxh8znHTS8VEspeEMQB/bv4t8jBHLZSLoCS
B6GGCyB9SIzS35DT97gQ0kfjvh7yVy2EP5tlKxYbuLqEmNwkJp+dFQ3dBWl0
wF2Q9WVx7/XTfV2Fo0pB/BnM0THiaCkqE25uzLQG+bwfY6wcmuQSHIrXB3M6
fSrQpRPfNF9bYatSUH9agbops3WZZUuskAwonqQVzRPBD2CMlaOqN2RIgRbR
Q4Oo961F9dmec5okckWQ/TTROTrN7wnidyM8hmCaFL/OoiQ+NwHK92aSGiVy
b3R9kt9mPpju2U3eWzAhOoqIea0Wx+hxLTR/xHFIfoVlmcrEOaCYnSrS7A/F
+UlKbluuAvaST45DbWdnEjWiX1PhvVJwX5WlmgruQf1zKrKvrJuP/hJc51+7
queKj6XTwHT22hqfI/msCteVWcdXOY2HJuY00PiJxDL5uxZXD0M+1A19Mp0A
DF4CZOYNpUav4I6ms13ZjTylchs6DWeYJ2kq6XNp4slZ3b3qppwKXM3b07FE
9Hjddmep/EvIZ9V2xTHpEG03lNsrsxaT4V4E1HGiWlVtJHur+Ye6ODF7oi6y
WSqHYzbYSlLvlcBklZflVEmdRsbrnEkl721HavZxsqNWqnmoqjFbKZ+R2VQ+
NbN3MbM0TNlKWM921MM1/ztbwD7Otplt0iuYfRvBtMUVsXiW+xWpjY0fYvCa
XH8k/2DvYx9Itx89erFzaLUdwGgahjmi9cFqYuvr6ZmQm6qdRt/IoatHfO0n
vjY+9MjtneBVijtZIe0pZir4oUo+cRSGN588dZbJh3in25EvPOBNqTdF4AT8
OipM7AbtbSdPn3VYllryyaF91N7q+awBSv3+Ko0+fiplB/GDys4yU0mGca7e
SLVcbGV6Czaq0m/XBzupFGXnfxNZW3Yii7AuvCuPjmUDqqiOWDzj6kLkmSs5
5FEEkozOtBvypqcvzF3VNMUnu/B5R4XPvZroG61czd1X4l28JWrhnazzPkvv
8LxTl0bxfvfTY7EMMS4BKkK3XCi2kb8w8WTE9JAsjyvDmaVSY7ZdZlPfLQSe
tmWWqpTLgE4uVbhSDws4F/MEkrTQPSyq0CfnZ4he0TP9HRIfLK5pcsD1tpMZ
n6yJvj7emPdTdgUQmfK36jmepYc57jbjMDl5Kk4f3JUnsYLRnAFIj8xbMvJ7
JnZ4pibRXWDM1A2vEFqTa6XxVHivsIWXhHk1YHnbQUMe05KfSEUg2TO62FZp
N3nTRfSK0fPv5Azq/VT2Jhv5PJEnh4Jli3avq6li0VH8nOs17R3teiDCpWtx
52gUXP8ugUUdVp5uOjWguTCppkKU6J1Nw8p6bXnmFlyJiJMZyWmejJ7dLaaD
fjdaQ2ukVTB6DDNKSa7FeI5htm7KKksaf/9aFIppzDZHfCPGpnAkg2XqN13S
YOv6nK7iYQ47wLv3+umK+ebfAybIUxzJC5yeogy87MX5c8WK9WQGvMjJvAvw
Ild6Qrvh8OmLFYLMX3VvDBui8R6n1Uddg43clpAYIu8L9nz2+EF9NAvemZvM
UyqPdBvaI90QfbwlfhJB4OKuQnBbE5QVtETwOVBAVZPmmeoNne2wCNJZEPtB
RvTEA6FXpijJRnkNYlMTEOzMLF/bkV3bARo3nR+N567Hclw16nZyd8ua8R/Y
H/95HvnbianmQvUv1NP07g5bQRK9a/OvubCp3zHPciNNL8s/D0n0gn71IVKf
4ijToHbCP5Rwjybel3rav18TSOyCS3Ki+jAOC7+nUghfUqfdFhw5el4EO3l4
ZmO/N4O2YE5YisTGI5ps/LP1cuE9aYHubnpSBzLTxx16mQZ1JosSbbqnSX7m
KDQnToJaXPhcFzasTOT8SNEnH8XPTxsJfnlgjH6r08vpk29sz08Z5TeCMHX8
J33c6SFBvvCJ5EVOxIdDHDWbNotqLz1tpyfmfzKR2zy6t29Kb4+kJ444Ctpt
mweSQM6jpUWKcNRyQXTWlwUKY2CqkPwBvbK1DBec8BhvCB/jm9hg2EPFzvj2
U2L2T6GxCg10ah2da40Xm0+D/azi+6OWDOWUnTJ8GLG7s9GDCpN4ih97KsrF
I3rOfwd9tjK2dFyK/qsjVCmBO6tLmVUcNJiMnbsN+jwPAISuR0Ge8MwwfS9F
CCJXSu7uASedLXP8ScXvcNxAsPZynvaYmYvMWgd4GVPhxNTwOeP8guL8uqVN
9FjRdVcwACIoEzobpEFkiixVeGg7kNuzSUjCLJx0SFIDXg3nrSdUhurONGAN
Vu3LxHMLk6bDR0MLl2rTUKgV+kEQTLq49fKoxaMbRl2ckDicZ8URkPx7Zm3T
4E0Y2TImFT5J8DLTT+/dqV2mbMOy6CJxYVIyVbW4ztMWkwtYGRIH0feFzkhT
XaXYw1Li2GKyo6NK8tIs0jFzUw57VRWdTYwqfQjfxMGuveuwWcN+T83IxynC
T+cEZMYCS3+4nNmkgorMqhUksNJRglEjjapIlmHSIjKCaYA2kOHf01VldbwU
TwBNmoRzcqEVIvFGkP0qZ28O1Q/qfaMjZSTA4wqlhVadOACAf3+M9HgqbXrj
YSogzKXV7ADoTZc2CsuFqQ9VHSVhXi4mbx+no2kaVVgpU+DexgvEAI4Vos4w
/OdRE1faWu9QSYWVGha7a0FstZJOqw/VEjVRLH1m/eru8vUsYaoOtGODukzg
eOHDVgO6/el54OsGAtVygzJ13maGoTC/bRN/cD2EXcDcXk0wHwa0SPRV15Oo
PkYVGGjBR8MTnD/qcoJ9ISsxHW+uEpP0M6JrjpA1RhRvtmTwDNWqJMBEkzsY
eYfau03L3xSzA+QOWaN1VNBl5cqDVQSmgsXUhs4LO5FBtRdqMOvevT/Mtdcf
UmowWYcc7trBvQaKZmp2qtjblRVZSaNjhoRxz2FFcsYuTXk+p+0usV5vIdep
yCXfchqsvD5MfS8tGsmrp/rR0EeVdqokZ2nsrlRyqVx0cp1VXw2WWTDv4rU0
OkzngYZpF6oyo1Pl7DLazCoMiu/c5UJe9GMtVqum2CJTpWiYQDVVpQV1llLT
aHj+8NRXVS8AubfFDtCb7iZHlamEUab1ysCMQAb5zypM80XC1FFAJqvzngHY
VVsx3mL6WaJRtq6iWgF4FMb9xMKl2UZp1Zqr86ufqs3HmFEaR606a+fuzgGW
FBiwcXOYU/UPC7kfniqb0aWJddEEXk9Dsy4yYQ57f13kPe6FFHHWU7OoIffU
T8UULslnZz+9GwZYOVUm42xLqQzwfDRzvhVSa8OAW0ZHI2vUJ6mWfDXLXS0K
9LviZN3kjDpVrvdxwVGvNfxzK1Y6E5OEa6ziVrQx5e2Gf8ibaX3odNi6ynQs
NFsbmWt5JdmGJMgzO2oedkFYbyO8myHo6kZobdjX8rGVFTKc6jLRBOIMLg6l
eUumPUkEV/vpkow4NfTVaM/nNw3VbpREqdSxBgkXIzNNL3F1dRX7BIZZYmym
dJx/xYTmpdBMsQZi3i7d29StGCMqLmTF+GccenjVxc/U72j2B8H7cIHvuo8C
VpOgtoI3rRoMqGaJJchYPcSBFpp0uempr2xxT30TneE49Nc5jRGjiYfkWBiP
ecu1WVs7qm+IJFed8+67qKRGlui8xTI+NBlv27FlQL/vB1tcxzmmfF3naxX/
YhuqGYQVloM9JkZjEZsG+zGJUQ3QVdv9EaW281h5EbheBpaCU8J5LyMZ06SC
x4hWhzFZsvnFWBAbU767NULAuhmaRJ7in+sN0Gfz/xHuquveVFd4ylPCZusK
rg/NUHVKlFCVCIU6Qh6AGChBddeMMXsQ9fkU1VSV8jwmgJvyahq8lodLJpdU
+EWlcuXjZhkzuKWkFhbVkkfaFCeiQRKNjZFRCBhGax5RT7nT2lXcpUbdVoyt
UFxtqkhWVyzTbdQ5Mr/Y0fx5BUwp2paXpADk+snc8KtTJ9aY49FzHOJUNpYa
iW1nxEufB1LqGiWXUquoWgi4pm3PwJVzo6VSfPdNVWQarbQa2pgkM1GoXA0w
qfeQ1kaWnom6SsFaM2h9pzL1++Fgz8xN6UxV+5iqz8YVbcIPZefu5pbPlKHB
7qhhYcOWIk1D+F/laCsXbXTRliBX9jm56aNSzM3MwaRypfSuP1ezgZxtmsMd
YzDvhN70vLHqpgGbnttypqCYIaY2GtQTRLuJ15L1tpe1RCNE7KeV2RaWxezU
/XFCUlc9Ej0LzvTqPBqoU1gFlbQ0simBggdf5seS7pah/YytyBMUwKWPw/UG
Ks9oW3hZhVbmDHmNO3UfDFf52IU7LbKZOEO9K3qxk56qVI7ktImDzXsIjjsC
RWFucxJ90MkF0HsIyangLXOuKcJYZOwby/DrBcypcCiJM6dcEeh3RGTpsiUK
OqaLVQWAdmPDMxAroUfmluW32WAbjcvY9/GWDtOZI6CLREtRxTnmk0aq4FlC
6CZ7tB6eNauqppo9LdIT18T1kucmxWLJ0yJITJ0A+V7LYcI8p16TxhU5bJIw
ZPJgg2+gebGFQNm8mCFI1sactlJuTh17gNBVVRwFca7ngTzQjCdaKvoNS1fe
EV10rvOaIfHg8zeWE70PGZlfzv+y4t8ZvtDswbCUTIXASUDvupzvJGGVAThK
jtTtxEYftIsPZBNE4q5EDEHRLMwAJPxt91OI7lWFgqoYzZ1g41CYwgR4GhXv
JoxccyMbvQxERnaA9ovGgtJhB9WxTZ5Pcg385YD2dRbXmHD1EkBW4TZtENEj
IJ5rByQuUgCwikCqYhXsWDM8OVuYcra2Q7QJ4q1lCI7eSRAP2YDrSlC+0aa7
bKB1zvyynF/6dB3Ad7Tbdw38jE9N9wO2/RngNL23Zvx0JXWfK4O51G1ui9Tv
mucWp+nl9qcqqfu4raXuu0eiSP3ueW5xmt5bM36ykrqP21rqPm6L1H8yzy1O
08vtqyqp+7itpe7jtkj9p/Pc4jS93P5EJXUft7XUfdwWqf9snlucppfbH6+k
Lrn9RIJC/nA2w+BO7jYJf3S1SfUqFff1hZUsSxF9QsqSnAqRl1/yMcTuheQC
D5jL03wud1tRjvT6kBd+wLtT3NcXQABIsh9HLzY9lNpNHNozGsr4Kd0ZfyyQ
QXlRhjD7eJAXfT25kmHpRfAROMNj2JEdyutJPq8/t2p9OM7Bucprie/zYQ5I
fLdyXje6vNQVDeLy64JkxA6AQybuMgR7+4n7+rxKLqVyHgrYsfcPWPdw7uuJ
PqP3WM0w+Y1QVSTrPt3JBKaNRPUQfqEvUBDf+1Juhloun9udy4OjDAd15YXy
A98sLbVcSoXEXJLanbf5psSKXP7CauPBThvOhXPyENpPG8npQSCX6PM7FY1a
Lk9YN5ekc+VZfFbntVxKbVzQXN5rtfHROdN8Bw77Sw9x3nPtDTfSTVxns4aS
h94uDYkT3UJ20Xelzjl5lt1lpx133nTLredvI1UE5xoI2B/wbnjW78SNCLlY
lptEFDJpmtdCVmqcr0Mhp/YhV1IIyYSeOCy8jaNt6BL8oGZIvru70LzPWsYl
s9LZhNK5lDGlitx5tE4W21XbijvhQndbnRK6AkjotK0vq/rqQvN3hxTT1Q5Y
KGSncvdHxHT7E576DKJF3CCUj/co35/0+H86hXRfIKQrIpbobJ0XVYaBsSQa
Hd4V/0kdn0t99yFFeTPD15dVaQfMUt+HkhCXE41f6I3spDyRRIx8JmTEmcO7
DslD7NE17hjTTlxpWnY3404XlSDcn96D++3WVJyIdqzROL3dhrEfw9jjTKKp
9HbXMahP9q8+kAzqrYeUPpNMNxpKz6rlR3kbsHG005IeXefA8X+nVUu1BH8G
xc4Om9WgwDlM/uNr73P/d5y7+vo773X8cn+PUWLkkk7TehRkxJnWrxxSKU+I
wAZe0mVnvzQGX4py5K/hSDnweecnf8YTKaM9wOul69jex/cw/OpOpT3VMhhd
Kwc26d7TD91480PDX9O1sZttQQxe1mmVH+t5+2Cyyp86pAqfHtNFDl92+RVn
3nbLQ28LOhHP2cbd8YaVJhcqwNLJTvu8tc6SU/aPHZLDZwH974IwxMWpTsv7
F1nbS+3++pUiPzf19UrItQP0ikMy/NzBWB2FHVFSJeLyOQK4vhJI3zH8FYlh
MhK6roXu1hu2wqNcoyy3WwTm/3sPz993SJ6/qcbzQaOnTDWEV/WcrRVx/JWR
2pAd7pN79dmLiuXuWi2LH/Oy+Mukn++mp/mq6YWA4z0rUb7gBbCL7i5CCs73
FgQG0vUl7gZizWCI/6N15pxRfdshtf0dgPejKhPDGKpwL+8VgNE3uJhY3xMx
/FfIuLPwb+nU7/ckfliDS81AiIUUe+xQduyu9NC3Sf9ID0sPz2Ep1086pGpf
nti+2OZEaS4GPKO7Ovt4rtxd/MOexv9JmGQMoDCFfMcMS5gZqor94UQt7pgx
3QPE4cWAw08hKmPJ6/XRWhyv6N5izOiw8bKHjY8JHbJwHyIP2lAbdn/LtB6o
mUL+kENawiutJCj+vZLsXOFFlXq82ur2531rNkseRthNElCAxDHdeROuzEFX
IP+Qlx4PEbiXFMCHKxs/cN8bb+Yu8UZeoFqGrqJeIpLRfRQLCyV833JI2cmV
IIXsXHm6xMbjHjh9L4PYdHXTITneiZNMjy5nuQtfoPwKLzx06c+hl9yuB6xu
gUKUL1Vq18WvBuK81OZB1ojEyWra0sVEaISwR/eKNRtk7YbmQqY8ebnpZdpa
O5TViavZlg8AHwFF+ppDmuWvADkeo5xAkVbHeIJUxvindrgKnZh8+drHPeXp
b33wIx4V/oc/Dt4Kjy/51M96khAOyUi/4cWwZSxiUOe3wkPe63oxhpO33m6k
p7wtNj8t05M65K6zTNpPZNy+bbitv8DjcnR43ObxnRSvJITyzKb1dn6ri7nc
sC3lnD4/6BPyEkpxuZdbVjYXmp/lvExp3gNWSbe1dJTmN1p6ZHRkhcOWHyuI
UKKf/pUILivAbOkWgwxGGI8y3H3qzLlgZ+HXajBq21d/sQB82UMe8UgJqp0t
kaQhY71PUYDIIRAD1p2K0cY2piTG//uUwDadqKmwGaeKGVX6RPopjqJvaNXP
c+GrCGDUwqUUZcnOcZYSNgxa4cVhFYOqKA10z7l0GdCF5EVp4OXd1lV3uiSw
gQcbpdk/3lC5fi38W4zW2P9xG0bVJR98DSwvxiRrbT2slkLtYsTB9KNhb4Yi
EH7vD4VaUwmaYngATdX3fnrt5Z9LEvI/5zxFz3KwK/HF/oWTlYrKJBZkNOaw
ro7o9sXzL/pOB1qENkugzSLy/NJT1pgtMviixKPjWsQaH3bztYOGszUOVZEJ
BkuX8zJYi1KT+jWhDVGlJrQruNTwLpW5Ky+l1MQzDbbfCzqD+ebodvMRb6Yz
kw+8T5nuGhUrD0yjO0AqhUbkRn0SIqRqrcFFEpuS36G9SWN+l4FWji8nRll1
sPC0ZKvSnlTaC9N41On3FA7zu0ELYUXxTJhzMJPz0C4jDAJYBFI3St1qHrpS
NPIuigAvxOZRfiwCanuZbJaTqt2M048B+49H6tZuTtDG91gedEsQ4nPffc+I
2atH/Q5mzWVh2AjPruGAFwdIWF4Fd8OKun8ue6yB1dr2Rvb3URS4mBYtkLxf
YhIGzpolALFs0qJTwWCU8/+39ybgmh1F3fjhve/dZiYzWSbLzDDJELJgCAJR
diSHsAhCkEWBsIXNsIZdISJwCCAKiGLc2CQIBpRFZHHF/yuyikYlKmr8QERW
QQQRZL//6aqu6qruX/c5753o93zP4/s89973ntNL1a+rq7eqaktHLzTX+8FB
sJx4XWLW9oMVOX3MrR9DJ6AxxGx+6A4LnbrRXh46S69Ie7SQdNIenYreeOrp
ZwX1zatO5r8p6nEolTShl4QfWcJOE/k4TISCAwEhU/gJ3/PrAqWB6GkcAoYu
CUmNaJfvf1jmmQOmztXZ5TKPlgw6Qi46M1WZ9VrcYIqTtLE4RwFyeMzSLZSP
STpfl87h4SRZZ1P4tL0WTCC8Da4umePZgJvzHGxIddzVd1J9gn/G/YRJ6Ds4
FXcMZ8EyeBhnWe0B6Jx+Mwlz12VCcEyzbpe0IaMu3f9lGW1ANJgilBQkmJkH
Zl7uluRd99A7OibL5nv3xewV2Ux6ODPiUz3M59BBlg4EoeKh2W/jfIOShLcn
6TdWrkJ0LZaLY4p12WqoYLoyhc82ZcNQ9nHCtKbrsvZnh82h6+y+jaXOpf6/
IaFIX03dgYleqn03eYPIVQ3uJ+srKMQJjBPobimBnTSB/pzJGBWp+AKIJu0S
416Tkn0ElXItwjD8e2LiOojqljKWeatPaaioZUOdVmwbUjt0RTsrgkFq5ZBS
kUb7hnVyrxHtavOCZ404idXx3bwtBKbvbFyZcfKqbGS3jy00XQoJMhIitBDX
5dd74inY8difO5XowM8LzyA5h8Da59v0Nrzgwb3chg7yFkVeWOgVrLjl2md8
ZhsVfWeGrFnvM6/lmVWTpLMawVJaL2Qx+sfRO6R3tjStdbKY6ta4VdtDp73C
PrIr+zLMHFcxdFBc0oa1FDaGS2LOSvhU4aV03DToVq+5JROU26ekuk0ryYcu
qS3+9X84Mxmpi62Qke4g8U3p1tlD5syks4dInVPGp4bfbOLvDxZZxNcd14c/
zjgqu3zLsItiV/lQEnGmZnu95EGxruwEghZnE4IQU/4s8Dh3K98TpUmqam62
qJWBhgA3++w1/aKDM/gOJHA72lJKeL2KXwvDcQ/KMRBzy0mNrXrQEqsnNYOy
NU1Oo8EeWbosIadsoXBYTq84eOj0IGJnAPX7Tc4OpBSt6/lMOxQgcAD1Qmiw
0g9fOVIeJ+m7XA+bF4NAE5ctMk0OlYa/Mt3ONje7lMWdAHSRlME86xMrfeem
gPYzSxxYulbSOxTirbwyeEhV5ESlQWLmk7bo2kjvAGCRMku1EZN4QsADdZyU
7vejPK2kCoMNI1+0o2tcInU7l6r3pxTXCa32bc6LhGvoyuHO2qjIkUXfYfmK
uwlOCNgcYlWWRvbQvMsmEAk2fP91b9Odxc/cqL3lf8Wptuu++/25EQ0zNXh1
w9x4abo5/4ZinHYMCc/9oFN/A+BOFGaL1PAjG3R+YoDRlmf04e3LuUU6EGEi
1a7YeuLGH7zz6AjQFoGOFl1zK8xnbwNwlec9CfC5BTz8HAcsPb4eabIn2GYB
lg/bAXIqxcDgIDex3fQTIc9ttuqRLYGemvXTMLYukCLRJ/kBiSS6MDlEABtf
1wAyhd8gcFaARO8CEo3Q3afs8ODdx7R2NpV0PXcjpxz0eHItleQ3n8/RFxk6
+xOTpE4DOid4012RwBpATqMigE6hyrEErgKMvgYw4jJA4jPo9zzXkxmb9+VU
5OG2L7GaGSmLLUlhuyuRaDqzA5dx+jwlJhMFyhqb3e0Bn8I05abn14ukmr4R
vtcZIqmODB2LGSoszQ1D1PSZ53TYtUme02cA4g+VVIbnyxC/etk5N++V+MNd
kVbsezAHhfm/2WPS3rnfNwmpQEp8JuDgOl7KSLS+qyQ/5MnI/2FKtekOc6Ng
0cZDbAtiZ2d0aYjsWJZKXw4JAdR10FtbxazK06meJxI/5mnVipnqi4yxewJI
okpXN8SgrGY0UM2lzeRnxUzDroi6hJOuKM/hUzjoGL6lPaMzuE79RSIT66QM
TtNvmVo4M3FdTKEyrn+Qk1quVe3MEfehkdcZgvBVeAs/hR8WR83infgg76o+
TvK9LbXr9TxzpYLgMa+Yr2RcnY+5IpHYiAVHrl56iH9WiD3vkvj2nKFPKUPs
j7AqsFtTCet/HlovWOtr6yUGOQZGoS3Owo8zBn8gCo0VVuQi8Z6cg48rB2y2
vm4FJ7d76vYm3+HAyTevf8ObfPRu934o5bH90M1Rzyg5CO+nMfb9qUC1KZkD
m5L35ox9VBnbBD0ibkphc8h1a9gV+PvM4QKull5gRwHH55lNPnOVk/F5B9CA
q6ABCz6vVj7RDCtucwifwJl9M7diC9VdebgMYZp4o6pOB0wbhxKlm/11Jqmb
24LsyH/ifTnbH1a29wC2ee6sLvDqx1+6wEuYMw2WFJf9wSklIBB+wneq9DQA
AI8oK3b2yXs6o9OwcwHv66DJC96vUt6PBbyzPluznuShaaXpV5KP/Nz6yJMP
DHuW69hkJChgcHXEY/Ec25jZMEu0nFUHZaS/3xqAsgEE4v05KH+hoCCXy3gB
lgUltDh5Sa0a1kUMLkhIkk4X1q98ttUC2ayJXlzfs07PprF+S18acbEJ5KFg
/YPK+kmA9T2edflZAS73uxLDogE8w4eqDBcD8zSebwZ43gGa+wM5z+9Tng/U
Jzx1Rk7xrUT4nn0kjHwvYGQXaLyCkT/hjG6AOwhY+q7EUuh/wlLSzicDlm5w
JCydU2fJtc2f5iy9G2RErcSSQxuEwpIMOKourw24+m5M/jSubgiI2w0aquDq
Pamh1LBvH+DqBomrkO7qyJUoTSrrQPiF/NRvcCSs3aDOmqPwgzlr7/MgU5YT
QMYb0W8y7JJuFdhK3Wq/8nXjkuLA6DRGzgKMkPM1Z6fdnEUnhiX0G7is0a1l
cfiyOcIPpTan/Zr7mTk27we07AXYnDOGzT7F5pwjweZMQM8xgJ64+TDEfPJD
aJkDYocaPfb392T3/PSajv2r4Mave1YA+gHAAJrHsEYtdHhSeMlo63tAkZWe
lKF5eo2YOGvvDRYBSnMotDCP0VF8uiG7bpw8TEbtTwGhRwMFwj7wa2iYUO0T
rYjdNPZ7PVySvjImZiieCog7riqT/mgGBfVHtkbIOCYeKS66dIDbmffPykH8
IKAT6f6bexCvjiBKR/1+Tx4VbfqOfsyIoThzxNNiaTAN50N1nEtvc+hl4DFt
mNjLs1CGGAa0JRSBexQA95YJ3Lde6sENz3gh7K5eHDpv6xP+vhdge9MjwRb5
/h4PyEcybK480g/CNjMvY91AWnkKwEhxIunlJZSeu14Zly/C9+1BXYhYJL03
m4ww2OI4UEfYSe93AYT3+GdDjWga6GeTIeWJzzrc7ez4zAk6gN8mQSwDvszx
Qp7bcd19Zz7IZuo9HhGqDgR+ySAOtVSE+EBqMz142wvoRxBzxBMqpmojNmJ6
Xijc95TMhB82KPDME5UbgNa4srJkyB6HgBnMCmS0C0ewyL40N+OsXswoFeXH
3amUzEDB3LCnoKylApyN0yCJVkDh0b5U0shP1xk1bs7WM0I3pSzXqiZdn+rw
DPBxkhfDWzBFDTEc16VuqYSCJ53liSECj04Mqo40Vo1tP69JnZ6Xp+0jDhtX
Be3J3VQpYlHcZXkIPIqly6duee6dgkgGS36rvdriCCw+KVPfQanS1twJ+M/s
YYwUOUPLoUvSwxN8TANPcQozZKeZic7kAy+CXLUow/Lo1vxyo8K25DFujbg9
FjRynuUJHAykAs1CyQWLqEEfF5fXUlnInr0Qz3fR/1g8aRK3DnrSzQHl0Qe2
70zDd8nMMkhlPrM1Q+eIbI77AU1VlWhSlDp89naEAvV2yJldgJqsPpVnvUk3
KpNyj8i2NmsOcYGjO5/XBwDwXJ6MV4fOK3qeOTMaND4KF8LxkBhsyyG/wXK4
6dFgsgHxtwDEs1jOXet1ojPWQzwQmbWKZIouLV0xeltwlzV3dnvoBFEEKs9k
B4WzCshrnoP0aGSKTOSqVNDqU5pxWZRLdLYli6dwgW7UQ9G4zk5MN63J6R26
FrMQsj+i/7GQ7fRsEj0zIGS3UqpoQDPOMtS7gp4LozBcok8RpkHfLidHzdUK
QWT2L+SZrZRfb9TkQ3rzrNfyrxG1xhdBTRElcKjJUz83IF906Yt/bRO0W9yh
ExqFTqSlzY26dVmiixJ5aZFq0/0nliZsAnIbXyWVtsa/nbR0yQg7xrH68m1u
fzctpnPyhH0L2O9YjcClMXZqZu+yYFHIgKEigATJ+0Ffw03awdSe7/wuL0KE
+Ln0/zYFh5eua/lMLjwMf9HK8Ls9hYkHtHKbpI749kmsjnaXbIizY5dd9pz1
/16fMWEb0nPDi7demjYZpczpQxwVXXgkuv93KH28aJAC8kYVGKmibciVdVc4
QkFiPrYpSOkMKpljyYddsYAu4pMtP8s3UjRIun1d+ayQIr7nEktRFhuViLit
B6gzoPUWyJXqM7K1kWCUV8Zt65EpfBonZ4uuGNsoXTa2bel/E/a2GltFQ0lW
EhTjX9P2dZ0rE2Q6Si3OSFYEx4OeSU1sWGexMvfZSGzmQA9dlVjjX3wZJhYA
jv+oeyP0XyYAg4LRXmYN6ZkGfbPzZ+sYYj+uTHTWUo+y4uI69rG88DceL0iL
cdGpA+knO16w1TnRa5DVUi6IfJNuLs+EfHRwF+dEbuP7PM5eESwnNZlgnQiS
xLMsJ1jIbvev+U8q7O0lGbqfel+FHE1T4dqXxxDby3S7LradLL1yhaifiKtt
kzQCF76Svom3lCT9gI7f5/nWW1X64pi6jTzpVvZ3BZfIqo788+QzGEK2XDKv
EdlpwssQnwpsR4aOB0lQuAiSIb5h3eQ24c119wtJGzsi6Kbg0PnJRuaPxBIx
KHobsq4MP0H7SCDORSyrmt8MBYPQwqKJZANOZoF8gIpioBb7IlWYKHEJNBG/
07gkXUQHEYoUCJ+6FbNHXlGDxsgk4JgyeyieNp9XQPa/yUthW3w8JPHddnqa
MnR+iGCfOSplNcwrrjTDKI2D0UbLNQzS6f8IcOHj3uLosGJUOA2V7M4dgufv
ckB+qwHIhV1qWceVgWJFJu481QLTgn0AlmzeS7Bc7cklCsylFoUJNTAoB9js
wdjETRW7vOoKjfGmBjZ8r/N86PxAak4PHWVXpuW4E1C0os9OKgicfwDg3IlJ
yH0+pjkUHIVxMdc6KI0FLnyhRm2H4aH0NlB9jH5jniwgVlwcIidqpvWU3Y8q
HwZg3BlzPQ2MnTjVp3LG2dsRC8RPJOTS7IG49FIWYxK4raYfaBHvO3BGObhy
KXz/dE756xuUE8Iclt92ZtFBiOC7cLW5usoIRmP4RpkzJP9MTvAVDYKfQ+/W
awQThci58q5cpm0iTZ/5L1A9GelrmPTP5qS/lvFEpFPVZZMF6pHq/Cpggq+u
LGxProeJy1iY41T/mrPAJIzPlX7SNzinAOnShVR3L7kP36f5iK54PEi+PpfT
/uqG5LxwIr3pTrx7tOhtds0ZIPbzObGvahD74rKxjKC4fZt0WeY9S3pDyoxe
1DMzUv8tJ/WVDVJfkuQlx1V7WPh8yaejiu7F5dq8eoNQ5s+a9cpv+7dU3xdy
sl9O0NQGq59PGFvuV0BnzO4iJ9p/KNGeD8Pi71fvkd8smyokLjh4WQP4XwYQ
IIHOrrUn4u9d1h++Az9FT/fXMd3/ntP9Kw26mafxjvhvgO77lOWqkCFD5kTR
1zDlX8wp/6UG5a+sU+665Od9Osp734a4ZJRnPfSruFG+lFP+C/R/dex5VVkM
bbQD+j/n6SEa74ezn+6FMOul/4lJ/4+c9J9PTd0ccy4HDTAzXLhO+1nAxf1T
KxTyw/P38DUuqurd9z9wgi/nfL2kIUy/nniGvDjGP+NhJnof0JCoPZ53Sg+W
ip6rL2Ku/jPn6mcbXL0eA0zvEGOfBow9CItaPH3KZz/Z3WBZt/93zNNXcp5+
psHTGzDQ1GUQTyhI/4UlLvou+hzasrNG80KcqP43zN1Xc+5emBC1tdDQ+OYS
1mzEVMY+GX6hrnYhLoPWVsiFe48pyEGXSJZgMnZe8l95ohc0Wu23gVzE24Vd
t09MPawsTVPRhsoaYAXdnJkIlFDNlouv5Vz8VIOLt5fvpBVhS3xcuXk454QS
F/cHne5B7ZQxlw1MnwXMfT1n7icbzP0uaiIjfE40/lk5u4j+n+d9cQ0wVW2x
tvB9kmvIJwsFc8+l/6tD7u8vw98/efIJzUdg8IiduUefSkR2upXdnlFmv5Ez
e2kisDlIRwuC1hDgtMpHAeOPZGCRyg3PsvUVFYrMI1Bo/sTQJzDj38wZfzZu
BWJoMY1ZpeojgNlHJ2aRFCEf6qM8ANmw8HHM2Ldyxp7VYCyaiOcqvap40M72
Y0EzIaNjHgAb862PlQyF79/OGXpGg6H3lQzpCTQSY7QnfXFiUq5sbTBUk7t/
wtx8J+fm6SldMWojT6iqakE7yI9bqm1qE5CPNFrOsvLjjYb5s2VY+XtPNpF6
MWAFOYZWby1PdP5Dg59r5Ymf1mDqL8p30p+hEvw7wNdj+Jkb0FCExuwm+kza
rm6wNMtZ+rEGSx+id2uIpdoS7G8BV48G1CIvw4yrbO7xD77k9HYlZ+kpJdmW
dDYwWMsVeHhY4+pvAFePAlydWOOqLYMZaIm1eZ7ySZxydET+m8Rjvvld62d/
rXQ+MlWihxv7AWfgOMLPM6p8reZ8PZH+x1LI4lyo8eoC8ypl5BGJEW0iul2i
PUvIWjuRvZaT/fgG2R8ZJ9vpgw8p2Y/y+FOq/SBHZiueKeqrGq1TMHJxg5GP
le+QYlPR+EuPepoXxJi/TmufAPjaAVqHDd/4EgYJZiQ/FM+HQ/TpJ7H2rgYO
63nix6TExQDMc6xCG4aHNb1xJYDiCaB1kUdwhgLLzQUkI+F5CN20Qvfdr8l9
9+EnvJN72hNbiwYGGzkGj27IwifrGNT0yp8DDJ4CMECXJkYMwpsr73yPB1x5
9HHHdxS0avzierluHQPyzhIQHSI3c0Ae2QDkMyUgwkENkD8DgDw1PEL9YzdA
RUJ0BQE7jEj40WCF4OL58C6gcIFj6g8aCOzIEbiogQBveMDh1CDgGMiiJlAx
TwcicRTIG89lR244D60vPBs+2EgZz4x25kw/vMH0F1JBdpjgyPFAJ2aRTKiM
Z9baHPmNzDHb5iprEXjfzL/T4HhXzjEbc4T3K0Bu45GYIzXGdM4HOcTupTV2
kWn6DLOb3UFcsvv2BrtH5ew+pNHAvAW+ljMWHtZ27LOAUpQ8Hpk7qeZtt3XL
b37RbGdumhVRNoS/rcHl7pzLCxtc8vbqUur8vYDLn05Nu5nvaevUusN3iOrd
Sonit/oq0vxrT87bAxu8fWN53t4DePuZxBvN5S6738Oe6K41QxdEJgrfUuPl
6JwXPqjCU49v1XnJNI7y8m7Ay8/FZx2+RhCQ/1s18o/Jyb9foyl4c2AHGiLQ
CoVIJ56ipUHtGjm9zDOR8aaEYjHTKWi+7xjN0UY6Jzxqp1w5/InSHYEevU8s
kfLGBt3H5nTfe4zueNMsAje8qC6dFjkHtTujQmtkHLyhwcFxOQc/NMYBT0Gg
/q313j+KoNt5lWFDBQiF7U+U/WaDjb05G2R/Ux0wl2DEdd13TmTkYLMnvL5k
RAeJ4/PE9xhrD1a9UzSQznn+sM6GdujalSWJstc12DghZ6MVyN10paK0Soe+
Zjhg40Y8WrOjTIys4le3IRR7+Gmvbisevonj4ydzHB7zqsBP3BDH6JKPaRyz
DXT3PcrxLETPXwvB9CmsfjcPTONV20bipRgiDZw1fZ1jsJGaV/vtmwEAfJa+
Iels9Vefc7NzP3XqGdcPQLT1yq83MIn3/kqIzM7c6BFgoWsU+DqgrfRDtywc
Bu4SThWwC8iVqK2Oicj+yaiFx/Ek2U0sEGrPS6Va1OKBZVjOE3C1i1Ry5MAc
hOmWAK05bIQaX76xphdSxMs3yuXwbAwk9vGvDqnVbf7s0JYKfDOA8FkYLj7j
3JATRvmhZF2axlVvbqFfr60hyP7nMTxwcZXMnnhzSQAv3pPk19TfGQONY4Wv
o8EvO4lbdftmAigaVd8AwKNzmXRtG1xgzi2GIWns/jRBCwHxm/fHtHFkZyCN
0dxVr+SRXqrC980xCE+LZU7T3+iYnABGMS/4MGHVipyIXTxbLzAT85Buyv00
9Os1Ncy4Q2nI2gyzvR4z12HJnKZq5EtJKveKgF6u+dA9VDQZRBu7vEda9NZN
jNrehJpIW/N2G/r1ayULOhGN2EkgsAy7E9JtfaLsuMj/GhM2cPuREbZ8JFgD
iP2GIvYIDBEJFls9cld1uO4D8mXuyQHy1YLpZAsTzaPkoim9/+0KcxsT5fnP
MYwq0YVmiV2aGMQfwugNCspDGqDw/kKu5SXOsKopcLlOUFNeeF7dQOUURkW8
Da3wXCWXD66Ef72y/9IYMDf0CPhphLtQQsKGSmABJ0GvV7Du3wKr6GQiu4d/
fezkQ6cJVtmWoSy9m1DpxOyQhWol3JCkM4v9NQH697I8P0nlKPEbtfNnkZ7Z
Zwgb8XVKqjzDiyfbfpFiPBWmanYeu1IA3cPzMwvjsUcC43UcjHr9Xpi/HmAY
VU9pef82Jm7fm6RDYAsWOjxlmEv0dIkFTpL2egDV3ZaHiiOvb+as6nwsQObv
GxrHDa4LuOtLhMbQU+l2uaC/rp3Ez3fTz43hRlET1zBKaL6VWa0TMHdKRE8Y
/kB036Qx9b4iWltGaavcVwT2zVrwXdfBp+r/Kg+fTMe4vM+OwRej+9kEcerg
0Aw9GKH5WoDmeRjN1qBQCVfGiw29BkmvgIoSaa5BWrHXIB1eYoYpyYriOx3j
0xzGqiEtxlexhkzj9qeXwFi6duyLqxLx2A0jpBav8A1Dpd26heyKRZZXD5WI
J2I8bWDt6BaldcJtHr4Kdr53/1oDutPr0B2saUUyYG1PfW+mSdiMdF0CbQls
NpS29G6HGofrX0olVrzTsxuo6KrBvSfsoxunsmuYvsFkczHdRAOPX2Xqy8XF
GQ5bHXG2ErayqkiF/cuYWN5ckWVbwzWLqg3nn60TqcfecHlQzy9B1Unc7gQX
34B6Ax4cDivMkZ20V9QwO3MbmP3zJMzgxSer+eBDTxF0cWY3cbS5R0ptp1dE
jcSH6Lazwya90aH50hqa16ujWVWMHxtDM96WZuc80T60QJMyZYtvQvO6GM3W
aFPxHU2CmC5btOvQSbtvv1yWrULuMYQD+FVp15PL+2hZnp9+fx/A8Fg8uBCG
vwYwNAE/p2J4/5KuDMPl999+sYHddznsLuhMs1Sx+8iY/N0WYHdMws7qQ2Ka
Zg40UnGgjyV36B6yPGatvbbLGnCdVcClV8ULXIebYLG5uTMYAPDkf4fm/sAY
cHeoAjfPb1m8XDHj8+qlhoyLlkestdP2kgZivJqTRZ2WGN7tT4IrRep2L9nf
7ghfV5SyVlgiSnBnAN/RftIt15C8SuGTyce0YSNaftYHW57G2Lvjq/tsP9do
hbMdbK5f7veLEuqXcUPXjZ+n89TPbZxR2W8Yw/F8gOOehKO9MeeVKakObKsY
0faW3sVJiotzADMo89G2LG+r23MvbkB7gwJakcq4qzV3EtkVhzOExKlg1UbF
82Zwc+79gwBftuCc50HEXuHxDVsXXV014jHlKak9iqnO0UBmW9t7LyrLUmB5
b0j2US+QhrrCNNQlRmaNW6aicKiJaktmfwiURoahJt6SnsRxLIf1XELtTZuy
Ws8VwI83JOuYJKLjG4AvbCDJqwC5tNIqk6hN5labBMDjKZVTAAeT/Hkwf2MM
zPsCMHmZuGpX29pBubvhIShu/9sb9zqkAJ7RAPbYDIjmluBPN4C9kQV26hi3
A6BxoIZtK6gWJXgAKG2nzj3R1u3zGujyAL+eS6lbqD97HNlpm4aMLFjF8F71
hINNO68/CgCxrzZm8bZN1VmL0lwICuSrGmhEyvmPQUfVsIMqvWUSngmzgSxY
LZU6YLTjPZx9l+6+ieHsOVC5+dBTDtZOr1DcVi1oQc/ot0bO16SDFJTehUfh
uwkEvPDF+Lh6JjSpZI3Xd44Rz1Ez83fh2Vzzx6iiloqF1GLC8mpBT+ZnOgnI
Nmm9hv2pmLgQV7agkb0W2pAXzXJJLHQPltksRDlJBboNmKoxW+KSoe7h95CU
ONvM1MT0FxmP0B0NUacqp+FjDj+mLkCRW++zuJhc7cfb5/rIArHBV0O4m59I
kMNjEi+OCOxEtZcE6X43KW8wSWIh9GhVEslfTtAV76RAeDULCri94cuQ9ImA
JK2OyNgtpd7OPOsNPdXryxbV7O5Z7ADTdtCfz4nLDsDKKI6GerRidXYobGdc
n8Xh0PaDPFQ7CdTe2pjIHaExJj4ClLbuhT+3nNIhgm+a8l0SdZI45k/e5D/W
g0f1xTACcJFyE9DYG+BZNBYfjAD00tjpVoIYLrbrvIjHeNJ55q7zt+OgYPjp
zuV1/9aIZe1ajoZwgw4IA/MLyYNJNyrZ1QMOnhIByWadFCck6YRrXxwvooqn
vrKSug1JfJhikJUpb5XrCVd2JTTJy3FAEKl+/toQdeO7r6JOU+SovKBsLevW
GgOXuj6Bbmc4I9U5desouwyCiuMwt8UCk2/EbfYIkoZ4mwtSufp/PLIczDP7
HbyWIkKx6UayWL8kpPrX2vUvQP1DTCPvZ6BYpP2ZkKFrdoFpZyocYghvusVe
wGpez9XEXHxOxz5rYg4cRD78yDEQyVnWzLl+DzWlrZlWFFBKwA7wXujnaT3Z
mQ/JnpklBeJJ8MmfuaMzwXCIGn7YybdbEZ9GPnHldHL8Qh86fqYJEkk1n20s
JfaneDyIdxOGxbJ8c9DuS4j9YP+P9znIs0VXTN41KV+rSyV7qYp12/w8bbeq
3RWVhoryAj9UNboDfSlZ5uDNWJZ5XJULzO0ZcfhZSa2tZ8Toit09SfuFZ9TU
cz/0J3mmIKXtLbwngjpWeNMpl2jhSlzTRYLJ+CdasXRkbjGLfunhYeabHhg7
VclCrr8HIkDTVq5ZeE7ivbK1Fc0srBAsI8/u/0z9EpRpbcAiJBlz0UyJsxUx
KhRcUSfv+85K+NSKq3fRI0E3M/Ig7GlG3hJ0lnDZxXBjN21k8nSMWsrr5ZXa
ZIRPshp6maP6eCmeaV2HNWTHsQM+c/J1Tv/y9c6+cRE7IJPSkP5kQD+6vDV6
HC2zNqUte6KvIqrx4LvvrgHVS7t+M/parPj6JCWr9vlCKoir6ME8j2teOGF2
FRPBcyDnaJJBpCVFTt9i2IzaQbhfI16KkaR3PIHrHszllbvB6/5FrlT9JCHu
EdeFkdt001ajOx9d5viexXGwsSuiIvQCuAtsu0Qrj2UEkJYVJICXYNjiYrTv
jkwAU5pZ7xteUuaXOstzV0u6eCRbEC5SCV6c8jpXrVRnk2F0K+LcqcbOC+Q0
64LWbjVPrTgABdro5T4LVCS1WQzyWm4u8z5JQzT5GkONk3XZOTfvG+E1RBLZ
mCGUgoLObSitS5g6sG1ZeMcx5oo9uVuDhq4LIFBGaQsiXWjXdV6wpkgvmifu
8M8GrTQjxOyA7JbC5ZNXagVuMP+bMtbzMhxRietM3cYpXs3II0htcqDjnPjQ
iSdQMVCM10ukbKK31DQ1yjOI9kGIENOxKQoIiyJiGpKQ2xHJ4LFATM22xNS1
kjGd0s2ZH0vFFLsbMX3fbVdm0xWPbhDmRl2zjTqYNNzaYFMrCoOUk8raCYhK
OVZHSVm1pGi92bBudPM8L8ss77SoaB8vSezfkCZKMTC8WbFmDuNSzHOr7ke4
vHKrli92Wlr3miuSxg9JmD6a2aAYODINkN1p19XMlp0KcGVxZA4GVYB/tIQm
PD+Xk/Ydlt3wf08ZUyPrM27kNUmXC83cF0MAID01m5iOpRcq9fBsrU1N1Odl
b0lMDdOZKvtWdjQTd4yA4dNcDJ8WZ17/xipavFpXDRhHRyjIPEezZw4qIyjU
OTrpqGpnnhY2ZhLPSXwVYY7iRJYmsdk9DVTf/sbM9M6eGxLZaPeTz6QYZy+y
PG1w25tWze4Bjf/TiZPMfmott58S7EhP8CpwLpTLD6HzuEazMYkwnuoKaDaz
a6/dfd7URE8aa7u44yrheiTAyknesZkUEEcUDln3YRVjTMC0vZ6M2+u2oL2i
Y4+0lTw/GrTTC7J2qpljxQ7uVPeusQa7yGdK5zBMoMT0LTcYMu1O4T4m7G2k
nva4sdaKMdVcQDEUxWpTmwrZ9NzdixsV/yTcTufV20naSPoTaqd4DdkUY6+5
J4rI3ltThQ+sNdFtuN7HYm5O9i3X3jB9lGJY3TCNzeFidGVhFKjnoLt7DwKJ
+UHQME/ErNwuNYwOU3HOOdhn0XxP/0+tMtVSDN00cWCsD92r1kA8t7AB2RWB
QwT4MnuBrTCVlCBay8BgZHFkouUOEr5TJjYQB7XF1tNy2183yXhs04NG9R8C
/XcLkELJ6EXPiczxlGa8bno2vii7cAxco4RVGV3bL8fkvJm60WkA0Lt5lqn2
qAXhsooqPitS1k23cUJR409uQ4s3tCO65GlFvW9Dv/E9P/qMvpHGGVlAzF0b
SWn79RvVe7Ox1nhRRLIrwr2pB3aYXIYMZwDGUUOw+Tq2sWbLk+TBfG5XM7PJ
XZ+sjaTCce3ttAVPIqQnDF15pKIDEf3XTtdLumz3hoGn385Gxa4AZAysn+7M
pQrJho5dkInLJqAmGbGw5rIdmvfNE5xCi9xuPxg6hGVbYbYP2gPkFgYlwKpH
kx6xcWJ7g+dnuEAowDY6Vhdlh2MPBhaRpo7uHk6eK7MCqp3tJqcY16xb45pC
uI/x9RJl+7Yj3Dzzkn4pLcQwDwqziklcog7m2dAlm5K4V6Ot0pl1NbqGe0Yp
d8ozJCyL7Fk3I7lY0zIMp+GNWfo3hZsFqzAmNDKvgXY/v+/AyeHJ39/kVrcL
z95734c87rE3vdV5i5RWWXb1IiHnejdsvZLXQkMMzLQt2Chr4lZPFPHRAIo7
tMwU8U9+6J4NEhwUnIlXkljEY4y93HKGTBdmtNRdRaYzbDvDhPkB9MQl5Fqp
4ImryLVrgcI2T9piAdpsSG0GlCPKmwmEq9omGLr0yWuXUilNQ3qtxCwQa5KA
V9I0GeDag/x23WR5zbotP0ODymDTGZXXmFLkIYhr4kq/K+K6G/QFup6cpNfc
OVEICpsOrObGMWHz39pDqYUMB8D004oTQBehwu/WqPj2nO5uHl+DZduqL9nl
NaTTlRCPnobOlyr/DykNlIBtTSGinEpeKTeX092WCLvvZNVvULvh2Uvvcq8L
/TSiepS7yGjVD8KHiOYJZ0Na2TBkXFopYGE2g0AB8O5CUIQXMeIdFJZ4OO50
4LXTM5VEdJWVlUS4Pciu0zLBdThx87StPXhgd5vj4SP/Z0dPTAc/c8WY86N1
kZW+K+1Vl5THHTldkkZ4kfSpfq5gUyq1whsyydBPhcbYmkE27RSBGiAK/2Aq
STx6nHlgGIQvSsEmmA1R5OAE46G3KewIy0RN9uKADncX4rm41h0+0U7QjdPH
1OYjLdm7I6djF9T/ETnLvLco7dyP2UL5yJBcJSVrePnk5iQLqWJ1S/kLIImC
C8Jkd6XeeOrpZ7HsbCkL+mksO106emSiUNomTyE82MvXnxYa0QriRqL1VE7n
9uLjBav1jZVb+0wkMKf4Z8T00bUNuRi2BwrU9zObIwI1KOCjAjV0pUC5YqOh
cW+yhu+5ScgkCRKpyyRIyKfiqL5Z3zlttSqlByER6GXuHgQpvAsjqTtwl+qH
Lqm3icrnV5gp3ZazEhJNG2m+hCQkxtCAOz63ieVazcLRDf1IxzcXrdrgjSoo
VFCa/qG1Q1vvuKbKmo96LJoVV43CcPkLn6Y2GE4Unt7kNufNgzCdr3ey2ldt
WVKeVVgUTFMUUBjtrEzRhhCPL51FKY1qVDSHv2rI1MuYvto++hdOPfPsC867
092hTLFxBZ49ncvvcm0UxcqJ2i7Vg/5GCStfVCbHYwNHD3ycLEEVXMtnm1lD
eoa1RxKcRZcmQr1rU+8POnR4flGx5iqpMxOwvpaQxc+JTBpJPYup8my/RSqA
+3v0bHdvnln+hc/wPMzFrGQGaeQ+T60tQgpqIgGl6tievyGWMVCLmi2m87dV
mWcFK2/NZEzDVTT4DAmLZ8/Fl7OnQ74gSrGT9Z6d4au6N3MFf8jIa00grD/A
JSBhzZZIZuIxl1aQz4zA1F1Bq3hCUTy9gV2ht6XHWVhe+pZWgSy7M6djyZD0
T65Zk07zUseFr9nChbpBWOct0R1WlXddkkbRhQHjoCPXQE+kR6x52hvVMfKi
HH24QPBxgA0nLXAbMDpWuAPEh9GzhgT6G9c132lclht8yfgrbug6M5HqGWrv
S0kSeBemGEkgNx+pjMH88M4HpViRooeUft2mt61jylzNy0zvUMHU7PEeGEuh
lmosuKU2HbupwBUlPIlDr0VzQkvnSiJFlwUCcpAsntNV7XGMBcL4dvGrOLFz
EjjJqzexnqDMaE7Fdh1e4B7KoECBi4Y55Vnl6b4gekG2suYqmdwcptR3IHiv
9quGwPF1J15fnMJF2YE4/I2XZEpS+dkLSkAxcKrH4eyB0RiMYsBJVQuZFZxc
2CjLgnyOTTU9yaNPz2IkQLgDcF6tteoH/5qODNd2thvPq4pbNBrvrkfUeNKA
SzReFmlngi3c3rEWjGGUQ+vp/TyZJS6treepBYt19BNBC17YSG+b0TUPmnZk
Do484Qi/Udihtony9zba8vwjbsvwnFbDK7XmYzeeZYx9jh5rvtelBIuHX/wM
pzaNm4AYVAe1GeXNEhCyPwE04oM4KVwa377efk4Zc2gCr0NJZo+utR8C4pyy
6VR938003SwAfUC/HaIqwrdksrJX3xrT0nHTuJ2JArxLxT1pI5eu3OXt2LJV
LhD6SgYfD1rlgQ0s7uDTJ7SPU66ToY4ZC3wT7tQkJgSk45qHfddOuxTh5HG5
qd+IugqT9I43/Pk2+aX6CMtzo49Q1Bpza+OG1S/SPBQ7/453u2+YZOzBTbQD
U0+mWyS4rYahLZ4sFA59otPQ0JVbpYvOfODalNcKkk5GFHQGF1e8dh0a2hB5
dy1pM9TbdHEz2J08bILy0KYxDzFu4SYchWeroBgE1FbiAW/Ksilw99dc3jTD
wGtR4jEhw+bsTh0yaGuyq6SaIV4gYm7BENETvR19kQttTBZrJH8ckbAhf9hL
wonjUaBRke1NtoMiz2c9Pc7nOI1TYWlP1ij+WW8QGzovDr3UuDVGjVZLRxho
iFkpsy+Eb95OAAd8LHtrQkvfZTYzlHLDPhqyZApHS1o5vn33YaqybVTppzxf
p99LiixynIn9UjSl05aH5XSWbhmZyy0j4V2Q32izoCGYwoclDM8MyTbCXgYF
Zfn764S7vpbJ8uCbDu1/LmlvI+mM7LZP/zMLgSGmcXmMWU510xft+KMgeChd
Kj9T4IZCYDnDGhDL6D2Zjas576hG/Qqla0jma1NBumOwDiRTzPS7ZN3FZjIU
XYiDCq1JTAv5CcIYcrA/WDEPflSqWxCPl53j5Wi29U5UktP3Ho8ktW3Flsah
vU0ZtOW7Z10mX2jHqk8Vr/WdUf1d2tCNLSnnwSQtfPpnZMlRWJF2x322DUUf
vmcUixo7WcSrCyZ6hX2BqEwTQLDt9GpNsgmSxJnflJhFfEd1obcemehVqYrX
0ef7nGnSQYc3iB6j2PSTNUCfnrntokEzFkarkqxup1AIllMstNdpTgiHTs4n
wWQvHinZUUBMq4KEEQjRk1XKkUqFlXhi3ndYvNSqFe708kI/Xmgzvh02es2a
7ITZMQlFd6pcJ5k5sVKW+3BSuPr+AZ/eakgnKdHp1UkFsjkxE+ltKp1V9yyW
3W1QThdGNqSbp+oGeW58rlT9oEVfTOcmZGYj3T43JPg1wre4jFIsfpjffyLR
Mr7RxomXlI2dYDgzkU1tg1+UiFFiW1f03MUzx2ve8DvuSTlh4GhzvXtBTXIN
DTmDNoyPKROe8MARUrCCde2HzhEVrahlgAxU1QHT4E9cv+2RSmLA8PLNdVM3
Iz7GPNTFgJLRGIMMhM2FYflsL484QvlYUrEE3NXz1ZYAPmkfOqe7mzPIleqz
Kfa861K+FQVfDpFgApZr6kiNU9fcFuuuLbpszlOxfAHUeeGOesL1XEKYdXMc
FsZ3EP+R0jU2D9P8Yw8YNOLuZz7/fJinjsTih1JNNbFwgwaaXhj/2WwqATeK
xqYcvTzmTZ81Qb/rkJUJFKu84foyjScteh8DBYE2nNdEeKQMRzYK6TIrWbGJ
WG7wSUMUHZ6UTtQttPpv6Ra+s9MLKpIkcAQSvj/UZ6dy74WTUnXmYqHtSpI0
IU8/FoqpmyvoOxhqMjyqx9dzMpjKLyw6Bi3Q71uF50WsbWBfMJf9VKmrvntb
7DDFbdDeJuV9Gyw7vGTo/iMR01xof4jSLSk2x4CZyU1KmsL3eNeBO53gvQC8
Vs4cbqkiivcWPa2cnGQrCW6moXOTvSHS13cyQAwe7MH8rLUeg3qyfWt6wQte
qqp2KBKWMYNLnwzq5HlLP8TNMtokWWrD74OMS721L6ciw/97QV+9WUlTqOTB
jIJrY95Bx3MVqokOc44CghQP/VxD0xE7shNsuOBOs/NZLVlSFcZ7OrG3jS8A
3zcJ3OwSY3SRwi0a2D0IYB39CuEq8O6J+Hxh4Zq2inquVntFeG5f9IrlRJOX
WQN43tmVqdW0HRxu+uYOzisT/ooFucJ9XwK82G/OYqrQs5ab3D3qgLtGRoCb
mLbyXIwR+858eEXGGyC1/d/WDtkDDCjXAo2GpPudjFFdul8F0D0R9O9o65Rv
qhJNJC0tdO/pW4OKJxNo2sWY9Vo+UNZVa5BMPL/RQO6BBrlsstgWz3dMhM/J
zUlAks/F6Nxf4Tu/AR9N2PaARnlYGxtN+9UGNg8y2PAgOHHq+ttj2KDdkeNB
nzobND1FdvD+7kNXrGsr14YZ5yctcB5+z3plkv5daDr9mIWBPs/Ko+dzLSV9
Q+WtaHErU+qVOqbS0iVaAvu8EGxIUSaqRwFRRfEjUft/WWtFWtt2ucwur7qY
fmOiHi+mfx2Qthf0CyNROgRu+EWCvDNzj8I7hco0dv6dyWs2H7VtRhZAa9pg
BqjwGm3PxGeOpGwdncqHUR9rZ/VDjTzlo/ObLDGfq6JhXuK2M3nLEi8aokme
UzRHAf1gjliaWu6Lvry06ffgBDdb5Sw1+2bzr4ae+w1AH/JSjZeF9qZJ+CwD
HdeiXVp+tmErEgBs3rgh6sSkvrM3OeZC3xXiue7I67J9N+SpVmcLhddtBunp
R+h16ZBssgtVY7HDO7FeTGiH97GptKaK/LwvIEkkr6/5exa+tLrm5yIbcvgm
LsiNt2hDmi8B9eK2Azyrn/y66WtwjpL2jRc1CfRDzOWKNf6w8r4z7+vKsHBj
HTp3XuiEoEuT8UzODR/rUkJvSrxGZIuNB/Di7t4+PbXQHtBOSMqQ3vsspyul
7KEJWTaJXUrvvZx+N+TtLYC+XUB/8wHI9uRt1RMhARAC/jVhk/zUNujio7o+
83Wb+5qqsoVUd7a91BvetiVLbBWFJ3X38emrsvS4lK6psT5Z1qXjtRWnfaA8
pLR+mdI1hOhtXFB4IE7W8Aj1SIRoLTFlBShaITh56YyZgZkzbUt+6sfx7tYj
WycSp3XWmkLe0G1frNwxwB0TKoVYxevFnaKgOAnR5W9UJ328LFzliFetjMe1
U3njm0U/RyyHdNUgtm/1jFpxcv3hRgDoqeIUt35l3BOT6OyYcctkH2yRtMwo
Ncr4+AdmTfGYQcbSPiVuuNqvJQL6+FII7Lsjkyn2UsAyRdvfFDmII/WPK6OP
lqWpED08oWYdmJvKiCPWNZTR2z1LLN3hP2Twc2PfUFTAetm95b3RJkiaJFk4
ZCD3cpIFLq5PpbkZdiYqSWCpmeuC1J62bwAiU6mrvoQ+K6HX1NuUoNszHHUJ
ygY7tNBC8oWU1D+Wdal88S4II3BdX15bSXEY7VEhw9aBhBwJG7q6m0cCt40g
7ydKlySls6y69d540yWBKM9de33XmLcbCXWyNGGBOBiiLP/1BSITup4T6iqO
BboTg9vRM7x7wcdM48Jooog0ld3fcV1Q8NlQjAEht7upe7SX0u+GML6jrNWM
ZU4RIg+Cc0ArLDeMqmmYNA51qbjpFuofzPvoTiGPFrHt0J2qaXiMO2RDl3oL
P2PJX88HYlt6N+uJJfesS/vRwpAUbqRNtwaH9Ky9xZYN5ilfbA0nmuza3ti8
uL/PRICaO8tsJrIgM9f8NJXm39BvLKds7Mr1n+XLq276PqMsj1SrFgpENHyn
2fsa6HB8p/KRyCQylFtDDGfzNS1qRLP61p31+qKXF8iLzqwNsormQ+ctqGKI
EyvVnbBtipYsYztrSq+RUM2L9Ca/xLsfdDCwpk2cAk/oepdqrys4p4D4hudx
7fpXJUUqYLy/zIDeoFZ5dZuE9XtDxf4OV53Lz7rHLe9vWn42EaiK8y7/bEht
42jT9LF/OvHnAP8hWY+JTi3Idy1ajqVXmwNWbdK6hZ7vu8+sp3PNeWWjOR9l
mvPGvrzq3uqTpzViYWtACeKE2a8agKxObUkeRMKj+h17RIkNjkY1fRdo092p
DP0cpe18bqOdY5AA4Vc0dnaFCmFqjOh0TX5peqZLe9Q1/7TRlo82bUnwLdU1
HzvWqr9bch+K2ZEgLmboN/NNQsXQTlEZnH3qKLPQFDHwVWhPWylfvOKjnR3l
n1Hdu7VZb9No1gtTuyhSpv20TTdBuuekZ7X+Senfz+nKLenHmAa9OSgMdc5H
jjXj72FudykcmZa5acJ/IfiDNpSJmB0edUg1bahlrKaZZviYmayv/4yUVz/m
PmodXlN7gkhDWR/xbfeS9KzZ995da6fHmna6FSisuvylk632Hh3odeF7lGit
InwuxElNaFdlB4kwp8Prt8eA9L/gy83FW+esf1yD7WID27mgMCTerGYb4v37
JRfh5e6El7bAgxt4IUlEYzWbszVWFo8FmX65jZwS+E6PHKWgQh9nkDvPF1Zd
OlwwDTmsyONdfjmbJOxzANUMcL2WyrBGKzfERRs+fTEvnSh2v1+2roqzxY92
YaduEdxrDMQ/wDIF7gvWcm+RRDOre83WbUFg6yiaPyYiFfyKcyXRZ+4GU0Rf
MVEcwdpSEX28QfTOvrzqPPKGzAUVKo7r8rPClzie3ZnPcWX9pFiVuQr48XL7
XLHdHOC+mnC3wijyirzvr99A+wkA7V8FaCNR++0G2k8waN+1Jr/Vmd6ZCXeN
MBhCV3arIa5gtxa+h2cSMuB5UabYjaUh/H+IoXg6fnwzgD9d2X2DBqJPBIi+
eqL8vnm0XGbj7r68qvyeFsszEAYAZxR2jIOAvObtfy4/FKS9W5M4oTm4R00D
F6tnsC2kCJuLolUCzmog8SSA8GsmyuxvjpbLvNxraZk9GOHpOOoKBQs6jDVB
zdGC1iTqSnheBqxqIPvOkupAwYAf39SA6kiMAfzh/MmcBCuoV0wUWw5uh5d8
Tzag3geUh8R2vxdbgXGPCS8aL8jUq83WxyD8I9zwl5Yyq6zFBb5rfjo1P6uR
iSp7CgDz9RMl9DUNMJ9iwDQHFuPT+L0Y0WP9jZiCJhsgNyf9QCLD9+cmZHIp
k41cp02R6+OZJQA63UJBst8wUUovbwD7owbYB02U0mMwpiCaY0gymyageEvq
+VxV/vycOqKu9c/AjUXVoqj4b5ooquTKUzUZt8L6EF9idQlwVGyjLt4PETE9
AWD67IaPUUVfvgDjYHYVFcbdQDBbMD4NwIgM6pBgxgsMyuXnUw1LZCAxdREg
l/WGzAHCFO6XItZ97ORDp11553s8wAvgArP3IvzYRAVVgGi/+WiA3Akg8a4G
mpcANN8K0ES8yyU0BZpPM2hmNujVCZSE1exMHz88/OzjwLtBZ1559HHHX3TM
MXubGL44FpOptN2eTfrvFE8+PUcOmmwAmjZaMJA/DoB8BwASieVlNSAvMUBy
ILj2PGnNEv7SvSfsk25tbofXCNRU6v/HLOX6jgzGKqPLLs8piXXE0ulHZNF6
vM/L6UoSdK70dJ+eyvrdieL5s2VrabkW2Mf78oyEcmxQI40HGEbRjKmM1oT8
MgzxTvz45DqSpVQitbxekuKnTOa8WjH9g4mSClSUYvrjBo8nJWFdlQJDNOav
n33jm7lrYw4LpM4sW+v2X8KPzVa77w8ngxcIxhgN3LaCCnWMzQunR8/05ROI
70zPmnvHP9UA8ekGxDgFu2zXrt0igBY335HBFlf4/iv4sYnW73HLhImsTJFr
0V5QAPG6jiskGp8FQFuMSx4B97wGaD9RgqbKL7t0T6O3t84/XoYbHh08ox54
wIBWChuyvFhpgDYA0N41UdKe3Sj3GSOgHazpuujaC3XdK8p3SlC2ZU7k0h7b
QYArxcA4Abyo7zBjNp8N4HtPW+Z0jvzMRrnPLOHTebS5c7SE7+1loaHSy/lx
PgpmRiIJtAyCGJHfDRvI9vY40AgkkS0RvNRnogLf38ZQRZBHBbwWfNY0DGXB
nBK/DRP7a/hxsg3NQNtXB8312+NAAQQCMlaoSt2fthFTqXtqA7FhBLGqpqsg
9lqAAE11qf+R9icngDhvc2K4wf1RnE+k1am65wL+/3yixIDzpaw3T9L0AZfE
P8tPMdu6wvMfeIHRK0hSdoAXxwIAUboqKn8BUEGqPLuMIq0RLi0hCbMC3RE1
kPz1ifsOJkjeUopEKPU3PJFECnIEOQmIBDoTOQaUtwuURzQ9xycmLj80UW4u
riH0HIwQ7dEnhOZhXhruiQvz1JB5ptJs3Out8PwGaHs07J8I0hFSewGERwHO
qko4C9hfFZ5H1aB5roEm7k/peieAsj8JT4Dr6hP3Hxy5XueK6VihnR+E1RpI
dwxIV72PdgDQfXiiVF1Ug+55JXSu3+2PJxFxph6TaxDP1RqxcVc611SvBwwj
q3mzAZQD6BrraJDuuBpNaLXz9wBAJHsPLQVCO1YFQxHBbl+KoS+TgLBBVI1E
k60ZqFw+Y8XT1dcBUFEgMAJ1vS6GrgcfX0MRLbz/caIYAnseRfEnDYpPA5KY
XT9GoHMYv/ZuEujdleUkwpFiIaFBApkpHF0rIDPTqW4KmejnTWkElygojs83
jMZ9UboATHAEe+NBGneBquc1GfhFDCA6sjL8K07HA5zmoHfv8RBRCgr9lQwk
UJ/+2ERpvC/mgsr9qUIa6Sgm7IJ/+Xpn31jR3ItPxLI7sNp9+yWYDnROdQJA
cy9A0whNLp1Oio2a8C2MNjk+PlE6W6Fqf9rgyrpy3aa77Jyb9+4kvHKrFt/1
tXTH5wMdrEXfDLgjJYjGopW6tLp2OA60V3Vp9cmJcsvB6vDS4gWmDp4l7sjH
4C5iqDjHK4oqt2Nlrv5tUX5+2fRUPeAMQUPNihzNspMPSnFsDVs0/f404ALJ
7vkNbF9o6nhKQ5J4E2JNLDvEioYsOfxVULlhRzQK8Vti1ZvrnlOCHb6j8xqE
Fe0HoGEsCrLrV0fXwH4eAPtfAQVIkH+gAfaLTB1PxlIVAzjI7R0O68MyvZLu
L1pXSxoE+qnh11JX01W21H4P8E2zWx7wiv15KhRNGlAID9O/PNqfBzKDKL9j
A+2fMXU8CTO3GbMbtOkyngD5PGBKay62v9NbU870iLSVR9xky/XVHwJUEUDH
lnSHH7REQGGRzPDk8f33tjRrn2TXdbDGerGp4IkYXGPHMHYRzfIuaqYPreZ9
iBIugAii0IBiwZKVgSYW1b2RFwKEv5SeNSW4ryH8s6aCJ2CEMxNeKr06v62U
8W6AEzqOOzq2phG58B1NENCelOmRHqf/BDwgSfy+Gk4/ZyrgA+Niq/58X0e7
xz4W4/Q+QCfaTiR5IgbQTH9HDZqfBdD8VxsabZ7Wtc8WnYvLJgzlUCTb5Tvf
RSXWgQK0l452+Pl+4ZAEDc0bNZyMF5DihMJiIxG6aQOnl5g6KhIwwXIzlcF7
K3guhbbbN0CXM31LnxuPIgUL3aVERFwGwPoWqBwJ1SFqn9LsP4yPyOzfBKQq
wP15Q9NjMLj392S1u+iDcBl/BVgzl6jTSBQYkpGIL3xcDdZL8kju24PXDaPz
YbN14HH+DiAG6f/9CecVazPNZv40E+nmuRn6vAH2ZYawR2OgaMtq+R5f2VtA
W93oIDQ62dqrOTu69pCOEbuVwK84NXSzwDLPFYTprnrKn7ZOjNuRHyVmgEgk
9idGHjuzlhzzFtig1WakXvbxpHPQMWdNcGzH4JOAQp8+3BPe7hiVe5bQjjo6
rRff+i7d9Sv3/XYVBOhC1RmlmFuHiVBGjMLvjzB9e7281l7Iux51n2MTyct4
HIQ9mWqr2B7E4T+w2YQxoBxf2IJrKHRA+Icas3HVXVzA7Fbda+IMkItfNL7I
q0zov7KG/jogCPWWPaC3qJOCoyucT4WNRq37lwzIF2Gx5cuil1ZTP1CWFpLy
PvROy5NU1HXpbnW94DpIEDOyIYxY4Q4fKSch+qoaosYcrinPOzGimZNCMF6+
QPi1SP4IRvJJvva2EqnE5uTbJzVmTOhBVh6PS4dqtpNJJ6CSjQuYRwdt1CN5
28DomA3r8EiayIzNxn684va5vJzdFpf2L/w4dMAwsxB8jsdHFFTSr9VwMVuE
TamZpzpLl4EVW2cJCoeuLMadeG9135nP9cGzOGbk3YquF6qrDF/GCeAZ0XYc
pu0TnF6mo9RVT6zxWgXXmD80hS5OHYJWpa245EigtSVjz18w1D8kQVOofL6k
CgRXtdGxwteFvI3OM0OXonTo+1mv6RVEFDCRqkLBENtVx2EIVT2kLPa1hKcL
YT+CKAjvciFzSBtdrHi4V7KlzC0tUz8o+uNqFSm9T8LQQ2H7bFUCAirGzEPw
FlMUQxk5wj3y8VwcWE9XdZ+x+8v6OO2tXnDene6ufTrMNqUGo+jKacuDGbCc
7OjM65o+zhIEVUGW27yIJLcwSboZQbk5dF4uBODBps0illOaaljOGjmonTcs
SUOX4pzIs0qJTLxG/RQplWjKIRAR70/wDKoscbTiVc8esRiDf+ewEi0mxFov
sHE4NYAT6qecn1/nw1KMgi1TSRqWDovTfm8Me7YWczmXX8orK+v1XOFffc7N
zs0sbIB6tDJ6ISb05oDZ2ITyTBRPZDUH0+qxwYIfZVqeDTG9+39z2eqLLtLb
4rLotFKl6waxnD5LY4Mxx4FpQ6RTw2OZ+hYl10MqXoNS2j4g5NV6uSFPtX/O
QlV1Vmy/P8XpZU+JhtMDNa15OScupZDNV3TaESbEqiEP1IyT7XK7socUw3yg
5rdNv5VwqWGX9f5OoYzdvO/MAL7jGq52LqkHKSxUx6296WruvMAKoDJg2sFb
7rwPgonG4ihoUrV7N8dUy/9RLQqflqG6gPGFccXsMB6L6+zQWB+XNv+v4sSl
gImJQGdmfVUXHytYHEqwECwOQbTDtbABqTdEBQTibC/Hi8DJ5jKSVYqOU5ah
A6Pyju1QUW01dLu9CWI8yHMmeI+U3nde/qxytMOKyBvPzKlpVu0yTMvgbpW+
CutI6mzlaP6BxlXey8UTeTHC6Mwk8GAy6/PqbEzadI2ROZT5QdRK2/0Tafmp
VwxyVoSqlv9n6fVgXgvnpiFTVwSKjVDaeURVzQDmlYkSZTexYG1xgVQbqVjz
ZkG57f5nAE3TMR06EPemzkzJHbFIfZvf5FpC7r3p4uAYJlMHa1pnTJqmedpZ
abpfSVUolc9ei9b1zacThPw1X04YQDITs2I6QmDvOKKK6PUsiajWYRsqzqgH
TZUFKt3SZ/ox0ivV2j1fnprRHCpoLNn6leS9FkFlV4bvivxQZiQ/4FLm8D1a
KYkxi3UXLD1vlpKfqtecPTm9AFN1mxJAAb1XSFa1i7n26LQ9hgwPJyUjM6sj
qXvoygnzYIrouuyuCKal1xLWpELhQGqoz9ZpySkLALrYgOf/VshkKLTZszmj
fEzHI+1mNeeiK9jzovZNLjNv1M9x0iBOspjsTq4JiQmnBkVtmnOhFbXKYeS5
9NjdFKPfzcRImGu2dXYfw1Z6VqznXL7NI6JhPphnfUnaVpvcXU51dNk0vPMC
2Heu57hduF4fkx4NTSe7d3x3vB9Ah0RW9foBQ+ZqTqbRvms9yBve833IeB72
J4yIaF861iF54/hvGkKPZOt/UE7ZaqSQ096jIMkJhWwC795FmZR3LAyLBN1Q
gS7LR8k2/pto6Dv/kQpqdPaGKLBZ13eVPpCK27DFSXXlGL0mKwqREo/O3BY/
Uvhgkq2kYUc/bLtVzKSif7s7EiezElrF8qXxge7onfPfILRmHhgEF88D+TrH
wo4uXtBhu6524bjvkGMTT6b6Li0HCdlBUI8XnTjwZvoiE9HpNWYL0PBtLb1Y
uBeZnmeCfCn0zPCyMM/nWlDsNKIqw8ad7J90M9rGW3UnS8LJzEOSdholxYz7
3WBB+honrdgpunNMstdeUQmjyUU8cnUSdrC2RngVJ26uW5dbaUR/mtyu4nae
f/kbjcsG8yj8PXmp1NGBte9MMx9IjDUPxqPs2HapLeFM+AVtgGuDLs7SYqdP
256oA59pUIqF/16Y9tt7QAU5A6h9fPJSqRH8B1PSMNmVZjB+zC5uVmdaNKJf
MT91CvZ0blCxWECL6uWwljN9xTrahqTTE4v1PTHWdyjRC9jwaplHlIVl/NpL
pj++ijc8LQXGYXPpAlInrwTwYeifhVeM9GpuU0Obp9mmWMKqiniMnKKensDt
PR3z25Ole2DE75gQGTo3B/LPTp6YLg7SQ2fOlKmV7HDjVAvPmedhUAjDgaiX
iirnG2G8LB9iWXZGa7EFnSo/UMPp8hrabLgenlPpcb9VaAEO9KDz2EZgg7ei
g75bq5lqbPMfGJ2/ZEZcGQcBOnE+4PrtAd9vEwNVdJJXdkJns5T2Mf/4AqW7
0VdsX/gBL0H5tqWC9O8Y6b8C4nMAACSC2qWT4djCmHyE0XcAPBwDYd3VZWGq
OcBTJdaO5vxSAEL5V3p4qmP3v5YQ66rxqvBqf8qkxO5IUqNjxj5PbNu24ysA
kZPq4mnNtmru7AUwdy2BCd8/pFVP7WKfwAWZG8ZkTa1s0EQm2qdZO8DlDLG+
oCJKZCHtFqf5YuELbP6skzrVZM3b7oJZy0yiq8Lzzzj7n2NkDigy4i7Veatd
YwUYAi6OWgF+wT8jAq/DZLoGlNh+GUjGbDSMosEeEZqNRpPZXINcnWpvGjh/
BIP0fgzSui+BGpukFXlPH5sYK61NFUcKDnSHu96HmHkNwDH6OzpdeDKoTqLQ
d8b1NrqSdxJ6PQp2qFMsmktE78QFQaVDd0Av1T8/3Cjt3S2U5xblkGQVCBRy
PD0+AUHHmiUQ62Rua2LQX36L/k5+0EQS/UXQEtcGBPD6dM01/LjDOUUhnmTY
D6ycA32fSCQ39cJf4+x/TE3Lm4+uaTmSX3ixE7QAckzl2aXzBLeRDRiAnci5
QVxPhACdLFSH7y+BRtkHZhp7Spq25Z0OPBPUhN4OcHcsUQ7fP0NlLNOBrsQF
/WGiY0LfQV7tyNc1rtRc3yEfosMQzRJEGw6i6EJkYYr7TfkuXHXR9B+APhSq
JupUaUUxlCH/nW7NumHZ+2VmhqQcx6J33QGn+7dEdXNG+0Gc/XeVvw3cQigY
InI+PYV+r+YIEADr1Fbe75/FvtEcaAv2y6A5jgfEnOCbo+UnL/4PCH675XB7
nM74pDeV2/tKTqmoSOi03nIAtEW6I/eM1ALWJZOdAikGA/uYqkNm+Gw2WgD5
Mv0naIFjE7/aAq3LoexZznmRaGRsk+b7U3US78Dg3ZQ3LwX1oZB4XbEFN2Uq
TOYWMYWJSEeTL3DFkxZkHctvm6i1nHzTi1u1t1fuUfnNpTA43TPG1SSetLK+
wRPyRkQyhALH3LBRrg3lAOpXWZvQNStxsa9YCqt4d48VUymoprmJvpcBfEin
kNiheDzodpYCknMbVfLhyjLdqhJP9tVLIXQjplsKIZ7u1CAT+R2jNUdyf83Y
QfOI7O6lNK+2wVda1+JmTodVoWJtg5cXr1wKt5sknpWNOzco/BWA2+dVopjW
VVdaxy7VMBjLTWuA2VBA31fKh3bUoxI5zQVv5Qa1lynl1dk/uGFAwTAXjir5
/9oUIuRhjUJnkFV7dVlk46vdqhQFv3xI28RTO+RrMcu/uJRgvbiB2y8B3D6d
CRHc8nS4oSgat0w0FrXayGm3bFB3YqKu2Qlfjct4iVJamfP+QqNuFJjik02J
2gHeoiC1t24gY+UJxKbRdAeWFqWXldKpiupFS8nTyxt0mSuTFbWPqzyteH1A
aXcB1JDcndtAzUaRvHmDukNenmxdblb1y2UZ4f1PLwVTRSjNes/D9LGacGWz
sN0g3QoArOJjTfXbcKbs2FgM+vTuNA9YtQNehut67lKAvb7Rwj8PAPtIU67Y
RXnNkmQ1cmWuRqtEOqqMOxZ9Zz6nUo3h0aa+3K3fNvQtkXyywZjHdtz5KMH1
KO8y/flnMAPDUpCbtVIBOQoXle1q57KnBIKLjMN3NlFRUzTCNto92qShGIGR
VnqZ3aM1jWDA2Shc2kryhnoyny5JRqMYHf3zvoA6LmzFMhyNVavpZM0sP0NX
WKxC725nb5DRLNb1IB/RIHxCb222qCO6quUjfujLHvOdp9CFEqR3380FjCrS
eGNirlvifckThZSvdNi0yErrWx957iOU9qghSydoSBmCYG//z7x2hvazDYu6
SqNJFx2obBJJ1pcl91m7CMVRqyzkbfqWpTOupjlKoezV9us6n9vDMhrMOwrz
NCRJxtRDGzEG4RexsCOhU/EnpHQiWRJ1U4juDTRWksU/IBAzS2hqDyEkqCuZ
Ppb1H+cjM0hla54ASr+e0LCS4ohEfRJRNlPKVmpvU+0LUwrgIDOCDylmieeK
239WYb3wtnrh63zx9CRufYxOOzjYMN4GNBcOTdAxbys53hIeotl1sDpSEe1S
NyIQ2X5sTdntfOuOmMnW0GTFT9BT+SuaUBMnl6zSvi2z/O5N21gxjComiVRh
Ql6PIKFW7kNnbYa39J39DBnB45IEO0DCo+otYVhtp6nqoL9Nz5oznWjI5mbe
SAdFlSFlSTCC1EGNnxH0V3G4zMGzDfAsUzx9AybXW00aKge582R0LUxZLm+H
Jx+uWSrRJRzdPPy1VfKIzmG9gnUObYAtNQN/Fi6NQsG3d7J+X1nJDNOZsw2L
s6gdcSBadIWYWC0vz/oE62S1swB5URf1I6Uvz4qGo2WS4rEabNDHE8KEILkw
Erkz7wGuBPO/yTMO7xEpmBj6s5zkkOg8DFQn1lzP9uojaQ9OUPTkEq2s+Te1
hDX/doTzqs96hRDXCHFC2lcINXTqZ8XXKu+E0lirEDo02G+rCb7QHe+I8Cbv
+MqHr0UqlEOMsj1xVvJHXJnjaM1zGTgJ2dyAEpFoCmZdNxTRdOR/1DkoTRQR
V988lTV0qbEcDZN0gryVnJOCuEwYSrqdeZoa34Oh1WFxREqBvQ9Cw5vgy2iu
oWU8HFQXe6yMDmFBHMlyscUEwD6DY/LsYtPXzWJG6oc1nBSc81rRFL7P6iJZ
PpKcRkIuw1LD0IVvdolWE78jUwZ8OI0NFyjBuVzK6GKFNw/D1+jAlesXCu/d
Oq74k07wTp2EV6EhZZgoJMnsFZdrXA1QvthwNTWRiUtv4K70diZ2zVYiuYf0
Ouclk6OcZGnatTK3TZqG0LTBRiRPQXAbHT5ej1oZ+2NsZFdANKASoiWOgem9
C6l/1XQJhwfq1juU89SZMx9lw+RIN17NXxM9G1v6rusmb3SSSrAfX9U10LF5
DxPvb9IKbqnFQHR8clsQrbjVMW7zxIlAdIwUJhlXeuYUb/iErEE85kmcm+PV
EgrA5ctciKUNNpNSKrJMUgBIxIZuogLQDiJJzKy23fuzaE0rE9HbRucnb7/q
8fqjfCUDUU7F6FZLaF3d7yS+Z33nQJzY79uSsDDPAM/O0bqT+qMeRoqAXlMB
bvLadXCC6Q57hs4J3X/TSA9M9nTan10XVB3kyX4Zzd0q/ka8zpuqBuLtJw4u
trvZEC0V1gFhc3swqJNm56yCPKG5ja5v0GwvE0hazQzFFtKbJmkrg1q/+u9T
Bqk/dfOhG8dwGwoA+Vmn0f9iXwnlNUOo5AgTfgaaCch7nON9ggagZ9meT2+e
uXTFlsuyb9PZSW/oNXugs4UmpZmAJOu6hG3GuS1puY7PRtK445v7r6RzQrM2
dnFfy+1CRTlUXOliJNWJ3f8qpsUxuCtBHJ4TfXxWNpf5SUV8Kfs2pv8WV/ds
dCNqACVU+r9f8/VKfTHDz5hzVca+OXReQNz/U0YPA5yUMdbvhwlpeqHf6AZy
H6hODh6XCNFKeKKsAbXDX5lwyoowpMi68SLxVTnmKxbd5Hw1ss86l/J9q8Fq
7TOTdGFKsAG24A5DavkdlgspcsiSb48ilNTWNlSSEtlsRsTfW74SHOlifF8R
uekY8ydFqHITSYxSOVHh/B1XJswSnLs8VuFvSB7P5+25eg5KatFpR5VmVU79
034k/wDqGVI9zT38RS1d2g/n16pU4tiF9M8U7bpVIyIqiuZI1pjAbYtJVF6m
jN7DSSoTlSeBAuLmtBAuWk9KoDhOa2V3tunjykuKZcy2FEf9xKNNSTfExw7D
uSeR0lDrpTmpfOgdrWZp6uGP8oXGheaH5A+efHncrJLftc21VgH79Gi3+c6O
Kdg2n2OSja9e2LvRNzi6jo7t+PDGRrxHbaKGYfd3sKIxu3FvPPX0s3hfu9QF
g8GJRYU7lBQmz+lxnFnY/L2vKhVDv3fmzSLSJWnt/3kkPFA1kGCjZjJ10Aog
qO8Whph8uSUf+84ymauWvnym062c6clNMXI8kGmcd9G32vSH7yyG5x9SllFt
OvaFJXFYLlFGE7i4kzLYGoVwG0w59I5dzrHKN2vFFSls0AKNLhzMT9eZAcUs
VG2aKpErOP2aEmJ4VDnv489MmIv9nL9fjxPnXiv0jiKkL7UNiu5YXQPTGGCc
Ht7fMxEzQXn8C5EXKDWhnwVjxoomGhw/0EXTGbo0OlGOqDeGzg+//NhP/Y39
56LzXbDvUh8wC908mZ0tWyq4x4RvaV8+yXafcuryeehKvQFrjNseNaJHLEUk
uaHQaDvMgpl0aG/KujtnrE0wnpoKaHb3SEk+1T0KsMSTV3zNRnQ20r6p9N7W
fD8T10XvHswFjE7hdwKukedZxT0xhnTK+8iGWhd91uM2GNzkGeFW8Yg/CeB2
CjVZGicVoEogUVQG5TmVCgpVkedyVdU/zdPbGx6kUCPyhevwLlB/1vZbtuhJ
bX8GxovePZwLGJ1hRUXl2n4TyMitcV3RH3SifozBzewkJXCbzVMEhE1cJYo9
SeJgjkj0A3YBauJgng0O8qQe/gCAldQDW9iMi4gxm6qIiNZPz2aAr2hp3paP
0zGA9I7OdJcaSVcA8zvBQj96CebGBHfQ3BVjgq94ltKMzaxg9FORDXP5JJSN
3paxOgKuK8XEh9TGzaSDIppUFcgz6G3Il9yyKves79cE+/Qb1XUeF0XfT+O8
0CYsbtkDxV/ELCYaUdCo6CGWT4goL8M4tdd/K8Hph+2sTXeVaJg2HToz4zlZ
H6FYnvtAjhN9ul5xTO33Dk5S6d2/4N+SyFMBl5hGOZVBy+euyTbnib5lcrV8
2aUv5nr3ABXM4Ugpdsxc4qvIzwpHWNHoKuEj1w9neH7fUo23lcDDiuTZih/H
e6nJf3TsFnlM+D3N4HedRkXVm31RtJMTE1Ya0ZDvog9xgWYUFoi+gavpK7rl
5svjdnKDnUFxe0tT7l5ew+2pBrdDjYqeDoo/FojX8bEMgxZHuoJ3xVN4sG7N
XlVuQQTxlQIB37s8hqelLAVrz1IM36SyZ/aeVSJ+VdOhkAlPMd9PaQD5E74l
qLi9AEh29F1F0e7ya+wtdCF93EyB+1g3XB676zewe6Zi8oaa/GWeJZc3SvtR
g+HJuO0thrYMGNZstxdGfxn9utzh7uLQdXEwQ+181vLY3bjkVrchnqHYvb4p
d69tIGal7tqNZk8VHgCyJmNmV40VKgFVQ8R0BM3pGJq0eiMCjPIr0PgJReOK
iZL0ukg16mVPNrgcKNNprc/kulxvRBGRRZt3KOQsDgB63eWl5TYNfJ6u+Lwm
4dP0I31DA58nGXz2N9I9E7RFjJLqpvVRUzeum//y9c6+8WJzc2ecSTem8FTx
7RMUdtCidz+uUFzO5I26s725weITDRT7loTiEOhMcZdz9HL4k5aXj7t6ac1m
j4TIr9aEg9TL20r+tPAnGBxOGsfBKd/rgi4zAyJxWOOiy8ol/OQSUMQtVQuF
vnuqomHCtyH5UFrf0cDl8QYXXkU0rOYROHwFwnq+ZlIBqV2PvWt5VC7wqDg+
fkxReWlTRv6ggcXjDBbHl+m0hw7h12bIRtvTZMbHs0UN3eVusD8ALjISlbIE
+xc22P9RZZ/WENUVxjsTOL6PWd73lrxr/6AAORuhXi545Xn3fvDF2YXBc3uv
dUiKHCtXG5xe1OD0KcppttrMGvpd/LbUJhcbTishT+jdm2IBHb6iluKLHx4N
40kJZuSxDWl7sjLykmaTvbvGyGMNI8eWFSkjb06MZHcW0YolDF3hMns/mXly
g/InKeU/22yCD2g6tKR4lPl+TKPBf4vrmHY551MbODxRyXlRE3A29cQz0keb
utgasbGRERet0+7Qe1qD8ico5S9oAv4XDcot3Lsbdb11GaIvaRT0eCX6+U24
/6pRxiNNXUc10r0NEF29+O3pjYIep0Q/r4n03zbKeIQhurJfR+/ezjVMu0us
4pqaNBrRdmkT6b9rlHGRITpuisHFqWwACtHNG7ie0ajwsUr00ET6/5RlqGr4
EUN0vIS0vj78nUT5+H1Wz2xQ/hil/BlNuD/aoPzhhnJwpKdTjd9nonV937wS
ioFsKC4iGu11Jbj/BbwtKJbbNxA6cv5jBaR6f9KzGxQ/Sil+WhPmGN+xHB8f
ZigGpwha0R9mgpFdZyRzeb235NKSaG2vRyrRP9aEWe6tLoh+qCE6HoLBfvhH
AGZzuZBXHs9tUPwIpfjJCnNcRLj19r/VKH6IodjszeEVxIJLcft9J5QbMYr1
8xqUX6SUP7GGdbZQ/qLmQBOSB5nvmTWSq/dd8V3n991aF/Q8P7FRrPd/RIl6
XLMBvlxCodJwoSH9WiXpmu7dmPRsK0wue6IsL6i1+8OV7sdwktF9iq82OLDg
V4h/LwuXI95f0eJukFIOYqBUuJh+qDLxqCRDzX2nbzQofCAz8Z1GEnYKXXMX
7oxf85Ku3nqxZ8YNKg9RZi5qt0gnn8qVnlTaA1wSWCHPlPV6lEDttq5HocJe
0qjowcrZw2vNNFPCK6ZF9O7+zNQ3S0nU/ijXrHXpzhc+EVulkWFu7wrRe0Io
Jwio6hfvROhDJraNHQJgkewW0BRIuhnt8HK981dtyP0fchqVWABBdLW+BykL
F6ZGAGMbJd7RKCgeRXy9QXj69aONVA9UikhYq1MEMxUHM5tITuVSyoyc1gLz
AUrO/cYB4iUv0Kv3ZXLihdpw8E+/Wguw+ys59xlH57gaOXyfO9+Z0Vrspl+t
9dX9lKYfHofopBpNbBofr6oYa7HWVP4CJeee4xDF7XM4fDE3MkaPUDQ0Ut1X
Kbr7OEAnNyjieCW1y0Qzii5tpLqPUnT+OEaHGhTxHczx7q0xwX5ug6J7K0V3
GceoZeDF2+zx4orG0jH9+skxGaDa7zQOVMsmla/zjXch4jlo+mXim2MZIIru
OA5Uy6GWZTGuAcaE6YUlRUr3vZSi241jBIJ96Bjyg5zu85Mo+pkGRfdUim47
jhGIf6oU8c223ecaFEUrr6Ez3gTGuK4X7jMjbnrOKxIYUFnyhe9DSqv1oDIp
3dyno3LWfDr0zOQlR9atrqQHVbdazzLo68LWd2God5RG6rX4LmawZ9NFc1Pf
olal4+jqaosSx/tVyilDbGs22m4sd7+VSBR2UNzXQTl0Vu6d/I2OO0OXPNq2
zF8qEPlSNxwEBvts3T+jOutG+yCy6/T4wsNY3uQ9nL1dAC57U7Km6QSCeEVW
OX8gdUZCwCbb4zsHlO0WtfLYur+jaxorCvvbALpoeN13vimZxwke8NE9bOjS
R5s/gtJ39WYhsKJtqCu8EVDSPZviAYvi08wxg6UYTPMULRuejf5BQ9GoQe3L
NwQ1e//31UphQwW+cqei6b8N2E6ugyMtPBjm3LOpfRz1kiUbGgCtXnHycXWy
RPaaeiTi51qtVauNGmdMcH+AZ6bhUVTZo3tRW8KAaWFqfnrB88ruU1wlbOHv
AJwy92bh3P1vHeRlKJOEDtB6Yxeu2oPNh6L4NRraAV0PR61W4QulHxWwDlCp
tmj0YoQtSn2MWjTeCje6MUfZ2MkZz4b50u94XtCYMhrnxCKEgUPV6ERtJeNg
M6ElC1dd+YtCfVUbcdOPA5KA/h8J1tdneRad88scb8Pvoq+4DakXUVOxoejE
XhkvQYZtyL5U3ScatW4BmEzAHWWpFjRq6CYpWoOkd5lZStFSAdxy65aArkPq
Fc0kUXS1pXphtPuFaxrqMtSCbFnd3HeN4ZJgu/FdknyrWGVmvqWgwMYrtGrf
GTeVxnSn1e2GzrtAZt2OsmWhMDuTZZloVg54nuT2nZMCJk3GhK7zIlltPxCg
RtuPugs1E6/uJ+46n18WqS3JMWq6f24k2aqxHZ1oBT5iMwGQiXh6C4PXV6Pd
UW0o8jFf31SN7LRIZaOBclOe5Q3dTcuPgsxsOCQ6PwT0ZdaF1NUMe8i7T+ER
d+1mp71noyBWxN3HGklSL6AmRHo244G7+UJy8ELYfugdD6PzofOdCeExVd9m
C9+cDtIJ8rEZ44jedabfr1TydV1qQ/aX3MjFzTbxlicBBItpbcpRT6TmpKlx
ey/thxoF8bV63T81kmwZVAWF8NdOeVGn6hW7Cc6NRvkPkpfTzeV/qXcFJJ26
i8F6BkdcMHtQUra+mzXyrTXeZdGz+q4epYJgBjdrazucR4R4/8arT9x/MPwg
/8ZTmP/WnuYFZXWZn4JYMtW37DPorbQ46LP+S3wf59MRZEeBdKg8XkH4IYMq
v2kDw9skDNXvMRzqdqvq8tjNw0OxVQqI8t2tzS52/waQvC7p2Jht7BQtuuMI
9zIYVEIA/I9herMGphL6oPNWAOOOkSGV2JwI1tEPuSW0DwZJLND/WNLqJ5qV
wBLcJ1mmh85//vsRbl2Dy5uPkzwmBVOxryBa27L7UCap3Os6jxNd3aCMfpFJ
8awXvjLNjtT13oRWL+l2gXS8bTYk3Nxbgw2mTqS2Q16Sq+Ilac2e5BbZlvw9
ooZXjC3xD2N40a/fbqS6SaK74rUYHgnNHASj2cTJnhK9Zee8eIvj2OFsdLSC
Kz05IuuQL2FB9+Y41Bc3KjuXqf4w/Z50gPuORmniztpV3fzU3nZtHO/HN2qK
aAMrcnDC+3tlQZrqRozfqDseCkyS4fyUBr28Fd79TUkvkI4/aND73QBidZub
i2QEP9wmtj/WIISHonhV1xit72zQeoMM28ySOfjNkANQhmPL/IUvouqumkTb
ItZf6Ji4lkc+ZuH/MBdMW9nPKuvSWcktmRz2wGgcY6Zf0fYV2lLyVuCKtm1y
CPOySImHBlmszru/bLRN+vUeT5Er6HpZC2YuXJ6iZzco4oG5+4tJ7fa+BkVn
JoqQz4d3VLmUE5eTnEjOlZPI+UCDnDMAOQe9C2uXk1PKIw+x3Z9PIueDDZjj
ge1bhRzje1SS85waOTz37/6s5BuQA4hWck5bhhwyWKoOrzwqRoPZSVZ0LVm7
LiCsKkXAhF4L4rMVEZGRlvtQI9WpsTG6KXLdMqKKQL1/EkUtHc9hcrC7T0HR
8xsU8f2j0qtHKGr5hR1qUFQ4IP1UoyCep0R7+DEBbzl9HQJyVPUuekGjIJ6G
RPeCSfOw1gT5FABU5kKemu6FZUHagXknpfuTMgkYSICjmVJ0cqJIwMpdhKT5
KP2LGkTxFEi9SNryBHzIEFEKU9UF6MUNinii0/3xJIo+xqlgV5H7tDozY2p5
9yD3YUvRYhJF4FBJUx2MJZiGA6sR5y7CfgjVaVf0vJo0W/pESZkKnqGsEZXG
ueJcVqOMj4BkMjsi558eJWrVeadMcbH5xfCrOvjxNCz62Y215mcTeYWrFJO3
hvZAJjnP/FJDUnj22oH4EIDIz9daIlJonUe27xHz0ga5EdPfn0RutCSGs/Yo
h0KxuIbMUww4igk3tyG4tN1f3qiep7qyeq0f1dOvLzZSneIplB9SMzzlEJq4
rFc1iOIJb/QFHltafHmM9Na8ieeyKPYKaKCvbKOmbJoa3cnHavqvRkGjNfG8
swNxdkBNwL1nek08n+zYKsTbiBxVYgVq/+YYjR9IRfsuHKt+Nb8XESGtFjeN
p0zfW551tv5ShVzH1e/eg2iVQGzpV8sLtF3/Ia7/8rKA8AP8ugD69Kvlh5dI
qI4arJhib/Yxh1Celod39gs41fmkcfXRmOMIWVYKIVktH+7sV8urfpSsiNav
ArJoFy0ebE6ZmtOvSoDPghiYgGP1da9kYtz0jsP+rDqMOh+VkERRPoi2HQ0c
aEtr1ndy6tELL3RsEFf0va06nVwc1Jd79dm3Gmxy6L3uFVyok1CK4zQbwzD9
2t1giWd32eEq/Z4Pho/wPd4fG74uOmy5TVnqZir4RIyg4As1LHZUlrmzVt9l
NhlbmjtLh2hDZltVG5KNJg6oLlfucaDclVpeMrOEViT12hTB8Gn5K3KYQpEl
139ZlkLKqq4clyYdJ84CDJDRWX51SRKlXpiYmdQmrTRdNMwShKW4RWdbl57O
bfVbCpe7/HPQ1N78C8rWIlE3VKiryhXnczYf2mxcmiIzpPSKTJ+VIR+t6Dhf
ccpduVHNiNMgdc4TB2sWDUv0zMink7s4u4QTLXZqjRN5r6p3TpQ2Pi7F0hbP
BIau3oCEX9atqooL2dIVFoTydsvkcM2OfCYyqugZNJ6uU4VUlmsIZM1oLpQq
LoHq9R2q4RhQ2gSKt7RWaBcFPU4cFzGMBxQndtnuXsbZ3JAYxUnn8V2HxcmE
yyzE6XqARCROzMpOR3aX2eWa/1n9Eb9bCmJ5V3ZfgrQAFFDp8SKpXBc6CqaK
TaIsm7qgYdzcLQ6KPxrkyIy3LGmOzTVfXg9rc4TzYhPs73kxcaPdruXFpNgn
OhNwtA0xkWeOY8Z8U8qRdEOXGlkRZ3QGwSVrPWROeY2Ljb/1tO9wNydjalTu
XJn1hq6WQGR3ibxMV335fV6xI56jcYDlKRuHdSbKq4rO7onrh2qsizMA1XW5
WUVyY0fvnPO+s7KxVcK0pQWQ0GRG7FTUWqpDh4u+24Z0ZB4TaATgkaI2/CCP
lHhNqAXFNvduwFC9GOdyoTRyuBvQeBy9uPsVfu+GnmMmzmSiToH7pKcB2peV
DVqW8C1x4X87sveWf2r9zJaelfsg2bYxz80EIJsq0HM4oBDpa668LrUrzUKI
pKN9gYMp0D2LBeYIyf+8cwcamEMycwMfn7q6dx5rtyjYzZzaogW9AlJ0Uweq
Vzt8l4op7ld36jD5BWV9P6mMLODBkUxH0QCE1g+R8hwAp+Ko8WcqENgD0tWU
KaC+RiXJQ3XlG2/F5LhVfiYxVUZawYdPBYQfwYRT8tjO5spurINQOtfEGyAv
3yfqYyhM8BjvzDPH04S5IuKjT+lUkcjzIf5NNwgfq9+yGRM/c3cBD/IYCS4I
86YbLjwJkCuX3DzipIlT0LjwhYJzHQBKXXCKvtV3dYBNI87lmTzneabbh+gk
S0TP4h/SoVnGKnhW1zRupRTez1UvbqSmKWiN9OS0zhZF6vA9M66nXNGf0HIk
d3PnYPoeQGkKzy15H89uoNhEffOLXLObZZyQ9I3qKSQ2ILy+is0hwGV2fRtR
TWJDCI9s72qO7NmgBcSDE/si/GS+mpTezGMniMWGFCkfKUsGsFlIQD6Qc0xD
dtNyF3khspE88F7KQgmSDBMq8YqjdXrHw4VIgBtx9upOLWr31rUjpwBukIsJ
mrNM7azrgFE6WzAbmvpB3u4ngQJasU5ZP3bongZzH11zbG7d3nPyEWA26+XR
rNQFNrfRvcozGhj5kGbV4rXo3MA3H8y78B3BudXgl+8bECsgp3qOnbjAOdgo
/iCAaQKcDB8rXQti101fmPadURRnp2eadhVIaPQSK+EDR9+qX3kFmltSEXpH
T8TwUFm8P/icBdKPT1zohyaTpBWNzrUfyvm9+o34PaD/MgYN5lgldj8PmEO3
lyLmrttgjn6x0SnY0ouVR+s5J51HTRwYz5xYebk05LVy93Og8l1NnQyCJ0ys
cqer0oG9YyLYLSf+duV8Ag7tJzcnVs4mu3iSkyqvrrt4MIlmpR5xdC06ouB7
xih4TyMBT4q6eDUApZty3+sO0FxrE+m9aUmOt75p0Rvx+lGld0axo//+sAzM
Pn9uGIZC0I218DU8e+8+/hGXWHQF+bwp2beaSC2UPtZP4hKm9paHCWNawyWG
862rDpe0lX5WwoPDQ8Elh/89n1NaFuI0xYnKSpOF1oWBoyxwdfEqQHWbDQQF
NoiDnYHqwwRfxf9bokN6mi9WXdCyX32itTiOGKWVZ6bxrj4Hd6BrD5G5SmRG
bIVEmVpMMS+KIWBLZVIjT8cVHnPiFXoFeccSeeuCYHhM9pjPTuRAxO7sSXeb
rfTr3Q2SmG/xscxJ2kskzYWkT52zsRlcChEVdy0BRFSAAS+S8LjY8BkJJxAJ
K0JCaDCIwvkT6y+b7Vq2ftJ1oZIgId1JqfIg0BeAem3ldRPNauXJLTfyHeoJ
ErovVm0k4RqpmsToO7bqxHLoy/s93tV671bW6zvMn0S+MiX+bVe15bg74Fnu
rumq2QQtXve2IoBTQ187cd1E+we3WfU3XdUK+FW+6ibgd59YdZ7gG+NVX8VV
P69W9T22WfXXi6qpV4eqD6a2fu++Rltvt+qvuapVoWz5qpti1oroVKs6tPt/
HXnV99pm1V+tV5219UsPVarmAPyNySRX7fW4r9c19NR67z2xXqdCv+LqJW8b
0WNTZfs+Zb1+voHq/c+iXtIktt5LWLGdXav3vkvWS3qbHSkK5RnS7/f8VsfJ
+43V+y7cEP/hqr6gM9O/bMioQv0AgORovV8q6hWxjkPkXFgWuFHVD9xO1exL
IxMDx/JJqZWbLF/IJddnJX/MCfKezjcpxGnZip0PxQnR3E6Ialw/eJu1f8HW
rpNCErVyUijjJSLgodsgICTg+xHyibIQcOx0Ah6Oyx8lgP3S4kJi1RFwSVRs
e6ZTcdE2qeArEOLSa81Nzs9nKAIlO+OyJhIyOmN8JG70nBqv4SMpfJvtmnVy
I1DOZ2BI/awYTXRFFFpela8oXTXaHj2RNteR+Q7AeMHRqnPA28f0hRBZIZvs
CpD6mNWa6+LtEMHulvH22dXcx45c7GaklIGjXfZLlq/t+tGO0qfqyI7e8bPg
BLkS/HS9SGAOPanIeOLkjoU/XK8GmMlOqmZnqkYH0L+rVwMc+sL33YDYlOnN
OFO2OzZW9deaOFW2e38LV80bXIV/EhXQAPnrkzBMi3b6BcJuhZTrnnvKRNLa
qP8bZf0hf/RQqm/LVEio7pFlHeav6xRVrrajU/72ZhZomVDKHMBCBf1tnYhv
JSKstlmvsZdyxuunnRJfAdlWAStX1Qn6jmeCVN8aYAyBnUp5CyhlBkqhHeW/
qVOzxfDkW18NPiv9+C1lQYF0dAbwoRFyruWLktZH7CHsM9GmI58opXQetYO0
XeEgQ/+bU8DwLPzl45VkOj1baBL9RLu8IVYsP1JEZoNHWU3Y5YXJMnTJSCRl
rZaMfABMlgXIkhFj2ZYsXVdJV2+tTFeF9mof/7wFZEOnVRwRLLYc5cTGuJll
Uk/p+ZlFgf9bKQvqJFMyeq44RUFbMmeFP3TeyidLO/XWorktc1FWv9XOPjUE
vU+Hmhhs7dPQ4vVlbFGnL6nzRWX484ouj4nV8OcE1SaAyhjhWHgRqtCcnat1
1XTI9YZPxrcq6UL+ETvUPlW3/D1FR9JSKLhi+wz4N6nK8BKZpnPguyWbDjkh
8bOqpTW37E5XTF6swYn+z5SuTTNIkdau3QGaPTMF6t1CeaUDyMf/8W+Xrt6N
VuxUZMTH6IqUQ5qULbviELqNdqHU3Llca1jqs9YYUGFdJu3ZSETPktPRrFS4
CiEyl0W3/xwJ9HGQKnVTtV/8OudAZtwuBwfHW7IlkM8jgcV2OCMNs2PopjVM
ZiRJrzM7J24B+r0mxclHiiGQWzf7bLNl4kzYNUrb9OnXQQ5qFDtLoFYgDR69
wKc0hTwjOjN/AIPRKmqVqdrL/V/1OeBJ5qDF1tzEp1zVs82GYT+HgPLxfoh/
Ped1GmwvaDEOB8rNwYLjHLGkvEVXzGkIB9QmBAaJqIGA0u10eqir407lTBmB
48gi7+Tj+kMir5ta7DZbgzcWvNCf0OwmrwM5yMy1GM5p/bHdboLsnid4jfT6
zHhL6P0zNfTqbhzN+BwLQ1TflUTZKqZMJKnerIGiHyBqoMq4HhvI9SNkOMsh
Ya+BwWW354wRYGxcWfUFDoh4ws4VVuQzAE01hRfiQnlipTpk7MSp20JTte2i
VzwzW1pC1lbxGlyHPBrWU47f4ByudWmqPHXk7zszn0xzMDPFWchb1iKr8kx+
hvQO+TbP8/TGD1BBmzWKhoulQV/gTKx8N5SzjNsu/o1SNpgkeZvEG0pHR5Wi
TVwONHPgwMtFE3mZz7xbidLYh5w6R3dqID+qXT4v4ph+HQBMHOfH2zelJCp7
ZD9tB1ie0YequY2he2igMG4FC7EidWgPKXOPXorXiJPU2tf4N4cYvmNVm/2N
nMPNydEs/oMGnbhnNBg8mgMTg9S6jcXL8pJS0XembQxSKnkIKXa3WGaiHJFy
skVI2RGF1hG5X+PQubFxEPp3+mdJtVOOo0EO5CxmPDu02gbHjv7oOFCJqfBm
gBEKG/Sn9Uq3DNWu5t1NrN8MclDNfzZS1Q6Q8ajxMwi0r/qBkap21Wgc2591
OajmD45UtRuQ3N6C+m2QYx3keP9IzeiynI2m0LwVMEk1j0nJMSBj29ngbSlH
8/TifSM1H1cjOSX5XU5SHpNlVb13pKrjQVXtA5d3gBzoHGusZnTtFuKAvSyn
+1ykGl4DamgEzQylhGpcxN8Z1xCeay1vG+FsX71eJ6PzxNmK9RZgFw2yf2Rn
jWQRoTSk2njtUQQIJw4l9KiBTF1AivLf2iXvidhf6zyyp6SXAoTtzFMgVjnb
8+nIm7Y41o8T4NyDhIyXK1XOwoMZpZhLfRJ4+i0jIHDg0XkOPaBCLJFqTiAu
vLnhcFPKDtyJLbb1KiHAbKGXlLC9eYQN9mxdt1XlLg65V4h1XDElvZY5D94P
Vx593PGU+xJcQnin8cffNELhIQb6eWff6KaLzc2dFRM3ISjvG4XDxnEpnyXj
jSNUnOJLm2zpd3kUk4yK40sqQpI3TGot7wlReoC81WdiEryJ5Inemp9yTKu8
6v4BLOpiiGC1/g059qUcKgK/OVKzCRw/3QHkFQD5q9QU16Iel5tj9Ser7cyk
t1q5x+oA4HxizTUnEJ7fuBwvBzmu7Xmmz+tHamb9xldsCQdtH5CXpRxUe7AK
PpisgJXniTXXXECAm9HLUg61Mj+YcqiyWqLmHLuKlbypWWk9mHKIJt5WzQeb
7fzSlEM9CU4G7fy6aTU7S/m268lLUw71nfh/v+ZJ7QxdVbbZzjX/j7qEFa5B
26jZ2eibmgMOuGbnu5H1qmVrnugDktd8Sao5aBXV22M1G+1Jk7DwsO0F8oqU
Q9v5QMqhUjZRb9ecQADar0g51EPnQEJJ0V6iZuE7dwMpHSIkrnxnfEf2p0wy
Sz17Qv32qijgCwI4z2cJV3RpaL/EaO+xWcIpqe1kYjTuCvKqlOmIJkdc+dj8
sJylXs75rqH54SFMxag7yDU7V+aAZKsiysv5hLw2ZVZSfGb241h2GXEqvZ7q
IiKBEbKJBtvrpDuXMu7AAs+23tha7LqV0kvXkbl1HaE1NXXZFfUc8QW/vmxe
Dq5wSVwDc6kbrtRLPANT1sR8EZG/4Glf3GhYNWQKshm6bxzL3q1a9xRt+reO
kHU9X+7orU5bqdBrbmMo+/Xa/03+v8nHkt+eXqvZdvgbozKHf7NQzz29oGdr
mjp+pAQU6jWGZNMi6D8uxqbbMkQg0/G5f9anYjbyYob4XtIxVc3rYBx1yuyW
cqOf1dGyPKfGmCIDcROVIXXpdxBwstciENDrjtwuIUHPjyqLCz984F/YszMF
W/qu7zywsgPbZ1yMOB1QgeQyuJlSN1tx8CwrndG+QJ71lm6+OIdYlWcjtIVn
dKa2QRVkB5v0e91Vn1GIGmvwXC7fYvEK6HYfRpJqbDssMcgMpHLuv4hpou11
zpaQaa2wFua9TSPPkNVUnaIs0GH4Xb99AF4ms5AsEQ1JI/BOyZqpD6ma6UzA
9/qMMFxVusv0Oy3KUq6QJHUnvjtlWZ/F6/tyullutzSTtlleOMPoohzm0BgT
u+jNklNGZXxWU5HxIlRMg6KylqMi5RlLISuGvZYOQa6KbIXiTS3OXrOUqz0t
hHnpu6IxKsExMxRUpQ3d9N4w1t9v1ylnUjnx4x8fcW9HVqbq+TLEx47wzIK1
lcaRY9IsUl2Ok76zhm8ZT1spEwjwXc2xiUlx/8+1BO5JHUiUteECsAmh2Onz
DYYLR2fd6Hdu0/WVpMgkNbGV9eDUPQzn+CawKBHyf5+xOAUGkwZEfzcG2kU3
nvnK5dObJFMsUYkAZO06pf2m9VOnoTO5WjhimIwq0WPdtTd01rqra6zIo8uX
81jprqAcYL+WGtBMEGo9NKUb6ZeGrmbo/t48c/SySLnubHnO4rB3Wh0PhLW3
WSWNnugAMIsaJYgyfEar3ATZMjEx/Bd9AqRBvipz90xoQqyltl1LCZW67fZM
xNEaqH2k9SZ1ytjxHE3MqRqZt2jrEw/VTgmNHYkCdtDqEmSbKWlGjU7eJIuU
nkVJp9esBubyTJiYJQ4y1Y0uw5iUPVvjJzjiambRmWlaN10rl0NAhgqyvWak
NlzerpxT12GoiipVQS++qMwt1xd1VSFoSD4zuLbRyv0fV6ysGe3JrVefDDOJ
rmjUEEitIh8y1DhjPe88JtHC0JnvK/61ICLFb6ML1rei5iIV8mm5Jm6jK5oe
rbCZ9lNqRvxWm3mrnTDLu+LzDiYdyuvqyK4uc7DU+2I1Kr4+N9fFrbrEQgy3
h1/j06NPKRyNnujozHqipBe+zfjbhKy+eeP3XIrBUXIsEjHLD45ZH6R0RPlm
o4WW7JB9LEMqjh1ykb32/XU7E1XJwhgOnZ370bJ60jJzqQ5JmyWzvqwe9cCd
tcSoy1FtLKhL9zF6NvccH1FfSxeYYjZRx5RCDTHAVXHSbNTRHLdJpEr7N64y
e0eTyeSVEEnILq2fJWRu2eu77fcsNMVcAc+mNNO0Djdhgj5blNR2NQ6mdTpX
KTE46ysFZts4PWK1kmYo04C1Q7bcaYwajqn1iXlj9DXHk/wlYTI6f0p3BUyt
9x0Gh4jNbptKhNoVpLDRj0BQPjP7IsBFcLs91d2JadvMzAmF29ate2V1s16I
2dhSovVzhB1X0lk1N3RLNtikjkudMg6KWnpWEpKY7fdZydIl3qrKY2H4d7xx
VcW2cLYiSPBli1SpI8517OPWlZuOhPpyczxve63Z2HlxOWqc9Z3rlDoXsu0b
/qJ4RI2tWpcu9fzGKNwqmXCgDNk+7eS+Xb2nNVUXF6N95z9CQ29oteDk9Kc2
Yy01OI77RObyHR5t02aSZamUdKZdYPOGZ3x5T73/37ZatdOa8r4vqahyNU0T
eGZI09DX4m5MrmfLp3KtaplYtrgyXEMWY22RFTiXAvv40qxkta61dhl+fZXp
DeIswzXnam6BHRxDYzl7kzN8X61qwbmUsYg/c9Pj7TsIT9dZeMaiWaB74rar
GsbPimB/WkgVIxx6qNJ+1Zp+4wI2m+oAQdB1RobXSjgHl36J9uS7xCYrg16p
SVNOR1t75jfS/7kxcXiOaIiUvyMQzCK416qynCs2Z+xmPuJHq/aMZamZ8m40
8u1IlGXwgcgAdcsYFkNDSAOGVQuDvmNC1vs8T5e3XROAasgTj+5MknEQ99RR
TXusCZnyETLmmjC3SAr/rZjmk08Lk51KAFr71rWCI09K3kqUyWP6bz0BsXzL
TByOHd2Z9cjQGX2U7WozN/y71u9u6LNQFXzVsVes+0A6FM/jVE9yZ9K5Z/SF
wsRTC+0FSa6rb9fAW9R+2TydCLq7qa+KsVlpFiN/tgs3xLr6zu7X/7+NL/V7
EwlJqWqsWYfOdyRH5RjoPefpOyO8EX4px8Ovy9ohkuCqGxlbGm3Qd9PaQNLR
s0YbuPKmtkHcLRDWusTSpMWDo20J5Af5d9U/o7J53kJf55JPMsz0XTbQ0+e7
QQ03As/OAXkTnek8cC9IR7DxkOkHihWQ2Aiopv2hvL72r9f+b/L/Tb695N21
/n/nOHo9\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"c2c85ef0-94ba-49ea-ae24-cbef920b4238"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{Automatic, -149}, {-30, Automatic}},
PrivateNotebookOptions->{"CloudPublishPath"->"/Published/\
FriendRequestGraphGenerator.nb"},
TaggingRules-><|
 "ChatNotebookSettings" -> <|
   "Model" -> <|"Service" -> "OpenAI", "Name" -> "gpt-4o-mini"|>, 
    "LLMEvaluator" -> "CodeAssistant", "Assistance" -> False|>, "TryRealOnly" -> 
  False|>,
Magnification->1.,
FrontEndVersion->"14.0 for Mac OS X x86 (64-bit) (December 12, 2023)",
StyleDefinitions->"Chatbook.nb",
ExpressionUUID->"4f9f8059-24e9-441d-812e-3b2510ec5c83"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ChatGeneratedCell"->{
  Cell[79030, 1520, 606, 17, 30, "Input",ExpressionUUID->"fefad891-f630-4393-b564-c009e4b0fdef",
   CellTags->"ChatGeneratedCell"],
  Cell[79639, 1539, 61517, 1150, 650, "Output",ExpressionUUID->"0512d828-18c0-44fe-849f-e9971726b079",
   CellTags->"ChatGeneratedCell"],
  Cell[407729, 7770, 1816, 44, 220, "Input",ExpressionUUID->"d53e8b93-5432-4a36-9e80-a19829cfde7a",
   CellTags->"ChatGeneratedCell"],
  Cell[409548, 7816, 72827, 1393, 627, "Output",ExpressionUUID->"1fdc77cf-0bb4-467a-8b58-0a451df2acc8",
   CellTags->"ChatGeneratedCell"],
  Cell[482390, 9212, 3116, 59, 598, "Input",ExpressionUUID->"e6e763eb-424f-4d36-a7a2-cbd3903e0191",
   CellTags->"ChatGeneratedCell"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ChatGeneratedCell", 902397, 17348}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 175, 3, 98, "Title",ExpressionUUID->"d839f5ef-b48f-4c75-ab13-8322c9c8bee0"],
Cell[761, 27, 244, 6, 53, "Subtitle",ExpressionUUID->"6d7e4cd8-a7c3-45e5-802d-b248f784eed0"],
Cell[1008, 35, 246, 6, 53, "Subtitle",ExpressionUUID->"d17f35eb-2af3-4ef1-ae23-4bfea98621e8"],
Cell[1257, 43, 152, 3, 30, "Input",ExpressionUUID->"97bf3ad9-7a91-4ea8-ba84-babf5f920413"],
Cell[CellGroupData[{
Cell[1434, 50, 223, 4, 67, "Section",ExpressionUUID->"7d268a8c-8180-46b0-9a21-300ec9dc8cc4"],
Cell[CellGroupData[{
Cell[1682, 58, 181, 3, 54, "Subsection",ExpressionUUID->"75c919dd-276a-4d64-9dd1-0aa87d030a84"],
Cell[CellGroupData[{
Cell[1888, 65, 181, 3, 45, "Subsubsection",ExpressionUUID->"c08e7ae3-c99b-48b8-a4a5-f8aca88280f6"],
Cell[2072, 70, 1524, 25, 30, "Input",ExpressionUUID->"9a30d8cc-f262-4146-bc33-25c3e09aa5dd"],
Cell[CellGroupData[{
Cell[3621, 99, 1212, 22, 30, "Input",ExpressionUUID->"61a45b83-48df-429d-b3a0-06fb07180ab4"],
Cell[4836, 123, 36852, 685, 147, "Output",ExpressionUUID->"32466dba-bcc0-4ca6-bb2b-197170219675"]
}, Open  ]],
Cell[CellGroupData[{
Cell[41725, 813, 504, 10, 30, "Input",ExpressionUUID->"cb2ef2e3-0b16-44fe-a06c-9b52c9fdbc20"],
Cell[42232, 825, 36761, 690, 147, "Output",ExpressionUUID->"b5b40253-215e-4eef-b2fa-d85190f36868"]
}, Open  ]],
Cell[CellGroupData[{
Cell[79030, 1520, 606, 17, 30, "Input",ExpressionUUID->"fefad891-f630-4393-b564-c009e4b0fdef",
 CellTags->"ChatGeneratedCell"],
Cell[79639, 1539, 61517, 1150, 650, "Output",ExpressionUUID->"0512d828-18c0-44fe-849f-e9971726b079",
 CellTags->"ChatGeneratedCell"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[141205, 2695, 250, 4, 45, "Subsubsection",ExpressionUUID->"68839ae0-e7a0-486b-b482-7098b5b68d89"],
Cell[141458, 2701, 1277, 35, 152, "Input",ExpressionUUID->"13e26949-2d62-43e7-aa3e-43d4e85f91b4",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[142760, 2740, 1166, 27, 68, "Input",ExpressionUUID->"9c27b1aa-b8c5-4cbc-9811-8b46a763c131",
 InitializationCell->True],
Cell[143929, 2769, 8647, 169, 260, "Output",ExpressionUUID->"b52e5c7a-95c0-48af-a60a-7ef8b204981f"]
}, Open  ]],
Cell[152591, 2941, 609, 13, 46, "Input",ExpressionUUID->"7b0b3448-f478-4135-ab76-6ab3dbad3eb8",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[153225, 2958, 474, 9, 30, "Input",ExpressionUUID->"427a45d8-bd4e-464f-b162-9d02c39b195e"],
Cell[153702, 2969, 558, 11, 34, "Output",ExpressionUUID->"3864d8e6-ee2e-41aa-9733-dd7fffa599b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[154297, 2985, 355, 7, 30, "Input",ExpressionUUID->"877ef65e-d595-4000-8905-9d959f374e80"],
Cell[154655, 2994, 491, 10, 34, "Output",ExpressionUUID->"00aa9919-263d-4998-b425-34112b7de49b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155183, 3009, 331, 7, 30, "Input",ExpressionUUID->"b0dee14e-bedd-45e5-b9af-317c349c089b"],
Cell[155517, 3018, 419, 8, 34, "Output",ExpressionUUID->"55a5e0b1-9f21-4d23-b247-8fb7eff8af3e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[155973, 3031, 308, 6, 30, "Input",ExpressionUUID->"9f2a6540-19df-4994-9736-9ef60a7770e4"],
Cell[156284, 3039, 49492, 910, 599, "Output",ExpressionUUID->"d9510b5e-1d32-47a0-8e9e-0ec31befd45e"]
}, Open  ]],
Cell[205791, 3952, 838, 17, 30, "Input",ExpressionUUID->"05f673b1-56f2-4280-b775-defbfbbeda37"],
Cell[CellGroupData[{
Cell[206654, 3973, 656, 11, 30, "Input",ExpressionUUID->"3764d586-0741-46a5-9cc5-e059011f9bd0"],
Cell[207313, 3986, 65384, 1219, 627, "Output",ExpressionUUID->"c446847c-0e86-4791-8884-e80660d04b6c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[272758, 5212, 160, 3, 54, "Subsection",ExpressionUUID->"ab47d9c2-dc9c-459d-81fa-ed75c4c10c59"],
Cell[272921, 5217, 577, 11, 58, "Text",ExpressionUUID->"9fbcc17e-05fd-4031-8d12-f43c76e46243"],
Cell[273501, 5230, 608, 13, 46, "Input",ExpressionUUID->"21a53cb8-1ad2-41ef-b0e6-27230914966f",
 InitializationCell->True],
Cell[274112, 5245, 1658, 39, 131, "Input",ExpressionUUID->"2ec110ef-753b-4e70-9dc3-179d91397944",
 InitializationCell->True],
Cell[275773, 5286, 889, 23, 110, "Input",ExpressionUUID->"38c8f986-2118-4a36-9fcc-54e8ed7d07c3",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[276687, 5313, 1309, 26, 34, "Input",ExpressionUUID->"454f2d21-dad9-4b5f-9941-0328a1f58dc8"],
Cell[277999, 5341, 2250, 46, 38, "Output",ExpressionUUID->"f53031d2-779e-4d80-a16d-7e49a6451750"]
}, Open  ]],
Cell[CellGroupData[{
Cell[280286, 5392, 1606, 25, 30, "Input",ExpressionUUID->"f2dbea04-dc82-4fdc-b88e-af0277e6b97f"],
Cell[281895, 5419, 63014, 1178, 627, "Output",ExpressionUUID->"77160a91-272c-4964-bb01-3e05075da12c"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[344958, 6603, 183, 3, 38, "Subsection",ExpressionUUID->"8190a36c-3fa9-42a6-a130-cd90a03e38ec"],
Cell[CellGroupData[{
Cell[345166, 6610, 182, 2, 30, "Input",ExpressionUUID->"4b884096-84f4-41b6-bffe-3baa5e0f7103"],
Cell[345351, 6614, 62341, 1151, 599, "Output",ExpressionUUID->"38941b36-d70c-4189-a076-4c6767eb8888"]
}, Open  ]],
Cell[CellGroupData[{
Cell[407729, 7770, 1816, 44, 220, "Input",ExpressionUUID->"d53e8b93-5432-4a36-9e80-a19829cfde7a",
 CellTags->"ChatGeneratedCell"],
Cell[409548, 7816, 72827, 1393, 627, "Output",ExpressionUUID->"1fdc77cf-0bb4-467a-8b58-0a451df2acc8",
 CellTags->"ChatGeneratedCell"]
}, Open  ]],
Cell[482390, 9212, 3116, 59, 598, "Input",ExpressionUUID->"e6e763eb-424f-4d36-a7a2-cbd3903e0191",
 CellTags->"ChatGeneratedCell"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[485555, 9277, 164, 3, 67, "Section",ExpressionUUID->"db16c572-d6c3-45ce-a6f1-4ca937bd2bca"],
Cell[485722, 9282, 281, 6, 35, "Text",ExpressionUUID->"bc31cf68-7eb8-4332-8c76-9f63fad4b34e"],
Cell[486006, 9290, 1419, 25, 46, "Input",ExpressionUUID->"8c5e57e8-79c2-41c6-9591-34d896a46ade",
 InitializationCell->True],
Cell[487428, 9317, 450, 11, 46, "Input",ExpressionUUID->"921976c2-acdb-474c-a870-d8e514ef7ce2",
 InitializationCell->True],
Cell[487881, 9330, 2462, 58, 115, "Input",ExpressionUUID->"2b484971-bf6c-4dda-b01f-a924ac432bd6"]
}, Closed]],
Cell[CellGroupData[{
Cell[490380, 9393, 261, 4, 53, "Section",ExpressionUUID->"5f163356-3a45-4384-8e31-e209f1524154"],
Cell[490644, 9399, 307, 7, 35, "Text",ExpressionUUID->"4b3a9e54-2158-4719-af3d-2dd82234804b"],
Cell[490954, 9408, 588, 9, 30, "Input",ExpressionUUID->"0f6daf1d-9046-4ca2-af55-78961885515f"],
Cell[491545, 9419, 1579, 39, 94, "Input",ExpressionUUID->"8990e422-3dc7-4e86-afea-13e98ffefbd4"],
Cell[CellGroupData[{
Cell[493149, 9462, 174, 3, 54, "Subsection",ExpressionUUID->"741082d3-bc67-4e1d-9055-4a4ccc26e6e2"],
Cell[493326, 9467, 1020, 22, 30, "Input",ExpressionUUID->"33680eb1-700b-414b-ac2d-bd5163cacfb0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[494395, 9495, 159, 3, 67, "Section",ExpressionUUID->"13deb74e-4efe-41fe-b078-e7c82fde5879"],
Cell[CellGroupData[{
Cell[494579, 9502, 169, 3, 54, "Subsection",ExpressionUUID->"6447a5b1-3f83-49f2-a311-fd395bef29f2"],
Cell[494751, 9507, 2410, 39, 73, "Input",ExpressionUUID->"a69a794a-9d28-4d4b-98a4-a8048380b200"],
Cell[497164, 9548, 1232, 21, 30, "Input",ExpressionUUID->"41f94b97-8342-44d4-aebf-81f56ef5fef9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[498445, 9575, 159, 3, 67, "Section",ExpressionUUID->"ebedc006-e7aa-4895-8c88-145bc2c7d54f"],
Cell[498607, 9580, 363, 7, 35, "Text",ExpressionUUID->"e01c07a9-c459-45ec-8be4-67290a44c9fc"],
Cell[498973, 9589, 262, 6, 35, "Text",ExpressionUUID->"9658ec83-1d3b-4bde-8420-d93cf7dbe4d2"],
Cell[499238, 9597, 698, 15, 46, "Input",ExpressionUUID->"82046ed0-e36e-45fa-a1fd-af8c4a347672",
 InitializationCell->True],
Cell[499939, 9614, 4958, 98, 236, "Input",ExpressionUUID->"f80bdd25-42c5-431b-aac6-7f5fcc7340f8",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[504922, 9716, 154, 3, 45, "Subsubsection",ExpressionUUID->"9fe7b7d1-0619-4428-98d2-0524b3205998"],
Cell[CellGroupData[{
Cell[505101, 9723, 624, 13, 30, "Input",ExpressionUUID->"e2f2cd87-67b9-435b-bf3d-ccecb2b23d5f"],
Cell[505728, 9738, 132290, 2362, 1260, 23700, 583, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"95927349-b5d2-4874-a3fe-1bbc36a2eba6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[638067, 12106, 161, 3, 45, "Subsubsection",ExpressionUUID->"44e1ce3d-048e-421a-aeb2-16dd40d5a778"],
Cell[638231, 12111, 707, 16, 46, "Input",ExpressionUUID->"123b7703-e6e5-4d5b-9fe3-082e4d9f293f",
 InitializationCell->True],
Cell[638941, 12129, 619, 16, 30, "Input",ExpressionUUID->"eccd3def-b701-41fc-b30b-7a36b36b92ed"],
Cell[CellGroupData[{
Cell[639585, 12149, 771, 14, 30, "Input",ExpressionUUID->"b14f493e-7579-424b-860b-a0e5b0a9992f"],
Cell[640359, 12165, 20744, 461, 495, "Output",ExpressionUUID->"1495d270-b079-4156-b6e5-a2a7d26140db"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[661152, 12632, 156, 3, 45, "Subsubsection",ExpressionUUID->"0a7d2539-62f9-4143-ad98-c1bac9483d90"],
Cell[661311, 12637, 1427, 36, 131, "Input",ExpressionUUID->"2a04f885-7d90-4845-8ea8-e33e60ce9835",
 InitializationCell->True],
Cell[662741, 12675, 310, 7, 46, "Input",ExpressionUUID->"be163b4f-9d58-4243-8a2f-16c2c1fea5c7",
 InitializationCell->True],
Cell[663054, 12684, 1836, 46, 173, "Input",ExpressionUUID->"a39e7e5a-8fe0-4bf8-9c9a-a84f3bf83e97",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[664915, 12734, 1523, 28, 73, "Input",ExpressionUUID->"f233b003-34a1-414e-9f95-055e3ccc63f6"],
Cell[666441, 12764, 16727, 398, 524, "Output",ExpressionUUID->"9cc08048-1ee1-4408-adea-b63f4bb022ca"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[683217, 13168, 162, 3, 45, "Subsubsection",ExpressionUUID->"7c86e557-e65e-45a1-97cd-572f89ec3e6c"],
Cell[CellGroupData[{
Cell[683404, 13175, 1001, 20, 73, "Input",ExpressionUUID->"957f24a2-1b1a-4956-bb16-d9ae6aca1e50"],
Cell[684408, 13197, 19156, 445, 282, "Output",ExpressionUUID->"df80668a-1362-4840-a3b7-32686767167c"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[703625, 13649, 158, 3, 67, "Section",ExpressionUUID->"5b3affad-62ca-4cdd-a53b-ef51466f9e53"],
Cell[CellGroupData[{
Cell[703808, 13656, 1632, 36, 73, "Input",ExpressionUUID->"29257117-ac29-434b-8e5c-74f14add25b2"],
Cell[705443, 13694, 854, 15, 98, "Output",ExpressionUUID->"72f3f20d-cf0d-41bb-9950-f3220978d338"]
}, Open  ]],
Cell[706312, 13712, 156, 3, 30, "Input",ExpressionUUID->"d2a78037-f9a5-47ce-aeb9-518b1fdf3a6c"]
}, Closed]],
Cell[CellGroupData[{
Cell[706505, 13720, 197, 4, 53, "Section",ExpressionUUID->"a627ebd1-b426-49cd-8d4d-999bb87c01cb"],
Cell[706705, 13726, 11824, 232, 656, "Input",ExpressionUUID->"65b5ebf0-3706-4d44-aad3-ab3c3fdb8a95",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[718554, 13962, 972, 22, 52, "Input",ExpressionUUID->"2c2d1dc9-e5de-4b99-b0b1-3b3373bbd57d"],
Cell[719529, 13986, 548, 12, 37, "Output",ExpressionUUID->"c46b4b3c-8783-4265-8296-ead5e63e8737"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[720126, 14004, 154, 3, 53, "Section",ExpressionUUID->"308d9db9-2ce9-4fe7-b7d4-9ba5860fdb02"],
Cell[CellGroupData[{
Cell[720305, 14011, 410, 9, 30, "Input",ExpressionUUID->"3aaf8175-e8f0-4f97-8733-b9ba6d6669df"],
Cell[720718, 14022, 180958, 3302, 1124, 51312, 1175, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"c2c85ef0-94ba-49ea-ae24-cbef920b4238"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

